(()=>{
   !function() {
       var e, c, a, s, r, n, t, o, f, i, u, l;
       let h = (...e)=>new Uint8Array(...e)
         , w = (...e)=>new Uint16Array(...e);
       function b() {
           return this
       }
       function k(e) {
           let c = "";
           for (let a = 0; a < e.length; a += 3) {
               let s = parseInt(e.substr(a, 3), 10);
               c += String.fromCharCode(s)
           }
           return c
       }
       function d() {
           return b()[k(arguments[0])]
       }
       function v() {
           this.t = w(16),
           this.o = w(288)
       }
       function A(e, c) {
           this.i = e,
           this.u = 0,
           this.l = 0,
           this.h = 0,
           this.k = c,
           this.v = 0,
           this.A = new v,
           this.g = new v
       }
       function y(e, c, a, s) {
           var r, n;
           for (r = 0; a > r; ++r)
               e[r] = 0;
           for (r = 0; 30 - a > r; ++r)
               e[r + a] = r / a | 0;
           for (n = s,
           r = 0; 30 > r; ++r)
               c[r] = n,
               n += 1 << e[r]
       }
       function g(e, c, a, s) {
           var r, n;
           for (r = 0; 16 > r; ++r)
               e.t[r] = 0;
           for (r = 0; s > r; ++r)
               e.t[c[a + r]]++;
           for (e.t[0] = 0,
           n = 0,
           r = 0; 16 > r; ++r)
               l[r] = n,
               n += e.t[r];
           for (r = 0; s > r; ++r)
               c[a + r] && (e.o[l[c[a + r]]++] = r)
       }
       function T(e) {
           e.h-- || (e.l = e.i[e.u++],
           e.h = 7);
           var c = 1 & e.l;
           return e.l >>>= 1,
           c
       }
       function p(e, c, a) {
           if (!c)
               return a;
           for (; 24 > e.h; )
               e.l |= e.i[e.u++] << e.h,
               e.h += 8;
           var s = e.l & 65535 >>> 16 - c;
           return e.l >>>= c,
           e.h -= c,
           s + a
       }
       function G(e, c) {
           for (var a, s, r, n; 24 > e.h; )
               e.l |= e.i[e.u++] << e.h,
               e.h += 8;
           a = 0,
           s = 0,
           r = 0,
           n = e.l;
           do {
               s = 2 * s + (1 & n),
               n >>>= 1,
               ++r,
               a += c.t[r],
               s -= c.t[r]
           } while (s >= 0);
           return e.l = n,
           e.h -= r,
           c.o[a + s]
       }
       function Z(e, c, a) {
           var s, r, n, t, o, l, h = p(e, 5, 257), w = p(e, 5, 1), b = p(e, 4, 4);
           for (s = 0; 19 > s; ++s)
               u[s] = 0;
           for (s = 0; b > s; ++s)
               t = p(e, 3, 0),
               u[f[s]] = t;
           for (g(i, u, 0, 19),
           r = 0; h + w > r; )
               switch (o = G(e, i)) {
               case 16:
                   for (l = u[r - 1],
                   n = p(e, 2, 3); n; --n)
                       u[r++] = l;
                   break;
               case 17:
                   for (n = p(e, 3, 3); n; --n)
                       u[r++] = 0;
                   break;
               case 18:
                   for (n = p(e, 7, 11); n; --n)
                       u[r++] = 0;
                   break;
               default:
                   u[r++] = o
               }
           g(c, u, 0, h),
           g(a, u, h, w)
       }
       function D(c, a, s) {
           for (var f, i, u, l, h; ; ) {
               if (256 === (f = G(c, a)))
                   return e;
               if (256 > f)
                   c.k[c.v++] = f;
               else
                   for (i = p(c, r[f -= 257], n[f]),
                   u = G(c, s),
                   h = l = c.v - p(c, t[u], o[u]); l + i > h; ++h)
                       c.k[c.v++] = c.k[h]
           }
       }
       function U(a) {
           for (var s, r; a.h > 8; )
               a.u--,
               a.h -= 8;
           if ((s = 256 * (s = a.i[a.u + 1]) + a.i[a.u]) !== (65535 & ~(256 * a.i[a.u + 3] + a.i[a.u + 2])))
               return c;
           for (a.u += 4,
           r = s; r; --r)
               a.k[a.v++] = a.i[a.u++];
           return a.h = 0,
           e
       }
       function Y(r, n) {
           var t, o, f = new A(r,n);
           do {
               switch (t = T(f),
               p(f, 2, 0)) {
               case 0:
                   o = U(f);
                   break;
               case 1:
                   o = D(f, a, s);
                   break;
               case 2:
                   Z(f, f.A, f.g),
                   o = D(f, f.A, f.g);
                   break;
               default:
                   o = c
               }
               if (o !== e)
                   throw Error("Data error")
           } while (!t);
           return f.v < f.k.length ? "function" == typeof f.k.slice ? f.k.slice(0, f.v) : f.k.subarray(0, f.v) : f.k
       }
       function B(e, c=0) {
           var a, s, r, n, t, o, f = e.replace(/[^A-Za-z0-9+/]/g, ""), i = f.length, u = c ? Math.ceil((3 * i + 1 >> 2) / c) * c : 3 * i + 1 >> 2, l = h(u);
           for (r = 0,
           n = 0,
           t = 0; i > t; t++)
               if (s = 3 & t,
               r |= ((o = f.charCodeAt(t)) > 64 && 91 > o ? o - 65 : o > 96 && 123 > o ? o - 71 : o > 47 && 58 > o ? o + 4 : 43 === o ? 62 : 47 === o ? 63 : 0) << 6 * (3 - s),
               3 === s || i - t == 1) {
                   for (a = 0; 3 > a && u > n; a++,
                   n++)
                       l[n] = r >>> (16 >>> a & 24) & 255;
                   r = 0
               }
           return l
       }
       e = 0,
       c = -3,
       a = new v,
       s = new v,
       r = h(30),
       n = w(30),
       t = h(30),
       o = w(30),
       f = h([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]),
       i = new v,
       u = h(320),
       l = w(16),
       ((e,c)=>{
           var a;
           for (a = 0; 7 > a; ++a)
               e.t[a] = 0;
           for (e.t[7] = 24,
           e.t[8] = 152,
           e.t[9] = 112,
           a = 0; 24 > a; ++a)
               e.o[a] = 256 + a;
           for (a = 0; 144 > a; ++a)
               e.o[24 + a] = a;
           for (a = 0; 8 > a; ++a)
               e.o[168 + a] = 280 + a;
           for (a = 0; 112 > a; ++a)
               e.o[176 + a] = 144 + a;
           for (a = 0; 5 > a; ++a)
               c.t[a] = 0;
           for (c.t[5] = 32,
           a = 0; 32 > a; ++a)
               c.o[a] = a
       }
       )(a, s),
       y(r, n, 4, 3),
       y(t, o, 2, 1),
       r[28] = 0,
       n[28] = 258,
       function(e, c={}) {
           let a = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : c;
           let s = "undefined" != typeof require ? require : null
             , r = B("ATUAAAAL4yotTlUoLinKTC5xZWDgZWTQYGTwYGBgdGNkYNBg4hJlZGQKZDRhYGDgBAow8EsCiWAA")
             , n = !!r[0]
             , t = n ? r[1] | r[2] << 8 | r[3] << 16 | r[4] << 24 : r.length
             , o = n ? h(t) : h(r.buffer, 5, r.length - 5);
           n && Y(h(r.buffer, 5, r.length - 5), o);
           let f = 0
             , i = {}
             , u = [];
           let l = []
             , w = [];
           let b = 0
             , v = null
             , A = null
             , y = []
             , g = null;
           c._$EXPORTS = {},
           s && (c.require = s);
           let T = new Float64Array(1);
           function p() {
               let e = 0
                 , c = 0
                 , a = 0;
               for (; a = o[f++],
               e |= (127 & a) << c,
               0 != (128 & a); )
                   c += 7;
               return e
           }
           function G() {
               return o[f++] | o[f++] << 8 | o[f++] << 16 | o[f++] << 24
           }
           function Z() {
               let e = p();
               let c = "";
               for (let a = 0; e > a; a++)
                   c += d("083116114105110103")[k("102114111109067104097114067111100101")](p());
               return c
           }
           function D() {
               for (; ; ) {
                   let e = o[f++];
                   switch (e) {
                   case 40:
                       u[o[f++]] = p();
                       break;
                   case 9:
                       u[o[f++]] = o[f++] ? ++i[p()][p()] : i[p()][p()]++;
                       break;
                   case 13:
                       u[o[f++]] = l[p()];
                       break;
                   case 21:
                       u[o[f++]] = u[o[f++]] < u[o[f++]];
                       break;
                   case 70:
                       u[o[f++]] = i[p()][p()];
                       break;
                   case 72:
                       i[p()][p()] = u[o[f++]];
                       break;
                   case 81:
                       {
                           let e = o[f++]
                             , c = G();
                           u[e] || (f = c);
                           break
                       }
                   case 15:
                       {
                           let e = G();
                           f = e;
                           break
                       }
                   case 83:
                       return u[0];
                   default:
                       throw "u" + e
                   }
               }
           }
           h(T.buffer),
           (()=>{
               for (f = 0; ; ) {
                   let e = o[f++];
                   if (86 === e)
                       l.push(Z());
                   else {
                       if (69 !== e)
                           return void f--;
                       {
                           let e = p()
                             , c = p()
                             , a = [];
                           for (let e = 0; c > e; e++)
                               a.push(p());
                           w[e] = a
                       }
                   }
               }
           }
           )(),
           function(e, c) {
               let s = i;
               return function e() {
                   let r = b
                     , n = {};
                   b = 0;
                   let t = i;
                   i = n,
                   i[0] = {};
                   let o = w[0]
                     , l = o.length;
                   for (let e = 0; l > e; e++) {
                       let c = o[e];
                       let a = s[c];
                       n[c] = a
                   }
                   let h = u
                     , k = f
                     , d = v
                     , T = A
                     , p = a
                     , G = y;
                   let Z = null
                     , U = null;
                   u = [],
                   y = [],
                   f = c,
                   v = e,
                   A = arguments,
                   a = this;
                   try {
                       Z = D()
                   } catch (e) {
                       if (y.length) {
                           let c = y.pop();
                           f = c,
                           g = e,
                           Z = D()
                       } else
                           U = e
                   }
                   if (y = G,
                   f = k,
                   u = h,
                   v = d,
                   i = t,
                   b = r,
                   A = T,
                   a = p,
                   U)
                       throw U;
                   return Z
               }
           }(0, f).call(this)
       }(0, {})
   }();
   !function() {
       var e, c, a, s, r, n, t, o, f, i, u, l;
       let h = (...e)=>new Uint8Array(...e)
         , w = (...e)=>new Uint16Array(...e);
       function b() {
           return this
       }
       function k(e) {
           let c = "";
           for (let a = 0; a < e.length; a += 3) {
               let s = parseInt(e.substr(a, 3), 10);
               c += String.fromCharCode(s)
           }
           return c
       }
       function d() {
           return b()[k(arguments[0])]
       }
       function v() {
           this.t = w(16),
           this.o = w(288)
       }
       function A(e, c) {
           this.i = e,
           this.u = 0,
           this.l = 0,
           this.h = 0,
           this.k = c,
           this.v = 0,
           this.A = new v,
           this.Y = new v
       }
       function y(e, c, a, s) {
           var r, n;
           for (r = 0; a > r; ++r)
               e[r] = 0;
           for (r = 0; 30 - a > r; ++r)
               e[r + a] = r / a | 0;
           for (n = s,
           r = 0; 30 > r; ++r)
               c[r] = n,
               n += 1 << e[r]
       }
       function Y(e, c, a, s) {
           var r, n;
           for (r = 0; 16 > r; ++r)
               e.t[r] = 0;
           for (r = 0; s > r; ++r)
               e.t[c[a + r]]++;
           for (e.t[0] = 0,
           n = 0,
           r = 0; 16 > r; ++r)
               l[r] = n,
               n += e.t[r];
           for (r = 0; s > r; ++r)
               c[a + r] && (e.o[l[c[a + r]]++] = r)
       }
       function g(e) {
           e.h-- || (e.l = e.i[e.u++],
           e.h = 7);
           var c = 1 & e.l;
           return e.l >>>= 1,
           c
       }
       function p(e, c, a) {
           if (!c)
               return a;
           for (; 24 > e.h; )
               e.l |= e.i[e.u++] << e.h,
               e.h += 8;
           var s = e.l & 65535 >>> 16 - c;
           return e.l >>>= c,
           e.h -= c,
           s + a
       }
       function Q(e, c) {
           for (var a, s, r, n; 24 > e.h; )
               e.l |= e.i[e.u++] << e.h,
               e.h += 8;
           a = 0,
           s = 0,
           r = 0,
           n = e.l;
           do {
               s = 2 * s + (1 & n),
               n >>>= 1,
               ++r,
               a += c.t[r],
               s -= c.t[r]
           } while (s >= 0);
           return e.l = n,
           e.h -= r,
           c.o[a + s]
       }
       function T(e, c, a) {
           var s, r, n, t, o, l, h = p(e, 5, 257), w = p(e, 5, 1), b = p(e, 4, 4);
           for (s = 0; 19 > s; ++s)
               u[s] = 0;
           for (s = 0; b > s; ++s)
               t = p(e, 3, 0),
               u[f[s]] = t;
           for (Y(i, u, 0, 19),
           r = 0; h + w > r; )
               switch (o = Q(e, i)) {
               case 16:
                   for (l = u[r - 1],
                   n = p(e, 2, 3); n; --n)
                       u[r++] = l;
                   break;
               case 17:
                   for (n = p(e, 3, 3); n; --n)
                       u[r++] = 0;
                   break;
               case 18:
                   for (n = p(e, 7, 11); n; --n)
                       u[r++] = 0;
                   break;
               default:
                   u[r++] = o
               }
           Y(c, u, 0, h),
           Y(a, u, h, w)
       }
       function U(c, a, s) {
           for (var f, i, u, l, h; ; ) {
               if (256 === (f = Q(c, a)))
                   return e;
               if (256 > f)
                   c.k[c.v++] = f;
               else
                   for (i = p(c, r[f -= 257], n[f]),
                   u = Q(c, s),
                   h = l = c.v - p(c, t[u], o[u]); l + i > h; ++h)
                       c.k[c.v++] = c.k[h]
           }
       }
       function C(a) {
           for (var s, r; a.h > 8; )
               a.u--,
               a.h -= 8;
           if ((s = 256 * (s = a.i[a.u + 1]) + a.i[a.u]) !== (65535 & ~(256 * a.i[a.u + 3] + a.i[a.u + 2])))
               return c;
           for (a.u += 4,
           r = s; r; --r)
               a.k[a.v++] = a.i[a.u++];
           return a.h = 0,
           e
       }
       function G(r, n) {
           var t, o, f = new A(r,n);
           do {
               switch (t = g(f),
               p(f, 2, 0)) {
               case 0:
                   o = C(f);
                   break;
               case 1:
                   o = U(f, a, s);
                   break;
               case 2:
                   T(f, f.A, f.Y),
                   o = U(f, f.A, f.Y);
                   break;
               default:
                   o = c
               }
               if (o !== e)
                   throw Error("Data error")
           } while (!t);
           return f.v < f.k.length ? "function" == typeof f.k.slice ? f.k.slice(0, f.v) : f.k.subarray(0, f.v) : f.k
       }
       function Z(e, c=0) {
           var a, s, r, n, t, o, f = e.replace(/[^A-Za-z0-9+/]/g, ""), i = f.length, u = c ? Math.ceil((3 * i + 1 >> 2) / c) * c : 3 * i + 1 >> 2, l = h(u);
           for (r = 0,
           n = 0,
           t = 0; i > t; t++)
               if (s = 3 & t,
               r |= ((o = f.charCodeAt(t)) > 64 && 91 > o ? o - 65 : o > 96 && 123 > o ? o - 71 : o > 47 && 58 > o ? o + 4 : 43 === o ? 62 : 47 === o ? 63 : 0) << 6 * (3 - s),
               3 === s || i - t == 1) {
                   for (a = 0; 3 > a && u > n; a++,
                   n++)
                       l[n] = r >>> (16 >>> a & 24) & 255;
                   r = 0
               }
           return l
       }
       e = 0,
       c = -3,
       a = new v,
       s = new v,
       r = h(30),
       n = w(30),
       t = h(30),
       o = w(30),
       f = h([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]),
       i = new v,
       u = h(320),
       l = w(16),
       ((e,c)=>{
           var a;
           for (a = 0; 7 > a; ++a)
               e.t[a] = 0;
           for (e.t[7] = 24,
           e.t[8] = 152,
           e.t[9] = 112,
           a = 0; 24 > a; ++a)
               e.o[a] = 256 + a;
           for (a = 0; 144 > a; ++a)
               e.o[24 + a] = a;
           for (a = 0; 8 > a; ++a)
               e.o[168 + a] = 280 + a;
           for (a = 0; 112 > a; ++a)
               e.o[176 + a] = 144 + a;
           for (a = 0; 5 > a; ++a)
               c.t[a] = 0;
           for (c.t[5] = 32,
           a = 0; 32 > a; ++a)
               c.o[a] = a
       }
       )(a, s),
       y(r, n, 4, 3),
       y(t, o, 2, 1),
       r[28] = 0,
       n[28] = 258,
       function(e, c={}) {
           let a = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : c;
           let s = "undefined" != typeof require ? require : null
             , r = Z("ATUAAACz4SotTlUoLinKTC5xZGDQY2QIYWRQYmBgVGZkYAhh4jJiZGQSYDRhYGAwBwow2EkCCQUA")
             , n = !!r[0]
             , t = n ? r[1] | r[2] << 8 | r[3] << 16 | r[4] << 24 : r.length
             , o = n ? h(t) : h(r.buffer, 5, r.length - 5);
           n && G(h(r.buffer, 5, r.length - 5), o);
           let f = 0
             , i = {}
             , u = [];
           let l = []
             , w = [];
           let b = 0
             , v = null
             , A = null
             , y = []
             , Y = null;
           c._$EXPORTS = {},
           s && (c.require = s);
           let g = new Float64Array(1);
           function p() {
               let e = 0
                 , c = 0
                 , a = 0;
               for (; a = o[f++],
               e |= (127 & a) << c,
               0 != (128 & a); )
                   c += 7;
               return e
           }
           function Q() {
               return o[f++] | o[f++] << 8 | o[f++] << 16 | o[f++] << 24
           }
           function T() {
               let e = p();
               let c = "";
               for (let a = 0; e > a; a++)
                   c += d("083116114105110103")[k("102114111109067104097114067111100101")](p());
               return c
           }
           function U() {
               for (; ; ) {
                   let e = o[f++];
                   switch (e) {
                   case 84:
                       u[o[f++]] = p();
                       break;
                   case 55:
                       u[o[f++]] = o[f++] ? ++i[p()][p()] : i[p()][p()]++;
                       break;
                   case 46:
                       u[o[f++]] = l[p()];
                       break;
                   case 50:
                       u[o[f++]] = u[o[f++]] < u[o[f++]];
                       break;
                   case 35:
                       u[o[f++]] = i[p()][p()];
                       break;
                   case 34:
                       i[p()][p()] = u[o[f++]];
                       break;
                   case 16:
                       {
                           let e = o[f++]
                             , c = Q();
                           u[e] || (f = c);
                           break
                       }
                   case 62:
                       {
                           let e = Q();
                           f = e;
                           break
                       }
                   case 32:
                       return u[0];
                   default:
                       throw "u" + e
                   }
               }
           }
           h(g.buffer),
           (()=>{
               for (f = 0; ; ) {
                   let e = o[f++];
                   if (60 === e)
                       l.push(T());
                   else {
                       if (65 !== e)
                           return void f--;
                       {
                           let e = p()
                             , c = p()
                             , a = [];
                           for (let e = 0; c > e; e++)
                               a.push(p());
                           w[e] = a
                       }
                   }
               }
           }
           )(),
           function(e, c) {
               let s = i;
               return function e() {
                   let r = b
                     , n = {};
                   b = 0;
                   let t = i;
                   i = n,
                   i[0] = {};
                   let o = w[0]
                     , l = o.length;
                   for (let e = 0; l > e; e++) {
                       let c = o[e];
                       let a = s[c];
                       n[c] = a
                   }
                   let h = u
                     , k = f
                     , d = v
                     , g = A
                     , p = a
                     , Q = y;
                   let T = null
                     , C = null;
                   u = [],
                   y = [],
                   f = c,
                   v = e,
                   A = arguments,
                   a = this;
                   try {
                       T = U()
                   } catch (e) {
                       if (y.length) {
                           let c = y.pop();
                           f = c,
                           Y = e,
                           T = U()
                       } else
                           C = e
                   }
                   if (y = Q,
                   f = k,
                   u = h,
                   v = d,
                   i = t,
                   b = r,
                   A = g,
                   a = p,
                   C)
                       throw C;
                   return T
               }
           }(0, f).call(this)
       }(0, {})
   }();
   !function() {
       var e, c, a, s, r, n, t, o, f, i, u, l;
       let h = (...e)=>new Uint8Array(...e)
         , w = (...e)=>new Uint16Array(...e);
       function b() {
           return this
       }
       function k(e) {
           let c = "";
           for (let a = 0; a < e.length; a += 3) {
               let s = parseInt(e.substr(a, 3), 10);
               c += String.fromCharCode(s)
           }
           return c
       }
       function d() {
           return b()[k(arguments[0])]
       }
       function v() {
           this.t = w(16),
           this.o = w(288)
       }
       function A(e, c) {
           this.i = e,
           this.u = 0,
           this.l = 0,
           this.h = 0,
           this.k = c,
           this.v = 0,
           this.A = new v,
           this.g = new v
       }
       function y(e, c, a, s) {
           var r, n;
           for (r = 0; a > r; ++r)
               e[r] = 0;
           for (r = 0; 30 - a > r; ++r)
               e[r + a] = r / a | 0;
           for (n = s,
           r = 0; 30 > r; ++r)
               c[r] = n,
               n += 1 << e[r]
       }
       function g(e, c, a, s) {
           var r, n;
           for (r = 0; 16 > r; ++r)
               e.t[r] = 0;
           for (r = 0; s > r; ++r)
               e.t[c[a + r]]++;
           for (e.t[0] = 0,
           n = 0,
           r = 0; 16 > r; ++r)
               l[r] = n,
               n += e.t[r];
           for (r = 0; s > r; ++r)
               c[a + r] && (e.o[l[c[a + r]]++] = r)
       }
       function T(e) {
           e.h-- || (e.l = e.i[e.u++],
           e.h = 7);
           var c = 1 & e.l;
           return e.l >>>= 1,
           c
       }
       function p(e, c, a) {
           if (!c)
               return a;
           for (; 24 > e.h; )
               e.l |= e.i[e.u++] << e.h,
               e.h += 8;
           var s = e.l & 65535 >>> 16 - c;
           return e.l >>>= c,
           e.h -= c,
           s + a
       }
       function G(e, c) {
           for (var a, s, r, n; 24 > e.h; )
               e.l |= e.i[e.u++] << e.h,
               e.h += 8;
           a = 0,
           s = 0,
           r = 0,
           n = e.l;
           do {
               s = 2 * s + (1 & n),
               n >>>= 1,
               ++r,
               a += c.t[r],
               s -= c.t[r]
           } while (s >= 0);
           return e.l = n,
           e.h -= r,
           c.o[a + s]
       }
       function Y(e, c, a) {
           var s, r, n, t, o, l, h = p(e, 5, 257), w = p(e, 5, 1), b = p(e, 4, 4);
           for (s = 0; 19 > s; ++s)
               u[s] = 0;
           for (s = 0; b > s; ++s)
               t = p(e, 3, 0),
               u[f[s]] = t;
           for (g(i, u, 0, 19),
           r = 0; h + w > r; )
               switch (o = G(e, i)) {
               case 16:
                   for (l = u[r - 1],
                   n = p(e, 2, 3); n; --n)
                       u[r++] = l;
                   break;
               case 17:
                   for (n = p(e, 3, 3); n; --n)
                       u[r++] = 0;
                   break;
               case 18:
                   for (n = p(e, 7, 11); n; --n)
                       u[r++] = 0;
                   break;
               default:
                   u[r++] = o
               }
           g(c, u, 0, h),
           g(a, u, h, w)
       }
       function Q(c, a, s) {
           for (var f, i, u, l, h; ; ) {
               if (256 === (f = G(c, a)))
                   return e;
               if (256 > f)
                   c.k[c.v++] = f;
               else
                   for (i = p(c, r[f -= 257], n[f]),
                   u = G(c, s),
                   h = l = c.v - p(c, t[u], o[u]); l + i > h; ++h)
                       c.k[c.v++] = c.k[h]
           }
       }
       function R(a) {
           for (var s, r; a.h > 8; )
               a.u--,
               a.h -= 8;
           if ((s = 256 * (s = a.i[a.u + 1]) + a.i[a.u]) !== (65535 & ~(256 * a.i[a.u + 3] + a.i[a.u + 2])))
               return c;
           for (a.u += 4,
           r = s; r; --r)
               a.k[a.v++] = a.i[a.u++];
           return a.h = 0,
           e
       }
       function U(r, n) {
           var t, o, f = new A(r,n);
           do {
               switch (t = T(f),
               p(f, 2, 0)) {
               case 0:
                   o = R(f);
                   break;
               case 1:
                   o = Q(f, a, s);
                   break;
               case 2:
                   Y(f, f.A, f.g),
                   o = Q(f, f.A, f.g);
                   break;
               default:
                   o = c
               }
               if (o !== e)
                   throw Error("Data error")
           } while (!t);
           return f.v < f.k.length ? "function" == typeof f.k.slice ? f.k.slice(0, f.v) : f.k.subarray(0, f.v) : f.k
       }
       function Z(e, c=0) {
           var a, s, r, n, t, o, f = e.replace(/[^A-Za-z0-9+/]/g, ""), i = f.length, u = c ? Math.ceil((3 * i + 1 >> 2) / c) * c : 3 * i + 1 >> 2, l = h(u);
           for (r = 0,
           n = 0,
           t = 0; i > t; t++)
               if (s = 3 & t,
               r |= ((o = f.charCodeAt(t)) > 64 && 91 > o ? o - 65 : o > 96 && 123 > o ? o - 71 : o > 47 && 58 > o ? o + 4 : 43 === o ? 62 : 47 === o ? 63 : 0) << 6 * (3 - s),
               3 === s || i - t == 1) {
                   for (a = 0; 3 > a && u > n; a++,
                   n++)
                       l[n] = r >>> (16 >>> a & 24) & 255;
                   r = 0
               }
           return l
       }
       e = 0,
       c = -3,
       a = new v,
       s = new v,
       r = h(30),
       n = w(30),
       t = h(30),
       o = w(30),
       f = h([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]),
       i = new v,
       u = h(320),
       l = w(16),
       ((e,c)=>{
           var a;
           for (a = 0; 7 > a; ++a)
               e.t[a] = 0;
           for (e.t[7] = 24,
           e.t[8] = 152,
           e.t[9] = 112,
           a = 0; 24 > a; ++a)
               e.o[a] = 256 + a;
           for (a = 0; 144 > a; ++a)
               e.o[24 + a] = a;
           for (a = 0; 8 > a; ++a)
               e.o[168 + a] = 280 + a;
           for (a = 0; 112 > a; ++a)
               e.o[176 + a] = 144 + a;
           for (a = 0; 5 > a; ++a)
               c.t[a] = 0;
           for (c.t[5] = 32,
           a = 0; 32 > a; ++a)
               c.o[a] = a
       }
       )(a, s),
       y(r, n, 4, 3),
       y(t, o, 2, 1),
       r[28] = 0,
       n[28] = 258,
       function(e, c={}) {
           let a = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : c;
           let s = "undefined" != typeof require ? require : null
             , r = Z("ATUAAABT4yotTlUoLinKTC4RYmAQYGQIZGRwZmBglGVkYAhk4lJnZGRyYDRhYGDQBgowsEgCCQ0A")
             , n = !!r[0]
             , t = n ? r[1] | r[2] << 8 | r[3] << 16 | r[4] << 24 : r.length
             , o = n ? h(t) : h(r.buffer, 5, r.length - 5);
           n && U(h(r.buffer, 5, r.length - 5), o);
           let f = 0
             , i = {}
             , u = [];
           let l = []
             , w = [];
           let b = 0
             , v = null
             , A = null
             , y = []
             , g = null;
           c._$EXPORTS = {},
           s && (c.require = s);
           let T = new Float64Array(1);
           function p() {
               let e = 0
                 , c = 0
                 , a = 0;
               for (; a = o[f++],
               e |= (127 & a) << c,
               0 != (128 & a); )
                   c += 7;
               return e
           }
           function G() {
               return o[f++] | o[f++] << 8 | o[f++] << 16 | o[f++] << 24
           }
           function Y() {
               let e = p();
               let c = "";
               for (let a = 0; e > a; a++)
                   c += d("083116114105110103")[k("102114111109067104097114067111100101")](p());
               return c
           }
           function Q() {
               for (; ; ) {
                   let e = o[f++];
                   switch (e) {
                   case 81:
                       u[o[f++]] = p();
                       break;
                   case 43:
                       u[o[f++]] = o[f++] ? ++i[p()][p()] : i[p()][p()]++;
                       break;
                   case 16:
                       u[o[f++]] = l[p()];
                       break;
                   case 39:
                       u[o[f++]] = u[o[f++]] < u[o[f++]];
                       break;
                   case 29:
                       u[o[f++]] = i[p()][p()];
                       break;
                   case 67:
                       i[p()][p()] = u[o[f++]];
                       break;
                   case 64:
                       {
                           let e = o[f++]
                             , c = G();
                           u[e] || (f = c);
                           break
                       }
                   case 4:
                       {
                           let e = G();
                           f = e;
                           break
                       }
                   case 40:
                       return u[0];
                   default:
                       throw "u" + e
                   }
               }
           }
           h(T.buffer),
           (()=>{
               for (f = 0; ; ) {
                   let e = o[f++];
                   if (38 === e)
                       l.push(Y());
                   else {
                       if (18 !== e)
                           return void f--;
                       {
                           let e = p()
                             , c = p()
                             , a = [];
                           for (let e = 0; c > e; e++)
                               a.push(p());
                           w[e] = a
                       }
                   }
               }
           }
           )(),
           function(e, c) {
               let s = i;
               return function e() {
                   let r = b
                     , n = {};
                   b = 0;
                   let t = i;
                   i = n,
                   i[0] = {};
                   let o = w[0]
                     , l = o.length;
                   for (let e = 0; l > e; e++) {
                       let c = o[e];
                       let a = s[c];
                       n[c] = a
                   }
                   let h = u
                     , k = f
                     , d = v
                     , T = A
                     , p = a
                     , G = y;
                   let Y = null
                     , R = null;
                   u = [],
                   y = [],
                   f = c,
                   v = e,
                   A = arguments,
                   a = this;
                   try {
                       Y = Q()
                   } catch (e) {
                       if (y.length) {
                           let c = y.pop();
                           f = c,
                           g = e,
                           Y = Q()
                       } else
                           R = e
                   }
                   if (y = G,
                   f = k,
                   u = h,
                   v = d,
                   i = t,
                   b = r,
                   A = T,
                   a = p,
                   R)
                       throw R;
                   return Y
               }
           }(0, f).call(this)
       }(0, {})
   }();
   !function() {
       var e, i, t, r, n, o, a, s, T, I, E, _;
       let u = (...e)=>new Uint8Array(...e)
         , h = (...e)=>new Uint16Array(...e);
       function R(e) {
           let i = "";
           for (let t = 0; t < e.length; t += 3) {
               let r = parseInt(e.substr(t, 3), 10);
               i += String.fromCharCode(r)
           }
           return i
       }
       function A() {
           return function() {
               return this
           }()[R(arguments[0])]
       }
       function d() {
           this.t = h(16),
           this.o = h(288)
       }
       function S(e, i) {
           this.k = e,
           this.l = 0,
           this.p = 0,
           this.i = 0,
           this.m = i,
           this.u = 0,
           this.W = new d,
           this.I = new d
       }
       function l(e, i, t, r) {
           var n, o;
           for (n = 0; t > n; ++n)
               e[n] = 0;
           for (n = 0; 30 - t > n; ++n)
               e[n + t] = n / t | 0;
           for (o = r,
           n = 0; 30 > n; ++n)
               i[n] = o,
               o += 1 << e[n]
       }
       function N(e, i, t, r) {
           var n, o;
           for (n = 0; 16 > n; ++n)
               e.t[n] = 0;
           for (n = 0; r > n; ++n)
               e.t[i[t + n]]++;
           for (e.t[0] = 0,
           o = 0,
           n = 0; 16 > n; ++n)
               _[n] = o,
               o += e.t[n];
           for (n = 0; r > n; ++n)
               i[t + n] && (e.o[_[i[t + n]]++] = n)
       }
       function C(e) {
           e.i-- || (e.p = e.k[e.l++],
           e.i = 7);
           var i = 1 & e.p;
           return e.p >>>= 1,
           i
       }
       function g(e, i, t) {
           if (!i)
               return t;
           for (; 24 > e.i; )
               e.p |= e.k[e.l++] << e.i,
               e.i += 8;
           var r = e.p & 65535 >>> 16 - i;
           return e.p >>>= i,
           e.i -= i,
           r + t
       }
       function b(e, i) {
           for (var t, r, n, o; 24 > e.i; )
               e.p |= e.k[e.l++] << e.i,
               e.i += 8;
           t = 0,
           r = 0,
           n = 0,
           o = e.p;
           do {
               r = 2 * r + (1 & o),
               o >>>= 1,
               ++n,
               t += i.t[n],
               r -= i.t[n]
           } while (r >= 0);
           return e.p = o,
           e.i -= n,
           i.o[t + r]
       }
       function O(e, i, t) {
           var r, n, o, a, s, _, u = g(e, 5, 257), h = g(e, 5, 1), R = g(e, 4, 4);
           for (r = 0; 19 > r; ++r)
               E[r] = 0;
           for (r = 0; R > r; ++r)
               a = g(e, 3, 0),
               E[T[r]] = a;
           for (N(I, E, 0, 19),
           n = 0; u + h > n; )
               switch (s = b(e, I)) {
               case 16:
                   for (_ = E[n - 1],
                   o = g(e, 2, 3); o; --o)
                       E[n++] = _;
                   break;
               case 17:
                   for (o = g(e, 3, 3); o; --o)
                       E[n++] = 0;
                   break;
               case 18:
                   for (o = g(e, 7, 11); o; --o)
                       E[n++] = 0;
                   break;
               default:
                   E[n++] = s
               }
           N(i, E, 0, u),
           N(t, E, u, h)
       }
       function p(i, t, r) {
           for (var T, I, E, _, u; ; ) {
               if (256 === (T = b(i, t)))
                   return e;
               if (256 > T)
                   i.m[i.u++] = T;
               else
                   for (I = g(i, n[T -= 257], o[T]),
                   E = b(i, r),
                   u = _ = i.u - g(i, a[E], s[E]); _ + I > u; ++u)
                       i.m[i.u++] = i.m[u]
           }
       }
       function c(t) {
           for (var r, n; t.i > 8; )
               t.l--,
               t.i -= 8;
           if ((r = 256 * (r = t.k[t.l + 1]) + t.k[t.l]) !== (65535 & ~(256 * t.k[t.l + 3] + t.k[t.l + 2])))
               return i;
           for (t.l += 4,
           n = r; n; --n)
               t.m[t.u++] = t.k[t.l++];
           return t.i = 0,
           e
       }
       function v(n, o) {
           var a, s, T = new S(n,o);
           do {
               switch (a = C(T),
               g(T, 2, 0)) {
               case 0:
                   s = c(T);
                   break;
               case 1:
                   s = p(T, t, r);
                   break;
               case 2:
                   O(T, T.W, T.I),
                   s = p(T, T.W, T.I);
                   break;
               default:
                   s = i
               }
               if (s !== e)
                   throw Error("Data error")
           } while (!a);
           return T.u < T.m.length ? "function" == typeof T.m.slice ? T.m.slice(0, T.u) : T.m.subarray(0, T.u) : T.m
       }
       e = 0,
       i = -3,
       t = new d,
       r = new d,
       n = u(30),
       o = h(30),
       a = u(30),
       s = h(30),
       T = u([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]),
       I = new d,
       E = u(320),
       _ = h(16),
       ((e,i)=>{
           var t;
           for (t = 0; 7 > t; ++t)
               e.t[t] = 0;
           for (e.t[7] = 24,
           e.t[8] = 152,
           e.t[9] = 112,
           t = 0; 24 > t; ++t)
               e.o[t] = 256 + t;
           for (t = 0; 144 > t; ++t)
               e.o[24 + t] = t;
           for (t = 0; 8 > t; ++t)
               e.o[168 + t] = 280 + t;
           for (t = 0; 112 > t; ++t)
               e.o[176 + t] = 144 + t;
           for (t = 0; 5 > t; ++t)
               i.t[t] = 0;
           for (i.t[5] = 32,
           t = 0; 32 > t; ++t)
               i.o[t] = t
       }
       )(t, r),
       l(n, o, 4, 3),
       l(a, s, 2, 1),
       n[28] = 0,
       o[28] = 258,
       function(e, i={}) {
           let t = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : i
             , r = t
             , n = "undefined" != typeof require ? require : null
             , o = function(e, i=0) {
               var t, r, n, o, a, s, T = e.replace(/[^A-Za-z0-9+/]/g, ""), I = T.length, E = i ? Math.ceil((3 * I + 1 >> 2) / i) * i : 3 * I + 1 >> 2, _ = u(E);
               for (n = 0,
               o = 0,
               a = 0; I > a; a++)
                   if (r = 3 & a,
                   n |= ((s = T.charCodeAt(a)) > 64 && 91 > s ? s - 65 : s > 96 && 123 > s ? s - 71 : s > 47 && 58 > s ? s + 4 : 43 === s ? 62 : 47 === s ? 63 : 0) << 6 * (3 - r),
                   3 === r || I - a == 1) {
                       for (t = 0; 3 > t && E > o; t++,
                       o++)
                           _[o] = n >>> (16 >>> t & 24) & 255;
                       n = 0
                   }
               return _
           }("")
             , a = !!o[0]
             , s = a ? o[1] | o[2] << 8 | o[3] << 16 | o[4] << 24 : o.length
             , T = a ? u(s) : u(o.buffer, 5, o.length - 5);
           a && v(u(o.buffer, 5, o.length - 5), T);
           let I = 0
             , E = {}
             , _ = []
             , h = []
             , d = []
             , S = []
             , l = 0
             , N = null
             , C = null
             , g = []
             , b = null;
           i._$EXPORTS = {},
           n && (i.require = n);
           let O = new Float64Array(1)
             , p = u(O.buffer);
           function c() {
               let e = 0
                 , i = 0
                 , t = 0;
               for (; t = T[I++],
               e |= (127 & t) << i,
               0 != (128 & t); )
                   i += 7;
               return e
           }
           function P() {
               return T[I++] | T[I++] << 8 | T[I++] << 16 | T[I++] << 24
           }
           function m() {
               let e = c()
                 , i = "";
               for (let t = 0; e > t; t++)
                   i += A("083116114105110103")[R("102114111109067104097114067111100101")](c());
               return i
           }
           function D(e, i) {
               let t = E;
               return function n() {
                   let o = l
                     , a = {};
                   l = e;
                   let s = E;
                   E = a,
                   E[e] = {};
                   let T = S[e]
                     , u = T.length;
                   for (let e = 0; u > e; e++) {
                       let i = T[e]
                         , r = t[i];
                       a[i] = r
                   }
                   let h = _
                     , R = I
                     , A = N
                     , d = C
                     , O = r
                     , p = g
                     , c = null
                     , v = null;
                   _ = [],
                   g = [],
                   I = i,
                   N = n,
                   C = arguments,
                   r = this;
                   try {
                       c = M()
                   } catch (e) {
                       if (g.length) {
                           let i = g.pop();
                           I = i,
                           b = e,
                           c = M()
                       } else
                           v = e
                   }
                   if (g = p,
                   I = R,
                   _ = h,
                   N = A,
                   E = s,
                   l = o,
                   C = d,
                   r = O,
                   v)
                       throw v;
                   return c
               }
           }
           function M() {
               for (; ; ) {
                   let e = T[I++];
                   switch (e) {
                   case 42:
                       {
                           let e = c()
                             , i = c();
                           Object.defineProperty(E[i], e, {
                               get: ()=>N,
                               set() {}
                           });
                           break
                       }
                   case 55:
                       E[l][c()] = C;
                       break;
                   case 28:
                       _[T[I++]] = _[T[I++]]instanceof _[T[I++]];
                       break;
                   case 47:
                       _[T[I++]] = _[T[I++]]in _[T[I++]];
                       break;
                   case 24:
                       _[T[I++]] = c();
                       break;
                   case 81:
                       _[T[I++]] = T[I++] ? ++E[c()][c()] : E[c()][c()]++;
                       break;
                   case 72:
                       _[T[I++]] = T[I++] ? --E[c()][c()] : E[c()][c()]--;
                       break;
                   case 1:
                       _[T[I++]] = (p[0] = T[I++],
                       p[1] = T[I++],
                       p[2] = T[I++],
                       p[3] = T[I++],
                       p[4] = T[I++],
                       p[5] = T[I++],
                       p[6] = T[I++],
                       p[7] = T[I++],
                       O[0]);
                       break;
                   case 13:
                       {
                           let e = c()
                             , i = c();
                           E[l][i] = C[e];
                           break
                       }
                   case 65:
                       _[T[I++]] = _[T[I++]];
                       break;
                   case 34:
                       _[T[I++]] = r;
                       break;
                   case 45:
                       _[T[I++]] = D(c(), P());
                       break;
                   case 49:
                       _[T[I++]] = h[c()];
                       break;
                   case 60:
                       _[T[I++]] = RegExp(h[c()], h[c()]);
                       break;
                   case 33:
                       _[T[I++]] = !_[T[I++]];
                       break;
                   case 53:
                       _[T[I++]] = +_[T[I++]];
                       break;
                   case 61:
                       _[T[I++]] = void _[T[I++]];
                       break;
                   case 21:
                       _[T[I++]] = ~_[T[I++]];
                       break;
                   case 7:
                       _[T[I++]] = -_[T[I++]];
                       break;
                   case 9:
                       _[T[I++]] = typeof _[T[I++]];
                       break;
                   case 70:
                       _[T[I++]] = delete _[T[I++]][_[T[I++]]];
                       break;
                   case 48:
                       _[T[I++]] = _[T[I++]] + _[T[I++]];
                       break;
                   case 79:
                       _[T[I++]] = _[T[I++]] / _[T[I++]];
                       break;
                   case 6:
                       _[T[I++]] = _[T[I++]] - _[T[I++]];
                       break;
                   case 20:
                       _[T[I++]] = _[T[I++]] ^ _[T[I++]];
                       break;
                   case 18:
                       _[T[I++]] = _[T[I++]] | _[T[I++]];
                       break;
                   case 88:
                       _[T[I++]] = _[T[I++]] >>> _[T[I++]];
                       break;
                   case 46:
                       _[T[I++]] = _[T[I++]] % _[T[I++]];
                       break;
                   case 3:
                   case 69:
                       _[T[I++]] = _[T[I++]] != _[T[I++]];
                       break;
                   case 63:
                   case 17:
                       _[T[I++]] = _[T[I++]] == _[T[I++]];
                       break;
                   case 75:
                       _[T[I++]] = _[T[I++]] & _[T[I++]];
                       break;
                   case 26:
                       _[T[I++]] = _[T[I++]] << _[T[I++]];
                       break;
                   case 78:
                       _[T[I++]] = _[T[I++]] >> _[T[I++]];
                       break;
                   case 40:
                       _[T[I++]] = _[T[I++]] * _[T[I++]];
                       break;
                   case 5:
                       _[T[I++]] = _[T[I++]] <= _[T[I++]];
                       break;
                   case 51:
                       _[T[I++]] = _[T[I++]] >= _[T[I++]];
                       break;
                   case 2:
                       _[T[I++]] = _[T[I++]] < _[T[I++]];
                       break;
                   case 31:
                       _[T[I++]] = _[T[I++]] > _[T[I++]];
                       break;
                   case 10:
                       d.push(_[T[I++]]);
                       break;
                   case 76:
                       {
                           let e = c()
                             , i = Array(e);
                           for (let t = 0; e > t; t++)
                               i[e - t - 1] = d.pop();
                           let r = T[I++]
                             , n = T[I++];
                           _[r] = _[n].apply(t, i);
                           break
                       }
                   case 54:
                       {
                           let e = c()
                             , i = Array(e);
                           for (let t = 0; e > t; t++)
                               i[e - t - 1] = d.pop();
                           let t = T[I++]
                             , r = T[I++];
                           _[r] = Reflect.construct(_[t], i);
                           break
                       }
                   case 43:
                       _[T[I++]] = _[T[I++]][_[T[I++]]] = _[T[I++]];
                       break;
                   case 59:
                       _[T[I++]] = _[T[I++]][_[T[I++]]] += _[T[I++]];
                       break;
                   case 19:
                       _[T[I++]] = _[T[I++]][_[T[I++]]] |= _[T[I++]];
                       break;
                   case 66:
                       _[T[I++]] = _[T[I++]][_[T[I++]]] ^= _[T[I++]];
                       break;
                   case 80:
                       _[T[I++]] = _[T[I++]][_[T[I++]]];
                       break;
                   case 15:
                       {
                           let e = c()
                             , i = Array(e);
                           for (let t = 0; e > t; t++)
                               i[e - t - 1] = d.pop();
                           let t = T[I++]
                             , r = T[I++]
                             , n = T[I++]
                             , o = _[r]
                             , a = _[n];
                           _[t] = o[a].apply(o, i);
                           break
                       }
                   case 0:
                       throw _[T[I++]];
                   case 57:
                       {
                           let e = T[I++]
                             , r = !!T[I++]
                             , n = c()
                             , o = h[n];
                           if (o in i) {
                               _[e] = i[o];
                               break
                           }
                           if (r && !(o in t))
                               throw new ReferenceError(o + " is not defined");
                           _[e] = t[o];
                           break
                       }
                   case 37:
                       {
                           let e = c()
                             , i = Array(e);
                           for (let t = 0; e > t; t++)
                               i[e - t - 1] = d.pop();
                           _[T[I++]] = i
                       }
                       break;
                   case 39:
                       {
                           let e = {}
                             , i = c()
                             , t = T[I++];
                           for (let t = 0; i > t; t++) {
                               let i = d.pop()
                                 , t = d.pop();
                               switch (d.pop()) {
                               case 0:
                                   e[t] = i;
                                   break;
                               case 1:
                                   Object.defineProperty(e, t, {
                                       get: i
                                   });
                                   break;
                               case 2:
                                   Object.defineProperty(e, t, {
                                       set: i
                                   })
                               }
                           }
                           _[t] = e;
                           break
                       }
                   case 27:
                       _[T[I++]] = null;
                       break;
                   case 64:
                       _[T[I++]] = E[c()][c()];
                       break;
                   case 44:
                       _[T[I++]] = E[c()][c()] = _[T[I++]];
                       break;
                   case 4:
                       _[T[I++]] = E[c()][c()] |= _[T[I++]];
                       break;
                   case 12:
                       _[T[I++]] = E[c()][c()] &= _[T[I++]];
                       break;
                   case 25:
                       _[T[I++]] = E[c()][c()] *= _[T[I++]];
                       break;
                   case 52:
                       _[T[I++]] = E[c()][c()] /= _[T[I++]];
                       break;
                   case 35:
                       _[T[I++]] = E[c()][c()] %= _[T[I++]];
                       break;
                   case 67:
                       _[T[I++]] = E[c()][c()] >>>= _[T[I++]];
                       break;
                   case 86:
                       _[T[I++]] = E[c()][c()] += _[T[I++]];
                       break;
                   case 83:
                       _[T[I++]] = E[c()][c()] -= _[T[I++]];
                       break;
                   case 58:
                       E[c()][c()] = _[T[I++]];
                       break;
                   case 8:
                       {
                           let e = T[I++]
                             , i = P();
                           _[e] || (I = i);
                           break
                       }
                   case 87:
                       {
                           let e = T[I++]
                             , i = P();
                           _[e] && (I = i);
                           break
                       }
                   case 14:
                       {
                           let e = P();
                           I = e;
                           break
                       }
                   case 82:
                   case 11:
                       return _[0];
                   case 62:
                       g.push(P());
                       break;
                   case 22:
                       g.pop();
                       break;
                   case 23:
                       E[l][c()] = b;
                       break;
                   default:
                       throw "u" + e
                   }
               }
           }
           (()=>{
               for (I = 0; ; ) {
                   let e = T[I++];
                   if (85 === e)
                       h.push(m());
                   else {
                       if (29 !== e)
                           return void I--;
                       {
                           let e = c()
                             , i = c()
                             , t = [];
                           for (let e = 0; i > e; e++)
                               t.push(c());
                           S[e] = t
                       }
                   }
               }
           }
           )(),
           D(0, I).call(this)
       }(0, {})
   }(),
   window.debuggablePlayers = new Array(105);
   const e = "http://localhost:8082/";
   function i() {
       this.initGoogleAPI = function() {
           window.google.accounts.id.initialize({
               client_id: "266035305280-9a2dbcftvus76ac9eq5427cm4lf4p6rn.apps.googleusercontent.com",
               callback: this.googleAuthCallback
           })
       }
       ,
       this.googleAuthCloseCallback = function() {
           console.log("[Famishs/GoogleAPIv2] Auth closed")
       }
       ,
       this.loginWithGoogle = function() {
           let e = Cookies.getJSON("g_state");
           if (e && 1 == e.i_l) {
               const e = {
                   i_l: 0
               };
               Cookies.set("g_state", e)
           }
           console.log("[Famishs/GoogleAPIv2] Started Loginning process"),
           google.accounts.id.prompt()
       }
       ,
       this.googleAuthCallback = function() {
           const e = arguments[0].credential;
           window.userToken = e,
           window.onUserLogin(),
           console.log("[Famishs/GoogleAPIv2] Login success!")
       }
   }
   const t = new i;
   function r(e) {
       this.m = 2147483648,
       this.a = 1103515245,
       this.c = 12345,
       this.state = e || Math.floor(Math.random() * (this.m - 1))
   }
   window.mobile = !1,
   r.prototype.random = function() {
       return this.state = (this.a * this.state + this.c) % this.m,
       this.state / this.m
   }
   ,
   r.prototype.set_seed = function(e) {
       this.state = e
   }
   ,
   RAND_SIZE = 1e4,
   RANDOM = [];
   var n = new r;
   n.set_seed((new Date).getTime());
   for (var o = 0; o < RAND_SIZE; o++)
       RANDOM.push(n.random());
   let s = {
       open_in_new_tab: function(e) {
           window.open(e, "_blank").focus()
       },
       open_in_new_box: function(e) {
           window.open(e, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes")
       },
       compare_object: function(e, i) {
           for (var t in e)
               if (e[t] != i[t])
                   return !1;
           return !0
       },
       compare_array: function(e, i) {
           if (e.length != i.length)
               return !1;
           for (var t = 0; t < e.length; t++)
               if ("object" == typeof e) {
                   if (!this.compare_object(e[t], i[t]))
                       return !1
               } else if (e[t] != i[t])
                   return !1;
           return !0
       },
       copy_vector: function(e, i) {
           i.x = e.x,
           i.y = e.y
       },
       get_vector: function(e, i) {
           return {
               x: e.x - i.x,
               y: e.y - i.y
           }
       },
       mul_vector: function(e, i) {
           e.x *= i,
           e.y *= i
       },
       scalar_product: function(e, i) {
           return e.x * i.x + e.y * i.y
       },
       norm: function(e) {
           return Math.sqrt(e.x * e.x + e.y * e.y)
       },
       sign: function(e) {
           return e < 0 ? -1 : 1
       },
       cross_product: function(e, i) {
           return e.x * i.y - e.y * i.x
       },
       get_angle_2: function(e, i, t, r) {
           var n = r - i
             , o = t - e;
           return Math.atan2(n, o)
       },
       get_angle: function(e, i) {
           return Math.acos(this.scalar_product(e, i) / (this.norm(e) * this.norm(i))) * this.sign(this.cross_product(e, i))
       },
       getURLData: function(e) {
           _url = location.href,
           e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
           var i = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(_url);
           return null === i ? null : i[1]
       },
       reduceAngle: function(e, i) {
           var t = 2 * Math.PI;
           return i = (i % t + t) % t,
           Math.abs(e - i) > Math.PI ? e > i ? i + t : i - t : i
       },
       get_std_angle: function(e, i) {
           return this.get_angle({
               x: 1,
               y: 0
           }, this.get_vector(e, i))
       },
       dist: function(e, i) {
           return Math.sqrt((i.x - e.x) * (i.x - e.x) + (i.y - e.y) * (i.y - e.y))
       },
       build_vector: function(e, i) {
           return {
               x: Math.cos(i) * e,
               y: Math.sin(i) * e
           }
       },
       add_vector: function(e, i) {
           e.x += i.x,
           e.y += i.y
       },
       sub_vector: function(e, i) {
           e.x -= i.x,
           e.y -= i.y
       },
       translate_vector: function(e, i, t) {
           e.x += i,
           e.y += t
       },
       translate_new_vector: function(e, i, t) {
           return {
               x: e.x + i,
               y: e.y + t
           }
       },
       move: function(e, i, t) {
           e.x += Math.cos(t) * i,
           e.y += Math.sin(t) * i
       },
       middle: function(e, i) {
           return Math.floor((e - i) / 2)
       },
       middle_point: function(e, i) {
           return {
               x: (e.x + i.x) / 2,
               y: (e.y + i.y) / 2
           }
       },
       rand_sign: function() {
           return Math.random() > .5 ? 1 : -1
       },
       get_rand_pos_in_circle: function(e, i, t) {
           var r = this.rand_sign()
             , n = this.rand_sign()
             , o = Math.random() * Math.PI / 2;
           return {
               x: Math.floor(e + Math.cos(o) * r * t),
               y: Math.floor(i + Math.sin(o) * n * t)
           }
       },
       Box: function(e, i, t, r) {
           this.x = e,
           this.y = i,
           this.w = t,
           this.h = r
       },
       randomize_list: function(e) {
           a = [],
           a.push.apply(a, e);
           for (var i = []; a.length > 0; ) {
               var t = Math.floor(Math.random() * a.length);
               i.push(a[t]),
               a.splice(t, 1)
           }
           return i
       },
       restore_number: function(e) {
           return e
       },
       simplify_number: function(e) {
           if ("number" != typeof e)
               return "0";
           if (e >= 1e4) {
               var i = Math.floor(Math.log10(e)) - 2
                 , t = Math.max(0, 3 - i)
                 , r = Math.floor(e / 1e3).toString();
               if (t) {
                   for (var n = (r += "." + (e % 1e3 / 1e3).toString().substring(2).substring(0, t)).length - 1, o = 0; n > 0 && "0" == r[n]; n--)
                       o++;
                   "." == (r = r.substring(0, r.length - o))[r.length - 1] && (r = r.substring(0, r.length - 1))
               }
               return r += "k"
           }
           return e.toString()
       },
       ease_out_quad: function(e) {
           return e * (2 - e)
       },
       ease_out_cubic: function(e) {
           return --e * e * e + 1
       },
       ease_in_out_quad: function(e) {
           return e < .5 ? 2 * e * e : (4 - 2 * e) * e - 1
       },
       ease_in_out_cubic: function(e) {
           return e < .5 ? 4 * e * e * e : (e - 1) * (2 * e - 2) * (2 * e - 2) + 1
       },
       ease_in_out_quart: function(e) {
           return e < .5 ? 8 * e * e * e * e : 1 - 8 * --e * e * e * e
       },
       ease_out_quart: function(e) {
           return 1 - --e * e * e * e
       },
       ease_out_quint: function(e) {
           return 1 + --e * e * e * e * e
       },
       LinearAnimation: function(e, i, t, r, n, o) {
           return this.o = e,
           this.v = i,
           this.max = t,
           this.min = r,
           this.max_speed = n,
           this.min_speed = o,
           this.last = 0,
           this.update = function() {
               if (this.o) {
                   if ((e = this.v + jI * this.max_speed) > this.max)
                       return this.v = this.max,
                       this.o = !1,
                       !0;
                   this.v = e
               } else {
                   var e;
                   (e = this.v - jI * this.min_speed) < this.min ? (this.v = this.min,
                   this.o = !0) : this.v = e
               }
           }
           ,
           !1
       },
       Ease: function(e, i, t, r, n, o) {
           this.fun = e,
           this.ed = i,
           this.em = t,
           this.sx = r,
           this.x = n,
           this.ex = o,
           this.restart = function() {
               this.x = this.sex,
               this.ed = 0
           }
           ,
           this.ease = function(e) {
               if (e !== this.ex && (this.ex = e,
               this.sx = this.x,
               this.ed = 0),
               this.ex !== this.x)
                   if (this.ed += jI,
                   this.ed > this.em)
                       this.x = this.ex;
                   else {
                       var i = this.fun(this.ed / this.em);
                       this.x = this.sx + (this.ex - this.sx) * i
                   }
           }
       },
       Ease2d: function(e, i, t, r, n, o, a, s, T) {
           this.fun = e,
           this.ed = i,
           this.em = t,
           this.sx = r,
           this.sy = n,
           this.x = o,
           this.y = a,
           this.ex = s,
           this.ey = T,
           this.ease = function(e) {
               if (e.x == this.ex && e.y == this.ey || (this.ex = e.x,
               this.ey = e.y,
               this.sx = this.x,
               this.sy = this.y,
               this.ed = 0),
               this.ex != this.x || this.ey != this.y)
                   if (this.ed += jI,
                   this.ed > this.em)
                       this.x = this.ex,
                       this.y = this.ey;
                   else {
                       var i = this.fun(this.ed / this.em);
                       this.x = this.sx + (this.ex - this.sx) * i,
                       this.y = this.sy + (this.ey - this.sy) * i
                   }
           }
       },
       generate_token: function(e) {
           for (var i = "", t = 0; t < e; t++)
               i += String.fromCharCode(48 + Math.floor(74 * Math.random()));
           return i
       },
       gup: function(e, i) {
           i || (i = location.href),
           e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
           var t = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(i);
           return null == t ? null : t[1]
       },
       inside_box: function(e, i) {
           return e.x >= i.x && e.x <= i.x + i.w && e.y >= i.y && e.y <= i.y + i.h
       },
       intersect_aabb: function(e, i, t, r, n, o, a, s) {
           return Math.max(e, n) < Math.min(i, o) && Math.max(t, a) < Math.min(r, s) ? 1 : 0
       },
       lerp: function(e, i, t) {
           return (1 - t) * e + t * i
       },
       escape_html: function(e) {
           return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;")
       }
   };
   function T() {
       try {
           window.self !== window.top && (loaded = Cookies.get("inIframe"),
           loaded ? Cookies.remove("inIframe") : Cookies.set("inIframe", "1"))
       } catch (e) {}
   }
   function I() {
       this.DOWN = 0,
       this.UP = 1,
       this.IDLE = 2,
       this.IN = 0,
       this.OUT = 1,
       this.pos = {
           x: 0,
           y: 0
       },
       this.x_old = 0,
       this.y_old = 0,
       this.angle = 0,
       this.state = this.IDLE,
       this.dist = this.IN,
       this.down = function() {
           this.state = this.DOWN
       }
       ,
       this.up = function() {
           this.state = this.UP
       }
       ,
       this.update = function() {
           return (this.pos.x != this.x_old || this.pos.y != this.y_old) && (this.x_old = this.pos.x,
           this.y_old = this.pos.y,
           !0)
       }
   }
   function E() {
       this.set_azerty = function() {
           this.LEFT = 81,
           this.RIGHT = 68,
           this.TOP = 90,
           this.DOWN = 83
       }
       ,
       this.set_qwerty = function() {
           this.LEFT = 65,
           this.RIGHT = 68,
           this.TOP = 87,
           this.BOTTOM = 83
       }
       ,
       this.UP = 0,
       this.DOWN = 1,
       this._1 = 49,
       this._2 = 50,
       this._3 = 51,
       this._4 = 52,
       this._5 = 53,
       this.CTRL = 17,
       this.ARROW_LEFT = 37,
       this.ARROW_RIGHT = 39,
       this.ARROW_TOP = 38,
       this.ARROW_BOTTOM = 40,
       this.SPACE = 32,
       this.R = 82,
       this.G = 71,
       this.V = 86,
       this.B = 66,
       this.set_qwerty(),
       this.keys = new Array(255);
       for (var e = 0; e < 255; e++)
           this.keys[e] = this.UP;
       this.up = function(e) {
           var i = Math.min(e.charCode || e.keyCode, 255);
           this.keys[i] = this.UP
       }
       ,
       this.down = function(e) {
           var i = Math.min(e.charCode || e.keyCode, 255);
           return i == this.LEFT || i == this.ARROW_LEFT ? this.press_left() : i == this.TOP || i == this.ARROW_TOP ? this.press_top() : i == this.DOWN || i == this.ARROW_DOWN ? this.press_bottom() : i != this.RIGHT && i != this.ARROW_RIGHT || this.press_right(),
           this.keys[i] = this.DOWN,
           i
       }
       ,
       this.press_left = function() {
           this.keys[this.RIGHT] = this.UP,
           this.keys[this.ARROW_RIGHT] = this.UP
       }
       ,
       this.press_right = function() {
           this.keys[this.LEFT] = this.UP,
           this.keys[this.ARROW_LEFT] = this.UP
       }
       ,
       this.press_bottom = function() {
           this.keys[this.TOP] = this.UP,
           this.keys[this.ARROW_TOP] = this.UP
       }
       ,
       this.press_top = function() {
           this.keys[this.BOTTOM] = this.UP,
           this.keys[this.ARROW_BOTTOM] = this.UP
       }
       ,
       this.clear_directionnal = function() {
           this.keys[this.RIGHT] = this.UP,
           this.keys[this.ARROW_RIGHT] = this.UP,
           this.keys[this.LEFT] = this.UP,
           this.keys[this.ARROW_LEFT] = this.UP,
           this.keys[this.TOP] = this.UP,
           this.keys[this.ARROW_TOP] = this.UP,
           this.keys[this.BOTTOM] = this.UP,
           this.keys[this.ARROW_BOTTOM] = this.UP
       }
       ,
       this.is_left = function() {
           return this.keys[this.LEFT] || this.keys[this.ARROW_LEFT]
       }
       ,
       this.is_right = function() {
           return this.keys[this.RIGHT] || this.keys[this.ARROW_RIGHT]
       }
       ,
       this.is_top = function() {
           return this.keys[this.TOP] || this.keys[this.ARROW_TOP]
       }
       ,
       this.is_bottom = function() {
           return this.keys[this.BOTTOM] || this.keys[this.ARROW_BOTTOM]
       }
       ,
       this.is_ctrl = function() {
           return this.keys[this.CTRL]
       }
       ,
       this.is_1 = function() {
           return this.keys[this._1]
       }
       ,
       this.is_2 = function() {
           return this.keys[this._2]
       }
       ,
       this.is_3 = function() {
           return this.keys[this._3]
       }
       ,
       this.is_4 = function() {
           return this.keys[this._4]
       }
       ,
       this.is_space = function() {
           return this.keys[this.SPACE]
       }
       ,
       this.is_r = function() {
           return this.keys[this.R]
       }
       ,
       this.is_g = function() {
           return this.keys[this.G]
       }
       ,
       this.is_v = function() {
           return this.keys[this.V]
       }
       ,
       this.is_b = function() {
           return this.keys[this.B]
       }
   }
   Math.sign = Math.sign || function(e) {
       return 0 === e ? 0 : e > 0 ? 1 : -1
   }
   ,
   Math.log10 = Math.log10 || function(e) {
       return Math.log(e) / Math.LOG10
   }
   ,
   function(e) {
       var i = !1;
       if ("function" == typeof define && define.amd && (define(e),
       i = !0),
       "object" == typeof exports && (module.exports = e(),
       i = !0),
       !i) {
           var t = window.Cookies
             , r = window.Cookies = e();
           r.noConflict = function() {
               return window.Cookies = t,
               r
           }
       }
   }((function() {
       function e() {
           for (var e = 0, i = {}; e < arguments.length; e++) {
               var t = arguments[e];
               for (var r in t)
                   i[r] = t[r]
           }
           return i
       }
       return function i(t) {
           function r(i, n, o) {
               var a;
               if ("undefined" != typeof document) {
                   if (arguments.length > 1) {
                       if ("number" == typeof (o = e({
                           path: "/"
                       }, r.defaults, o)).expires) {
                           var s = new Date;
                           s.setMilliseconds(s.getMilliseconds() + 864e5 * o.expires),
                           o.expires = s
                       }
                       try {
                           a = JSON.stringify(n),
                           /^[\{\[]/.test(a) && (n = a)
                       } catch (e) {}
                       return n = t.write ? t.write(n, i) : encodeURIComponent(String(n)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent),
                       i = (i = (i = encodeURIComponent(String(i))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape),
                       document.cookie = [i, "=", n, o.expires ? "; expires=" + o.expires.toUTCString() : "", o.path ? "; path=" + o.path : "", o.domain ? "; domain=" + o.domain : "", o.secure ? "; secure" : ""].join("")
                   }
                   i || (a = {});
                   for (var T = document.cookie ? document.cookie.split("; ") : [], I = /(%[0-9A-Z]{2})+/g, E = 0; E < T.length; E++) {
                       var _ = T[E].split("=")
                         , u = _.slice(1).join("=");
                       '"' === u.charAt(0) && (u = u.slice(1, -1));
                       try {
                           var h = _[0].replace(I, decodeURIComponent);
                           if (u = t.read ? t.read(u, h) : t(u, h) || u.replace(I, decodeURIComponent),
                           this.json)
                               try {
                                   u = JSON.parse(u)
                               } catch (e) {}
                           if (i === h) {
                               a = u;
                               break
                           }
                           i || (a[h] = u)
                       } catch (e) {}
                   }
                   return a
               }
           }
           return r.set = r,
           r.get = function(e) {
               return r.call(r, e)
           }
           ,
           r.getJSON = function() {
               return r.apply({
                   json: !0
               }, [].slice.call(arguments))
           }
           ,
           r.defaults = {},
           r.remove = function(i, t) {
               r(i, "", e(t, {
                   expires: -1
               }))
           }
           ,
           r.withConverter = i,
           r
       }((function() {}
       ))
   }
   )),
   T();
   var _ = document.getElementById("game_canvas")
     , u = _.getContext("2d")
     , R = _.width
     , A = _.height
     , d = _.width / 2
     , S = _.height / 2
     , N = {
       x: d,
       y: S
   }
     , C = 1
     , g = 1
     , O = -1;
   function p(e) {
       var i = new Image;
       return i.src = e.toDataURL("image/png"),
       i.width = e.width,
       i.height = e.height,
       i.isLoaded = 1,
       i
   }
   _.oncontextmenu = function() {
       return !1
   }
   ;
   var c = window.devicePixelRatio || 1
     , v = u.webkitBackingStorePixelRatio || u.mozBackingStorePixelRatio || u.msBackingStorePixelRatio || u.oBackingStorePixelRatio || u.backingStorePixelRatio || 1;
   function P() {
       _.width != window.innerWidth && (_.width = window.innerWidth,
       R = _.width,
       d = _.width / 2),
       _.height != window.innerHeight && (_.height = window.innerHeight,
       A = _.height,
       S = _.height / 2),
       N = {
           x: d,
           y: S
       };
       var e = _.width
         , i = _.height;
       g = -1 === O ? c / v : O,
       _.width = e * g,
       _.height = i * g,
       _.style.width = e + "px",
       _.style.height = i + "px",
       u.scale(g, g),
       kI && (kI.cam.rw = e,
       kI.cam.rh = i),
       $I.is_run ? $I.update() : YI.is_run ? YI.update() : xI.is_run ? xI.update() : FI.is_run && FI.update()
   }
   var m = document.getElementById("game_body");
   m.ondragstart = function() {
       return !1
   }
   ,
   m.ondrop = function() {
       return !1
   }
   ,
   m.onresize = P,
   function() {
       for (var e = 0, i = ["ms", "moz", "webkit", "o"], t = 0; t < i.length && !window.requestAnimationFrame; ++t)
           window.requestAnimationFrame = window[i[t] + "RequestAnimationFrame"],
           window.cancelAnimationFrame = window[i[t] + "CancelAnimationFrame"] || window[i[t] + "CancelRequestAnimationFrame"];
       window.requestAnimationFrame || (window.requestAnimationFrame = function(i) {
           var t = (new Date).getTime()
             , r = Math.max(0, 16 - (t - e))
             , n = window.setTimeout((function() {
               i(t + r)
           }
           ), r);
           return e = t + r,
           n
       }
       ),
       window.cancelAnimationFrame || (window.cancelAnimationFrame = function(e) {
           clearTimeout(e)
       }
       )
   }();
   var D = navigator.language || navigator.userLanguage
     , M = -(new Date).getTimezoneOffset() / 60
     , G = "Europe"
     , L = "Russia"
     , f = "North America"
     , V = "South America"
     , z = "West America"
     , H = "Asia"
     , B = "Australia"
     , K = G;
   M >= -2 && M <= 2 ? K = G : M > 2 && M <= 5 ? K = L : M > 5 && M <= 9 ? K = H : M > 9 ? K = B : M >= -5 && M < -2 ? K = "pt-BR" === D || "pt-br" === D || "pt" === D || "pt-pt" === D ? V : f : M < -5 && (K = "pt-BR" === D || "pt-br" === D || "pt" === D || "pt-pt" === D ? V : z);
   for (var r = {
       Random: function(e) {
           var i = 2147483648
             , t = e || Math.floor(Math.random() * (i - 1));
           this.init = function(e) {
               t = e || Math.floor(Math.random() * (i - 1))
           }
           ,
           this.get = function() {
               return (t = (1103515245 * t + 12345) % i) / i
           }
       }
   }, W = function() {
       q[INV.EXTRACTOR_MACHINE_STONE] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"],
       q[INV.EXTRACTOR_MACHINE_GOLD] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"],
       q[INV.EXTRACTOR_MACHINE_DIAMOND] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"],
       q[INV.EXTRACTOR_MACHINE_AMETHYST] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"],
       q[INV.EXTRACTOR_MACHINE_REIDITE] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"],
       q[INV.REIDITE_SHIELD] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"],
       q[INV.AMETHYST_SHIELD] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"],
       q[INV.DIAMOND_SHIELD] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"],
       q[INV.GOLD_SHIELD] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"],
       q[INV.STONE_SHIELD] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"],
       q[INV.WOOD_SHIELD] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"],
       q[INV.MACHETE] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"],
       q[INV.WOOD_TOWER] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"],
       q[INV.DRAGON_ARROW] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"],
       q[INV.DRAGON_BOW] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"],
       q[INV.REIDITE_ARROW] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"],
       q[INV.REIDITE_BOW] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"],
       q[INV.AMETHYST_ARROW] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"],
       q[INV.AMETHYST_BOW] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"],
       q[INV.DIAMOND_ARROW] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"],
       q[INV.DIAMOND_BOW] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"],
       q[INV.GOLD_ARROW] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"],
       q[INV.GOLD_BOW] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"],
       q[INV.STONE_ARROW] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"],
       q[INV.STONE_BOW] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"],
       q[INV.WOOD_ARROW] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"],
       q[INV.WOOD_BOW] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"],
       q[INV.EMERALD_MACHINE] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."],
       q[INV.FUR_BOAR] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"],
       q[INV.FUR_MAMMOTH] = ["Mammoth fur", "Soft and warm. Perfect for a hat."],
       q[INV.VULTURE_FEATHER] = ["Vulture Feather", "From a deadly vulture"],
       q[INV.EMERALD] = ["Emerald", "How many golden breads can you get from it?"],
       q[INV.SANDWORM_JUICE] = ["Sand Worm Juice", "I don't want to know how you got this."],
       q[INV.TURBAN1] = ["Turban", "Useful to survive in the desert."],
       q[INV.TURBAN2] = ["Ninja outfit", "Essential to survive in the desert"],
       q[INV.PILOT_HELMET] = ["Pilot Hat", "Take off and land with flying objects much faster."],
       q[INV.PILOT_GLASSES] = ["Pilot Glasses"],
       q[INV.MOUNT_BOAR] = ["Tamed Boar", "Fast on lands and slow on water."],
       q[INV.BABY_MAMMOTH] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."],
       q[INV.CRAB_BOSS] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"],
       q[INV.BABY_DRAGON] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"],
       q[INV.BABY_LAVA] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"],
       q[INV.HAWK] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"],
       q[INV.SADDLE] = ["Saddle", "Hit a boar with it to tame it."],
       q[INV.WITCH] = ["Witch Hat", "You're a wizard Starvy!"],
       q[INV.NIMBUS] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."],
       q[INV.WAND1] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"],
       q[INV.WAND2] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"],
       q[INV.FIREFLY] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."],
       q[INV.PIRATE_HAT] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"],
       q[INV.SLED] = ["Sled", "You are faster with it in the snow"],
       q[INV.BOAT] = ["Boat", "You are faster with it in the water"],
       q[INV.PLANE] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"],
       q[INV.HAMMER_REIDITE] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"],
       q[INV.PENGUIN_FEATHER] = ["Penguin Feather", "From a deadly cute penguin."],
       q[INV.HAWK_FEATHER] = ["Hawk Feather", "From a deadly hawk."],
       q[INV.CACTUS] = ["Cactus", "Food : 20", "Water : 10"],
       q[INV.ALOE_VERA] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"],
       q[INV.ALOE_VERA_SEED] = ["Aloe Vera Seed", "Grows into Aloe Vera"],
       q[INV.WATERMELON] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"],
       q[INV.WATERMELON_SEED] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"],
       q[INV.REIDITE_DOOR] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"],
       q[INV.REIDITE_WALL] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"],
       q[INV.REIDITE_SPIKE] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"],
       q[INV.REIDITE_DOOR_SPIKE] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"],
       q[INV.PICK_REIDITE] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"],
       q[INV.WOOD_DOOR_SPIKE] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"],
       q[INV.STONE_DOOR_SPIKE] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"],
       q[INV.GOLD_DOOR_SPIKE] = ["Gold Door Spike", 'Are you rebuilding the "el dorado?"', "Damage: 15", "On-Hit Damage: 2", "Durability: 400"],
       q[INV.DIAMOND_DOOR_SPIKE] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"],
       q[INV.AMETHYST_DOOR_SPIKE] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"],
       q[INV.CARROT] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"],
       q[INV.TOMATO] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"],
       q[INV.CARROT_SEED] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"],
       q[INV.TOMATO_SEED] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"],
       q[INV.PITCHFORK] = ["Pitchfork", "Perfect for gathering"],
       q[INV.PITCHFORK2] = ["Golden Pitchfork", "Essential for a real farmer."],
       q[INV.PITCHFORK_PART] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."],
       q[INV.EGG0] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"],
       q[INV.EGG1] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"],
       q[INV.EGG2] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"],
       q[INV.EGG3] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"],
       q[INV.EGG4] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"],
       q[INV.LAVA_CUBE] = ["Lava Cube", "You feel an immense power emanating from this cube"],
       q[INV.LAVA_ORB] = ["Lava Orb", "You feel an immense power emanating from this orb"],
       q[INV.LAVA_SWORD] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"],
       q[INV.LAVA_SPEAR] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"],
       q[INV.LAVA_HEART] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."],
       q[INV.LAVA_HELMET] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"],
       q[INV.REIDITE_SPEAR] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"],
       q[INV.REIDITE_SWORD] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"],
       q[INV.FLAME] = ["Flame", "It's hot!"],
       q[INV.DIAMOND_PROTECTION] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"],
       q[INV.AMETHYST_PROTECTION] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"],
       q[INV.REIDITE_PROTECTION] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"],
       q[INV.REIDITE] = ["Reidite", "The ultimate ore"],
       q[INV.DRAGON_CUBE] = ["Dragon Cube", "You feel a great power emanating from this cube"],
       Q[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."],
       Q[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."],
       Q[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."],
       Q[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."],
       Q[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."],
       Q[27] = ['You were trampled by that boar. From now on, your new nickname is "the doormat".'],
       Q[28] = ['With a force of 3300 newtons, the shock wave from the closing of the crab king\'s claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the "crab rave"'],
       Q[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."],
       Q[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."],
       Q[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."],
       Q[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."],
       Q[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."],
       Q[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"],
       Q[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"],
       Q[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."],
       Q[37] = ['You hear "Avada Kedavra!" before you turn to ashes.'],
       Q[38] = ["You died crushed by an angry baby mammoth."],
       Q[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."],
       Q[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."],
       q[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"],
       q[TEXT.TEMPEST_ON] = "A sandstorm is approaching in a few seconds.",
       q[TEXT.TEMPEST_OFF] = "The sandstorm will soon stop.",
       q[TEXT.BLIZZARD_ON] = "A blizzard is approaching in a few seconds.",
       q[TEXT.BLIZZARD_OFF] = "The blizzard will soon stop.",
       q[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME",
       q[TEXT.TWITTER] = " Share on Twitter",
       q[TEXT.FACEBOOK] = " Share on Facebook",
       q[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points",
       q[TEXT.POINTS] = "points",
       q[TEXT.SCORE] = "Score",
       q[TEXT.KILL] = "Kill",
       q[TEXT.DAYS_SURVIVED] = "Days survived",
       q[TEXT.MODE_FREE] = "Building method: Free. Press G to change",
       q[TEXT.MODE_GRID] = "Building method: Grid. Press G to change",
       q[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"],
       q[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"],
       q[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"],
       q[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"],
       document.getElementById("typequest").innerHTML = "Chrono Quests",
       document.getElementById("timeremainingquest").innerHTML = "Time Remaining",
       document.getElementById("constraintquest").innerHTML = " Constraints",
       document.getElementById("claim_rewards").innerHTML = " Claim rewards",
       document.getElementById("rewardquest").innerHTML = " Reward",
       document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave",
       document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst",
       document.getElementById("survive20min_3").innerHTML = "Survive without losing life",
       document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests",
       document.getElementById("dont_hit_5").innerHTML = " Be peaceful",
       document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back",
       document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
       for (var e = 0; e < 7; e++)
           document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
       document.getElementById("quit_chronoquest").innerHTML = " QUIT",
       q[INV.HAND] = ["Hand"],
       q[INV.GROUND] = ["Dirt", "Dirty!"],
       q[INV.SAND] = ["Sand", "I got it in my eyes!"],
       q[INV.WOOD] = ["Wood", "You can't get enough of it!"],
       q[INV.STONE] = ["Stone", "Also called a rock"],
       q[INV.GOLD] = ["Gold", "Be generous, give it to others"],
       q[INV.DIAMOND] = ["Diamond", "What will you make with it?"],
       q[INV.AMETHYST] = ["Amethyst", "It's Mauve like Lapa"],
       q[INV.FLOUR] = ["Flour", "Used in cooking"],
       q[INV.COOKIE] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"],
       q[INV.CAKE] = ["A cake", "Dream cake for the gourmets", "Food: 100"],
       q[INV.MEAT] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"],
       q[INV.COOKED_MEAT] = ["Cooked meat", "A rare steak, please", "Food: 35"],
       q[INV.FOODFISH] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"],
       q[INV.FOODFISH_COOKED] = ["Cooked fish", "With lemon it's perfect", "Food: 35"],
       q[INV.BREAD] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"],
       q[INV.SANDWICH] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"],
       q[INV.CANDY] = ["Candies", "Only for children!", "Food: 20"],
       q[INV.SUGAR_CAN] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"],
       q[INV.GARLAND] = ["Garland", "Perfect decoration for roofs"],
       q[INV.SEED] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"],
       q[INV.PLANT] = ["Berry", "Berry tasty!", "Food: 10"],
       q[INV.WHEAT_SEED] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"],
       q[INV.WILD_WHEAT] = ["Wild Wheat", "Turns into Flour when placed in Windmill"],
       q[INV.PUMPKIN_SEED] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"],
       q[INV.PUMPKIN] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"],
       q[INV.GARLIC_SEED] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"],
       q[INV.GARLIC] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"],
       q[INV.THORNBUSH_SEED] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"],
       q[INV.THORNBUSH] = ["Thorn bush", "It stings!"],
       q[INV.PLOT] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"],
       q[INV.ICE] = ["Ice", "Useful for making cakes and water"],
       q[INV.SPANNER] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"],
       q[INV.FUR_WOLF] = ["Wolf Fur", "Puppy? But where is Puppy?!"],
       q[INV.FUR] = ["Rabbit Fur", "That rabbit was so cute..."],
       q[INV.SPECIAL_FUR] = ["Pure Fur", "You're a bread factory"],
       q[INV.SPECIAL_FUR_2] = ["Dark Fur", "You get ready to do something wrong"],
       q[INV.FUR_WINTER] = ["Winter Fur", "These animals just wanted a hug..."],
       q[INV.SCALES] = ["Scales", "It smells like fish!"],
       q[INV.KRAKEN_SKIN] = ["Kraken Skin", "Weren't you too scared?"],
       q[INV.FIRE] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"],
       q[INV.BIG_FIRE] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"],
       q[INV.WORKBENCH] = ["Workbench", "Very useful to craft all kinds of objects"],
       q[INV.CORD] = ["Cord", "Used in crafting Hats and Bag"],
       q[INV.BLUE_CORD] = ["Diamond Cord", "Used in crafting Special Hats"],
       q[INV.CHEST] = ["Chest", "Allows you to store items", "Durability: 500"],
       q[INV.SWORD_WOOD] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"],
       q[INV.SWORD] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"],
       q[INV.SWORD_GOLD] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"],
       q[INV.SWORD_DIAMOND] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"],
       q[INV.PIRATE_SWORD] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"],
       q[INV.SWORD_AMETHYST] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"],
       q[INV.DRAGON_SWORD] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"],
       q[INV.DRAGON_SPEAR] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"],
       q[INV.PICK_WOOD] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"],
       q[INV.PICK] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"],
       q[INV.PICK_GOLD] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"],
       q[INV.PICK_DIAMOND] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"],
       q[INV.PICK_AMETHYST] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"],
       q[INV.HAMMER] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"],
       q[INV.HAMMER_GOLD] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"],
       q[INV.HAMMER_DIAMOND] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"],
       q[INV.HAMMER_AMETHYST] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"],
       q[INV.SUPER_HAMMER] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"],
       q[INV.WOOD_SPEAR] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"],
       q[INV.SPEAR] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"],
       q[INV.GOLD_SPEAR] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"],
       q[INV.DIAMOND_SPEAR] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"],
       q[INV.AMETHYST_SPEAR] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"],
       q[INV.SHOVEL] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"],
       q[INV.SHOVEL_GOLD] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"],
       q[INV.SHOVEL_DIAMOND] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"],
       q[INV.SHOVEL_AMETHYST] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"],
       q[INV.WOOD_HELMET] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"],
       q[INV.STONE_HELMET] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"],
       q[INV.GOLD_HELMET] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"],
       q[INV.DIAMOND_HELMET] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"],
       q[INV.AMETHYST_HELMET] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"],
       q[INV.REIDITE_HELMET] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"],
       q[INV.DRAGON_HELMET] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"],
       q[INV.EXPLORER_HAT] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"],
       q[INV.CHRISTMAS_HAT] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"],
       q[INV.ELF_HAT] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"],
       q[INV.HOOD] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"],
       q[INV.EARMUFFS] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"],
       q[INV.COAT] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"],
       q[INV.CAP_SCARF] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"],
       q[INV.FUR_HAT] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"],
       q[INV.PEASANT] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"],
       q[INV.WINTER_HOOD] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"],
       q[INV.WINTER_PEASANT] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"],
       q[INV.DIVING_MASK] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"],
       q[INV.SUPER_DIVING_SUIT] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"],
       q[INV.DRAGON_ORB] = ["Dragon Orb", "You feel a great power emanating from this orb"],
       q[INV.DRAGON_HEART] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"],
       q[INV.GEMME_GREEN] = ["Green Gemstone", "You didn't cheat, promise?"],
       q[INV.GEMME_ORANGE] = ["Orange Gemstone", "Only a real pirate can find it!"],
       q[INV.GEMME_BLUE] = ["Blue Gemstone", "For too kind people"],
       q[INV.CROWN_GREEN] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"],
       q[INV.CROWN_ORANGE] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"],
       q[INV.CROWN_BLUE] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"],
       q[INV.BUCKET_FULL] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"],
       q[INV.BUCKET_EMPTY] = ["Empty Bucket", "You need to fill this bucket near a water source"],
       q[INV.BOTTLE_FULL] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"],
       q[INV.BOTTLE_EMPTY] = ["Empty Bottle", "You can fill this bottle near a water source"],
       q[INV.WATERING_CAN] = ["Empty Watering Can", "You must fill it with a water source to use it"],
       q[INV.WATERING_CAN_FULL] = ["Watering Can", "Allows watering of plants", "Damage: 1"],
       q[INV.BAG] = ["Bag", "More space for your items!"],
       q[INV.PAPER] = ["Paper", "Used in book-crafting"],
       q[INV.BOOK] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"],
       q[INV.BANDAGE] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"],
       q[INV.LOCK] = ["Lock", "Allow you to lock your chest"],
       q[INV.LOCKPICK] = ["Lock-pick", "Allows you to unlock one chest"],
       q[INV.TOTEM] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"],
       q[INV.BRIDGE] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"],
       q[INV.SIGN] = ["Sign", "Leave a message to others", "Durability: 200"],
       q[INV.ROOF] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"],
       q[INV.WELL] = ["Well", "Allows bottle filling", "Durability: 1000"],
       q[INV.WALL] = ["Wood Wall", "It's just a wall", "Durability: 1000"],
       q[INV.STONE_WALL] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"],
       q[INV.GOLD_WALL] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"],
       q[INV.DIAMOND_WALL] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"],
       q[INV.AMETHYST_WALL] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"],
       q[INV.SPIKE] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"],
       q[INV.STONE_SPIKE] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"],
       q[INV.GOLD_SPIKE] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"],
       q[INV.DIAMOND_SPIKE] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"],
       q[INV.AMETHYST_SPIKE] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"],
       q[INV.WOOD_DOOR] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"],
       q[INV.STONE_DOOR] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"],
       q[INV.GOLD_DOOR] = ["Gold Door", 'Are you rebuilding the "el dorado?"', "Durability: 2000"],
       q[INV.DIAMOND_DOOR] = ["Diamond Door", "For a shining house", "Durability: 2500"],
       q[INV.AMETHYST_DOOR] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"],
       q[INV.FURNACE] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"],
       q[INV.WINDMILL] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"],
       q[INV.BREAD_OVEN] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"],
       q[INV.RESURRECTION] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"],
       q[TEXT.YOU_CANNOT_JOIN] = "You cannot join this server",
       q[TEXT.KICKED] = "Kicked: ",
       q[TEXT.KEY_ALREADY] = "Your key is already used by someone else",
       q[TEXT.KEY_WRONG] = "Your key is wrong",
       q[TEXT.OLD_VERSION] = "You have an old version, you need to clear your cache",
       q[TEXT.NEW_VERSION] = "Your client version is too recent for this server. The server is being updated",
       q[TEXT.WRONG_PASSWORD] = "Wrong password! To enter a password: https://starve.io/?password=...",
       q[TEXT.NO_MORE_RESOURCES] = "There are no more new resources",
       q[TEXT.SURVIVED_1DAY] = "You survived 1 day",
       q[TEXT.SURVIVED] = "You survived ",
       q[TEXT.DAYS] = " days",
       q[TEXT.DEAD_SAD] = "You are dead ;-;",
       q[TEXT.SPAM_ME] = "Server cannot find spawn location! Spam the play button!",
       q[TEXT.SPAM_ME2] = "Server is full! Spam the play button!",
       q[TEXT.EMPTY] = "Resource is empty",
       q[TEXT.INV_FULL] = "Inventory is full (right-click to empty items)",
       q[TEXT.DEAD] = " is dead",
       q[TEXT.WRONG_TOOL] = "This is not the right tool",
       q[TEXT.JOIN_TEAM] = "You joined a team",
       q[TEXT.YOU_DEAD] = "You are dead",
       q[TEXT.JOINED_TEAM] = " joined the team",
       q[TEXT.TEAM_DESTROYED] = "Your team was destroyed",
       q[TEXT.LEFT_TEAM] = "You left the team",
       q[TEXT.LEFT_TEAM2] = " left the team",
       q[TEXT.TOKEN] = "Someone stole your token :>",
       q[TEXT.CHOOSE] = "Choose a server",
       q[TEXT.PLAYERS] = "players",
       q[TEXT.TOTAL_PLAYERS] = "total players",
       q[TEXT.TOTAL_MODE] = "players on this mode",
       q[TEXT.COMMING_SOON] = "Coming soon...",
       document.getElementById("nickname_input").placeholder = "Nickname",
       Q[0] = ["You were killed for no reason"],
       Q[1] = ["You starved to death, as the name of the game implies"],
       Q[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."],
       Q[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."],
       Q[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."],
       Q[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."],
       Q[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."],
       Q[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"],
       Q[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."],
       Q[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."],
       Q[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."],
       Q[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."],
       Q[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."],
       Q[13] = ["You died of thirst. Better drink your own piss."],
       Q[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."],
       Q[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."],
       Q[16] = ["EvelTeam does not plan that you can kill the kraken", "A kraken krak-ed your skull."],
       Q[17] = ["Your skin's falling apart, the sun killed you."],
       Q[18] = ["Garlic stored in your pockets boiled your brain."],
       Q[19] = ["As a vampire, don't stand near the garlic cloves."],
       Q[20] = ["You ate garlic as a vampire, what did you expect?"],
       Q[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."],
       ZOMBIE_GRUMBLE = "Uuunnnggg",
       ZOMBIE_GRUMBLES = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"]
   }, Y = function() {
       q[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"],
       Q[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."],
       q[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"],
       q[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME",
       q[TEXT.TWITTER] = " Share on Twitter",
       q[TEXT.FACEBOOK] = " Share on Facebook",
       q[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points",
       q[TEXT.POINTS] = "points",
       q[TEXT.SCORE] = "Score",
       q[TEXT.KILL] = "Kill",
       q[TEXT.DAYS_SURVIVED] = "Days survived",
       q[TEXT.MODE_FREE] = "Building method: Free. Press G to change",
       q[TEXT.MODE_GRID] = "Building method: Grid. Press G to change",
       q[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"],
       q[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"],
       q[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"],
       q[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"],
       document.getElementById("typequest").innerHTML = "Chrono Quests",
       document.getElementById("timeremainingquest").innerHTML = "Time Remaining",
       document.getElementById("constraintquest").innerHTML = " Constraints",
       document.getElementById("claim_rewards").innerHTML = " Claim rewards",
       document.getElementById("rewardquest").innerHTML = " Reward",
       document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart",
       document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst",
       document.getElementById("survive20min_3").innerHTML = "Survive without losing life",
       document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests",
       document.getElementById("dont_hit_5").innerHTML = " Be peaceful",
       document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter",
       document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
       for (var e = 0; e < 7; e++)
           document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
       document.getElementById("quit_chronoquest").innerHTML = " QUIT",
       q[INV.HAND] = ["Рука"],
       q[INV.GROUND] = ["Земля", "Грязно!"],
       q[INV.SAND] = ["Песок", "Он в моих глазах!"],
       q[INV.WOOD] = ["Дерево", "Постоянно нужно больше!"],
       q[INV.STONE] = ["Камень", "Твердый"],
       q[INV.GOLD] = ["Золото", "Будьте щедры, давайте его другим"],
       q[INV.DIAMOND] = ["Алмаз", "Что вы создадите с помощью него?"],
       q[INV.AMETHYST] = ["Аметист", "Он сиреневый, как Lapa"],
       q[INV.FLOUR] = ["Мука", "Используется в готовке"],
       q[INV.COOKIE] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"],
       q[INV.CAKE] = ["Торт", "Торт мечты для гурманов", "Еда: 100"],
       q[INV.MEAT] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"],
       q[INV.COOKED_MEAT] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"],
       q[INV.FOODFISH] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"],
       q[INV.FOODFISH_COOKED] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"],
       q[INV.BREAD] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"],
       q[INV.SANDWICH] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"],
       q[INV.CANDY] = ["Конфеты", "Только для детей!", "Еда: 20"],
       q[INV.SUGAR_CAN] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"],
       q[INV.GARLAND] = ["Гирлянда", "Прекрасная декорация для крыши"],
       q[INV.SEED] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"],
       q[INV.PLANT] = ["Ягода", "Ягода вкусная!", "Еда: 10"],
       q[INV.WHEAT_SEED] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"],
       q[INV.WILD_WHEAT] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"],
       q[INV.PUMPKIN_SEED] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"],
       q[INV.PUMPKIN] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"],
       q[INV.GARLIC_SEED] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"],
       q[INV.GARLIC] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"],
       q[INV.THORNBUSH_SEED] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"],
       q[INV.THORNBUSH] = ["Колючий Куст", "Это больно!"],
       q[INV.PLOT] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"],
       q[INV.ICE] = ["Лёд", "Используется для изготовления тортов и воды"],
       q[INV.SPANNER] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"],
       q[INV.FUR_WOLF] = ["Шкура Волка", "Щенок? Но где же Щенок?!"],
       q[INV.FUR] = ["Шкура Зайца", "Этот кролик был таким милым..."],
       q[INV.SPECIAL_FUR] = ["Чистая Шкура", "Вы - фабрика хлеба"],
       q[INV.SPECIAL_FUR_2] = ["Чёрная Шкура", "Вы готовы делать зло."],
       q[INV.FUR_WINTER] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."],
       q[INV.SCALES] = ["Чешуя", "Она пахнет рыбой!"],
       q[INV.KRAKEN_SKIN] = ["Шкура Кракена", "Вы не испугались?"],
       q[INV.FIRE] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"],
       q[INV.BIG_FIRE] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"],
       q[INV.WORKBENCH] = ["Верстак", "Необходим для создания многих предметов"],
       q[INV.CORD] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"],
       q[INV.BLUE_CORD] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"],
       q[INV.CHEST] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"],
       q[INV.SWORD_WOOD] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"],
       q[INV.SWORD] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"],
       q[INV.SWORD_GOLD] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"],
       q[INV.SWORD_DIAMOND] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"],
       q[INV.PIRATE_SWORD] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"],
       q[INV.SWORD_AMETHYST] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"],
       q[INV.DRAGON_SWORD] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"],
       q[INV.DRAGON_SPEAR] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"],
       q[INV.PICK_WOOD] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"],
       q[INV.PICK] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"],
       q[INV.PICK_GOLD] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"],
       q[INV.PICK_DIAMOND] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"],
       q[INV.PICK_AMETHYST] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"],
       q[INV.HAMMER] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"],
       q[INV.HAMMER_GOLD] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"],
       q[INV.HAMMER_DIAMOND] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"],
       q[INV.HAMMER_AMETHYST] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"],
       q[INV.SUPER_HAMMER] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"],
       q[INV.WOOD_SPEAR] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"],
       q[INV.SPEAR] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"],
       q[INV.GOLD_SPEAR] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"],
       q[INV.DIAMOND_SPEAR] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"],
       q[INV.AMETHYST_SPEAR] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"],
       q[INV.SHOVEL] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"],
       q[INV.SHOVEL_GOLD] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"],
       q[INV.SHOVEL_DIAMOND] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"],
       q[INV.SHOVEL_AMETHYST] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"],
       q[INV.WOOD_HELMET] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"],
       q[INV.STONE_HELMET] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"],
       q[INV.GOLD_HELMET] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"],
       q[INV.DIAMOND_HELMET] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"],
       q[INV.AMETHYST_HELMET] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"],
       q[INV.DRAGON_HELMET] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"],
       q[INV.EXPLORER_HAT] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."],
       q[INV.CHRISTMAS_HAT] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."],
       q[INV.ELF_HAT] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."],
       q[INV.HOOD] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."],
       q[INV.EARMUFFS] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."],
       q[INV.COAT] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."],
       q[INV.CAP_SCARF] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"],
       q[INV.PEASANT] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."],
       q[INV.WINTER_HOOD] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."],
       q[INV.WINTER_PEASANT] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."],
       q[INV.DIVING_MASK] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"],
       q[INV.SUPER_DIVING_SUIT] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"],
       q[INV.DRAGON_ORB] = ["Шар Дракона", "Даётся за квест"],
       q[INV.DRAGON_HEART] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"],
       q[INV.GEMME_GREEN] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"],
       q[INV.GEMME_ORANGE] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"],
       q[INV.GEMME_BLUE] = ["Синий Драгоценный Камень", "Для очень добрых людей"],
       q[INV.CROWN_GREEN] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"],
       q[INV.CROWN_ORANGE] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"],
       q[INV.CROWN_BLUE] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"],
       q[INV.BUCKET_FULL] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"],
       q[INV.BUCKET_EMPTY] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"],
       q[INV.BOTTLE_FULL] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"],
       q[INV.BOTTLE_EMPTY] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"],
       q[INV.WATERING_CAN] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"],
       q[INV.WATERING_CAN_FULL] = ["Лейка", "Позволяет поливать растения", "Урон: 1"],
       q[INV.BAG] = ["Рюкзак", "Больше места для ваших предметов!"],
       q[INV.PAPER] = ["Бумага", "Используется при создании книги"],
       q[INV.BOOK] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"],
       q[INV.BANDAGE] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"],
       q[INV.LOCK] = ["Замок", "Позволяет вам закрыть ваш сундук"],
       q[INV.LOCKPICK] = ["Ключ", "Даёт вам открыть один запертый сундук"],
       q[INV.TOTEM] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"],
       q[INV.BRIDGE] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"],
       q[INV.SIGN] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"],
       q[INV.ROOF] = ["Крыша", "Немного скрывает вас и согревает!"],
       q[INV.WELL] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"],
       q[INV.WALL] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"],
       q[INV.STONE_WALL] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"],
       q[INV.GOLD_WALL] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"],
       q[INV.DIAMOND_WALL] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"],
       q[INV.AMETHYST_WALL] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"],
       q[INV.SPIKE] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"],
       q[INV.STONE_SPIKE] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"],
       q[INV.GOLD_SPIKE] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"],
       q[INV.DIAMOND_SPIKE] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"],
       q[INV.AMETHYST_SPIKE] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"],
       q[INV.WOOD_DOOR] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"],
       q[INV.STONE_DOOR] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"],
       q[INV.GOLD_DOOR] = ["Золотая Дверь", 'Вы перестраиваете "Эль Дорадо?"', "Прочность: 2000"],
       q[INV.DIAMOND_DOOR] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"],
       q[INV.AMETHYST_DOOR] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"],
       q[INV.FURNACE] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"],
       q[INV.WINDMILL] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"],
       q[INV.BREAD_OVEN] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"],
       q[INV.RESURRECTION] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"],
       q[TEXT.YOU_CANNOT_JOIN] = "Вы не можете зайти на этот сервер",
       q[TEXT.KICKED] = "Выгнаны: ",
       q[TEXT.KEY_ALREADY] = "Ваш ключ уже используется кем-то",
       q[TEXT.KEY_WRONG] = "Ваш ключ неправильный",
       q[TEXT.OLD_VERSION] = "У вас старая версия, вам нужно очистить кеш",
       q[TEXT.NO_MORE_RESOURCES] = "Ресурсов больше нет",
       q[TEXT.SURVIVED_1DAY] = "Вы выжили 1 день",
       q[TEXT.SURVIVED] = "Вы выжили ",
       q[TEXT.DAYS] = " дней",
       q[TEXT.DEAD_SAD] = "Вы умерли ;-;",
       q[TEXT.SPAM_ME] = "Сервер не может найти точку спавна! Спамьте кнопку играть!",
       q[TEXT.SPAM_ME2] = "Сервер заполнен! Спамьте кнопку играть!",
       q[TEXT.EMPTY] = "Ресурсы закончились",
       q[TEXT.INV_FULL] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)",
       q[TEXT.DEAD] = " умер",
       q[TEXT.WRONG_TOOL] = "Это не тот инструмент",
       q[TEXT.JOIN_TEAM] = "Вы вошли в команду",
       q[TEXT.YOU_DEAD] = "Вы умерли",
       q[TEXT.JOINED_TEAM] = " вошёл в команду",
       q[TEXT.TEAM_DESTROYED] = "Ваша команда была разрушена",
       q[TEXT.LEFT_TEAM] = "Вы покинули команду",
       q[TEXT.LEFT_TEAM2] = " покинул команду",
       q[TEXT.TOKEN] = "Кто-то использует ваш токен :>",
       q[TEXT.CHOOSE] = "Выберите сервер",
       q[TEXT.PLAYERS] = "игроков",
       q[TEXT.TOTAL_PLAYERS] = "игроков всего",
       q[TEXT.TOTAL_MODE] = "игроков в этом режиме",
       q[TEXT.COMMING_SOON] = "Скоро...",
       document.getElementById("nickname_input").placeholder = "Имя",
       Q[0] = ["Вы были убиты без причины"],
       Q[1] = ["Вы умерли от голода, как название игры подразумевает это"],
       Q[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."],
       Q[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."],
       Q[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."],
       Q[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."],
       Q[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."],
       Q[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"],
       Q[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."],
       Q[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."],
       Q[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."],
       Q[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."],
       Q[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."],
       Q[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."],
       Q[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."],
       Q[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."],
       Q[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."],
       Q[17] = ["Твоя кожа разваливается, солнце убило тебя"],
       Q[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."],
       Q[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."],
       Q[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"],
       Q[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."],
       ZOMBIE_GRUMBLE = "Uuunnnggg",
       ZOMBIE_GRUMBLES = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"]
   }, U = function() {
       q[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"],
       Q[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."],
       q[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"],
       q[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME",
       q[TEXT.TWITTER] = " Share on Twitter",
       q[TEXT.FACEBOOK] = " Share on Facebook",
       q[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points",
       q[TEXT.POINTS] = "points",
       q[TEXT.SCORE] = "Score",
       q[TEXT.KILL] = "Kill",
       q[TEXT.DAYS_SURVIVED] = "Days survived",
       q[TEXT.MODE_FREE] = "Building method: Free. Press G to change",
       q[TEXT.MODE_GRID] = "Building method: Grid. Press G to change",
       q[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"],
       q[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"],
       q[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"],
       q[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"],
       document.getElementById("typequest").innerHTML = "Chrono Quests",
       document.getElementById("timeremainingquest").innerHTML = "Time Remaining",
       document.getElementById("constraintquest").innerHTML = " Constraints",
       document.getElementById("claim_rewards").innerHTML = " Claim rewards",
       document.getElementById("rewardquest").innerHTML = " Reward",
       document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart",
       document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst",
       document.getElementById("survive20min_3").innerHTML = "Survive without losing life",
       document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests",
       document.getElementById("dont_hit_5").innerHTML = " Be peaceful",
       document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter",
       document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
       for (var e = 0; e < 7; e++)
           document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
       document.getElementById("quit_chronoquest").innerHTML = " QUIT",
       q[INV.HAND] = ["Mano"],
       q[INV.GROUND] = ["Tierra", "¡Tan limpia como mis manos!"],
       q[INV.SAND] = ["Arena", "¡Tengo arena en mis ojos!"],
       q[INV.WOOD] = ["Madera", "¡Nunca hay suficiente!"],
       q[INV.STONE] = ["Piedra", "También llamada roca."],
       q[INV.GOLD] = ["Oro", "Sé generoso, compártelo con los otros"],
       q[INV.DIAMOND] = ["Diamante", "¿Que vas a hacer con él?"],
       q[INV.AMETHYST] = ["Amatista", "Es Mauve como Lapa"],
       q[INV.FLOUR] = ["Harina", "Usada para cocinar."],
       q[INV.COOKIE] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"],
       q[INV.CAKE] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"],
       q[INV.MEAT] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"],
       q[INV.COOKED_MEAT] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"],
       q[INV.FOODFISH] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"],
       q[INV.FOODFISH_COOKED] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"],
       q[INV.BREAD] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"],
       q[INV.SANDWICH] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"],
       q[INV.CANDY] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"],
       q[INV.SUGAR_CAN] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"],
       q[INV.GARLAND] = ["Guirnalda", "Perfecta para decorar el techo"],
       q[INV.SEED] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"],
       q[INV.PLANT] = ["Baya", "No es venenosa.", "Comida: 10"],
       q[INV.WHEAT_SEED] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"],
       q[INV.WILD_WHEAT] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"],
       q[INV.PUMPKIN_SEED] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"],
       q[INV.PUMPKIN] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"],
       q[INV.GARLIC_SEED] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"],
       q[INV.GARLIC] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"],
       q[INV.THORNBUSH_SEED] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"],
       q[INV.THORNBUSH] = ["Planta de Espinas", "¡Te daña!"],
       q[INV.PLOT] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"],
       q[INV.ICE] = ["Hielo", "Bueno para hacer tartas y agua"],
       q[INV.SPANNER] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"],
       q[INV.FUR_WOLF] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"],
       q[INV.FUR] = ["Pelaje de Conejo", "El Conejo era muy lindo..."],
       q[INV.SPECIAL_FUR] = ["Pelaje Puro", "¡Eres una maquina de pan!"],
       q[INV.SPECIAL_FUR_2] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"],
       q[INV.FUR_WINTER] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."],
       q[INV.SCALES] = ["Escamas", "¡Huele a pescado!"],
       q[INV.KRAKEN_SKIN] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"],
       q[INV.FIRE] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"],
       q[INV.BIG_FIRE] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"],
       q[INV.WORKBENCH] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"],
       q[INV.CORD] = ["Hilo", "Usado para craftear ropa y mochila"],
       q[INV.BLUE_CORD] = ["Hilo de Diamante", "Usado para craftear ropa especial"],
       q[INV.CHEST] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"],
       q[INV.SWORD_WOOD] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"],
       q[INV.SWORD] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"],
       q[INV.SWORD_GOLD] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"],
       q[INV.SWORD_DIAMOND] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"],
       q[INV.PIRATE_SWORD] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"],
       q[INV.SWORD_AMETHYST] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"],
       q[INV.DRAGON_SWORD] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"],
       q[INV.DRAGON_SPEAR] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"],
       q[INV.PICK_WOOD] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"],
       q[INV.PICK] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"],
       q[INV.PICK_GOLD] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"],
       q[INV.PICK_DIAMOND] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"],
       q[INV.PICK_AMETHYST] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"],
       q[INV.HAMMER] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"],
       q[INV.HAMMER_GOLD] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"],
       q[INV.HAMMER_DIAMOND] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"],
       q[INV.HAMMER_AMETHYST] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"],
       q[INV.SUPER_HAMMER] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"],
       q[INV.WOOD_SPEAR] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"],
       q[INV.SPEAR] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"],
       q[INV.GOLD_SPEAR] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"],
       q[INV.DIAMOND_SPEAR] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"],
       q[INV.AMETHYST_SPEAR] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"],
       q[INV.SHOVEL] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"],
       q[INV.SHOVEL_GOLD] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"],
       q[INV.SHOVEL_DIAMOND] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"],
       q[INV.SHOVEL_AMETHYST] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"],
       q[INV.WOOD_HELMET] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"],
       q[INV.STONE_HELMET] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"],
       q[INV.GOLD_HELMET] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"],
       q[INV.DIAMOND_HELMET] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"],
       q[INV.AMETHYST_HELMET] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"],
       q[INV.DRAGON_HELMET] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"],
       q[INV.EXPLORER_HAT] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"],
       q[INV.CHRISTMAS_HAT] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"],
       q[INV.ELF_HAT] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"],
       q[INV.HOOD] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"],
       q[INV.EARMUFFS] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"],
       q[INV.COAT] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"],
       q[INV.CAP_SCARF] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"],
       q[INV.PEASANT] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"],
       q[INV.WINTER_HOOD] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"],
       q[INV.WINTER_PEASANT] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"],
       q[INV.DIVING_MASK] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"],
       q[INV.SUPER_DIVING_SUIT] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"],
       q[INV.DRAGON_ORB] = ["Esfera del Dragón", "Dada en la misión"],
       q[INV.DRAGON_HEART] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"],
       q[INV.GEMME_GREEN] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"],
       q[INV.GEMME_ORANGE] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"],
       q[INV.GEMME_BLUE] = ["Gema Azul", "Para gente muy amable"],
       q[INV.CROWN_GREEN] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"],
       q[INV.CROWN_ORANGE] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"],
       q[INV.CROWN_BLUE] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"],
       q[INV.BUCKET_FULL] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"],
       q[INV.BUCKET_EMPTY] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"],
       q[INV.BOTTLE_FULL] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"],
       q[INV.BOTTLE_EMPTY] = ["Botella Vacia", "La puedes llenar de agua"],
       q[INV.WATERING_CAN] = ["Regadera Vacía", "La tienes que llenar de agua"],
       q[INV.WATERING_CAN_FULL] = ["Regadera", "Te permite regar las plantas", "Daño: 1"],
       q[INV.BAG] = ["Mochila", "¡Mas espacio para tus cosas!"],
       q[INV.PAPER] = ["Hoja", "Usada para hacer un libro"],
       q[INV.BOOK] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"],
       q[INV.BANDAGE] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"],
       q[INV.LOCK] = ["Cerradura", "Te permite cerrar tu cofre"],
       q[INV.LOCKPICK] = ["Llave", "Te permite abrir un cofre cerrado"],
       q[INV.TOTEM] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"],
       q[INV.BRIDGE] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"],
       q[INV.SIGN] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"],
       q[INV.ROOF] = ["Techo", "Te esconde un poco y te protege del frío"],
       q[INV.WELL] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"],
       q[INV.WALL] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"],
       q[INV.STONE_WALL] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"],
       q[INV.GOLD_WALL] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"],
       q[INV.DIAMOND_WALL] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"],
       q[INV.AMETHYST_WALL] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"],
       q[INV.SPIKE] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"],
       q[INV.STONE_SPIKE] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"],
       q[INV.GOLD_SPIKE] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"],
       q[INV.DIAMOND_SPIKE] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"],
       q[INV.AMETHYST_SPIKE] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"],
       q[INV.WOOD_DOOR] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"],
       q[INV.STONE_DOOR] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"],
       q[INV.GOLD_DOOR] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"],
       q[INV.DIAMOND_DOOR] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"],
       q[INV.AMETHYST_DOOR] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"],
       q[INV.FURNACE] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"],
       q[INV.WINDMILL] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"],
       q[INV.BREAD_OVEN] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"],
       q[INV.RESURRECTION] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"],
       q[TEXT.YOU_CANNOT_JOIN] = "No puedes unirte a este servidor",
       q[TEXT.KICKED] = "Expulsado: ",
       q[TEXT.KEY_ALREADY] = "Tu llave ya está usada",
       q[TEXT.KEY_WRONG] = "Tu llave está mal",
       q[TEXT.OLD_VERSION] = "Tienes una versión antigua, limpia tu cache",
       q[TEXT.NO_MORE_RESOURCES] = "No hay mas recursos",
       q[TEXT.SURVIVED_1DAY] = "Has sobrevivido 1 día",
       q[TEXT.SURVIVED] = "Has sobrevivido ",
       q[TEXT.DAYS] = " días",
       q[TEXT.DEAD_SAD] = "Estás muerto ;-;",
       q[TEXT.SPAM_ME] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!",
       q[TEXT.SPAM_ME2] = "El servidor esta lleno, ¡spamea el botón de jugar!",
       q[TEXT.EMPTY] = "Recurso vacio",
       q[TEXT.INV_FULL] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ",
       q[TEXT.DEAD] = " está muerto",
       q[TEXT.WRONG_TOOL] = "Esta no es la herramienta correcta",
       q[TEXT.JOIN_TEAM] = "Te has unido a un equipo",
       q[TEXT.YOU_DEAD] = "Estás muerto",
       q[TEXT.JOINED_TEAM] = " se unió al equipo",
       q[TEXT.TEAM_DESTROYED] = "Tu equipo ha sido destruido",
       q[TEXT.LEFT_TEAM] = "Has dejado el equipo",
       q[TEXT.LEFT_TEAM2] = " dejo el equipo ",
       q[TEXT.TOKEN] = "Alguien te robó tu token :>",
       q[TEXT.CHOOSE] = "Elige un servidor",
       q[TEXT.PLAYERS] = "jugadores",
       q[TEXT.TOTAL_PLAYERS] = "total de jugadores",
       q[TEXT.TOTAL_MODE] = "Jugadores en este modo de juego",
       q[TEXT.COMMING_SOON] = "Próximamente...",
       document.getElementById("nickname_input").placeholder = "Apodo",
       Q[0] = ["Has muerto por ninguna razón"],
       Q[1] = ["Has muerto de hambre, como implica el nombre del juego dice"],
       Q[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."],
       Q[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."],
       Q[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."],
       Q[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."],
       Q[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."],
       Q[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"],
       Q[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."],
       Q[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."],
       Q[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."],
       Q[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."],
       Q[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."],
       Q[13] = ["Has muerto de sed, mejor bebe tu propia orina."],
       Q[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."],
       Q[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."],
       Q[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."],
       Q[17] = ["Tu piel se cayó, el sol te quemó."],
       Q[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."],
       Q[19] = ["Eres un vampiro, no te quedes cerca del ajo."],
       Q[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"],
       Q[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."],
       ZOMBIE_GRUMBLE = "Uuunnnggg",
       ZOMBIE_GRUMBLES = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"]
   }, k = function() {
       q[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"],
       Q[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."],
       q[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"],
       q[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME",
       q[TEXT.TWITTER] = " Share on Twitter",
       q[TEXT.FACEBOOK] = " Share on Facebook",
       q[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points",
       q[TEXT.POINTS] = "points",
       q[TEXT.SCORE] = "Score",
       q[TEXT.KILL] = "Kill",
       q[TEXT.DAYS_SURVIVED] = "Days survived",
       q[TEXT.MODE_FREE] = "Building method: Free. Press G to change",
       q[TEXT.MODE_GRID] = "Building method: Grid. Press G to change",
       q[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"],
       q[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"],
       q[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"],
       q[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"],
       document.getElementById("typequest").innerHTML = "Chrono Quests",
       document.getElementById("timeremainingquest").innerHTML = "Time Remaining",
       document.getElementById("constraintquest").innerHTML = " Constraints",
       document.getElementById("claim_rewards").innerHTML = " Claim rewards",
       document.getElementById("rewardquest").innerHTML = " Reward",
       document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart",
       document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst",
       document.getElementById("survive20min_3").innerHTML = "Survive without losing life",
       document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests",
       document.getElementById("dont_hit_5").innerHTML = " Be peaceful",
       document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter",
       document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
       for (var e = 0; e < 7; e++)
           document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
       document.getElementById("quit_chronoquest").innerHTML = " QUIT",
       q[INV.HAND] = ["Ręka"],
       q[INV.GROUND] = ["Ziemia", "Brudna!"],
       q[INV.SAND] = ["Piasek", "Mam go w oczach!"],
       q[INV.WOOD] = ["Drewno", "Nie możesz mieć go wystarczająco!"],
       q[INV.STONE] = ["Kamień", "Także nazywany skałą"],
       q[INV.GOLD] = ["Złoto", "Bądź hojny, daj trochę innym"],
       q[INV.DIAMOND] = ["Diament", "Co z nim zrobisz?"],
       q[INV.AMETHYST] = ["Ametyst", "Jest Fiołkowy jak Lapa"],
       q[INV.FLOUR] = ["Mąka", "Używana w gotowaniu"],
       q[INV.COOKIE] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"],
       q[INV.CAKE] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"],
       q[INV.MEAT] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"],
       q[INV.COOKED_MEAT] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"],
       q[INV.FOODFISH] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"],
       q[INV.FOODFISH_COOKED] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"],
       q[INV.BREAD] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"],
       q[INV.SANDWICH] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"],
       q[INV.CANDY] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"],
       q[INV.SUGAR_CAN] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"],
       q[INV.GARLAND] = ["Girlanda", "Idealna do dekorowania dachów"],
       q[INV.SEED] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"],
       q[INV.PLANT] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"],
       q[INV.WHEAT_SEED] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"],
       q[INV.WILD_WHEAT] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"],
       q[INV.PUMPKIN_SEED] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"],
       q[INV.PUMPKIN] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"],
       q[INV.GARLIC_SEED] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"],
       q[INV.GARLIC] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"],
       q[INV.THORNBUSH_SEED] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"],
       q[INV.THORNBUSH] = ["Kolczasty krzew", "Kłuje!"],
       q[INV.PLOT] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"],
       q[INV.ICE] = ["Lód", "Użyteczny do robienia ciast i wody"],
       q[INV.SPANNER] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"],
       q[INV.FUR_WOLF] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"],
       q[INV.FUR] = ["Skóra królika", "Ten królik był taki słodziutki..."],
       q[INV.SPECIAL_FUR] = ["Skóra", "Jesteś fabryką chleba"],
       q[INV.SPECIAL_FUR_2] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"],
       q[INV.FUR_WINTER] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."],
       q[INV.SCALES] = ["Łuski", "Pachnie jak ryba!"],
       q[INV.KRAKEN_SKIN] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"],
       q[INV.FIRE] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"],
       q[INV.BIG_FIRE] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"],
       q[INV.WORKBENCH] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"],
       q[INV.CORD] = ["Nić", "Używany w tworzeniu czapek i plecaków"],
       q[INV.BLUE_CORD] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"],
       q[INV.CHEST] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"],
       q[INV.SWORD_WOOD] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"],
       q[INV.SWORD] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"],
       q[INV.SWORD_GOLD] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"],
       q[INV.SWORD_DIAMOND] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"],
       q[INV.PIRATE_SWORD] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"],
       q[INV.SWORD_AMETHYST] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"],
       q[INV.DRAGON_SWORD] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"],
       q[INV.DRAGON_SPEAR] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"],
       q[INV.PICK_WOOD] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"],
       q[INV.PICK] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"],
       q[INV.PICK_GOLD] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"],
       q[INV.PICK_DIAMOND] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"],
       q[INV.PICK_AMETHYST] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"],
       q[INV.HAMMER] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"],
       q[INV.HAMMER_GOLD] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"],
       q[INV.HAMMER_DIAMOND] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"],
       q[INV.HAMMER_AMETHYST] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"],
       q[INV.SUPER_HAMMER] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"],
       q[INV.WOOD_SPEAR] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"],
       q[INV.SPEAR] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"],
       q[INV.GOLD_SPEAR] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"],
       q[INV.DIAMOND_SPEAR] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"],
       q[INV.AMETHYST_SPEAR] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"],
       q[INV.SHOVEL] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"],
       q[INV.SHOVEL_GOLD] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"],
       q[INV.SHOVEL_DIAMOND] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"],
       q[INV.SHOVEL_AMETHYST] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"],
       q[INV.WOOD_HELMET] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"],
       q[INV.STONE_HELMET] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"],
       q[INV.GOLD_HELMET] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"],
       q[INV.DIAMOND_HELMET] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"],
       q[INV.AMETHYST_HELMET] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"],
       q[INV.DRAGON_HELMET] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"],
       q[INV.EXPLORER_HAT] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"],
       q[INV.CHRISTMAS_HAT] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"],
       q[INV.ELF_HAT] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"],
       q[INV.HOOD] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"],
       q[INV.EARMUFFS] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"],
       q[INV.COAT] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"],
       q[INV.CAP_SCARF] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"],
       q[INV.PEASANT] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"],
       q[INV.WINTER_HOOD] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"],
       q[INV.WINTER_PEASANT] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"],
       q[INV.DIVING_MASK] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"],
       q[INV.SUPER_DIVING_SUIT] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"],
       q[INV.DRAGON_ORB] = ["Smocza kula", "Zdobyta podczas zadania"],
       q[INV.DRAGON_HEART] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"],
       q[INV.GEMME_GREEN] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"],
       q[INV.GEMME_ORANGE] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"],
       q[INV.GEMME_BLUE] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"],
       q[INV.CROWN_GREEN] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"],
       q[INV.CROWN_ORANGE] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"],
       q[INV.CROWN_BLUE] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"],
       q[INV.BUCKET_FULL] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"],
       q[INV.BUCKET_EMPTY] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"],
       q[INV.BOTTLE_FULL] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"],
       q[INV.BOTTLE_EMPTY] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"],
       q[INV.WATERING_CAN] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"],
       q[INV.WATERING_CAN_FULL] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"],
       q[INV.BAG] = ["Plecak", "Więcej miejsca na twoje przedmioty!"],
       q[INV.PAPER] = ["Papier", "Używany w tworzeniu książki"],
       q[INV.BOOK] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"],
       q[INV.BANDAGE] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"],
       q[INV.LOCK] = ["Zamek", "Pozwala ci zamknąć skrzynię"],
       q[INV.LOCKPICK] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"],
       q[INV.TOTEM] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"],
       q[INV.BRIDGE] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"],
       q[INV.SIGN] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"],
       q[INV.ROOF] = ["Dach", "Trochę cie ogrzewa i chowa!"],
       q[INV.WELL] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"],
       q[INV.WALL] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"],
       q[INV.STONE_WALL] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"],
       q[INV.GOLD_WALL] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"],
       q[INV.DIAMOND_WALL] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"],
       q[INV.AMETHYST_WALL] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"],
       q[INV.SPIKE] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"],
       q[INV.STONE_SPIKE] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"],
       q[INV.GOLD_SPIKE] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"],
       q[INV.DIAMOND_SPIKE] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"],
       q[INV.AMETHYST_SPIKE] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"],
       q[INV.WOOD_DOOR] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"],
       q[INV.STONE_DOOR] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"],
       q[INV.GOLD_DOOR] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"],
       q[INV.DIAMOND_DOOR] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"],
       q[INV.AMETHYST_DOOR] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"],
       q[INV.FURNACE] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"],
       q[INV.WINDMILL] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"],
       q[INV.BREAD_OVEN] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"],
       q[INV.RESURRECTION] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"],
       q[TEXT.YOU_CANNOT_JOIN] = "Nie możesz dołączyć do tego serwera",
       q[TEXT.KICKED] = "Wyrzucony: ",
       q[TEXT.KEY_ALREADY] = "Twój klucz jest aktualnie używany przez innego gracza",
       q[TEXT.KEY_WRONG] = "Twój klucz jest nieprawidłowy",
       q[TEXT.OLD_VERSION] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć",
       q[TEXT.NO_MORE_RESOURCES] = "Nie ma nowych minerałów, zwierząt, i jedzenia",
       q[TEXT.SURVIVED_1DAY] = "Przeżyłeś 1 dzień",
       q[TEXT.SURVIVED] = "Przeżyłeś ",
       q[TEXT.DAYS] = " dni",
       q[TEXT.DEAD_SAD] = "Jesteś martwy ;-;",
       q[TEXT.SPAM_ME] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...",
       q[TEXT.SPAM_ME2] = "Serwer jest pełny! Spamuj przycisk zagraj!",
       q[TEXT.EMPTY] = "Źródło jest puste",
       q[TEXT.INV_FULL] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)",
       q[TEXT.DEAD] = " jest martwy",
       q[TEXT.WRONG_TOOL] = "To nie jest właściwe narzędzie",
       q[TEXT.JOIN_TEAM] = "Dołączyłeś do drużyny",
       q[TEXT.YOU_DEAD] = "Jesteś martwy",
       q[TEXT.JOINED_TEAM] = " dołączył do drużyny",
       q[TEXT.TEAM_DESTROYED] = "Twoja drużyna została zniszczona",
       q[TEXT.LEFT_TEAM] = " Opuściłeś drużynę",
       q[TEXT.LEFT_TEAM2] = " opuścił drużynę",
       q[TEXT.TOKEN] = "Ktoś ukradł twój żeton :>",
       q[TEXT.CHOOSE] = "Wybierz serwer",
       q[TEXT.PLAYERS] = "graczy",
       q[TEXT.TOTAL_PLAYERS] = "wszystkich graczy",
       q[TEXT.TOTAL_MODE] = "graczy w tym trybie",
       q[TEXT.COMMING_SOON] = "Już wkrótce...",
       document.getElementById("nickname_input").placeholder = "Przydomek",
       Q[0] = ["Zostałeś zabity bez powodu"],
       Q[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"],
       Q[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."],
       Q[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."],
       Q[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."],
       Q[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."],
       Q[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."],
       Q[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"],
       Q[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."],
       Q[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."],
       Q[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."],
       Q[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."],
       Q[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."],
       Q[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."],
       Q[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."],
       Q[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."],
       Q[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."],
       Q[17] = ["Twoja skóra odpada, słońce cię zabija."],
       Q[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."],
       Q[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."],
       Q[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"],
       Q[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."],
       ZOMBIE_GRUMBLE = "Uuunnnggg",
       ZOMBIE_GRUMBLES = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"]
   }, F = function() {
       q[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"],
       Q[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."],
       q[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"],
       q[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME",
       q[TEXT.TWITTER] = " Share on Twitter",
       q[TEXT.FACEBOOK] = " Share on Facebook",
       q[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points",
       q[TEXT.POINTS] = "points",
       q[TEXT.SCORE] = "Score",
       q[TEXT.KILL] = "Kill",
       q[TEXT.DAYS_SURVIVED] = "Days survived",
       q[TEXT.MODE_FREE] = "Building method: Free. Press G to change",
       q[TEXT.MODE_GRID] = "Building method: Grid. Press G to change",
       q[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"],
       q[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"],
       q[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"],
       q[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"],
       document.getElementById("typequest").innerHTML = "Chrono Quests",
       document.getElementById("timeremainingquest").innerHTML = "Time Remaining",
       document.getElementById("constraintquest").innerHTML = " Constraints",
       document.getElementById("claim_rewards").innerHTML = " Claim rewards",
       document.getElementById("rewardquest").innerHTML = " Reward",
       document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart",
       document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst",
       document.getElementById("survive20min_3").innerHTML = "Survive without losing life",
       document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests",
       document.getElementById("dont_hit_5").innerHTML = " Be peaceful",
       document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter",
       document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
       for (var e = 0; e < 7; e++)
           document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
       document.getElementById("quit_chronoquest").innerHTML = " QUIT",
       q[INV.HAND] = ["mão"],
       q[INV.GROUND] = ["terra", "está sujo!"],
       q[INV.SAND] = ["areia", "entrou nos meus olhos!"],
       q[INV.WOOD] = ["madeira", "você não pode pegar o suficiente disso!"],
       q[INV.STONE] = ["pedra", "também chamado rocha"],
       q[INV.GOLD] = ["ouro", "seja generoso, dê para outros"],
       q[INV.DIAMOND] = ["diamante", "o que você irá fazer com isso?"],
       q[INV.AMETHYST] = ["ametista", "é mauve como lapa"],
       q[INV.FLOUR] = ["farinha", "usada na cozinha"],
       q[INV.COOKIE] = ["biscoito", "biscoito da vovó", "comida: 50"],
       q[INV.CAKE] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"],
       q[INV.MEAT] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"],
       q[INV.COOKED_MEAT] = ["carne assada", "um mal passado, por favor", "comida: 35"],
       q[INV.FOODFISH] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"],
       q[INV.FOODFISH_COOKED] = ["peixe assado", "com limão é perfeito", "comida: 35"],
       q[INV.BREAD] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"],
       q[INV.SANDWICH] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"],
       q[INV.CANDY] = ["doces", "apenas para crianças!", "comida: 100"],
       q[INV.SUGAR_CAN] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"],
       q[INV.GARLAND] = ["pisca-pisca", "decoração perfeita de telhado"],
       q[INV.SEED] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"],
       q[INV.PLANT] = ["berry", "Berry saborosa!", "comida: 10"],
       q[INV.WHEAT_SEED] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"],
       q[INV.WILD_WHEAT] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"],
       q[INV.PUMPKIN_SEED] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"],
       q[INV.PUMPKIN] = ["abóbora", "é a lembrança do halloween", "comida: 30"],
       q[INV.GARLIC_SEED] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"],
       q[INV.GARLIC] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"],
       q[INV.THORNBUSH_SEED] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"],
       q[INV.THORNBUSH] = ["mato de espinhos", "pica!"],
       q[INV.PLOT] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"],
       q[INV.ICE] = ["gelo", "útil para fazer bolo e água"],
       q[INV.SPANNER] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"],
       q[INV.FUR_WOLF] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"],
       q[INV.FUR] = ["pele de coelho", "o coelho era tão fofo..."],
       q[INV.SPECIAL_FUR] = ["pele pura", "você é uma fábrica de pão"],
       q[INV.SPECIAL_FUR_2] = ["pele negra", "você está pronto para fazer algo errado"],
       q[INV.FUR_WINTER] = ["pele de inverno", "ele só queria um abraço"],
       q[INV.SCALES] = ["escala", "é pequeno como peixe!"],
       q[INV.KRAKEN_SKIN] = ["pele do kraken", "você não está com medo?"],
       q[INV.FIRE] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"],
       q[INV.BIG_FIRE] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"],
       q[INV.WORKBENCH] = ["mesa de trabalho", "muito útil para fazer todos os objetos"],
       q[INV.CORD] = ["linha", "usada para fazer chapéus e mochila"],
       q[INV.BLUE_CORD] = ["linha de diamante", "usada para fazer chapéus especiais"],
       q[INV.CHEST] = ["baú", "permite que você guarde itens", "durabilidade: 500"],
       q[INV.SWORD_WOOD] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"],
       q[INV.SWORD] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"],
       q[INV.SWORD_GOLD] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"],
       q[INV.SWORD_DIAMOND] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"],
       q[INV.PIRATE_SWORD] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"],
       q[INV.SWORD_AMETHYST] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"],
       q[INV.DRAGON_SWORD] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"],
       q[INV.DRAGON_SPEAR] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"],
       q[INV.PICK_WOOD] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"],
       q[INV.PICK_STONE] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"],
       q[INV.PICK_GOLD] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"],
       q[INV.PICK_DIAMOND] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"],
       q[INV.PICK_AMETHYST] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"],
       q[INV.HAMMER] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"],
       q[INV.HAMMER_GOLD] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"],
       q[INV.HAMMER_DIAMOND] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"],
       q[INV.HAMMER_AMETHYST] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"],
       q[INV.SUPER_HAMMER] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"],
       q[INV.WOOD_SPEAR] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"],
       q[INV.SPEAR] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"],
       q[INV.GOLD_SPEAR] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"],
       q[INV.DIAMOND_SPEAR] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"],
       q[INV.AMETHYST_SPEAR] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"],
       q[INV.SHOVEL] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"],
       q[INV.SHOVEL_GOLD] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"],
       q[INV.SHOVEL_DIAMOND] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"],
       q[INV.SHOVEL_AMETHYST] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"],
       q[INV.WOOD_HELMET] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"],
       q[INV.STONE_HELMET] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"],
       q[INV.GOLD_HELMET] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"],
       q[INV.DIAMOND_HELMET] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"],
       q[INV.AMETHYST_HELMET] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"],
       q[INV.DRAGON_HELMET] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"],
       q[INV.EXPLORER_HAT] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"],
       q[INV.CHRISTMAS_HAT] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"],
       q[INV.ELF_HAT] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"],
       q[INV.HOOD] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"],
       q[INV.EARMUFFS] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"],
       q[INV.COAT] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"],
       q[INV.CAP_SCARF] = ["Chapéu de inverno", "Muito confortável", "Muito quente"],
       q[INV.PEASANT] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"],
       q[INV.WINTER_HOOD] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"],
       q[INV.WINTER_PEASANT] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"],
       q[INV.DIVING_MASK] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"],
       q[INV.SUPER_DIVING_SUIT] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"],
       q[INV.DRAGON_ORB] = ["esfera do dragão", "dado na questt"],
       q[INV.DRAGON_HEART] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"],
       q[INV.GEMME_GREEN] = ["pedra verde", "você não vai trapacear, promete?"],
       q[INV.GEMME_ORANGE] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"],
       q[INV.GEMME_BLUE] = ["pedra azul", "para pessoas muito gentis"],
       q[INV.CROWN_GREEN] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"],
       q[INV.CROWN_ORANGE] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"],
       q[INV.CROWN_BLUE] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"],
       q[INV.BUCKET_FULL] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"],
       q[INV.BUCKET_EMPTY] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"],
       q[INV.BOTTLE_FULL] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"],
       q[INV.BOTTLE_EMPTY] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"],
       q[INV.WATERING_CAN] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"],
       q[INV.WATERING_CAN_FULL] = ["regador", "permite regar as plantas", "dano: 1"],
       q[INV.BAG] = ["mochila", "mais espaço para seus itens!"],
       q[INV.PAPER] = ["papel", "usado para fazer o livro"],
       q[INV.BOOK] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"],
       q[INV.BANDAGE] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"],
       q[INV.LOCK] = ["fechadura", "permite você trancar seu baú"],
       q[INV.LOCKPICK] = ["chave", "permite destrancar um baú"],
       q[INV.TOTEM] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"],
       q[INV.BRIDGE] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"],
       q[INV.SIGN] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"],
       q[INV.ROOF] = ["telhado", "esconde você um pouco e te esquenta!"],
       q[INV.WELL] = ["poço", "permite encher garrafas", "durabilidade: 1000"],
       q[INV.WALL] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"],
       q[INV.STONE_WALL] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"],
       q[INV.GOLD_WALL] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"],
       q[INV.DIAMOND_WALL] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"],
       q[INV.AMETHYST_WALL] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"],
       q[INV.SPIKE] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"],
       q[INV.STONE_SPIKE] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"],
       q[INV.GOLD_SPIKE] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"],
       q[INV.DIAMOND_SPIKE] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"],
       q[INV.AMETHYST_SPIKE] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"],
       q[INV.WOOD_DOOR] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"],
       q[INV.STONE_DOOR] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"],
       q[INV.GOLD_DOOR] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"],
       q[INV.DIAMOND_DOOR] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"],
       q[INV.AMETHYST_DOOR] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"],
       q[INV.FURNACE] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"],
       q[INV.WINDMILL] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"],
       q[INV.BREAD_OVEN] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"],
       q[INV.RESURRECTION] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"],
       q[TEXT.YOU_CANNOT_JOIN] = "você não pode entrar no servidor",
       q[TEXT.KICKED] = "kickado: ",
       q[TEXT.KEY_ALREADY] = "sua chave está em uso por outra pessoa",
       q[TEXT.KEY_WRONG] = "sua chave está errada",
       q[TEXT.OLD_VERSION] = "você tem uma versão velha, limpe seu cache",
       q[TEXT.NO_MORE_RESOURCES] = "não tem mais recursos",
       q[TEXT.SURVIVED_1DAY] = "você sobreviveu 1 dia",
       q[TEXT.SURVIVED] = "você sobreviveu ",
       q[TEXT.DAYS] = " dias",
       q[TEXT.DEAD_SAD] = "você está morto ;-;",
       q[TEXT.SPAM_ME] = "servidor não pôde achar um local de spawn! spam o botão de play!",
       q[TEXT.SPAM_ME2] = "servidor está cheio! spam o botão de play!",
       q[TEXT.EMPTY] = "não tem recursos",
       q[TEXT.INV_FULL] = "inventário está cheio (botão direito para deletar itens)",
       q[TEXT.DEAD] = " está morto",
       q[TEXT.WRONG_TOOL] = "essa não é a ferramenta certa",
       q[TEXT.JOIN_TEAM] = "você entrou no time",
       q[TEXT.YOU_DEAD] = "você está morto",
       q[TEXT.JOINED_TEAM] = "entrou no time",
       q[TEXT.TEAM_DESTROYED] = "seu time foi destruido",
       q[TEXT.LEFT_TEAM] = "você saiu do time",
       q[TEXT.LEFT_TEAM2] = " saiu do time",
       q[TEXT.TOKEN] = "alguém roubou sua ficha :>",
       q[TEXT.CHOOSE] = "escolha um servidor",
       q[TEXT.PLAYERS] = "jogadores",
       q[TEXT.TOTAL_PLAYERS] = "jogadores totais",
       q[TEXT.TOTAL_MODE] = "jogadores nesse modo",
       q[TEXT.COMMING_SOON] = "Coming soon...",
       document.getElementById("nickname_input").placeholder = "Apelido",
       Q[0] = ["você morreu sem motivo"],
       Q[1] = ["você morreu de fome, como o jogo diz"],
       Q[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."],
       Q[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."],
       Q[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."],
       Q[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."],
       Q[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."],
       Q[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"],
       Q[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."],
       Q[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."],
       Q[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."],
       Q[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."],
       Q[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."],
       Q[13] = ["você morreu de sede. melhor beber sua própria urina."],
       Q[14] = ["você sabia que você morre afogado? agora você sabe."],
       Q[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."],
       Q[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."],
       Q[17] = ["sua pele caindo aos pedaços, o sol te matou."],
       Q[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."],
       Q[19] = ["como vampiro, não chegue perto do alho."],
       Q[20] = ["você comeu alho como vampiro, o que você esperava?"],
       Q[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."],
       ZOMBIE_GRUMBLE = "Uuunnnggg",
       ZOMBIE_GRUMBLES = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"]
   }, J = function() {
       q[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"],
       Q[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."],
       q[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"],
       q[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME",
       q[TEXT.TWITTER] = " Share on Twitter",
       q[TEXT.FACEBOOK] = " Share on Facebook",
       q[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points",
       q[TEXT.POINTS] = "points",
       q[TEXT.SCORE] = "Score",
       q[TEXT.KILL] = "Kill",
       q[TEXT.DAYS_SURVIVED] = "Days survived",
       q[TEXT.MODE_FREE] = "Building method: Free. Press G to change",
       q[TEXT.MODE_GRID] = "Building method: Grid. Press G to change",
       q[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"],
       q[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"],
       q[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"],
       q[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"],
       document.getElementById("typequest").innerHTML = "Chrono Quests",
       document.getElementById("timeremainingquest").innerHTML = "Time Remaining",
       document.getElementById("constraintquest").innerHTML = " Constraints",
       document.getElementById("claim_rewards").innerHTML = " Claim rewards",
       document.getElementById("rewardquest").innerHTML = " Reward",
       document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart",
       document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst",
       document.getElementById("survive20min_3").innerHTML = "Survive without losing life",
       document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests",
       document.getElementById("dont_hit_5").innerHTML = " Be peaceful",
       document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter",
       document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
       for (var e = 0; e < 7; e++)
           document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
       document.getElementById("quit_chronoquest").innerHTML = " QUIT",
       q[INV.HAND] = ["Hand"],
       q[INV.GROUND] = ["Boden", "Dreckig!"],
       q[INV.SAND] = ["Sand", "Ich habe es in meine Augen bekommen!"],
       q[INV.WOOD] = ["Holz", "Du kannst niemals zu viel haben!"],
       q[INV.STONE] = ["Stein", "Auch Fels gennant"],
       q[INV.GOLD] = ["Gold", "Sei großzügig, gib anderen etwas ab "],
       q[INV.DIAMOND] = ["Diamant", "Was wirst du daraus machen?"],
       q[INV.AMETHYST] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"],
       q[INV.FLOUR] = ["Mehl", "wird fürs Backen gebraucht"],
       q[INV.COOKIE] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"],
       q[INV.CAKE] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"],
       q[INV.MEAT] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"],
       q[INV.COOKED_MEAT] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"],
       q[INV.FOODFISH] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"],
       q[INV.FOODFISH_COOKED] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"],
       q[INV.BREAD] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"],
       q[INV.SANDWICH] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"],
       q[INV.CANDY] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"],
       q[INV.SUGAR_CAN] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"],
       q[INV.GARLAND] = ["Girlande", "perfekter Schmuck für Dächer"],
       q[INV.SEED] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"],
       q[INV.PLANT] = ["Beere", "Beeren lecker!", "Essen: 10"],
       q[INV.WHEAT_SEED] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"],
       q[INV.WILD_WHEAT] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"],
       q[INV.PUMPKIN_SEED] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"],
       q[INV.PUMPKIN] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"],
       q[INV.GARLIC_SEED] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"],
       q[INV.GARLIC] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"],
       q[INV.THORNBUSH_SEED] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"],
       q[INV.THORNBUSH] = ["Dornenbusch", "Es sticht!"],
       q[INV.PLOT] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"],
       q[INV.ICE] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"],
       q[INV.SPANNER] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"],
       q[INV.FUR_WOLF] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"],
       q[INV.FUR] = ["Hasenfell", "Der Hase war so süß..."],
       q[INV.SPECIAL_FUR] = ["Klares Fell", "Du bist eine Brotfabrik"],
       q[INV.SPECIAL_FUR_2] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"],
       q[INV.FUR_WINTER] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."],
       q[INV.SCALES] = ["Schuppen", "Es riecht wie Fisch!"],
       q[INV.KRAKEN_SKIN] = ["Kraken Haut", "Warst du nicht zu ängstlich?"],
       q[INV.FIRE] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"],
       q[INV.BIG_FIRE] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"],
       q[INV.WORKBENCH] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"],
       q[INV.CORD] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "],
       q[INV.BLUE_CORD] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"],
       q[INV.CHEST] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"],
       q[INV.SWORD_WOOD] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"],
       q[INV.SWORD] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"],
       q[INV.SWORD_GOLD] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"],
       q[INV.SWORD_DIAMOND] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"],
       q[INV.PIRATE_SWORD] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"],
       q[INV.SWORD_AMETHYST] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"],
       q[INV.DRAGON_SWORD] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"],
       q[INV.DRAGON_SPEAR] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"],
       q[INV.PICK_WOOD] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"],
       q[INV.PICK] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"],
       q[INV.PICK_GOLD] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"],
       q[INV.PICK_DIAMOND] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"],
       q[INV.PICK_AMETHYST] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"],
       q[INV.HAMMER] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"],
       q[INV.HAMMER_GOLD] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"],
       q[INV.HAMMER_DIAMOND] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"],
       q[INV.HAMMER_AMETHYST] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"],
       q[INV.SUPER_HAMMER] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"],
       q[INV.WOOD_SPEAR] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"],
       q[INV.SPEAR] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"],
       q[INV.GOLD_SPEAR] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"],
       q[INV.DIAMOND_SPEAR] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"],
       q[INV.AMETHYST_SPEAR] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"],
       q[INV.SHOVEL] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"],
       q[INV.SHOVEL_GOLD] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"],
       q[INV.SHOVEL_DIAMOND] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"],
       q[INV.SHOVEL_AMETHYST] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"],
       q[INV.WOOD_HELMET] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"],
       q[INV.STONE_HELMET] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"],
       q[INV.GOLD_HELMET] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"],
       q[INV.DIAMOND_HELMET] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"],
       q[INV.AMETHYST_HELMET] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"],
       q[INV.DRAGON_HELMET] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"],
       q[INV.EXPLORER_HAT] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"],
       q[INV.CHRISTMAS_HAT] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"],
       q[INV.ELF_HAT] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"],
       q[INV.HOOD] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"],
       q[INV.EARMUFFS] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"],
       q[INV.COAT] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"],
       q[INV.CAP_SCARF] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"],
       q[INV.PEASANT] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"],
       q[INV.WINTER_HOOD] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"],
       q[INV.WINTER_PEASANT] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"],
       q[INV.DIVING_MASK] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"],
       q[INV.SUPER_DIVING_SUIT] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"],
       q[INV.DRAGON_ORB] = ["Drachenkugel", "Erhalten bei abschließung der Quest"],
       q[INV.DRAGON_HEART] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."],
       q[INV.GEMME_GREEN] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"],
       q[INV.GEMME_ORANGE] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"],
       q[INV.GEMME_BLUE] = ["Blauer Edelstein", "Für sehr nette Leute"],
       q[INV.CROWN_GREEN] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"],
       q[INV.CROWN_ORANGE] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"],
       q[INV.CROWN_BLUE] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"],
       q[INV.BUCKET_FULL] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"],
       q[INV.BUCKET_EMPTY] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"],
       q[INV.BOTTLE_FULL] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"],
       q[INV.BOTTLE_EMPTY] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"],
       q[INV.WATERING_CAN] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"],
       q[INV.WATERING_CAN_FULL] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"],
       q[INV.BAG] = ["Rucksack", "Mehr Platz im Inventar!"],
       q[INV.PAPER] = ["Papier", "Wird fürs Büchermachen verwendet"],
       q[INV.BOOK] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"],
       q[INV.BANDAGE] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"],
       q[INV.LOCK] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"],
       q[INV.LOCKPICK] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"],
       q[INV.TOTEM] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"],
       q[INV.BRIDGE] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"],
       q[INV.SIGN] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"],
       q[INV.ROOF] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"],
       q[INV.WELL] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"],
       q[INV.WALL] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"],
       q[INV.STONE_WALL] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"],
       q[INV.GOLD_WALL] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"],
       q[INV.DIAMOND_WALL] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"],
       q[INV.AMETHYST_WALL] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"],
       q[INV.SPIKE] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"],
       q[INV.STONE_SPIKE] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"],
       q[INV.GOLD_SPIKE] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"],
       q[INV.DIAMOND_SPIKE] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"],
       q[INV.AMETHYST_SPIKE] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"],
       q[INV.WOOD_DOOR] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"],
       q[INV.STONE_DOOR] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"],
       q[INV.GOLD_DOOR] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"],
       q[INV.DIAMOND_DOOR] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"],
       q[INV.AMETHYST_DOOR] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"],
       q[INV.FURNACE] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"],
       q[INV.WINDMILL] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"],
       q[INV.BREAD_OVEN] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"],
       q[INV.RESURRECTION] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"],
       q[TEXT.YOU_CANNOT_JOIN] = "Du kannst diesem Server nicht beitreten",
       q[TEXT.KICKED] = "Gekickt: ",
       q[TEXT.KEY_ALREADY] = "Dein Schlüssel wurde bereits von jemand anderem benutzt",
       q[TEXT.KEY_WRONG] = "Dein Schlüssel ist falsch",
       q[TEXT.OLD_VERSION] = "Deine Version ist veraltet, säubere dein Cache",
       q[TEXT.NO_MORE_RESOURCES] = "Es gibt keine neuen Ressourcen",
       q[TEXT.SURVIVED_1DAY] = "Du hast einen Tag überlebt",
       q[TEXT.SURVIVED] = "Du hast überlebt ",
       q[TEXT.DAYS] = " Tage",
       q[TEXT.DEAD_SAD] = "Du bist gestorben ;-;",
       q[TEXT.SPAM_ME] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!",
       q[TEXT.SPAM_ME2] = "Server ist voll! Drücke immer wieder auf spielen!",
       q[TEXT.EMPTY] = "Ressource ist leer",
       q[TEXT.INV_FULL] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)",
       q[TEXT.DEAD] = " ist gestorben",
       q[TEXT.WRONG_TOOL] = "Das ist nicht das richtige Werkzeug",
       q[TEXT.JOIN_TEAM] = "Du bist einem Team beigetreten",
       q[TEXT.YOU_DEAD] = "Du bist gestorben",
       q[TEXT.JOINED_TEAM] = " ist dem Team beigetreten",
       q[TEXT.TEAM_DESTROYED] = "Dein Team wurde zerstört",
       q[TEXT.LEFT_TEAM] = "Du hast das Team verlassen",
       q[TEXT.LEFT_TEAM2] = " hat das Team verlassen",
       q[TEXT.TOKEN] = "Jemand hat dein Token gestohlen :>",
       q[TEXT.CHOOSE] = "Suche dir ein Server aus",
       q[TEXT.PLAYERS] = "Spieler",
       q[TEXT.TOTAL_PLAYERS] = "alle Spieler",
       q[TEXT.TOTAL_MODE] = "Spieler in diesem Modus",
       q[TEXT.COMMING_SOON] = "Bald verfügbar...",
       document.getElementById("nickname_input").placeholder = "Spitzname",
       Q[0] = ["Du wurdest ohne Grund getötet"],
       Q[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"],
       Q[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."],
       Q[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."],
       Q[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."],
       Q[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."],
       Q[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."],
       Q[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"],
       Q[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."],
       Q[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."],
       Q[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."],
       Q[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."],
       Q[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."],
       Q[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."],
       Q[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."],
       Q[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."],
       Q[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."],
       Q[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."],
       Q[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "],
       Q[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."],
       Q[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"],
       Q[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."],
       ZOMBIE_GRUMBLE = "Uuunnnggg",
       ZOMBIE_GRUMBLES = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"]
   }, X = function() {
       q[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"],
       Q[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."],
       q[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"],
       q[TEXT.BACK_TO_THE_GAME] = " RETOUR AU JEU",
       q[TEXT.TWITTER] = " Partage sur Twitter",
       q[TEXT.FACEBOOK] = " Partage sur Facebook",
       q[TEXT.KIT_NEXT] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points",
       q[TEXT.POINTS] = "points",
       q[TEXT.SCORE] = "Score",
       q[TEXT.KILL] = "Tués",
       q[TEXT.DAYS_SURVIVED] = "Jours survécus",
       q[TEXT.MODE_FREE] = "Mode de construction: Libre. Appuie sur G pour changer",
       q[TEXT.MODE_GRID] = "Mode de construction: Grille. Appuie sur G pour changer",
       q[INV.CRAB_LOOT] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"],
       q[INV.CRAB_SPEAR] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"],
       q[INV.CROWN_CRAB] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"],
       q[INV.BED] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"],
       document.getElementById("typequest").innerHTML = "Chrono Quêtes",
       document.getElementById("timeremainingquest").innerHTML = "Temps Restant",
       document.getElementById("constraintquest").innerHTML = " Contraintes",
       document.getElementById("claim_rewards").innerHTML = " Résultat",
       document.getElementById("rewardquest").innerHTML = " Récompenses",
       document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave",
       document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste",
       document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie",
       document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor",
       document.getElementById("dont_hit_5").innerHTML = " Sois pacifique",
       document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière",
       document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
       for (var e = 0; e < 7; e++)
           document.getElementById("claim_reward_" + e).innerHTML = "RÉCOMPENSE!";
       document.getElementById("quit_chronoquest").innerHTML = " QUITTER",
       q[INV.HAND] = ["Main"],
       q[INV.GROUND] = ["Terre", "C'est sale!"],
       q[INV.SAND] = ["Sable", "J'en ai dans les yeux"],
       q[INV.WOOD] = ["Bois", "Tu n'en auras jamais trop!"],
       q[INV.STONE] = ["Pierre", "Aussi appelée roche"],
       q[INV.GOLD] = ["Or", "Sois généreux, donne en aux autres"],
       q[INV.DIAMOND] = ["Diamant", "Comme tes yeux! wesh"],
       q[INV.AMETHYST] = ["Améthyste", "C'est Mauve comme Lapa"],
       q[INV.FLOUR] = ["Farine", "Utile pour la cuisine"],
       q[INV.COOKIE] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"],
       q[INV.CAKE] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"],
       q[INV.MEAT] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"],
       q[INV.COOKED_MEAT] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"],
       q[INV.FOODFISH] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"],
       q[INV.FOODFISH_COOKED] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"],
       q[INV.BREAD] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"],
       q[INV.SANDWICH] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"],
       q[INV.CANDY] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"],
       q[INV.SUGAR_CAN] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"],
       q[INV.GARLAND] = ["Guirlandes", "Utilisable sur les toits"],
       q[INV.SEED] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"],
       q[INV.PLANT] = ["Baies", "Peu nourrissant", "Nourriture: 10"],
       q[INV.WHEAT_SEED] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"],
       q[INV.WILD_WHEAT] = ["Blé", "Peut être transformé en farine dans les moulins"],
       q[INV.PUMPKIN_SEED] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"],
       q[INV.PUMPKIN] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"],
       q[INV.GARLIC_SEED] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"],
       q[INV.GARLIC] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"],
       q[INV.THORNBUSH_SEED] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"],
       q[INV.THORNBUSH] = ["Ronces", "Ça pique!"],
       q[INV.PLOT] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"],
       q[INV.ICE] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"],
       q[INV.SPANNER] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"],
       q[INV.FUR_WOLF] = ["Peau de loup", "Il était où le gentil ti Youki?"],
       q[INV.FUR] = ["Peau de lapin", "Vous êtes un monstre"],
       q[INV.SPECIAL_FUR] = ["Fourrure blanche", "Tu es une usine à pain"],
       q[INV.SPECIAL_FUR_2] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"],
       q[INV.FUR_WINTER] = ["Fourrure d'hiver", "Il voulait juste un calin"],
       q[INV.SCALES] = ["Écailles", "Ça sent le poisson!"],
       q[INV.KRAKEN_SKIN] = ["Peau du kraken", "Tu n'as pas eu trop peur?"],
       q[INV.FIRE] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"],
       q[INV.BIG_FIRE] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"],
       q[INV.WORKBENCH] = ["Établi", "Utile pour fabriquer toute sorte d'objets"],
       q[INV.CORD] = ["Fil", "Utile pour faire des chapeaux et un sac"],
       q[INV.BLUE_CORD] = ["Fil de diamant", "Utile pour faire des chapeaux"],
       q[INV.CHEST] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"],
       q[INV.SWORD_WOOD] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"],
       q[INV.SWORD] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"],
       q[INV.SWORD_GOLD] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"],
       q[INV.SWORD_DIAMOND] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"],
       q[INV.PIRATE_SWORD] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"],
       q[INV.SWORD_AMETHYST] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"],
       q[INV.DRAGON_SWORD] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"],
       q[INV.DRAGON_SPEAR] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"],
       q[INV.PICK_WOOD] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"],
       q[INV.PICK] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"],
       q[INV.PICK_GOLD] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"],
       q[INV.PICK_DIAMOND] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"],
       q[INV.PICK_AMETHYST] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"],
       q[INV.HAMMER] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"],
       q[INV.HAMMER_GOLD] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"],
       q[INV.HAMMER_DIAMOND] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"],
       q[INV.HAMMER_AMETHYST] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"],
       q[INV.SUPER_HAMMER] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"],
       q[INV.WOOD_SPEAR] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"],
       q[INV.SPEAR] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"],
       q[INV.GOLD_SPEAR] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"],
       q[INV.DIAMOND_SPEAR] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"],
       q[INV.AMETHYST_SPEAR] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"],
       q[INV.SHOVEL] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"],
       q[INV.SHOVEL_GOLD] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"],
       q[INV.SHOVEL_DIAMOND] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"],
       q[INV.SHOVEL_AMETHYST] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"],
       q[INV.WOOD_HELMET] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"],
       q[INV.STONE_HELMET] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"],
       q[INV.GOLD_HELMET] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"],
       q[INV.DIAMOND_HELMET] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"],
       q[INV.AMETHYST_HELMET] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"],
       q[INV.DRAGON_HELMET] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"],
       q[INV.EXPLORER_HAT] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"],
       q[INV.CHRISTMAS_HAT] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"],
       q[INV.ELF_HAT] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"],
       q[INV.HOOD] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"],
       q[INV.EARMUFFS] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"],
       q[INV.COAT] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"],
       q[INV.CAP_SCARF] = ["Bonnet d'hiver", "Très confortable", "Très chaud"],
       q[INV.PEASANT] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"],
       q[INV.WINTER_HOOD] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"],
       q[INV.WINTER_PEASANT] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"],
       q[INV.DIVING_MASK] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"],
       q[INV.SUPER_DIVING_SUIT] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"],
       q[INV.DRAGON_ORB] = ["Orbe du Dragon", "Donné en Quête"],
       q[INV.DRAGON_HEART] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"],
       q[INV.GEMME_GREEN] = ["Gemme verte", "Tu n'as pas triché, promis?"],
       q[INV.GEMME_ORANGE] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"],
       q[INV.GEMME_BLUE] = ["Gemme bleue", "Pour les gens trop gentils"],
       q[INV.CROWN_GREEN] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"],
       q[INV.CROWN_ORANGE] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"],
       q[INV.CROWN_BLUE] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"],
       q[INV.BUCKET_FULL] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"],
       q[INV.BUCKET_EMPTY] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"],
       q[INV.BOTTLE_FULL] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"],
       q[INV.BOTTLE_EMPTY] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"],
       q[INV.WATERING_CAN] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"],
       q[INV.WATERING_CAN_FULL] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"],
       q[INV.BAG] = ["Sac", "Plus de place dans ton inventaire!"],
       q[INV.PAPER] = ["Papier", "Pour fabriquer toute sorte d'objets"],
       q[INV.BOOK] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"],
       q[INV.BANDAGE] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"],
       q[INV.LOCK] = ["Cadenas", "Pour verrouiller un coffre"],
       q[INV.LOCKPICK] = ["Clé", "Pour déverrouiller un coffre"],
       q[INV.TOTEM] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"],
       q[INV.BRIDGE] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"],
       q[INV.SIGN] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"],
       q[INV.ROOF] = ["Toit", "Te cache un peu et te réchauffe"],
       q[INV.WELL] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"],
       q[INV.WALL] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"],
       q[INV.STONE_WALL] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"],
       q[INV.GOLD_WALL] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"],
       q[INV.DIAMOND_WALL] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"],
       q[INV.AMETHYST_WALL] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"],
       q[INV.SPIKE] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"],
       q[INV.STONE_SPIKE] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"],
       q[INV.GOLD_SPIKE] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"],
       q[INV.DIAMOND_SPIKE] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"],
       q[INV.AMETHYST_SPIKE] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"],
       q[INV.WOOD_DOOR] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"],
       q[INV.STONE_DOOR] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"],
       q[INV.GOLD_DOOR] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"],
       q[INV.DIAMOND_DOOR] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"],
       q[INV.AMETHYST_DOOR] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"],
       q[INV.FURNACE] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"],
       q[INV.WINDMILL] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"],
       q[INV.BREAD_OVEN] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"],
       q[INV.RESURRECTION] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"],
       q[TEXT.YOU_CANNOT_JOIN] = "Tu ne peux pas rejoindre le serveur",
       q[TEXT.KICKED] = "Expulsé: ",
       q[TEXT.KEY_ALREADY] = "Ta clé est déjà utilisée par quelqu'un d'autre",
       q[TEXT.KEY_WRONG] = "Ta clé est fausse",
       q[TEXT.OLD_VERSION] = "Tu as une vieille version, rafraichis tes caches",
       q[TEXT.NO_MORE_RESOURCES] = "Il n'y a plus de nouvelles ressources",
       q[TEXT.SURVIVED_1DAY] = "Tu as survécu 1 jour",
       q[TEXT.SURVIVED] = "Tu as survécu ",
       q[TEXT.DAYS] = " jours",
       q[TEXT.DEAD_SAD] = "Tu es mort ;-;",
       q[TEXT.SPAM_ME] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!",
       q[TEXT.SPAM_ME2] = "Le serveur est complet! Spam le bouton jouer",
       q[TEXT.EMPTY] = "Cette ressource est vide",
       q[TEXT.INV_FULL] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)",
       q[TEXT.DEAD] = " est mort",
       q[TEXT.WRONG_TOOL] = "Ce n'est pas le bon outil",
       q[TEXT.JOIN_TEAM] = "Tu as rejoins une équipe",
       q[TEXT.YOU_DEAD] = "Tu es mort",
       q[TEXT.JOINED_TEAM] = " a rejoint l'équipe",
       q[TEXT.TEAM_DESTROYED] = "Ton équipe a été détruite",
       q[TEXT.LEFT_TEAM] = "Tu as quitté l'équipe",
       q[TEXT.LEFT_TEAM2] = " a quitté l'équipe",
       q[TEXT.TOKEN] = "Quelqu'un a volé ton token :>",
       q[TEXT.CHOOSE] = "Choisis un serveur",
       q[TEXT.PLAYERS] = "joueurs",
       q[TEXT.TOTAL_PLAYERS] = "joueurs",
       q[TEXT.TOTAL_MODE] = "joueurs dans ce mode",
       q[TEXT.COMMING_SOON] = "Bientôt...",
       document.getElementById("nickname_input").placeholder = "Surnom",
       Q[0] = ["Tu as été tué sans raison particulière, juste comme ça"],
       Q[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"],
       Q[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"],
       Q[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"],
       Q[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"],
       Q[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."],
       Q[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."],
       Q[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"],
       Q[8] = ["Cet ours voulait juste un câlin."],
       Q[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."],
       Q[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"],
       Q[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."],
       Q[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."],
       Q[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"],
       Q[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"],
       Q[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."],
       Q[16] = ["Un kraken a 'kraké' tes os."],
       Q[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."],
       Q[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."],
       Q[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."],
       Q[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"],
       Q[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."],
       ZOMBIE_GRUMBLE = "Uuunnnggg",
       ZOMBIE_GRUMBLES = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"]
   }, q = [], Z = 0; Z < COUNTER; Z++)
       q[Z] = "";
   var Q = [];
   $(".md-languages").on("click", (function() {
       $(this).toggleClass("active")
   }
   )),
   $(".md-languages ul li").on("click", (function() {
       var e = $(this).text();
       "English" === e ? W() : "Français" === e ? X() : "Deutsch" === e ? J() : "Español" === e ? U() : "Português" === e ? F() : "Русский" === e ? Y() : "Polski" === e && k(),
       INFO_BOX = [],
       kI.craft.label = [],
       $(".md-languages ul li").removeClass("active"),
       $(this).addClass("active"),
       $(".md-languages label button").text(e)
   }
   ));
   D = "EN";
   var ee, ie = navigator.language || navigator.userLanguage;
   switch (ie) {
   case "ru":
       D = "RU";
       break;
   case "en":
       D = "EN";
       break;
   case "es":
       D = "SP";
       break;
   case "fr":
       D = "FR";
       break;
   case "pl":
       D = "PL";
       break;
   case "de":
       D = "DE";
       break;
   case "pt":
       D = "PT"
   }
   for (var Z in "FR" === D ? ($(".md-languages label button").text("Français"),
   ee = X) : "PL" === D ? ($(".md-languages label button").text("Polski"),
   ee = k) : "PT" === D ? ($(".md-languages label button").text("Português"),
   ee = F) : "SP" === D ? ($(".md-languages label button").text("Español"),
   ee = U) : "RU" === D ? ($(".md-languages label button").text("Русский"),
   ee = Y) : "DE" === D ? ($(".md-languages label button").text("Deutsch"),
   ee = J) : ($(".md-languages label button").text("English"),
   ee = W),
   IMAGES = {
       LOGO: "img/logo.png",
       BIGDAY: "img/mapday.png",
       BIGNIGHT: "img/mapnight.png",
       BIGZDAY: "img/bigzday.png",
       BIGZNIGHT: "img/bigznight.png",
       MAPDAY_RIVER: "img/bigday-river1.png",
       MAPDAY_LAKE: "img/bigday-lake.png",
       MAPDAY_BERRY: "img/bigday-berry.png",
       MAPDAY_STONE1: "img/bigday-stone1.png",
       MAPDAY_STONE2: "img/bigday-stone2.png",
       MAPDAY_GOLD1: "img/bigday-gold1.png",
       MAPDAY_GOLD2: "img/bigday-gold2.png",
       MAPDAY_EMERALD1: "img/bigday-emerald1.png",
       MAPDAY_EMERALD2: "img/bigday-emerald2.png",
       MAPDAY_AMETHYST: "img/bigday-amethyst.png",
       MAPDAY_BEAR: "img/bigday-bear.png",
       MAPDAY_CAVE: "img/bigday-cave.png",
       MAPDAY_DIAMOND: "img/bigday-diamond.png",
       MAPDAY_ISLAND: "img/bigday-island.png",
       MAPDAY_REIDITE: "img/bigday-reidite.png",
       MAPDAY_SPIDER: "img/bigday-spider.png",
       MAPDAY_WOLF: "img/bigday-wolf.png",
       MAPDAY_FIR_TREE: "img/bigday-fir-tree.png",
       MAPDAY_FOX: "img/bigday-fox.png",
       MAPDAY_KRAKEN: "img/bigday-kraken.png",
       MAPDAY_PIRANHA: "img/bigday-piranha.png",
       MAPDAY_CACTUS: "img/bigday-cactus.png",
       MAPDAY_MAGMA: "img/bigday-magma.png",
       MAPNIGHT_RIVER: "img/bigday-river1.png",
       MAPNIGHT_LAKE: "img/bignight-lake.png",
       MAPNIGHT_BERRY: "img/bignight-berry.png",
       MAPNIGHT_STONE1: "img/bignight-stone1.png",
       MAPNIGHT_STONE2: "img/bignight-stone2.png",
       MAPNIGHT_GOLD1: "img/bignight-gold1.png",
       MAPNIGHT_GOLD2: "img/bignight-gold2.png",
       MAPNIGHT_EMERALD1: "img/bignight-emerald1.png",
       MAPNIGHT_EMERALD2: "img/bignight-emerald2.png",
       MAPNIGHT_AMETHYST: "img/bignight-amethyst.png",
       MAPNIGHT_BEAR: "img/bignight-bear.png",
       MAPNIGHT_CAVE: "img/bignight-cave.png",
       MAPNIGHT_DIAMOND: "img/bignight-diamond.png",
       MAPNIGHT_ISLAND: "img/bignight-island.png",
       MAPNIGHT_REIDITE: "img/bignight-reidite.png",
       MAPNIGHT_SPIDER: "img/bignight-spider.png",
       MAPNIGHT_WOLF: "img/bignight-wolf.png",
       MAPNIGHT_FIR_TREE: "img/bignight-fir-tree.png",
       MAPNIGHT_FOX: "img/bignight-fox.png",
       MAPNIGHT_KRAKEN: "img/bignight-kraken.png",
       MAPNIGHT_PIRANHA: "img/bignight-piranha.png",
       MAPNIGHT_CACTUS: "img/bignight-cactus.png",
       MAPNIGHT_MAGMA: "img/bignight-magma.png",
       MAPDAY_DESERT: "img/bigday-desert.png",
       MAPDAY_WINTER: "img/bigday-winter.png",
       MAPDAY_LAVA: "img/bigday-lava.png",
       MAPDAY_FOREST: "img/bigday-forest.png",
       MAPNIGHT_DESERT: "img/bignight-desert.png",
       MAPNIGHT_WINTER: "img/bignight-winter.png",
       MAPNIGHT_LAVA: "img/bignight-lava.png",
       MAPNIGHT_FOREST: "img/bignight-forest.png",
       RIVER_WAVED: "img/day-river-wave.png",
       RIVER_WAVEN: "img/night-river-wave.png",
       FOG0D: "img/day-fog0.png",
       FOG1D: "img/day-fog1.png",
       FOG2D: "img/day-fog2.png",
       FOG0N: "img/night-fog0.png",
       FOG1N: "img/night-fog1.png",
       FOG2N: "img/night-fog2.png",
       FOD0D: "img/day-fogdesert0.png",
       FOD1D: "img/day-fogdesert1.png",
       FOD2D: "img/day-fogdesert2.png",
       FOD0N: "img/night-fogdesert0.png",
       FOD1N: "img/night-fogdesert1.png",
       FOD2N: "img/night-fogdesert2.png",
       MARKER0D: "img/day-cross-server.png",
       MARKER1D: "img/day-here-server.png",
       MARKER2D: "img/day-finish-server.png",
       MARKER3D: "img/day-item-server.png",
       MARKER0N: "img/night-cross-server.png",
       MARKER1N: "img/night-here-server.png",
       MARKER2N: "img/night-finish-server.png",
       MARKER3N: "img/night-item-server.png",
       REIDITE0D: "img/day-reidite0.png",
       REIDITE0N: "img/night-reidite0.png",
       REIDITE1D: "img/day-reidite1.png",
       REIDITE1N: "img/night-reidite1.png",
       REIDITE2D: "img/day-reidite2.png",
       REIDITE2N: "img/night-reidite2.png",
       MAGMA1D: "img/day-lava1.png",
       MAGMA1N: "img/night-lava1.png",
       MAGMA2D: "img/day-lava2.png",
       MAGMA2N: "img/night-lava2.png",
       MAGMA3D: "img/day-lava3.png",
       MAGMA3N: "img/night-lava3.png",
       MAGMA4D: "img/day-lava4.png",
       MAGMA4N: "img/night-lava4.png",
       MAGMA5D: "img/day-lava5.png",
       MAGMA5N: "img/night-lava5.png",
       MAGMA6D: "img/day-lava6.png",
       MAGMA6N: "img/night-lava6.png",
       LAVA_GROUND1D: "img/day-lava-ground1.png",
       LAVA_GROUND1N: "img/night-lava-ground1.png",
       LAVA_GROUND2D: "img/day-lava-ground2.png",
       LAVA_GROUND2N: "img/night-lava-ground2.png",
       LAVA_GROUND3D: "img/day-lava-ground3.png",
       LAVA_GROUND3N: "img/night-lava-ground3.png",
       LAVA_GROUND4D: "img/day-lava-ground4.png",
       LAVA_GROUND4N: "img/night-lava-ground4.png",
       LAVA_GROUND5D: "img/day-lava-ground5.png",
       LAVA_GROUND5N: "img/night-lava-ground5.png",
       LAVA_GROUND6D: "img/day-lava-ground6.png",
       LAVA_GROUND6N: "img/night-lava-ground6.png",
       FIRE_MOBD: "img/day-fire-mob.png",
       FIRE_MOBN: "img/night-fire-mob.png",
       FIRE_MOB_HURT: "img/hurt-fire-mob.png",
       DIAMOND_PROTECTIOND: "img/day-diamond-protection.png",
       DIAMOND_PROTECTIONN: "img/night-diamond-protection.png",
       HAND_DIAMOND_PROTECTIOND: "img/day-hand-diamond-protection.png",
       HAND_DIAMOND_PROTECTIONN: "img/night-hand-diamond-protection.png",
       INV_DIAMOND_PROTECTION_OUT: "img/inv-diamond-protection-out.png",
       INV_DIAMOND_PROTECTION_IN: "img/inv-diamond-protection-in.png",
       INV_DIAMOND_PROTECTION_CLICK: "img/inv-diamond-protection-click.png",
       AMETHYST_PROTECTIOND: "img/day-amethyst-protection.png",
       AMETHYST_PROTECTIONN: "img/night-amethyst-protection.png",
       HAND_AMETHYST_PROTECTIOND: "img/day-hand-amethyst-protection.png",
       HAND_AMETHYST_PROTECTIONN: "img/night-hand-amethyst-protection.png",
       INV_AMETHYST_PROTECTION_OUT: "img/inv-amethyst-protection-out.png",
       INV_AMETHYST_PROTECTION_IN: "img/inv-amethyst-protection-in.png",
       INV_AMETHYST_PROTECTION_CLICK: "img/inv-amethyst-protection-click.png",
       REIDITE_SWORDD: "img/day-reidite-sword.png",
       REIDITE_SWORDN: "img/night-reidite-sword.png",
       INV_REIDITE_SWORD_OUT: "img/inv-reidite-sword-out.png",
       INV_REIDITE_SWORD_IN: "img/inv-reidite-sword-in.png",
       INV_REIDITE_SWORD_CLICK: "img/inv-reidite-sword-click.png",
       INV_REIDITE_OUT: "img/inv-reidite-out.png",
       INV_REIDITE_IN: "img/inv-reidite-in.png",
       INV_REIDITE_CLICK: "img/inv-reidite-click.png",
       INV_FLAME_OUT: "img/inv-flame-out.png",
       INV_FLAME_IN: "img/inv-flame-in.png",
       INV_FLAME_CLICK: "img/inv-flame-click.png",
       LAVA_BUBLE0D: "img/day-magma-buble0.png",
       LAVA_BUBLE0N: "img/night-magma-buble0.png",
       LAVA_BUBLE1D: "img/day-magma-buble1.png",
       LAVA_BUBLE1N: "img/night-magma-buble1.png",
       LAVA_BUBLE2D: "img/day-magma-buble2.png",
       LAVA_BUBLE2N: "img/night-magma-buble2.png",
       LAVA_DRAGOND: "img/day-lava-dragon.png",
       LAVA_DRAGONN: "img/night-lava-dragon.png",
       LAVA_FIRE_DRAGOND: "img/day-fire-dragon.png",
       LAVA_FIRE_DRAGONN: "img/night-fire-dragon.png",
       HURT_LAVA_DRAGON: "img/hurt-lava-dragon.png",
       LAVA_WING_LEFTD: "img/day-lava-wing-left.png",
       LAVA_WING_LEFTN: "img/night-lava-wing-left.png",
       LAVA_WING_RIGHTD: "img/day-lava-wing-right.png",
       LAVA_WING_RIGHTN: "img/night-lava-wing-right.png",
       HURT_LAVA_WING_LEFT: "img/hurt-lava-wing-left.png",
       HURT_LAVA_WING_RIGHT: "img/hurt-lava-wing-right.png",
       REIDITE_SPEARD: "img/day-reidite-spear.png",
       REIDITE_SPEARN: "img/night-reidite-spear.png",
       INV_REIDITE_SPEAR_OUT: "img/inv-reidite-spear-out.png",
       INV_REIDITE_SPEAR_IN: "img/inv-reidite-spear-in.png",
       INV_REIDITE_SPEAR_CLICK: "img/inv-reidite-spear-click.png",
       REIDITE_HELMETD: "img/day-reidite-helmet.png",
       REIDITE_HELMETN: "img/night-reidite-helmet.png",
       INV_REIDITE_HELMET_OUT: "img/inv-reidite-helmet-out.png",
       INV_REIDITE_HELMET_IN: "img/inv-reidite-helmet-in.png",
       INV_REIDITE_HELMET_CLICK: "img/inv-reidite-helmet-click.png",
       HAND_REIDITE_PROTECTIOND: "img/day-hand-reidite-protection.png",
       HAND_REIDITE_PROTECTIONN: "img/night-hand-reidite-protection.png",
       REIDITE_PROTECTIOND: "img/day-reidite-protection.png",
       REIDITE_PROTECTIONN: "img/night-reidite-protection.png",
       INV_REIDITE_PROTECTION_OUT: "img/inv-reidite-protection-out.png",
       INV_REIDITE_PROTECTION_IN: "img/inv-reidite-protection-in.png",
       INV_REIDITE_PROTECTION_CLICK: "img/inv-reidite-protection-click.png",
       LAVA_SWORDD: "img/day-lava-dragon-sword.png",
       LAVA_SWORDN: "img/night-lava-dragon-sword.png",
       INV_LAVA_SWORD_OUT: "img/inv-lava-dragon-sword-out.png",
       INV_LAVA_SWORD_IN: "img/inv-lava-dragon-sword-in.png",
       INV_LAVA_SWORD_CLICK: "img/inv-lava-dragon-sword-click.png",
       LAVA_SPEARD: "img/day-lava-spear.png",
       LAVA_SPEARN: "img/night-lava-spear.png",
       INV_LAVA_SPEAR_OUT: "img/inv-lava-spear-out.png",
       INV_LAVA_SPEAR_IN: "img/inv-lava-spear-in.png",
       INV_LAVA_SPEAR_CLICK: "img/inv-lava-spear-click.png",
       LAVA_HELMETD: "img/day-lava-helmet.png",
       LAVA_HELMETN: "img/night-lava-helmet.png",
       INV_LAVA_HELMET_OUT: "img/inv-lava-helmet-out.png",
       INV_LAVA_HELMET_IN: "img/inv-lava-helmet-in.png",
       INV_LAVA_HELMET_CLICK: "img/inv-lava-helmet-click.png",
       WITCHD: "img/day-witch-hat.png",
       WITCHN: "img/night-witch-hat.png",
       INV_WITCH_OUT: "img/inv-witch-hat-out.png",
       INV_WITCH_IN: "img/inv-witch-hat-in.png",
       INV_WITCH_CLICK: "img/inv-witch-hat-click.png",
       NIMBUSD: "img/day-nimbus2000.png",
       NIMBUSN: "img/night-nimbus2000.png",
       INV_NIMBUS_OUT: "img/inv-nimbus2000-out.png",
       INV_NIMBUS_IN: "img/inv-nimbus2000-in.png",
       INV_NIMBUS_CLICK: "img/inv-nimbus2000-click.png",
       ACCESSORY1D: "img/day-accessory1-pacques.png",
       ACCESSORY1N: "img/night-accessory1-pacques.png",
       ACCESSORY2D: "img/day-accessory2-pacques.png",
       ACCESSORY2N: "img/night-accessory2-pacques.png",
       ACCESSORY3D: "img/day-accessory3-pacques.png",
       ACCESSORY3N: "img/night-accessory3-pacques.png",
       ACCESSORY5D: "img/day-accessory5-pacques.png",
       ACCESSORY5N: "img/night-accessory5-pacques.png",
       ACCESSORY6D: "img/day-accessory6-pacques.png",
       ACCESSORY6N: "img/night-accessory6-pacques.png",
       ACCESSORY7D: "img/day-accessory7-pacques.png",
       ACCESSORY7N: "img/night-accessory7-pacques.png",
       ACCESSORY8D: "img/day-accessory8-pacques.png",
       ACCESSORY8N: "img/night-accessory8-pacques.png",
       BAG_EASTERD: "img/day-bag-pacques.png",
       BAG_EASTERN: "img/night-bag-pacques.png",
       CARROTD: "img/day-carrot.png",
       CARROTN: "img/night-carrot.png",
       CARROT_DRIEDD: "img/day-carrot-dried.png",
       CARROT_DRIEDN: "img/night-carrot-dried.png",
       TOMATO_MINID: "img/day-tomato-herb.png",
       TOMATO_MININ: "img/night-tomato-herb.png",
       TOMATO_MINI_DRIEDD: "img/day-tomato-herb-dried.png",
       TOMATO_MINI_DRIEDN: "img/night-tomato-herb-dried.png",
       TOMATOD: "img/day-tomato.png",
       TOMATON: "img/night-tomato.png",
       INV_CARROT_OUT: "img/inv-carrot-out.png",
       INV_CARROT_IN: "img/inv-carrot-in.png",
       INV_CARROT_CLICK: "img/inv-carrot-click.png",
       INV_TOMATO_OUT: "img/inv-tomato-out.png",
       INV_TOMATO_IN: "img/inv-tomato-in.png",
       INV_TOMATO_CLICK: "img/inv-tomato-click.png",
       PLAYER0D: "img/day-player0.png",
       PLAYER0N: "img/night-player0.png",
       PLAYER1D: "img/day-player1.png",
       PLAYER1N: "img/night-player1.png",
       PLAYER2D: "img/day-player2.png",
       PLAYER2N: "img/night-player22.png",
       PLAYER3D: "img/day-player3.png",
       PLAYER3N: "img/night-player33.png",
       PLAYER4D: "img/day-player4.png",
       PLAYER4N: "img/night-player4.png",
       PLAYER5D: "img/day-player5.png",
       PLAYER5N: "img/night-player5.png",
       PLAYER6D: "img/day-player6.png",
       PLAYER6N: "img/night-player6.png",
       PLAYER7D: "img/day-player7.png",
       PLAYER7N: "img/night-player7.png",
       PLAYER8D: "img/day-player8.png",
       PLAYER8N: "img/night-player8.png",
       PLAYER9D: "img/day-player9.png",
       PLAYER9N: "img/night-player9.png",
       PLAYER10D: "img/day-player10.png",
       PLAYER10N: "img/night-player10.png",
       PLAYER11D: "img/day-player11.png",
       PLAYER11N: "img/night-player11.png",
       PLAYER12D: "img/day-player12.png",
       PLAYER12N: "img/night-player12.png",
       PLAYER13D: "img/day-player13.png",
       PLAYER13N: "img/night-player13.png",
       PLAYER14D: "img/day-player14.png",
       PLAYER14N: "img/night-player14.png",
       PLAYER15D: "img/day-player15.png",
       PLAYER15N: "img/night-player15.png",
       PLAYER16D: "img/day-player16.png",
       PLAYER16N: "img/night-player16.png",
       PLAYER17D: "img/day-player17.png",
       PLAYER17N: "img/night-player17.png",
       PLAYER18D: "img/day-player18.png",
       PLAYER18N: "img/night-player18.png",
       PLAYER19D: "img/day-player19.png",
       PLAYER19N: "img/night-player19.png",
       HAND0D: "img/day-hand-player0.png",
       HAND0N: "img/night-hand-player0.png",
       HAND1D: "img/day-hand-player1.png",
       HAND1N: "img/night-hand-player1.png",
       HAND2D: "img/day-hand-player2.png",
       HAND2N: "img/night-hand-player22.png",
       HAND3D: "img/day-hand-player3.png",
       HAND3N: "img/night-hand-player33.png",
       HAND4D: "img/day-hand-player4.png",
       HAND4N: "img/night-hand-player4.png",
       HAND5D: "img/day-hand-player5.png",
       HAND5N: "img/night-hand-player5.png",
       HAND6D: "img/day-hand-player6.png",
       HAND6N: "img/night-hand-player6.png",
       HAND7D: "img/day-hand-player7.png",
       HAND7N: "img/night-hand-player7.png",
       HAND8D: "img/day-hand-player8.png",
       HAND8N: "img/night-hand-player8.png",
       HAND9D: "img/day-hand-player9.png",
       HAND9N: "img/night-hand-player9.png",
       HAND10D: "img/day-hand-player10.png",
       HAND10N: "img/night-hand-player10.png",
       HAND11D: "img/day-hand-player11.png",
       HAND11N: "img/night-hand-player11.png",
       HAND12D: "img/day-hand-player12.png",
       HAND12N: "img/night-hand-player12.png",
       HAND13D: "img/day-hand-player13.png",
       HAND13N: "img/night-hand-player13.png",
       HAND14D: "img/day-hand-player14.png",
       HAND14N: "img/night-hand-player14.png",
       HAND15D: "img/day-hand-player15.png",
       HAND15N: "img/night-hand-player15.png",
       HAND16D: "img/day-hand-player16.png",
       HAND16N: "img/night-hand-player16.png",
       HAND17D: "img/day-hand-player17.png",
       HAND17N: "img/night-hand-player17.png",
       HAND18D: "img/day-hand-player18.png",
       HAND18N: "img/night-hand-player18.png",
       HAND19D: "img/day-hand-player19.png",
       HAND19N: "img/night-hand-player19.png",
       ACCESSORY4D: "img/day-accessory4.png",
       ACCESSORY4N: "img/night-accessory4.png",
       ACCESSORY9D: "img/day-accessory9.png",
       ACCESSORY9N: "img/night-accessory9.png",
       ACCESSORY10D: "img/day-accessory10.png",
       ACCESSORY10N: "img/night-accessory10.png",
       ACCESSORY11D: "img/day-accessory11.png",
       ACCESSORY11N: "img/night-accessory11.png",
       ACCESSORY12D: "img/day-accessory12.png",
       ACCESSORY12N: "img/night-accessory12.png",
       BAGD: "img/day-bag.png",
       BAGN: "img/night-bag.png",
       INV_BAG_OUT: "img/inv-bag-out.png",
       INV_BAG_IN: "img/inv-bag-in.png",
       INV_BAG_CLICK: "img/inv-bag-click.png",
       PITCHFORKD: "img/day-pitchfork.png",
       PITCHFORKN: "img/night-pitchfork.png",
       INV_PITCHFORK_OUT: "img/inv-pitchfork-out.png",
       INV_PITCHFORK_IN: "img/inv-pitchfork-in.png",
       INV_PITCHFORK_CLICK: "img/inv-pitchfork-click.png",
       INV_WOOD_DOOR_SPIKE_OUT: "img/inv-wood-spike-door-out.png",
       INV_WOOD_DOOR_SPIKE_IN: "img/inv-wood-spike-door-in.png",
       INV_WOOD_DOOR_SPIKE_CLICK: "img/inv-wood-spike-door-click.png",
       INV_STONE_DOOR_SPIKE_OUT: "img/inv-stone-spike-door-out.png",
       INV_STONE_DOOR_SPIKE_IN: "img/inv-stone-spike-door-in.png",
       INV_STONE_DOOR_SPIKE_CLICK: "img/inv-stone-spike-door-click.png",
       INV_GOLD_DOOR_SPIKE_OUT: "img/inv-gold-spike-door-out.png",
       INV_GOLD_DOOR_SPIKE_IN: "img/inv-gold-spike-door-in.png",
       INV_GOLD_DOOR_SPIKE_CLICK: "img/inv-gold-spike-door-click.png",
       INV_DIAMOND_DOOR_SPIKE_OUT: "img/inv-diamond-spike-door-out.png",
       INV_DIAMOND_DOOR_SPIKE_IN: "img/inv-diamond-spike-door-in.png",
       INV_DIAMOND_DOOR_SPIKE_CLICK: "img/inv-diamond-spike-door-click.png",
       INV_AMETHYST_DOOR_SPIKE_OUT: "img/inv-amethyst-spike-door-out.png",
       INV_AMETHYST_DOOR_SPIKE_IN: "img/inv-amethyst-spike-door-in.png",
       INV_AMETHYST_DOOR_SPIKE_CLICK: "img/inv-amethyst-spike-door-click.png",
       WOOD_DOOR_SPIKED: "img/day-wood-spike-door.png",
       WOOD_DOOR_SPIKEN: "img/night-wood-spike-door.png",
       STONE_DOOR_SPIKED: "img/day-stone-spike-door.png",
       STONE_DOOR_SPIKEN: "img/night-stone-spike-door.png",
       GOLD_DOOR_SPIKED: "img/day-gold-spike-door.png",
       GOLD_DOOR_SPIKEN: "img/night-gold-spike-door.png",
       DIAMOND_DOOR_SPIKED: "img/day-diamond-spike-door.png",
       DIAMOND_DOOR_SPIKEN: "img/night-diamond-spike-door.png",
       AMETHYST_DOOR_SPIKED: "img/day-amethyst-spike-door.png",
       AMETHYST_DOOR_SPIKEN: "img/night-amethyst-spike-door.png",
       INV_REIDITE_DOOR_SPIKE_OUT: "img/inv-reidite-spike-door-out.png",
       INV_REIDITE_DOOR_SPIKE_IN: "img/inv-reidite-spike-door-in.png",
       INV_REIDITE_DOOR_SPIKE_CLICK: "img/inv-reidite-spike-door-click.png",
       INV_REIDITE_DOOR_OUT: "img/inv-reidite-door-out.png",
       INV_REIDITE_DOOR_IN: "img/inv-reidite-door-in.png",
       INV_REIDITE_DOOR_CLICK: "img/inv-reidite-door-click.png",
       INV_REIDITE_SPIKE_OUT: "img/inv-reidite-spike-out.png",
       INV_REIDITE_SPIKE_IN: "img/inv-reidite-spike-in.png",
       INV_REIDITE_SPIKE_CLICK: "img/inv-reidite-spike-click.png",
       INV_REIDITE_WALL_OUT: "img/inv-reidite-wall-out.png",
       INV_REIDITE_WALL_IN: "img/inv-reidite-wall-in.png",
       INV_REIDITE_WALL_CLICK: "img/inv-reidite-wall-click.png",
       REIDITE_WALLD: "img/day-reidite-wall.png",
       REIDITE_WALLN: "img/night-reidite-wall.png",
       REIDITE_DOORD: "img/day-reidite-door.png",
       REIDITE_DOORN: "img/night-reidite-door.png",
       REIDITE_SPIKED: "img/day-reidite-spike.png",
       REIDITE_SPIKEN: "img/night-reidite-spike.png",
       REIDITE_DOOR_SPIKED: "img/day-reidite-spike-door.png",
       REIDITE_DOOR_SPIKEN: "img/night-reidite-spike-door.png",
       INV_PICK_REIDITE_OUT: "img/inv-reidite-pickaxe-out.png",
       INV_PICK_REIDITE_IN: "img/inv-reidite-pickaxe-in.png",
       INV_PICK_REIDITE_CLICK: "img/inv-reidite-pickaxe-click.png",
       PICK_REIDITED: "img/day-reidite-pickaxe.png",
       PICK_REIDITEN: "img/night-reidite-pickaxe.png",
       INV_HAMMER_REIDITE_OUT: "img/inv-reidite-hammer-out.png",
       INV_HAMMER_REIDITE_IN: "img/inv-reidite-hammer-in.png",
       INV_HAMMER_REIDITE_CLICK: "img/inv-reidite-hammer-click.png",
       HAMMER_REIDITED: "img/day-reidite-hammer.png",
       HAMMER_REIDITEN: "img/night-reidite-hammer.png",
       WATERMELOND: "img/day-watermelon1.png",
       WATERMELONN: "img/night-watermelon1.png",
       DRIED_WATERMELOND: "img/day-watermelon-dried1.png",
       DRIED_WATERMELONN: "img/night-watermelon-dried1.png",
       INV_WATERMELON_OUT: "img/inv-watermelon-out.png",
       INV_WATERMELON_IN: "img/inv-watermelon-in.png",
       INV_WATERMELON_CLICK: "img/inv-watermelon-click.png",
       BOATD: "img/day-boat.png",
       BOATN: "img/night-boat.png",
       BOAT_WAVED: "img/day-boat-wave.png",
       BOAT_WAVEN: "img/night-boat-wave.png",
       INV_BOAT_OUT: "img/inv-boat-out.png",
       INV_BOAT_IN: "img/inv-boat-in.png",
       INV_BOAT_CLICK: "img/inv-boat-click.png",
       PLANED: "img/day-plane.png",
       PLANEN: "img/night-plane.png",
       INV_PLANE_OUT: "img/inv-plane-out.png",
       INV_PLANE_IN: "img/inv-plane-in.png",
       INV_PLANE_CLICK: "img/inv-plane-click.png",
       SLEDD: "img/day-sled.png",
       SLEDN: "img/night-sled.png",
       SLED_WAVED: "img/day-sled-wave.png",
       SLED_WAVEN: "img/night-sled-wave.png",
       INV_SLED_OUT: "img/inv-sled-out.png",
       INV_SLED_IN: "img/inv-sled-in.png",
       INV_SLED_CLICK: "img/inv-sled-click.png",
       PIRATE_HATD: "img/day-pirate-hat.png",
       PIRATE_HATN: "img/night-pirate-hat.png",
       INV_PIRATE_HAT_OUT: "img/inv-pirate-hat-out.png",
       INV_PIRATE_HAT_IN: "img/inv-pirate-hat-in.png",
       INV_PIRATE_HAT_CLICK: "img/inv-pirate-hat-click.png",
       PENGUIND: "img/day-penguin.png",
       PENGUINN: "img/night-penguin.png",
       HURT_PENGUIN: "img/hurt-penguin.png",
       INV_PENGUIN_FEATHER: "img/inv-penguin-feather-click.png",
       INV_HAWK_FEATHER: "img/inv-hawk-feather-click.png",
       BOARD: "img/day-boar1.png",
       BOAR_TAMEDD: "img/day-boar1-tamed.png",
       BOAR_ANGRYD: "img/day-boar1-angry.png",
       BOARN: "img/night-boar1.png",
       BOAR_TAMEDN: "img/night-boar1-tamed.png",
       BOAR_ANGRYN: "img/night-boar1-angry.png",
       INV_MOUNT_BOAR_OUT: "img/inv-mount-boar-out.png",
       INV_MOUNT_BOAR_IN: "img/inv-mount-boar-in.png",
       INV_MOUNT_BOAR_CLICK: "img/inv-mount-boar-click.png",
       HURT_BOAR: "img/day-hurt-boar1.png",
       BOAR_STEP: "img/boar1-step.png",
       SADDLED: "img/day-saddle1.png",
       SADDLEN: "img/night-saddle1.png",
       INV_SADDLE_OUT: "img/inv-saddle-out.png",
       INV_SADDLE_IN: "img/inv-saddle-in.png",
       INV_SADDLE_CLICK: "img/inv-saddle-click.png",
       WAND1D: "img/day-magic-wand0.png",
       WAND1N: "img/night-magic-wand0.png",
       LIGHT_WAND1D: "img/day-light-wand1.png",
       LIGHT_WAND1N: "img/night-light-wand1.png",
       INV_WAND1_OUT: "img/inv-magic-wand0-out.png",
       INV_WAND1_IN: "img/inv-magic-wand0-in.png",
       INV_WAND1_CLICK: "img/inv-magic-wand0-click.png",
       WAND2D: "img/day-magic-wand1.png",
       WAND2N: "img/night-magic-wand1.png",
       LIGHT_WAND0D: "img/day-light-wand0.png",
       LIGHT_WAND0N: "img/night-light-wand0.png",
       INV_WAND2_OUT: "img/inv-magic-wand1-out.png",
       INV_WAND2_IN: "img/inv-magic-wand1-in.png",
       INV_WAND2_CLICK: "img/inv-magic-wand1-click.png",
       FIREFLYD: "img/day-firefly.png",
       FIREFLYN: "img/night-firefly.png",
       HURT_FIREFLY: "img/hurt-firefly.png",
       INV_FIREFLY_OUT: "img/inv-firefly-out.png",
       INV_FIREFLY_IN: "img/inv-firefly-in.png",
       INV_FIREFLY_CLICK: "img/inv-firefly-click.png",
       BABY_DRAGOND: "img/day-baby-dragon.png",
       BABY_DRAGONN: "img/night-baby-dragon.png",
       BABY_DRAGON_ATTACKD: "img/day-baby-dragon-angry.png",
       BABY_DRAGON_ATTACKN: "img/night-baby-dragon-angry.png",
       BABY_DRAGON_TAMEDD: "img/day-baby-dragon-tamed.png",
       BABY_DRAGON_TAMEDN: "img/night-baby-dragon-tamed.png",
       BABY_DRAGON_WING_LEFT_ATTACKD: "img/day-wing-dragon-left-angry.png",
       BABY_DRAGON_WING_LEFT_ATTACKN: "img/night-dragon-wing-left-angry.png",
       BABY_DRAGON_WING_RIGHT_ATTACKD: "img/day-wing-dragon-right-angry.png",
       BABY_DRAGON_WING_RIGHT_ATTACKN: "img/night-dragon-wing-right-angry.png",
       BABY_DRAGON_WING_LEFT_TAMEDD: "img/day-wing-dragon-left-tamed.png",
       BABY_DRAGON_WING_LEFT_TAMEDN: "img/night-dragon-wing-left-tamed.png",
       BABY_DRAGON_WING_RIGHT_TAMEDD: "img/day-wing-dragon-right-tamed.png",
       BABY_DRAGON_WING_RIGHT_TAMEDN: "img/night-wing-dragon-right-tamed.png",
       BABY_DRAGON_WING_LEFTD: "img/day-wing-dragon-left.png",
       BABY_DRAGON_WING_LEFTN: "img/night-dragon-wing-left.png",
       BABY_DRAGON_WING_RIGHTD: "img/day-wing-dragon-right.png",
       BABY_DRAGON_WING_RIGHTN: "img/night-wing-dragon-right.png",
       HURT_BABY_DRAGON: "img/hurt-baby-dragon.png",
       HURT_BABY_DRAGON_WING_LEFT: "img/hurt-baby-dragon-wing-left.png",
       HURT_BABY_DRAGON_WING_RIGHT: "img/hurt-baby-dragon-wing-right.png",
       INV_BABY_DRAGON_OUT: "img/inv-baby-dragon-out.png",
       INV_BABY_DRAGON_IN: "img/inv-baby-dragon-in.png",
       INV_BABY_DRAGON_CLICK: "img/inv-baby-dragon-click.png",
       BABY_LAVAD: "img/day-baby-lava.png",
       BABY_LAVAN: "img/night-baby-lava.png",
       BABY_LAVA_ATTACKD: "img/day-baby-lava-angry.png",
       BABY_LAVA_ATTACKN: "img/night-baby-lava-angry.png",
       BABY_LAVA_TAMEDD: "img/day-baby-lava-tamed.png",
       BABY_LAVA_TAMEDN: "img/night-baby-lava-tamed.png",
       BABY_LAVA_WING_LEFT_ATTACKD: "img/day-wing-lava-left-angry.png",
       BABY_LAVA_WING_LEFT_ATTACKN: "img/night-wing-lava-left-angry.png",
       BABY_LAVA_WING_RIGHT_ATTACKD: "img/day-wing-lava-right-angry.png",
       BABY_LAVA_WING_RIGHT_ATTACKN: "img/night-wing-lava-right-angry.png",
       BABY_LAVA_WING_LEFT_TAMEDD: "img/day-wing-lava-left-tamed.png",
       BABY_LAVA_WING_LEFT_TAMEDN: "img/night-wing-lava-left-tamed.png",
       BABY_LAVA_WING_RIGHT_TAMEDD: "img/day-wing-lava-right-tamed.png",
       BABY_LAVA_WING_RIGHT_TAMEDN: "img/night-wing-lava-right-tamed.png",
       BABY_LAVA_WING_LEFTD: "img/day-wing-lava-left.png",
       BABY_LAVA_WING_LEFTN: "img/night-wing-lava-left.png",
       BABY_LAVA_WING_RIGHTD: "img/day-wing-lava-right.png",
       BABY_LAVA_WING_RIGHTN: "img/night-wing-lava-right.png",
       HURT_BABY_LAVA: "img/hurt-baby-lava.png",
       HURT_BABY_LAVA_WING_LEFT: "img/hurt-baby-lava-wing-left.png",
       HURT_BABY_LAVA_WING_RIGHT: "img/hurt-baby-lava-wing-right.png",
       INV_BABY_LAVA_OUT: "img/inv-baby-lava-out.png",
       INV_BABY_LAVA_IN: "img/inv-baby-lava-in.png",
       INV_BABY_LAVA_CLICK: "img/inv-baby-lava-click.png",
       HAWKD: "img/day-falcon.png",
       HAWKN: "img/night-falcon.png",
       HAWK_ATTACKD: "img/day-falcon-angry.png",
       HAWK_ATTACKN: "img/night-falcon-angry.png",
       HAWK_GROUNDD: "img/day-falcon-ground.png",
       HAWK_GROUNDN: "img/night-falcon-ground.png",
       HAWK_GROUND_ATTACKD: "img/day-falcon-ground-angry.png",
       HAWK_GROUND_ATTACKN: "img/night-falcon-ground-angry.png",
       HAWK_WING_LEFTD: "img/day-falcon-wings-left.png",
       HAWK_WING_LEFTN: "img/night-falcon-wings-left.png",
       HAWK_WING_RIGHTD: "img/day-falcon-wings-right.png",
       HAWK_WING_RIGHTN: "img/night-falcon-wings-right.png",
       HAWK_WING_LEFT_ATTACKD: "img/day-falcon-angry-wings-left.png",
       HAWK_WING_LEFT_ATTACKN: "img/night-falcon-angry-wings-left.png",
       HAWK_WING_RIGHT_ATTACKD: "img/day-falcon-angry-wings-right.png",
       HAWK_WING_RIGHT_ATTACKN: "img/night-falcon-angry-wings-right.png",
       HAWK_WING_LEFT_TAMEDD: "img/day-falcon-wings-left-tamed.png",
       HAWK_WING_LEFT_TAMEDN: "img/night-falcon-wings-left-tamed.png",
       HAWK_WING_RIGHT_TAMEDD: "img/day-falcon-wings-right-tamed.png",
       HAWK_WING_RIGHT_TAMEDN: "img/night-falcon-wings-right-tamed.png",
       HAWK_TAMEDD: "img/day-falcon-tamed.png",
       HAWK_TAMEDN: "img/night-falcon-tamed.png",
       HURT_HAWK_GROUND: "img/hurt-falcon-ground.png",
       HURT_HAWK: "img/hurt-falcon.png",
       HURT_HAWK_WING_LEFT: "img/hurt-falcon-wings-left.png",
       HURT_HAWK_WING_RIGHT: "img/hurt-falcon-wings-right.png",
       INV_HAWK_OUT: "img/inv-falcon-out.png",
       INV_HAWK_IN: "img/inv-falcon-in.png",
       INV_HAWK_CLICK: "img/inv-falcon-click.png",
       CRAB_BOSSD: "img/day-crab-boss.png",
       CRAB_BOSSN: "img/night-crab-boss.png",
       CRAB_BOSS_ATTACKD: "img/day-crab-boss-angry.png",
       CRAB_BOSS_ATTACKN: "img/night-crab-boss-angry.png",
       CRAB_BOSS_TAMEDD: "img/day-crab-boss-tamed.png",
       CRAB_BOSS_TAMEDN: "img/night-crab-boss-tamed.png",
       CRAB_BOSS_CLAW_LEFT_ATTACKD: "img/day-crab-boss-claw-left-attack.png",
       CRAB_BOSS_CLAW_LEFT_ATTACKN: "img/night-crab-boss-claw-left-attack.png",
       CRAB_BOSS_CLAW_RIGHT_ATTACKD: "img/day-crab-boss-claw-right-attack.png",
       CRAB_BOSS_CLAW_RIGHT_ATTACKN: "img/night-crab-boss-claw-right-attack.png",
       CRAB_BOSS_CLAW_LEFT_TAMEDD: "img/day-crab-boss-claw-left-tamed.png",
       CRAB_BOSS_CLAW_LEFT_TAMEDN: "img/night-crab-boss-claw-left-tamed.png",
       CRAB_BOSS_CLAW_RIGHT_TAMEDD: "img/day-crab-boss-claw-right-tamed.png",
       CRAB_BOSS_CLAW_RIGHT_TAMEDN: "img/night-crab-boss-claw-right-tamed.png",
       CRAB_BOSS_CLAW_LEFTD: "img/day-crab-boss-claw-left.png",
       CRAB_BOSS_CLAW_LEFTN: "img/night-crab-boss-claw-left.png",
       CRAB_BOSS_CLAW_RIGHTD: "img/day-crab-boss-claw-right.png",
       CRAB_BOSS_CLAW_RIGHTN: "img/night-crab-boss-claw-right.png",
       HURT_CRAB_BOSS: "img/hurt-crab-boss.png",
       HURT_CRAB_BOSS_CLAW_LEFT: "img/hurt-crab-boss-claw-left.png",
       HURT_CRAB_BOSS_CLAW_RIGHT: "img/hurt-crab-boss-claw-right.png",
       HEAL_CRAB_BOSS: "img/heal-crab-boss.png",
       HEAL_CRAB_BOSS_CLAW_LEFT: "img/heal-crab-boss-claw-left.png",
       HEAL_CRAB_BOSS_CLAW_RIGHT: "img/heal-crab-boss-claw-right.png",
       CRAB_STEP: "img/crab-step.png",
       INV_CRAB_BOSS_OUT: "img/inv-crab-boss-out.png",
       INV_CRAB_BOSS_IN: "img/inv-crab-boss-in.png",
       INV_CRAB_BOSS_CLICK: "img/inv-crab-boss-click.png",
       CACTUSD: "img/day-cactus10.png",
       CACTUSN: "img/night-cactus10.png",
       INV_CACTUS_OUT: "img/inv-cactus-out.png",
       INV_CACTUS_IN: "img/inv-cactus-in.png",
       INV_CACTUS_CLICK: "img/inv-cactus-click.png",
       SCORPIOND: "img/day-scorpion.png",
       SCORPIONN: "img/night-scorpion.png",
       SCORPION_HAND_LEFTD: "img/day-scorpion-hand-left.png",
       SCORPION_HAND_LEFTN: "img/night-scorpion-hand-left.png",
       SCORPION_HAND_RIGHTD: "img/day-scorpion-hand-right.png",
       SCORPION_HAND_RIGHTN: "img/night-scorpion-hand-right.png",
       HURT_SCORPION: "img/hurt-scorpion.png",
       HURT_SCORPION_HAND_LEFT: "img/hurt-scorpion-hand-left.png",
       HURT_SCORPION_HAND_RIGHT: "img/hurt-scorpion-hand-right.png",
       VULTURED: "img/day-vulture.png",
       VULTUREN: "img/night-vulture.png",
       VULTURE_ATTACKD: "img/day-vulture-angry.png",
       VULTURE_ATTACKN: "img/night-vulture-angry.png",
       VULTURE_GROUNDD: "img/day-vulture-ground.png",
       VULTURE_GROUNDN: "img/night-vulture-ground.png",
       VULTURE_GROUND_ATTACKD: "img/day-vulture-ground-angry.png",
       VULTURE_GROUND_ATTACKN: "img/night-vulture-ground-angry.png",
       VULTURE_WING_LEFTD: "img/day-vulture-wings-left.png",
       VULTURE_WING_LEFTN: "img/night-vulture-wings-left.png",
       VULTURE_WING_RIGHTD: "img/day-vulture-wings-right.png",
       VULTURE_WING_RIGHTN: "img/night-vulture-wings-right.png",
       VULTURE_WING_LEFT_ATTACKD: "img/day-vulture-angry-wings-left.png",
       VULTURE_WING_LEFT_ATTACKN: "img/night-vulture-angry-wings-left.png",
       VULTURE_WING_RIGHT_ATTACKD: "img/day-vulture-angry-wings-right.png",
       VULTURE_WING_RIGHT_ATTACKN: "img/night-vulture-angry-wings-right.png",
       VULTURE_WING_LEFT_TAMEDD: "img/day-vulture-wings-left-tamed.png",
       VULTURE_WING_LEFT_TAMEDN: "img/night-vulture-wings-left-tamed.png",
       VULTURE_WING_RIGHT_TAMEDD: "img/day-vulture-wings-right-tamed.png",
       VULTURE_WING_RIGHT_TAMEDN: "img/night-vulture-wings-right-tamed.png",
       VULTURE_TAMEDD: "img/day-vulture-tamed.png",
       VULTURE_TAMEDN: "img/night-vulture-tamed.png",
       HURT_VULTURE_GROUND: "img/hurt-vulture-ground.png",
       HURT_VULTURE: "img/hurt-vulture.png",
       HURT_VULTURE_WING_LEFT: "img/hurt-vulture-wings-left.png",
       HURT_VULTURE_WING_RIGHT: "img/hurt-vulture-wings-right.png",
       ALOE_VERAD: "img/day-aloe-vera.png",
       ALOE_VERAN: "img/night-aloe-vera.png",
       INV_ALOE_VERA_OUT: "img/inv-aloe-vera-out.png",
       INV_ALOE_VERA_IN: "img/inv-aloe-vera-in.png",
       INV_ALOE_VERA_CLICK: "img/inv-aloe-vera-click.png",
       ALOE_VERA_GROWND: "img/day-aloe-vera-grown.png",
       ALOE_VERA_GROWNN: "img/night-aloe-vera-grown.png",
       ALOE_VERA_DRIEDD: "img/day-aloe-vera-dried.png",
       ALOE_VERAN_DRIEDN: "img/night-aloe-vera-dried.png",
       TURBAN1D: "img/day-turban1.png",
       TURBAN1N: "img/night-turban1.png",
       TURBAN2D: "img/day-turban2.png",
       TURBAN2N: "img/night-turban2.png",
       INV_TURBAN2_OUT: "img/inv-turban2-out.png",
       INV_TURBAN2_IN: "img/inv-turban2-in.png",
       INV_TURBAN2_CLICK: "img/inv-turban2-click.png",
       INV_TURBAN1_OUT: "img/inv-turban1-out.png",
       INV_TURBAN1_IN: "img/inv-turban1-in.png",
       INV_TURBAN1_CLICK: "img/inv-turban1-click.png",
       PITCHFORK2D: "img/day-pitchfork2.png",
       PITCHFORK2N: "img/night-pitchfork2.png",
       INV_PITCHFORK2_OUT: "img/inv-pitchfork2-out.png",
       INV_PITCHFORK2_IN: "img/inv-pitchfork2-in.png",
       INV_PITCHFORK2_CLICK: "img/inv-pitchfork2-click.png",
       INV_PITCHFORK_PART_CLICK: "img/inv-gold-fork-click.png",
       INV_PILOT_GLASSES_CLICK: "img/inv-pilot-glasses-click.png",
       PILOT_HELMETD: "img/day-pilot-helmet.png",
       PILOT_HELMETN: "img/night-pilot-helmet.png",
       INV_PILOT_HELMET_OUT: "img/inv-pilot-helmet-out.png",
       INV_PILOT_HELMET_IN: "img/inv-pilot-helmet-in.png",
       INV_PILOT_HELMET_CLICK: "img/inv-pilot-helmet-click.png",
       SAND_WORM0D: "img/day-sandworm0.png",
       SAND_WORM1D: "img/day-sandworm1.png",
       SAND_WORM2D: "img/day-sandworm2.png",
       SAND_WORM0N: "img/night-sandworm0.png",
       SAND_WORM1N: "img/night-sandworm1.png",
       SAND_WORM2N: "img/night-sandworm2.png",
       HURT_SAND_WORM0: "img/hurt-sandworm0.png",
       HURT_SAND_WORM1: "img/hurt-sandworm1.png",
       HURT_SAND_WORM2: "img/hurt-sandworm2.png",
       INV_VULTURE_FEATHER: "img/inv-vulture-feather-click.png",
       EMERALD0D: "img/day-emerald0.png",
       EMERALD0N: "img/night-emerald0.png",
       EMERALD1D: "img/day-emerald1.png",
       EMERALD1N: "img/night-emerald1.png",
       EMERALD2D: "img/day-emerald2.png",
       EMERALD2N: "img/night-emerald2.png",
       INV_EMERALD: "img/inv-emerald-click.png",
       INV_SANDWORM_JUICE_OUT: "img/inv-sworm-juice-out.png",
       INV_SANDWORM_JUICE_IN: "img/inv-sworm-juice-in.png",
       INV_SANDWORM_JUICE_CLICK: "img/inv-sworm-juice-click.png",
       EMERALD_MACHINED: "img/day-point-machine.png",
       EMERALD_MACHINEN: "img/night-point-machine.png",
       EMERALD_MACHINE_HOLED: "img/day-point-machine-hole.png",
       EMERALD_MACHINE_HOLEN: "img/night-point-machine-hole.png",
       EMERALD_MACHINE_GROUNDD: "img/day-point-machine-ground.png",
       EMERALD_MACHINE_GROUNDN: "img/night-point-machine-ground.png",
       EMERALD_MACHINE_ROTATED: "img/day-point-machine-rotate.png",
       EMERALD_MACHINE_ROTATEN: "img/night-point-machine-rotate.png",
       INV_EMERALD_MACHINE_OUT: "img/inv-point-machine-out.png",
       INV_EMERALD_MACHINE_IN: "img/inv-point-machine-in.png",
       INV_EMERALD_MACHINE_CLICK: "img/inv-point-machine-click.png",
       EXTRACTOR_MACHINE0_STONED: "img/day-extractor-machine0-stone.png",
       EXTRACTOR_MACHINE0_STONEN: "img/night-extractor-machine0-stone.png",
       EXTRACTOR_MACHINE_STONED: "img/day-extractor-machine-stone.png",
       EXTRACTOR_MACHINE_STONEN: "img/night-extractor-machine-stone.png",
       INV_EXTRACTOR_MACHINE_STONE_OUT: "img/inv-extractor-machine-stone-out.png",
       INV_EXTRACTOR_MACHINE_STONE_IN: "img/inv-extractor-machine-stone-in.png",
       INV_EXTRACTOR_MACHINE_STONE_CLICK: "img/inv-extractor-machine-stone-click.png",
       EXTRACTOR_MACHINE0_GOLDD: "img/day-extractor-machine0-gold.png",
       EXTRACTOR_MACHINE0_GOLDN: "img/night-extractor-machine0-gold.png",
       EXTRACTOR_MACHINE_GOLDD: "img/day-extractor-machine-gold.png",
       EXTRACTOR_MACHINE_GOLDN: "img/night-extractor-machine-gold.png",
       INV_EXTRACTOR_MACHINE_GOLD_OUT: "img/inv-extractor-machine-gold-out.png",
       INV_EXTRACTOR_MACHINE_GOLD_IN: "img/inv-extractor-machine-gold-in.png",
       INV_EXTRACTOR_MACHINE_GOLD_CLICK: "img/inv-extractor-machine-gold-click.png",
       EXTRACTOR_MACHINE0_DIAMONDD: "img/day-extractor-machine0-diamond.png",
       EXTRACTOR_MACHINE0_DIAMONDN: "img/night-extractor-machine0-diamond.png",
       EXTRACTOR_MACHINE_DIAMONDD: "img/day-extractor-machine-diamond.png",
       EXTRACTOR_MACHINE_DIAMONDN: "img/night-extractor-machine-diamond.png",
       INV_EXTRACTOR_MACHINE_DIAMOND_OUT: "img/inv-extractor-machine-diamond-out.png",
       INV_EXTRACTOR_MACHINE_DIAMOND_IN: "img/inv-extractor-machine-diamond-in.png",
       INV_EXTRACTOR_MACHINE_DIAMOND_CLICK: "img/inv-extractor-machine-diamond-click.png",
       EXTRACTOR_MACHINE0_AMETHYSTD: "img/day-extractor-machine0-amethyst.png",
       EXTRACTOR_MACHINE0_AMETHYSTN: "img/night-extractor-machine0-amethyst.png",
       EXTRACTOR_MACHINE_AMETHYSTD: "img/day-extractor-machine-amethyst.png",
       EXTRACTOR_MACHINE_AMETHYSTN: "img/night-extractor-machine-amethyst.png",
       INV_EXTRACTOR_MACHINE_AMETHYST_OUT: "img/inv-extractor-machine-amethyst-out.png",
       INV_EXTRACTOR_MACHINE_AMETHYST_IN: "img/inv-extractor-machine-amethyst-in.png",
       INV_EXTRACTOR_MACHINE_AMETHYST_CLICK: "img/inv-extractor-machine-amethyst-click.png",
       EXTRACTOR_MACHINE0_REIDITED: "img/day-extractor-machine0-reidite.png",
       EXTRACTOR_MACHINE0_REIDITEN: "img/night-extractor-machine0-reidite.png",
       EXTRACTOR_MACHINE_REIDITED: "img/day-extractor-machine-reidite.png",
       EXTRACTOR_MACHINE_REIDITEN: "img/night-extractor-machine-reidite.png",
       INV_EXTRACTOR_MACHINE_REIDITE_OUT: "img/inv-extractor-machine-reidite-out.png",
       INV_EXTRACTOR_MACHINE_REIDITE_IN: "img/inv-extractor-machine-reidite-in.png",
       INV_EXTRACTOR_MACHINE_REIDITE_CLICK: "img/inv-extractor-machine-reidite-click.png",
       EXTRACTOR_CASES: "img/extractor-cases.png",
       HEND: "img/day-golden-hen.png",
       HENN: "img/night-golden-hen.png",
       CHICKEND: "img/day-golden-chicken.png",
       CHICKENN: "img/night-golden-chicken.png",
       HURT_GOLDEN_HEN: "img/hurt-golden-hen.png",
       HURT_GOLDEN_CHICKEN: "img/hurt-golden-chicken.png",
       LOGO_INTERFACE: "img/logo-interface.png",
       FOREST_MODE_HOVER: "img/forest-mode-hover.png",
       NORMAL_MODE_HOVER: "img/normal-mode-hover.png",
       VAMPIRE_MODE_HOVER: "img/vampire-mode-hover.png",
       ZOMBIE_MODE_HOVER: "img/zombie-mode-hover.png",
       MODE_COMMUNITY_HOVER: "img/community-mode-hover2.png",
       MODE_EXPERIMENTAL_HOVER: "img/experimental-mode-hover.png",
       ZOMBIE_MODE_OUT: "img/zombie-mode-out.png",
       ZOMBIE_MODE_IN: "img/zombie-mode-in.png",
       ZOMBIE_MODE_CLICK: "img/zombie-mode-click.png",
       VAMPIRE_MODE_OUT: "img/vampire-mode-out.png",
       VAMPIRE_MODE_IN: "img/vampire-mode-in.png",
       VAMPIRE_MODE_CLICK: "img/vampire-mode-click.png",
       NORMAL_MODE_OUT: "img/normal-mode-out.png",
       NORMAL_MODE_IN: "img/normal-mode-in.png",
       NORMAL_MODE_CLICK: "img/normal-mode-click.png",
       FOREST_MODE_OUT: "img/forest-mode-out.png",
       FOREST_MODE_IN: "img/forest-mode-in.png",
       FOREST_MODE_CLICK: "img/forest-mode-click.png",
       MODE_COMMUNITY_OUT: "img/community-mode-out.png",
       MODE_COMMUNITY_IN: "img/community-mode-in.png",
       MODE_COMMUNITY_CLICK: "img/community-mode-click.png",
       MODE_EXPERIMENTAL_OUT: "img/experimental-modes-out.png",
       MODE_EXPERIMENTAL_IN: "img/experimental-modes-in.png",
       MODE_EXPERIMENTAL_CLICK: "img/experimental-modes-click.png",
       YOUTUBE_BUTTON_OUT: "img/youtube-button-out.png",
       YOUTUBE_BUTTON_IN: "img/youtube-button-in.png",
       YOUTUBE_BUTTON_CLICK: "img/youtube-button-click.png",
       WIKI_BUTTON_OUT: "img/wiki-button-out.png",
       WIKI_BUTTON_IN: "img/wiki-button-in.png",
       WIKI_BUTTON_CLICK: "img/wiki-button-click.png",
       TWITTER_BUTTON_OUT: "img/twitter-button-out.png",
       TWITTER_BUTTON_IN: "img/twitter-button-in.png",
       TWITTER_BUTTON_CLICK: "img/twitter-button-click.png",
       FACEBOOK_BUTTON_OUT: "img/facebook-button-out.png",
       FACEBOOK_BUTTON_IN: "img/facebook-button-in.png",
       FACEBOOK_BUTTON_CLICK: "img/facebook-button-click.png",
       REDDIT_BUTTON_OUT: "img/reddit-button-out.png",
       REDDIT_BUTTON_IN: "img/reddit-button-in.png",
       REDDIT_BUTTON_CLICK: "img/reddit-button-click.png",
       DISCORD_BUTTON_OUT: "img/discord-button-out.png",
       DISCORD_BUTTON_IN: "img/discord-button-in.png",
       DISCORD_BUTTON_CLICK: "img/discord-button-click.png",
       TERMINAL_BUTTON_OUT: "img/terminal-button-out.png",
       TERMINAL_BUTTON_IN: "img/terminal-button-in.png",
       TERMINAL_BUTTON_CLICK: "img/terminal-button-click.png",
       RESTART_OUT: "img/restart-out.png",
       RESTART_IN: "img/restart-in.png",
       RESTART_CLICK: "img/restart-click.png",
       GUIDE_OUT: "img/guide-out.png",
       GUIDE_IN: "img/guide-in.png",
       GUIDE_CLICK: "img/guide-click.png",
       COPY_PASTE_OUT: "img/copy-paste-out.png",
       COPY_PASTE_IN: "img/copy-paste-in.png",
       COPY_PASTE_CLICK: "img/copy-paste-click.png",
       LINKS_BG: "img/link-buttons-bg.png",
       CHANGELOG_BOX: "img/changelog-box2.png",
       CHANGELOG_BUTTON_OUT: "img/banner-devast.png",
       DEVASTIO_BUTTON_OUT: "img/banner-devast.png",
       PROFILE_BUTTON_OUT: "img/profile-button-out.png",
       PROFILE_BUTTON_IN: "img/profile-button-in.png",
       PROFILE_BUTTON_CLICK: "img/profile-button-click.png",
       LOGIN_BUTTON_OUT: "img/login-button-out.png",
       LOGIN_BUTTON_IN: "img/login-button-in.png",
       LOGIN_BUTTON_CLICK: "img/login-button-click.png",
       LOGIN_GOOGLE_OUT: "img/login-google-out.png",
       LOGIN_GOOGLE_IN: "img/login-google-in.png",
       LOGIN_GOOGLE_CLICK: "img/login-google-click.png",
       LOGIN_FACEBOOK_OUT: "img/login-facebook-out.png",
       LOGIN_FACEBOOK_IN: "img/login-facebook-in.png",
       LOGIN_FACEBOOK_CLICK: "img/login-facebook-click.png",
       ACCOUNT_BOX: "img/account-box.png",
       ACCOUNT_MAINTENANCE: "img/account-under-maintenance.png",
       CLOSE_BUTTON_OUT: "img/close-button-account-out.png",
       CLOSE_BUTTON_IN: "img/close-button-account-in.png",
       CLOSE_BUTTON_CLICK: "img/close-button-account-click.png",
       PLAY_BUTTON_OUT: "img/play-button-out.png",
       PLAY_BUTTON_IN: "img/play-button-in.png",
       PLAY_BUTTON_CLICK: "img/play-button-click.png",
       MODIFY_NAME_OUT: "img/modify-name-out.png",
       MODIFY_NAME_IN: "img/modify-name-in.png",
       MODIFY_NAME_CLICK: "img/modify-name-click.png",
       YES_BUTTON_OUT: "img/yes-button-out.png",
       YES_BUTTON_IN: "img/yes-button-in.png",
       YES_BUTTON_CLICK: "img/yes-button-click.png",
       YES_300_BUTTON_OUT: "img/yes-300-button-out.png",
       YES_300_BUTTON_IN: "img/yes-300-button-in.png",
       YES_300_BUTTON_CLICK: "img/yes-300-button-click.png",
       NO_BUTTON_OUT: "img/no-button-out.png",
       NO_BUTTON_IN: "img/no-button-in.png",
       NO_BUTTON_CLICK: "img/no-button-click.png",
       NO_THANKS_BUTTON_OUT: "img/no-thanks-button-out.png",
       NO_THANKS_BUTTON_IN: "img/no-thanks-button-in.png",
       NO_THANKS_BUTTON_CLICK: "img/no-thanks-button-click.png",
       SHOP_BUTTON_OUT: "img/shop-button-out.png",
       SHOP_BUTTON_IN: "img/shop-button-in.png",
       SHOP_BUTTON_CLICK: "img/shop-button-click.png",
       LOGOUT_OUT: "img/logout-out.png",
       LOGOUT_IN: "img/logout-in.png",
       LOGOUT_CLICK: "img/logout-click.png",
       TERMS_BUTTON_OUT: "img/terms-button-out.png",
       TERMS_BUTTON_IN: "img/terms-button-in.png",
       TERMS_BUTTON_CLICK: "img/terms-button-click.png",
       TUTORIAL_ICON: "img/tutorial-icon.png",
       SKINS_ICON: "img/skins-icon.png",
       SHOP_ICON: "img/shop-icon.png",
       PAINT_ICON: "img/paint-icon.png",
       LEADERBOARD_ICON: "img/leaderboard-icon.png",
       START_ICON: "img/start-icon.png",
       PROFILE_ICON: "img/profile-icon.png",
       SERVER_ACCESS_ICON: "img/server-access-icon2.png",
       ICONS_BG_BUTTON_OUT: "img/button-homepage-bg-out.png",
       ICONS_BG_BUTTON_IN: "img/button-homepage-bg-in.png",
       ICONS_BG_BUTTON_CLICK: "img/button-homepage-bg-click.png",
       ICONS_BOTTOM_BG_BUTTON_OUT: "img/button-bottom-homepage-bg-out.png",
       ICONS_BOTTOM_BG_BUTTON_IN: "img/button-bottom-homepage-bg-in.png",
       ICONS_BOTTOM_BG_BUTTON_CLICK: "img/button-bottom-homepage-bg-click.png",
       AVATAR_RESUME: "img/lvl-player.png",
       AVATAR_LVL1: "img/avatar-player.png",
       AVATAR_LVL2: "img/avatar-player1.png",
       AVATAR_LVL3: "img/avatar-player2.png",
       AVATAR_LVL4: "img/avatar-player3.png",
       AVATAR_LVL5: "img/avatar-player4.png",
       AVATAR_LVL6: "img/avatar-player5.png",
       AVATAR_LVL7: "img/avatar-player6.png",
       AVATAR_LVL8: "img/avatar-player7.png",
       AVATAR_LVL9: "img/avatar-player8.png",
       AVATAR_LVL10: "img/avatar-player9.png",
       AVATAR_LVL11: "img/avatar-player10.png",
       AVATAR_LVL12: "img/avatar-player11.png",
       AVATAR_LVL13: "img/avatar-player12.png",
       AVATAR_LVL14: "img/avatar-player13.png",
       AVATAR_LVL15: "img/avatar-player14.png",
       AVATAR_LVL16: "img/avatar-player14.png",
       AVATAR_LVL17: "img/avatar-player14.png",
       AVATAR_LVL18: "img/avatar-player14.png",
       GOLDEN_BREAD: "img/golden-bread.png",
       BUY_BREAD_OUT: "img/buy-bread-out.png",
       BUY_BREAD_IN: "img/buy-bread-in.png",
       BUY_BREAD_CLICK: "img/buy-bread-click.png",
       GAUGE: "img/gauge.png",
       SEASON_4: "img/season-4-out.png",
       SEASON_4_IN: "img/season-4-in.png",
       SEASON_4_OUT: "img/season-4-click.png",
       SEASON4_BOX: "img/season4-box.png",
       SEASON_5: "img/season-5-out.png",
       SEASON_5_IN: "img/season-5-in.png",
       SEASON_5_OUT: "img/season-5-click.png",
       SEASON5_BOX: "img/season5-box.png",
       PROFILE_BOX: "img/profile2-box.png",
       SKINS_BOX: "img/skins-box.png",
       SHOP_BOX: "img/shop-box.png",
       PRIVATE_SERVER_BOX: "img/private-server-box.png",
       SERVER_LOCATION_BOX: "img/location-box.png",
       SERVER_DURATION_BOX: "img/server-duration-box.png",
       TUTORIAL_BOX: "img/tutorial-box.png",
       LEADERBOARD_BOX: "img/leaderboard1-box.png",
       BUY_BREAD_BOX: "img/buy-breads-box.png",
       BAG_BOX: "img/bag-box.png",
       CRATE_BOX: "img/deadbox-box.png",
       BOOK_BOX: "img/book-box.png",
       ACCESSORIES_BOX: "img/accessories-box.png",
       CUSTOM_SKIN_BOX: "img/customskin-box.png",
       BAG_REMAIN_BOX: "img/bag-lasts.png",
       SERVER_REMAIN_BOX: "img/server-lasts.png",
       SERVER_ACCESS_BOX: "img/server-access-box2.png",
       LOOT_BOX: "img/lootbox-box.png",
       CHANGE_NICKNAME1_BOX: "img/change-nickname0.png",
       CHANGE_NICKNAME0_BOX: "img/change-nickname1.png",
       CHEATING_BOX: "img/cheating-box.png",
       DAILY_QUEST_BOX: "img/daily-quest-box.png",
       DAILY_5_BREAD: "img/daily-5-bread.png",
       DAILY_10_BREAD: "img/daily-10-bread.png",
       DAILY_VALID: "img/daily-valid.png",
       NORMAL_PROFILE_OUT: "img/normal-profile-out.png",
       NORMAL_PROFILE_IN: "img/normal-profile-in.png",
       NORMAL_PROFILE_CLICK: "img/normal-profile-click.png",
       FOREST_PROFILE_OUT: "img/forest-profile-out.png",
       FOREST_PROFILE_IN: "img/forest-profile-in.png",
       FOREST_PROFILE_CLICK: "img/forest-profile-click.png",
       ZOMBIE_PROFILE_OUT: "img/zombie-profile-out.png",
       ZOMBIE_PROFILE_IN: "img/zombie-profile-in.png",
       ZOMBIE_PROFILE_CLICK: "img/zombie-profile-click.png",
       VAMPIRE_PROFILE_OUT: "img/vampire-profile-out.png",
       VAMPIRE_PROFILE_IN: "img/vampire-profile-in.png",
       VAMPIRE_PROFILE_CLICK: "img/vampire-profile-click.png",
       TOTAL_PROFILE_OUT: "img/total-profile-out.png",
       TOTAL_PROFILE_IN: "img/total-profile-in.png",
       TOTAL_PROFILE_CLICK: "img/total-profile-click.png",
       SEASON1_PROFILE_OUT: "img/season1-profile-out.png",
       SEASON1_PROFILE_IN: "img/season1-profile-in.png",
       SEASON1_PROFILE_CLICK: "img/season1-profile-click.png",
       SEASON2_PROFILE_OUT: "img/season2-profile-out.png",
       SEASON2_PROFILE_IN: "img/season2-profile-in.png",
       SEASON2_PROFILE_CLICK: "img/season2-profile-click.png",
       SEASON3_PROFILE_OUT: "img/season3-profile-out.png",
       SEASON3_PROFILE_IN: "img/season3-profile-in.png",
       SEASON3_PROFILE_CLICK: "img/season3-profile-click.png",
       SEASON4_PROFILE_OUT: "img/season4-profile-out.png",
       SEASON4_PROFILE_IN: "img/season4-profile-in.png",
       SEASON4_PROFILE_CLICK: "img/season4-profile-click.png",
       SEASON5_PROFILE_OUT: "img/season5-profile-out.png",
       SEASON5_PROFILE_IN: "img/season5-profile-in.png",
       SEASON5_PROFILE_CLICK: "img/season5-profile-click.png",
       LOCKED_SKIN_ALERT: "img/locked-skin-alert.png",
       LOCKED_CUSTOM_ALERT: "img/locked-custom-alert.png",
       RED_LOCKED: "img/bg-red-locked.png",
       SKIN_BUTTON_OUT: "img/skin-button-out.png",
       SKIN_BUTTON_IN: "img/skin-button-in.png",
       SKIN_BUTTON_CLICK: "img/skin-button-click.png",
       ACCESSORY_BUTTON_OUT: "img/accessory-button-out.png",
       ACCESSORY_BUTTON_IN: "img/accessory-button-in.png",
       ACCESSORY_BUTTON_CLICK: "img/accessory-button-click.png",
       BAG_BUTTON_OUT: "img/bag-button-out.png",
       BAG_BUTTON_IN: "img/bag-button-in.png",
       BAG_BUTTON_CLICK: "img/bag-button-click.png",
       BOOK_BUTTON_OUT: "img/book-button-out.png",
       BOOK_BUTTON_IN: "img/book-button-in.png",
       BOOK_BUTTON_CLICK: "img/book-button-click.png",
       CRATE_BUTTON_OUT: "img/deadbox-button-out.png",
       CRATE_BUTTON_IN: "img/deadbox-button-in.png",
       CRATE_BUTTON_CLICK: "img/deadbox-button-click.png",
       LOOT_BUTTON_OUT: "img/loot-button-out.png",
       LOOT_BUTTON_IN: "img/loot-button-in.png",
       LOOT_BUTTON_CLICK: "img/loot-button-click.png",
       FREE_ITEM_OUT: "img/free-item-out.png",
       FREE_ITEM_IN: "img/free-item-in.png",
       FREE_ITEM_CLICK: "img/free-item-click.png",
       WOOD_ITEM_OUT: "img/wood-item-out.png",
       WOOD_ITEM_IN: "img/wood-item-in.png",
       WOOD_ITEM_CLICK: "img/wood-item-click.png",
       STONE_ITEM_OUT: "img/stone-item.png",
       STONE_ITEM_IN: "img/stone-item-in.png",
       STONE_ITEM_CLICK: "img/stone-item-click.png",
       GOLD_ITEM_OUT: "img/gold-item.png",
       GOLD_ITEM_IN: "img/gold-item-in.png",
       GOLD_ITEM_CLICK: "img/gold-item-click.png",
       DIAMOND_ITEM_OUT: "img/diamond-item.png",
       DIAMOND_ITEM_IN: "img/diamond-item-in.png",
       DIAMOND_ITEM_CLICK: "img/diamond-item-click.png",
       AMETHYST_ITEM_OUT: "img/amethyst-item.png",
       AMETHYST_ITEM_IN: "img/amethyst-item-in.png",
       AMETHYST_ITEM_CLICK: "img/amethyst-item-click.png",
       REIDITE_ITEM_OUT: "img/reidite-item.png",
       REIDITE_ITEM_IN: "img/reidite-item-in.png",
       REIDITE_ITEM_CLICK: "img/reidite-item-click.png",
       SPECIAL_ITEM_OUT: "img/special-item-out.png",
       SPECIAL_ITEM_IN: "img/special-item-in.png",
       SPECIAL_ITEM_CLICK: "img/special-item-click.png",
       LEVEL_ITEM_OUT: "img/level-item-out.png",
       LEVEL_ITEM_IN: "img/level-item-in.png",
       LEVEL_ITEM_CLICK: "img/level-item-click.png",
       SKIN_PREVIOUS_OUT: "img/skin-previous-out.png",
       SKIN_PREVIOUS_IN: "img/skin-previous-in.png",
       SKIN_PREVIOUS_CLICK: "img/skin-previous-click.png",
       SKIN_NEXT_OUT: "img/skin-next-out.png",
       SKIN_NEXT_IN: "img/skin-next-in.png",
       SKIN_NEXT_CLICK: "img/skin-next-click.png",
       BACK_BUTTON_OUT: "img/back-button-out.png",
       BACK_BUTTON_IN: "img/back-button-in.png",
       BACK_BUTTON_CLICK: "img/back-button-click.png",
       GET_MORE_BUTTON_OUT: "img/get-more-button-out.png",
       GET_MORE_BUTTON_IN: "img/get-more-button-in.png",
       GET_MORE_BUTTON_CLICK: "img/get-more-button-click.png",
       CURRENCY1_OUT: "img/currency1-out.png",
       CURRENCY1_IN: "img/currency1-in.png",
       CURRENCY1_CLICK: "img/currency1-click.png",
       CURRENCY2_OUT: "img/currency2-out.png",
       CURRENCY2_IN: "img/currency2-in.png",
       CURRENCY2_CLICK: "img/currency2-click.png",
       CURRENCY3_OUT: "img/currency3-out.png",
       CURRENCY3_IN: "img/currency3-in.png",
       CURRENCY3_CLICK: "img/currency3-click.png",
       CURRENCY4_OUT: "img/currency4-out.png",
       CURRENCY4_IN: "img/currency4-in.png",
       CURRENCY4_CLICK: "img/currency4-click.png",
       CURRENCY5_OUT: "img/currency5-out.png",
       CURRENCY5_IN: "img/currency5-in.png",
       CURRENCY5_CLICK: "img/currency5-click.png",
       PRICE1_OUT: "img/price1-out.png",
       PRICE1_IN: "img/price1-in.png",
       PRICE1_CLICK: "img/price1-click.png",
       PRICE2_OUT: "img/price2-out.png",
       PRICE2_IN: "img/price2-in.png",
       PRICE2_CLICK: "img/price2-click.png",
       PRICE3_OUT: "img/price3-out.png",
       PRICE3_IN: "img/price3-in.png",
       PRICE3_CLICK: "img/price3-click.png",
       PRICE4_OUT: "img/price4-out.png",
       PRICE4_IN: "img/price4-in.png",
       PRICE4_CLICK: "img/price4-click.png",
       PRICE5_OUT: "img/price5-out.png",
       PRICE5_IN: "img/price5-in.png",
       PRICE5_CLICK: "img/price5-click.png",
       BUY_PRIVATE_SERVER_OUT: "img/buy-private-server-out.png",
       BUY_PRIVATE_SERVER_IN: "img/buy-private-server-in.png",
       BUY_PRIVATE_SERVER_CLICK: "img/buy-private-server-click.png",
       ATLANTA_OUT: "img/atlanta-out.png",
       ATLANTA_IN: "img/atlanta-in.png",
       ATLANTA_CLICK: "img/atlanta-click.png",
       DALLAS_OUT: "img/dallas-out.png",
       DALLAS_IN: "img/dallas-in.png",
       DALLAS_CLICK: "img/dallas-click.png",
       FREMONT_OUT: "img/fremont-out.png",
       FREMONT_IN: "img/fremont-in.png",
       FREMONT_CLICK: "img/fremont-click.png",
       NEWARK_OUT: "img/newark-out.png",
       NEWARK_IN: "img/newark-in.png",
       NEWARK_CLICK: "img/newark-click.png",
       TORONTO_OUT: "img/toronto-out.png",
       TORONTO_IN: "img/toronto-in.png",
       TORONTO_CLICK: "img/toronto-click.png",
       SINGAPORE_OUT: "img/singapore-out.png",
       SINGAPORE_IN: "img/singapore-in.png",
       SINGAPORE_CLICK: "img/singapore-click.png",
       FRANKFURT_OUT: "img/frankfurt-out.png",
       FRANKFURT_IN: "img/frankfurt-in.png",
       FRANKFURT_CLICK: "img/frankfurt-click.png",
       LONDON_OUT: "img/london-out.png",
       LONDON_IN: "img/london-in.png",
       LONDON_CLICK: "img/london-click.png",
       MUMBAI_OUT: "img/mumbai-out.png",
       MUMBAI_IN: "img/mumbai-in.png",
       MUMBAI_CLICK: "img/mumbai-click.png",
       TOKYO_OUT: "img/tokyo-out.png",
       TOKYO_IN: "img/tokyo-in.png",
       TOKYO_CLICK: "img/tokyo-click.png",
       YES_LOCATION_OUT: "img/yes-location-out.png",
       YES_LOCATION_IN: "img/yes-location-in.png",
       YES_LOCATION_CLICK: "img/yes-location-click.png",
       DAYS3_OUT: "img/3days-out.png",
       DAYS3_IN: "img/3days-in.png",
       DAYS3_CLICK: "img/3days-click.png",
       DAYS7_OUT: "img/7days-out.png",
       DAYS7_IN: "img/7days-in.png",
       DAYS7_CLICK: "img/7days-click.png",
       DAYS30_OUT: "img/30days-out.png",
       DAYS30_IN: "img/30days-in.png",
       DAYS30_CLICK: "img/30days-click.png",
       DAYS90_OUT: "img/90days-out.png",
       DAYS90_IN: "img/90days-in.png",
       DAYS90_CLICK: "img/90days-click.png",
       SPIN1: "img/spin1.png",
       SPIN2: "img/spin2.png",
       SPIN3: "img/spin3.png",
       SPIN4: "img/spin4.png",
       SPIN5: "img/spin5.png",
       SPIN6: "img/spin6.png",
       ARROW_SPIN: "img/arrow-spin.png",
       SPIN_BUTTON_1_OUT: "img/spin-button-1-out.png",
       SPIN_BUTTON_1_IN: "img/spin-button-1-in.png",
       SPIN_BUTTON_1_CLICK: "img/spin-button-1-click.png",
       SPIN_BUTTON_2_OUT: "img/spin-button-2-out.png",
       SPIN_BUTTON_2_IN: "img/spin-button-2-in.png",
       SPIN_BUTTON_2_CLICK: "img/spin-button-2-click.png",
       SPIN_BUTTON_3_OUT: "img/spin-button-3-out.png",
       SPIN_BUTTON_3_IN: "img/spin-button-3-in.png",
       SPIN_BUTTON_3_CLICK: "img/spin-button-3-click.png",
       SPIN_BUTTON_4_OUT: "img/spin-button-4-out.png",
       SPIN_BUTTON_4_IN: "img/spin-button-4-in.png",
       SPIN_BUTTON_4_CLICK: "img/spin-button-4-click.png",
       SPIN_BUTTON_5_OUT: "img/spin-button-5-out.png",
       SPIN_BUTTON_5_IN: "img/spin-button-5-in.png",
       SPIN_BUTTON_5_CLICK: "img/spin-button-5-click.png",
       SPIN_LIGHT: "img/spin-light.png",
       TUTO_WIKI_OUT: "img/tuto-wiki-out.png",
       TUTO_WIKI_IN: "img/tuto-wiki-in.png",
       TUTO_WIKI_CLICK: "img/tuto-wiki-click.png",
       TUTO_PREVIOUS_OUT: "img/tuto-previous-out.png",
       TUTO_PREVIOUS_IN: "img/tuto-previous-in.png",
       TUTO_PREVIOUS_CLICK: "img/tuto-previous-click.png",
       TUTO_NEXT_OUT: "img/tuto-next-out.png",
       TUTO_NEXT_IN: "img/tuto-next-in.png",
       TUTO_NEXT_CLICK: "img/tuto-next-click.png",
       TIME_LEADERBOARD_OUT: "img/time-leaderboard-out.png",
       TIME_LEADERBOARD_IN: "img/time-leaderboard-in.png",
       TIME_LEADERBOARD_CLICK: "img/time-leaderboard-click.png",
       SCORE_LEADERBOARD_OUT: "img/score-leaderboard-out.png",
       SCORE_LEADERBOARD_IN: "img/score-leaderboard-in.png",
       SCORE_LEADERBOARD_CLICK: "img/score-leaderboard-click.png",
       LVL_LEADERBOARD_OUT: "img/lvl-leaderboard-out.png",
       LVL_LEADERBOARD_IN: "img/lvl-leaderboard-in.png",
       LVL_LEADERBOARD_CLICK: "img/lvl-leaderboard-click.png",
       KILL_LEADERBOARD_OUT: "img/kill-leaderboard-out.png",
       KILL_LEADERBOARD_IN: "img/kill-leaderboard-in.png",
       KILL_LEADERBOARD_CLICK: "img/kill-leaderboard-click.png",
       ALL_LEADERBOARD_OUT: "img/all-leaderboard-out.png",
       ALL_LEADERBOARD_IN: "img/all-leaderboard-in.png",
       ALL_LEADERBOARD_CLICK: "img/all-leaderboard-click.png",
       TODAY_LEADERBOARD_OUT: "img/today-leaderboard-out.png",
       TODAY_LEADERBOARD_IN: "img/today-leaderboard-in.png",
       TODAY_LEADERBOARD_CLICK: "img/today-leaderboard-click.png",
       WEEK_LEADERBOARD_OUT: "img/week-leaderboard-out.png",
       WEEK_LEADERBOARD_IN: "img/week-leaderboard-in.png",
       WEEK_LEADERBOARD_CLICK: "img/week-leaderboard-click.png",
       SEASON1_LEADERBOARD_OUT: "img/season1-out.png",
       SEASON1_LEADERBOARD_IN: "img/season1-in.png",
       SEASON1_LEADERBOARD_CLICK: "img/season1-click.png",
       SEASON2_LEADERBOARD_OUT: "img/season2--out.png",
       SEASON2_LEADERBOARD_IN: "img/season2--in.png",
       SEASON2_LEADERBOARD_CLICK: "img/season2--click.png",
       SEASON3_LEADERBOARD_OUT: "img/season3-out.png",
       SEASON3_LEADERBOARD_IN: "img/season3-in.png",
       SEASON3_LEADERBOARD_CLICK: "img/season3-click.png",
       SEASON4_LEADERBOARD_OUT: "img/season4-out.png",
       SEASON4_LEADERBOARD_IN: "img/season4-in.png",
       SEASON4_LEADERBOARD_CLICK: "img/season4-click.png",
       SEASON5_LEADERBOARD_OUT: "img/season5-out.png",
       SEASON5_LEADERBOARD_IN: "img/season5-in.png",
       SEASON5_LEADERBOARD_CLICK: "img/season5-click.png",
       TOTAL_LEAD_OUT: "img/total-lead-out.png",
       TOTAL_LEAD_IN: "img/total-lead-in.png",
       TOTAL_LEAD_CLICK: "img/total-lead-click.png",
       NORMAL_LEAD_OUT: "img/normal-lead-out.png",
       NORMAL_LEAD_IN: "img/normal-lead-in.png",
       NORMAL_LEAD_CLICK: "img/normal-lead-click.png",
       FOREST_LEAD_OUT: "img/forest-lead-out.png",
       FOREST_LEAD_IN: "img/forest-lead-in.png",
       FOREST_LEAD_CLICK: "img/forest-lead-click.png",
       VAMPIRE_LEAD_OUT: "img/vampire-lead-out.png",
       VAMPIRE_LEAD_IN: "img/vampire-lead-in.png",
       VAMPIRE_LEAD_CLICK: "img/vampire-lead-click.png",
       ZOMBIE_LEAD_OUT: "img/zombie-lead-out.png",
       ZOMBIE_LEAD_IN: "img/zombie-lead-in.png",
       ZOMBIE_LEAD_CLICK: "img/zombie-lead-click.png",
       LEVEL5D: "img/day-level5.png",
       LEVEL5N: "img/night-level5.png",
       LEVEL10D: "img/day-level10.png",
       LEVEL10N: "img/night-level10.png",
       LEVEL15D: "img/day-level15.png",
       LEVEL15N: "img/night-level15.png",
       LEVEL20D: "img/day-level20.png",
       LEVEL20N: "img/night-level20.png",
       LEVEL25D: "img/day-level25.png",
       LEVEL25N: "img/night-level25.png",
       LEVEL30D: "img/day-level30.png",
       LEVEL30N: "img/night-level30.png",
       LEVEL35D: "img/day-level35.png",
       LEVEL35N: "img/night-level35.png",
       LEVEL40D: "img/day-level40.png",
       LEVEL40N: "img/night-level40.png",
       LEVEL45D: "img/day-level45.png",
       LEVEL45N: "img/night-level45.png",
       LEVEL50D: "img/day-level50.png",
       LEVEL50N: "img/night-level50.png",
       LEVEL55D: "img/day-level55.png",
       LEVEL55N: "img/night-level55.png",
       LEVEL60D: "img/day-level60.png",
       LEVEL60N: "img/night-level60.png",
       SKIN_DEVASTD: "img/day-skin-devast0.png",
       SKIN_DEVASTN: "img/night-skin-devast0.png",
       HAND_DEVASTD: "img/day-hand-devaster.png",
       HAND_DEVASTN: "img/night-hand-devaster.png",
       SKIN_STARD: "img/day-skin-star0.png",
       SKIN_STARN: "img/night-skin-star0.png",
       HAND_STARD: "img/day-hand-star0.png",
       HAND_STARN: "img/night-hand-star0.png",
       SKIN_VAMPIRED: "img/day-vampire.png",
       SKIN_VAMPIREN: "img/night-vampire.png",
       HAND_VAMPIRED: "img/day-hand-vampire.png",
       HAND_VAMPIREN: "img/night-hand-vampire.png",
       SKIN_ZOMBIED: "img/day-zombie.png",
       SKIN_ZOMBIEN: "img/night-zombie.png",
       HAND_ZOMBIED: "img/day-hand-zombie.png",
       HAND_ZOMBIEN: "img/night-hand-zombie.png",
       SKIN_ROBOTD: "img/day-skin113.png",
       SKIN_ROBOTN: "img/night-skin113.png",
       HAND_ROBOTD: "img/day-hand-skin113.png",
       HAND_ROBOTN: "img/night-hand-skin113.png",
       SKIN0D: "img/day-skin0.png",
       SKIN0N: "img/night-skin0.png",
       SKIN1D: "img/day-skin1.png",
       SKIN1N: "img/night-skin1.png",
       SKIN2D: "img/day-skin2.png",
       SKIN2N: "img/night-skin2.png",
       SKIN3D: "img/day-skin3.png",
       SKIN3N: "img/night-skin3.png",
       SKIN4D: "img/day-skin4.png",
       SKIN4N: "img/night-skin4.png",
       SKIN5D: "img/day-skin5.png",
       SKIN5N: "img/night-skin5.png",
       SKIN6D: "img/day-skin6.png",
       SKIN6N: "img/night-skin6.png",
       SKIN7D: "img/day-skin7.png",
       SKIN7N: "img/night-skin7.png",
       SKIN8D: "img/day-skin8.png",
       SKIN8N: "img/night-skin8.png",
       SKIN9D: "img/day-skin9.png",
       SKIN9N: "img/night-skin9.png",
       SKIN10D: "img/day-skin10.png",
       SKIN10N: "img/night-skin10.png",
       SKIN11D: "img/day-skin11.png",
       SKIN11N: "img/night-skin11.png",
       SKIN12D: "img/day-skin12.png",
       SKIN12N: "img/night-skin12.png",
       SKIN13D: "img/day-skin13.png",
       SKIN13N: "img/night-skin13.png",
       SKIN14D: "img/day-skin14.png",
       SKIN14N: "img/night-skin14.png",
       SKIN15D: "img/day-skin15.png",
       SKIN15N: "img/night-skin15.png",
       SKIN16D: "img/day-skin16.png",
       SKIN16N: "img/night-skin16.png",
       SKIN17D: "img/day-skin17.png",
       SKIN17N: "img/night-skin17.png",
       SKIN18D: "img/day-skin18.png",
       SKIN18N: "img/night-skin18.png",
       SKIN19D: "img/day-skin19.png",
       SKIN19N: "img/night-skin19.png",
       SKIN20D: "img/day-skin20.png",
       SKIN20N: "img/night-skin20.png",
       SKIN21D: "img/day-skin21.png",
       SKIN21N: "img/night-skin21.png",
       SKIN22D: "img/day-skin22.png",
       SKIN22N: "img/night-skin22.png",
       SKIN23D: "img/day-skin23.png",
       SKIN23N: "img/night-skin23.png",
       SKIN24D: "img/day-skin24.png",
       SKIN24N: "img/night-skin24.png",
       SKIN25D: "img/day-skin25.png",
       SKIN25N: "img/night-skin25.png",
       SKIN26D: "img/day-skin26.png",
       SKIN26N: "img/night-skin26.png",
       SKIN27D: "img/day-skin27.png",
       SKIN27N: "img/night-skin27.png",
       SKIN28D: "img/day-skin28.png",
       SKIN28N: "img/night-skin28.png",
       SKIN29D: "img/day-skin29.png",
       SKIN29N: "img/night-skin29.png",
       SKIN30D: "img/day-skin30.png",
       SKIN30N: "img/night-skin30.png",
       SKIN31D: "img/day-skin31.png",
       SKIN31N: "img/night-skin31.png",
       SKIN32D: "img/day-skin32.png",
       SKIN32N: "img/night-skin32.png",
       SKIN33D: "img/day-skin33.png",
       SKIN33N: "img/night-skin33.png",
       SKIN34D: "img/day-skin34.png",
       SKIN34N: "img/night-skin34.png",
       SKIN35D: "img/day-skin35.png",
       SKIN35N: "img/night-skin35.png",
       SKIN36D: "img/day-skin36.png",
       SKIN36N: "img/night-skin36.png",
       SKIN37D: "img/day-skin37.png",
       SKIN37N: "img/night-skin37.png",
       SKIN38D: "img/day-skin38.png",
       SKIN38N: "img/night-skin38.png",
       SKIN39D: "img/day-skin39.png",
       SKIN39N: "img/night-skin39.png",
       SKIN40D: "img/day-skin40.png",
       SKIN40N: "img/night-skin40.png",
       SKIN41D: "img/day-skin41.png",
       SKIN41N: "img/night-skin41.png",
       SKIN42D: "img/day-skin42.png",
       SKIN42N: "img/night-skin42.png",
       SKIN43D: "img/day-skin43.png",
       SKIN43N: "img/night-skin43.png",
       SKIN44D: "img/day-skin44.png",
       SKIN44N: "img/night-skin44.png",
       SKIN45D: "img/day-skin45.png",
       SKIN45N: "img/night-skin45.png",
       SKIN46D: "img/day-skin46.png",
       SKIN46N: "img/night-skin46.png",
       SKIN47D: "img/day-skin47.png",
       SKIN47N: "img/night-skin47.png",
       SKIN48D: "img/day-skin48.png",
       SKIN48N: "img/night-skin48.png",
       SKIN49D: "img/day-skin49.png",
       SKIN49N: "img/night-skin49.png",
       SKIN50D: "img/day-skin50.png",
       SKIN50N: "img/night-skin50.png",
       SKIN51D: "img/day-skin51.png",
       SKIN51N: "img/night-skin51.png",
       SKIN52D: "img/day-skin52.png",
       SKIN52N: "img/night-skin52.png",
       SKIN53D: "img/day-skin53.png",
       SKIN53N: "img/night-skin53.png",
       SKIN54D: "img/day-skin54.png",
       SKIN54N: "img/night-skin54.png",
       SKIN55D: "img/day-skin55.png",
       SKIN55N: "img/night-skin55.png",
       SKIN56D: "img/day-skin56.png",
       SKIN56N: "img/night-skin56.png",
       SKIN57D: "img/day-skin57.png",
       SKIN57N: "img/night-skin57.png",
       SKIN58D: "img/day-skin58.png",
       SKIN58N: "img/night-skin58.png",
       SKIN59D: "img/day-skin59.png",
       SKIN59N: "img/night-skin59.png",
       SKIN60D: "img/day-skin60.png",
       SKIN60N: "img/night-skin60.png",
       SKIN61D: "img/day-skin61.png",
       SKIN61N: "img/night-skin61.png",
       SKIN62D: "img/day-skin62.png",
       SKIN62N: "img/night-skin62.png",
       SKIN63D: "img/day-skin63.png",
       SKIN63N: "img/night-skin63.png",
       SKIN64D: "img/day-skin64.png",
       SKIN64N: "img/night-skin64.png",
       SKIN65D: "img/day-skin65.png",
       SKIN65N: "img/night-skin65.png",
       SKIN66D: "img/day-skin66.png",
       SKIN66N: "img/night-skin66.png",
       SKIN67D: "img/day-skin67.png",
       SKIN67N: "img/night-skin67.png",
       SKIN68D: "img/day-skin68.png",
       SKIN68N: "img/night-skin68.png",
       SKIN69D: "img/day-skin69.png",
       SKIN69N: "img/night-skin69.png",
       SKIN70D: "img/day-skin70.png",
       SKIN70N: "img/night-skin70.png",
       SKIN71D: "img/day-skin71.png",
       SKIN71N: "img/night-skin71.png",
       SKIN72D: "img/day-skin72.png",
       SKIN72N: "img/night-skin72.png",
       SKIN73D: "img/day-skin73.png",
       SKIN73N: "img/night-skin73.png",
       SKIN74D: "img/day-skin74.png",
       SKIN74N: "img/night-skin74.png",
       SKIN75D: "img/day-skin75.png",
       SKIN75N: "img/night-skin75.png",
       SKIN76D: "img/day-skin76.png",
       SKIN76N: "img/night-skin76.png",
       SKIN77D: "img/day-skin77.png",
       SKIN77N: "img/night-skin77.png",
       SKIN78D: "img/day-skin78.png",
       SKIN78N: "img/night-skin78.png",
       SKIN79D: "img/day-skin79.png",
       SKIN79N: "img/night-skin79.png",
       SKIN80D: "img/day-skin80.png",
       SKIN80N: "img/night-skin80.png",
       SKIN81D: "img/day-skin81.png",
       SKIN81N: "img/night-skin81.png",
       SKIN82D: "img/day-skin82.png",
       SKIN82N: "img/night-skin82.png",
       SKIN83D: "img/day-skin83.png",
       SKIN83N: "img/night-skin83.png",
       SKIN84D: "img/day-skin84.png",
       SKIN84N: "img/night-skin84.png",
       SKIN85D: "img/day-skin85.png",
       SKIN85N: "img/night-skin85.png",
       SKIN86D: "img/day-skin86.png",
       SKIN86N: "img/night-skin86.png",
       SKIN87D: "img/day-skin87.png",
       SKIN87N: "img/night-skin87.png",
       SKIN88D: "img/day-skin88.png",
       SKIN88N: "img/night-skin88.png",
       SKIN89D: "img/day-skin89.png",
       SKIN89N: "img/night-skin89.png",
       SKIN90D: "img/day-skin90.png",
       SKIN90N: "img/night-skin90.png",
       SKIN91D: "img/day-skin91.png",
       SKIN91N: "img/night-skin91.png",
       SKIN92D: "img/day-skin92.png",
       SKIN92N: "img/night-skin92.png",
       SKIN93D: "img/day-skin93.png",
       SKIN93N: "img/night-skin93.png",
       SKIN94D: "img/day-skin94.png",
       SKIN94N: "img/night-skin94.png",
       SKIN95D: "img/day-skin95.png",
       SKIN95N: "img/night-skin95.png",
       SKIN96D: "img/day-skin96.png",
       SKIN96N: "img/night-skin96.png",
       SKIN97D: "img/day-skin97.png",
       SKIN97N: "img/night-skin97.png",
       SKIN98D: "img/day-skin98.png",
       SKIN98N: "img/night-skin98.png",
       SKIN99D: "img/day-skin99.png",
       SKIN99N: "img/night-skin99.png",
       SKIN100D: "img/day-skin100.png",
       SKIN100N: "img/night-skin100.png",
       SKIN101D: "img/day-skin101.png",
       SKIN101N: "img/night-skin101.png",
       SKIN102D: "img/day-skin102.png",
       SKIN102N: "img/night-skin102.png",
       SKIN103D: "img/day-skin103.png",
       SKIN103N: "img/night-skin103.png",
       SKIN104D: "img/day-skin104.png",
       SKIN104N: "img/night-skin104.png",
       SKIN105D: "img/day-skin105.png",
       SKIN105N: "img/night-skin105.png",
       SKIN106D: "img/day-skin106.png",
       SKIN106N: "img/night-skin106.png",
       SKIN107D: "img/day-skin107.png",
       SKIN107N: "img/night-skin107.png",
       SKIN108D: "img/day-skin108.png",
       SKIN108N: "img/night-skin108.png",
       SKIN109D: "img/day-skin109.png",
       SKIN109N: "img/night-skin109.png",
       SKIN110D: "img/day-skin110.png",
       SKIN110N: "img/night-skin110.png",
       SKIN111D: "img/day-skin111.png",
       SKIN111N: "img/night-skin111.png",
       SKIN112D: "img/day-skin112.png",
       SKIN112N: "img/night-skin112.png",
       SKIN113D: "img/day-skin113.png",
       SKIN113N: "img/night-skin113.png",
       SKIN114D: "img/day-skin114.png",
       SKIN114N: "img/night-skin114.png",
       SKIN115D: "img/day-skin115.png",
       SKIN115N: "img/night-skin115.png",
       SKIN116D: "img/day-skin116.png",
       SKIN116N: "img/night-skin116.png",
       SKIN117D: "img/day-skin117.png",
       SKIN117N: "img/night-skin117.png",
       SKIN118D: "img/day-skin118.png",
       SKIN118N: "img/night-skin118.png",
       SKIN119D: "img/day-skin119.png",
       SKIN119N: "img/night-skin119.png",
       SKIN120D: "img/day-skin120.png",
       SKIN120N: "img/night-skin120.png",
       SKIN121D: "img/day-skin121.png",
       SKIN121N: "img/night-skin121.png",
       SKIN122D: "img/day-skin122.png",
       SKIN122N: "img/night-skin122.png",
       SKIN123D: "img/day-skin123.png",
       SKIN123N: "img/night-skin123.png",
       SKIN124D: "img/day-skin124.png",
       SKIN124N: "img/night-skin124.png",
       SKIN125D: "img/day-skin125.png",
       SKIN125N: "img/night-skin125.png",
       SKIN126D: "img/day-skin126.png",
       SKIN126N: "img/night-skin126.png",
       SKIN127D: "img/day-skin127.png",
       SKIN127N: "img/night-skin127.png",
       SKIN128D: "img/day-skin128.png",
       SKIN128N: "img/night-skin128.png",
       SKIN129D: "img/day-skin129.png",
       SKIN129N: "img/night-skin129.png",
       SKIN130D: "img/day-skin130-1.png",
       SKIN130N: "img/night-skin130-1.png",
       SKIN131D: "img/day-skin131.png",
       SKIN131N: "img/night-skin131.png",
       SKIN132D: "img/day-skin132.png",
       SKIN132N: "img/night-skin132.png",
       SKIN133D: "img/day-skin133.png",
       SKIN133N: "img/night-skin133.png",
       SKIN134D: "img/day-skin134.png",
       SKIN134N: "img/night-skin134.png",
       SKIN135D: "img/day-skin135.png",
       SKIN135N: "img/night-skin135.png",
       SKIN136D: "img/day-skin136.png",
       SKIN136N: "img/night-skin136.png",
       SKIN137D: "img/day-skin137.png",
       SKIN137N: "img/night-skin137.png",
       SKIN138D: "img/day-skin138.png",
       SKIN138N: "img/night-skin138.png",
       SKIN139D: "img/day-skin139.png",
       SKIN139N: "img/night-skin139.png",
       SKIN140D: "img/day-skin140.png",
       SKIN140N: "img/night-skin140.png",
       SKIN141D: "img/day-skin141.png",
       SKIN141N: "img/night-skin141.png",
       SKIN142D: "img/day-skin142.png",
       SKIN142N: "img/night-skin142.png",
       SKIN143D: "img/day-skin143.png",
       SKIN143N: "img/night-skin143.png",
       SKIN144D: "img/day-skin144.png",
       SKIN144N: "img/night-skin144.png",
       SKIN145D: "img/day-skin145.png",
       SKIN145N: "img/night-skin145.png",
       SKIN146D: "img/day-skin146.png",
       SKIN146N: "img/night-skin146.png",
       SKIN147D: "img/day-skin147.png",
       SKIN147N: "img/night-skin147.png",
       SKIN148D: "img/day-skin148.png",
       SKIN148N: "img/night-skin148.png",
       SKIN149D: "img/day-skin149.png",
       SKIN149N: "img/night-skin149.png",
       SKIN150D: "img/day-skin150.png",
       SKIN150N: "img/night-skin150.png",
       HAND_SKIN0D: "img/day-hand-skin0.png",
       HAND_SKIN0N: "img/night-hand-skin0.png",
       HAND_SKIN1D: "img/day-hand-skin1.png",
       HAND_SKIN1N: "img/night-hand-skin1.png",
       HAND_SKIN2D: "img/day-hand-skin2.png",
       HAND_SKIN2N: "img/night-hand-skin2.png",
       HAND_SKIN3D: "img/day-hand-skin3.png",
       HAND_SKIN3N: "img/night-hand-skin3.png",
       HAND_SKIN4D: "img/day-hand-skin4.png",
       HAND_SKIN4N: "img/night-hand-skin4.png",
       HAND_SKIN5D: "img/day-hand-skin5.png",
       HAND_SKIN5N: "img/night-hand-skin5.png",
       HAND_SKIN6D: "img/day-hand-skin6.png",
       HAND_SKIN6N: "img/night-hand-skin6.png",
       HAND_SKIN7D: "img/day-hand-skin6.png",
       HAND_SKIN7N: "img/night-hand-skin6.png",
       HAND_SKIN8D: "img/day-hand-skin8.png",
       HAND_SKIN8N: "img/night-hand-skin8.png",
       HAND_SKIN9D: "img/day-hand-skin9.png",
       HAND_SKIN9N: "img/night-hand-skin9.png",
       HAND_SKIN10D: "img/day-hand-skin10.png",
       HAND_SKIN10N: "img/night-hand-skin10.png",
       HAND_SKIN11D: "img/day-hand-skin11.png",
       HAND_SKIN11N: "img/night-hand-skin11.png",
       HAND_SKIN12D: "img/day-hand-skin12.png",
       HAND_SKIN12N: "img/night-hand-skin12.png",
       HAND_SKIN13D: "img/day-hand-skin13.png",
       HAND_SKIN13N: "img/night-hand-skin13.png",
       HAND_SKIN14D: "img/day-hand-skin14.png",
       HAND_SKIN14N: "img/night-hand-skin14.png",
       HAND_SKIN15D: "img/day-hand-skin15.png",
       HAND_SKIN15N: "img/night-hand-skin15.png",
       HAND_SKIN16D: "img/day-hand-skin16.png",
       HAND_SKIN16N: "img/night-hand-skin16.png",
       HAND_SKIN17D: "img/day-hand-skin17.png",
       HAND_SKIN17N: "img/night-hand-skin17.png",
       HAND_SKIN18D: "img/day-hand-skin18.png",
       HAND_SKIN18N: "img/night-hand-skin18.png",
       HAND_SKIN19D: "img/day-hand-skin19.png",
       HAND_SKIN19N: "img/night-hand-skin19.png",
       HAND_SKIN20D: "img/day-hand-skin20.png",
       HAND_SKIN20N: "img/night-hand-skin20.png",
       HAND_SKIN21D: "img/day-hand-skin21.png",
       HAND_SKIN21N: "img/night-hand-skin21.png",
       HAND_SKIN22D: "img/day-hand-skin22.png",
       HAND_SKIN22N: "img/night-hand-skin22.png",
       HAND_SKIN23D: "img/day-hand-skin23.png",
       HAND_SKIN23N: "img/night-hand-skin23.png",
       HAND_SKIN24D: "img/day-hand-skin24.png",
       HAND_SKIN24N: "img/night-hand-skin24.png",
       HAND_SKIN25D: "img/day-hand-skin25.png",
       HAND_SKIN25N: "img/night-hand-skin25.png",
       HAND_SKIN26D: "img/day-hand-skin26.png",
       HAND_SKIN26N: "img/night-hand-skin26.png",
       HAND_SKIN27D: "img/day-hand-skin27.png",
       HAND_SKIN27N: "img/night-hand-skin27.png",
       HAND_SKIN28D: "img/day-hand-skin28.png",
       HAND_SKIN28N: "img/night-hand-skin28.png",
       HAND_SKIN29D: "img/day-hand-skin29.png",
       HAND_SKIN29N: "img/night-hand-skin29.png",
       HAND_SKIN30D: "img/day-hand-skin30.png",
       HAND_SKIN30N: "img/night-hand-skin30.png",
       HAND_SKIN31D: "img/day-hand-skin31.png",
       HAND_SKIN31N: "img/night-hand-skin31.png",
       HAND_SKIN32D: "img/day-hand-skin32.png",
       HAND_SKIN32N: "img/night-hand-skin32.png",
       HAND_SKIN33D: "img/day-hand-skin33.png",
       HAND_SKIN33N: "img/night-hand-skin33.png",
       HAND_SKIN34D: "img/day-hand-skin34.png",
       HAND_SKIN34N: "img/night-hand-skin34.png",
       HAND_SKIN35D: "img/day-hand-skin35.png",
       HAND_SKIN35N: "img/night-hand-skin35.png",
       HAND_SKIN36D: "img/day-hand-skin36.png",
       HAND_SKIN36N: "img/night-hand-skin36.png",
       HAND_SKIN37D: "img/day-hand-skin37.png",
       HAND_SKIN37N: "img/night-hand-skin37.png",
       HAND_SKIN38D: "img/day-hand-skin38.png",
       HAND_SKIN38N: "img/night-hand-skin38.png",
       HAND_SKIN39D: "img/day-hand-skin39.png",
       HAND_SKIN39N: "img/night-hand-skin39.png",
       HAND_SKIN40D: "img/day-hand-skin40.png",
       HAND_SKIN40N: "img/night-hand-skin40.png",
       HAND_SKIN41D: "img/day-hand-skin41.png",
       HAND_SKIN41N: "img/night-hand-skin41.png",
       HAND_SKIN42D: "img/day-hand-skin42.png",
       HAND_SKIN42N: "img/night-hand-skin42.png",
       HAND_SKIN43D: "img/day-hand-skin43.png",
       HAND_SKIN43N: "img/night-hand-skin43.png",
       HAND_SKIN44D: "img/day-hand-skin16.png",
       HAND_SKIN44N: "img/night-hand-skin16.png",
       HAND_SKIN45D: "img/day-hand-skin45.png",
       HAND_SKIN45N: "img/night-hand-skin45.png",
       HAND_SKIN46D: "img/day-hand-skin46.png",
       HAND_SKIN46N: "img/night-hand-skin46.png",
       HAND_SKIN47D: "img/day-hand-skin47.png",
       HAND_SKIN47N: "img/night-hand-skin47.png",
       HAND_SKIN48D: "img/day-hand-skin48.png",
       HAND_SKIN48N: "img/night-hand-skin48.png",
       HAND_SKIN49D: "img/day-hand-skin49.png",
       HAND_SKIN49N: "img/night-hand-skin49.png",
       HAND_SKIN50D: "img/day-hand-skin49.png",
       HAND_SKIN50N: "img/night-hand-skin49.png",
       HAND_SKIN51D: "img/day-hand-skin51.png",
       HAND_SKIN51N: "img/night-hand-skin51.png",
       HAND_SKIN52D: "img/day-hand-skin52.png",
       HAND_SKIN52N: "img/night-hand-skin52.png",
       HAND_SKIN53D: "img/day-hand-skin53.png",
       HAND_SKIN53N: "img/night-hand-skin53.png",
       HAND_SKIN54D: "img/day-hand-skin53.png",
       HAND_SKIN54N: "img/night-hand-skin53.png",
       HAND_SKIN55D: "img/day-hand-skin55.png",
       HAND_SKIN55N: "img/night-hand-skin55.png",
       HAND_SKIN56D: "img/day-hand-skin56.png",
       HAND_SKIN56N: "img/night-hand-skin56.png",
       HAND_SKIN57D: "img/day-hand-skin57.png",
       HAND_SKIN57N: "img/night-hand-skin57.png",
       HAND_SKIN58D: "img/day-hand-skin58.png",
       HAND_SKIN58N: "img/night-hand-skin58.png",
       HAND_SKIN59D: "img/day-hand-skin59.png",
       HAND_SKIN59N: "img/night-hand-skin59.png",
       HAND_SKIN60D: "img/day-hand-skin61.png",
       HAND_SKIN60N: "img/night-hand-skin61.png",
       HAND_SKIN61D: "img/day-hand-skin61.png",
       HAND_SKIN61N: "img/night-hand-skin61.png",
       HAND_SKIN62D: "img/day-hand-skin62.png",
       HAND_SKIN62N: "img/night-hand-skin62.png",
       HAND_SKIN63D: "img/day-hand-skin63.png",
       HAND_SKIN63N: "img/night-hand-skin63.png",
       HAND_SKIN64D: "img/day-hand-skin64.png",
       HAND_SKIN64N: "img/night-hand-skin64.png",
       HAND_SKIN65D: "img/day-hand-skin65.png",
       HAND_SKIN65N: "img/night-hand-skin65.png",
       HAND_SKIN66D: "img/day-hand-skin66.png",
       HAND_SKIN66N: "img/night-hand-skin66.png",
       HAND_SKIN67D: "img/day-hand-skin67.png",
       HAND_SKIN67N: "img/night-hand-skin67.png",
       HAND_SKIN68D: "img/day-hand-skin68.png",
       HAND_SKIN68N: "img/night-hand-skin68.png",
       HAND_SKIN69D: "img/day-hand-skin69.png",
       HAND_SKIN69N: "img/night-hand-skin69.png",
       HAND_SKIN70D: "img/day-hand-skin70.png",
       HAND_SKIN70N: "img/night-hand-skin70.png",
       HAND_SKIN71D: "img/day-hand-skin71.png",
       HAND_SKIN71N: "img/night-hand-skin71.png",
       HAND_SKIN72D: "img/day-hand-skin72.png",
       HAND_SKIN72N: "img/night-hand-skin72.png",
       HAND_SKIN73D: "img/day-hand-skin73.png",
       HAND_SKIN73N: "img/night-hand-skin73.png",
       HAND_SKIN74D: "img/day-hand-skin74.png",
       HAND_SKIN74N: "img/night-hand-skin74.png",
       HAND_SKIN75D: "img/day-hand-skin75.png",
       HAND_SKIN75N: "img/night-hand-skin75.png",
       HAND_SKIN76D: "img/day-hand-skin76.png",
       HAND_SKIN76N: "img/night-hand-skin76.png",
       HAND_SKIN77D: "img/day-hand-skin77.png",
       HAND_SKIN77N: "img/night-hand-skin77.png",
       HAND_SKIN78D: "img/day-hand-skin78.png",
       HAND_SKIN78N: "img/night-hand-skin78.png",
       HAND_SKIN79D: "img/day-hand-skin79.png",
       HAND_SKIN79N: "img/night-hand-skin79.png",
       HAND_SKIN80D: "img/day-hand-skin80.png",
       HAND_SKIN80N: "img/night-hand-skin80.png",
       HAND_SKIN81D: "img/day-hand-skin81.png",
       HAND_SKIN81N: "img/night-hand-skin81.png",
       HAND_SKIN82D: "img/day-hand-skin82.png",
       HAND_SKIN82N: "img/night-hand-skin82.png",
       HAND_SKIN83D: "img/day-hand-skin83.png",
       HAND_SKIN83N: "img/night-hand-skin83.png",
       HAND_SKIN84D: "img/day-hand-skin84.png",
       HAND_SKIN84N: "img/night-hand-skin84.png",
       HAND_SKIN85D: "img/day-hand-skin85.png",
       HAND_SKIN85N: "img/night-hand-skin85.png",
       HAND_SKIN86D: "img/day-hand-skin86.png",
       HAND_SKIN86N: "img/night-hand-skin86.png",
       HAND_SKIN87D: "img/day-hand-skin87.png",
       HAND_SKIN87N: "img/night-hand-skin87.png",
       HAND_SKIN88D: "img/day-hand-skin88.png",
       HAND_SKIN88N: "img/night-hand-skin88.png",
       HAND_SKIN89D: "img/day-hand-skin89.png",
       HAND_SKIN89N: "img/night-hand-skin89.png",
       HAND_SKIN90D: "img/day-hand-skin90.png",
       HAND_SKIN90N: "img/night-hand-skin90.png",
       HAND_SKIN91D: "img/day-hand-skin91.png",
       HAND_SKIN91N: "img/night-hand-skin91.png",
       HAND_SKIN92D: "img/day-hand-skin92.png",
       HAND_SKIN92N: "img/night-hand-skin92.png",
       HAND_SKIN93D: "img/day-hand-skin93.png",
       HAND_SKIN93N: "img/night-hand-skin93.png",
       HAND_SKIN94D: "img/day-hand-skin94.png",
       HAND_SKIN94N: "img/night-hand-skin94.png",
       HAND_SKIN95D: "img/day-hand-skin95.png",
       HAND_SKIN95N: "img/night-hand-skin95.png",
       HAND_SKIN96D: "img/day-hand-skin96.png",
       HAND_SKIN96N: "img/night-hand-skin96.png",
       HAND_SKIN97D: "img/day-hand-skin97.png",
       HAND_SKIN97N: "img/night-hand-skin97.png",
       HAND_SKIN98D: "img/day-hand-skin98.png",
       HAND_SKIN98N: "img/night-hand-skin98.png",
       HAND_SKIN99D: "img/day-hand-skin99.png",
       HAND_SKIN99N: "img/night-hand-skin99.png",
       HAND_SKIN100D: "img/day-hand-skin100.png",
       HAND_SKIN100N: "img/night-hand-skin100.png",
       HAND_SKIN101D: "img/day-hand-skin101.png",
       HAND_SKIN101N: "img/night-hand-skin101.png",
       HAND_SKIN102D: "img/day-hand-skin102.png",
       HAND_SKIN102N: "img/night-hand-skin102.png",
       HAND_SKIN103D: "img/day-hand-skin103.png",
       HAND_SKIN103N: "img/night-hand-skin103.png",
       HAND_SKIN104D: "img/day-hand-skin104.png",
       HAND_SKIN104N: "img/night-hand-skin104.png",
       HAND_SKIN105D: "img/day-hand-skin105.png",
       HAND_SKIN105N: "img/night-hand-skin105.png",
       HAND_SKIN106D: "img/day-hand-skin106.png",
       HAND_SKIN106N: "img/night-hand-skin106.png",
       HAND_SKIN107D: "img/day-hand-skin107.png",
       HAND_SKIN107N: "img/night-hand-skin107.png",
       HAND_SKIN108D: "img/day-hand-skin108.png",
       HAND_SKIN108N: "img/night-hand-skin108.png",
       HAND_SKIN109D: "img/day-hand-skin109.png",
       HAND_SKIN109N: "img/night-hand-skin109.png",
       HAND_SKIN110D: "img/day-hand-skin110.png",
       HAND_SKIN110N: "img/night-hand-skin110.png",
       HAND_SKIN111D: "img/day-hand-skin111.png",
       HAND_SKIN111N: "img/night-hand-skin111.png",
       HAND_SKIN112D: "img/day-hand-skin112.png",
       HAND_SKIN112N: "img/night-hand-skin112.png",
       HAND_SKIN113D: "img/day-hand-skin113.png",
       HAND_SKIN113N: "img/night-hand-skin113.png",
       HAND_SKIN114D: "img/day-hand-skin114.png",
       HAND_SKIN114N: "img/night-hand-skin114.png",
       HAND_SKIN115D: "img/day-hand-skin115.png",
       HAND_SKIN115N: "img/night-hand-skin115.png",
       HAND_SKIN116D: "img/day-hand-skin116.png",
       HAND_SKIN116N: "img/night-hand-skin116.png",
       HAND_SKIN117D: "img/day-hand-skin117.png",
       HAND_SKIN117N: "img/night-hand-skin117.png",
       HAND_SKIN118D: "img/day-hand-skin118.png",
       HAND_SKIN118N: "img/night-hand-skin118.png",
       HAND_SKIN119D: "img/day-hand-skin119.png",
       HAND_SKIN119N: "img/night-hand-skin119.png",
       HAND_SKIN120D: "img/day-hand-skin120.png",
       HAND_SKIN120N: "img/night-hand-skin120.png",
       HAND_SKIN121D: "img/day-hand-skin122.png",
       HAND_SKIN121N: "img/night-hand-skin122.png",
       HAND_SKIN122D: "img/day-hand-skin122.png",
       HAND_SKIN122N: "img/night-hand-skin122.png",
       HAND_SKIN123D: "img/day-hand-skin122.png",
       HAND_SKIN123N: "img/night-hand-skin122.png",
       HAND_SKIN124D: "img/day-hand-skin124.png",
       HAND_SKIN124N: "img/night-hand-skin124.png",
       HAND_SKIN125D: "img/day-hand-skin125.png",
       HAND_SKIN125N: "img/night-hand-skin125.png",
       HAND_SKIN126D: "img/day-hand-skin126.png",
       HAND_SKIN126N: "img/night-hand-skin126.png",
       HAND_SKIN127D: "img/day-hand-skin127.png",
       HAND_SKIN127N: "img/night-hand-skin127.png",
       HAND_SKIN128D: "img/day-hand-skin128.png",
       HAND_SKIN128N: "img/night-hand-skin128.png",
       HAND_SKIN129D: "img/day-hand-skin129.png",
       HAND_SKIN129N: "img/night-hand-skin129.png",
       HAND_SKIN130D: "img/day-hand-skin130.png",
       HAND_SKIN130N: "img/night-hand-skin130.png",
       HAND_SKIN131D: "img/day-hand-skin131.png",
       HAND_SKIN131N: "img/night-hand-skin131.png",
       HAND_SKIN132D: "img/day-hand-skin130.png",
       HAND_SKIN132N: "img/night-hand-skin130.png",
       HAND_SKIN133D: "img/day-hand-skin133.png",
       HAND_SKIN133N: "img/night-hand-skin133.png",
       HAND_SKIN134D: "img/day-hand-skin134.png",
       HAND_SKIN134N: "img/night-hand-skin134.png",
       HAND_SKIN135D: "img/day-hand-skin135.png",
       HAND_SKIN135N: "img/night-hand-skin135.png",
       HAND_SKIN136D: "img/day-hand-skin136.png",
       HAND_SKIN136N: "img/night-hand-skin136.png",
       HAND_SKIN137D: "img/day-hand-skin137.png",
       HAND_SKIN137N: "img/night-hand-skin137.png",
       HAND_SKIN138D: "img/day-hand-skin138.png",
       HAND_SKIN138N: "img/night-hand-skin138.png",
       HAND_SKIN139D: "img/day-hand-skin139.png",
       HAND_SKIN139N: "img/night-hand-skin139.png",
       HAND_SKIN140D: "img/day-hand-skin140.png",
       HAND_SKIN140N: "img/night-hand-skin140.png",
       HAND_SKIN141D: "img/day-hand-skin141.png",
       HAND_SKIN141N: "img/night-hand-skin141.png",
       HAND_SKIN142D: "img/day-hand-skin142.png",
       HAND_SKIN142N: "img/night-hand-skin142.png",
       HAND_SKIN143D: "img/day-hand-skin143.png",
       HAND_SKIN143N: "img/night-hand-skin143.png",
       HAND_SKIN144D: "img/day-hand-skin144.png",
       HAND_SKIN144N: "img/night-hand-skin144.png",
       HAND_SKIN145D: "img/day-hand-skin145.png",
       HAND_SKIN145N: "img/night-hand-skin145.png",
       HAND_SKIN146D: "img/day-hand-skin146.png",
       HAND_SKIN146N: "img/night-hand-skin146.png",
       HAND_SKIN147D: "img/day-hand-skin147.png",
       HAND_SKIN147N: "img/night-hand-skin147.png",
       HAND_SKIN148D: "img/day-hand-skin148.png",
       HAND_SKIN148N: "img/night-hand-skin148.png",
       HAND_SKIN149D: "img/day-hand-skin149.png",
       HAND_SKIN149N: "img/night-hand-skin149.png",
       HAND_SKIN150D: "img/day-hand-skin150.png",
       HAND_SKIN150N: "img/night-hand-skin150.png",
       BAG_STARD: "img/day-bag-star0.png",
       BAG_STARN: "img/night-bag-star0.png",
       BAG0D: "img/day-bag0.png",
       BAG0N: "img/night-bag0.png",
       BAG1D: "img/day-bag1.png",
       BAG1N: "img/night-bag1.png",
       BAG2D: "img/day-bag2.png",
       BAG2N: "img/night-bag2.png",
       BAG3D: "img/day-bag3.png",
       BAG3N: "img/night-bag3.png",
       BAG4D: "img/day-bag4.png",
       BAG4N: "img/night-bag4.png",
       BAG5D: "img/day-bag5.png",
       BAG5N: "img/night-bag5.png",
       BAG6D: "img/day-bag6.png",
       BAG6N: "img/night-bag6.png",
       BAG7D: "img/day-bag7.png",
       BAG7N: "img/night-bag7.png",
       BAG8D: "img/day-bag8.png",
       BAG8N: "img/night-bag8.png",
       BAG9D: "img/day-bag9.png",
       BAG9N: "img/night-bag9.png",
       BAG10D: "img/day-bag10.png",
       BAG10N: "img/night-bag10.png",
       BAG11D: "img/day-bag11.png",
       BAG11N: "img/night-bag11.png",
       BAG13D: "img/day-bag13.png",
       BAG13N: "img/night-bag13.png",
       BAG14D: "img/day-bag14.png",
       BAG14N: "img/night-bag14.png",
       BAG16D: "img/day-bag16.png",
       BAG16N: "img/night-bag16.png",
       BAG17D: "img/day-bag17.png",
       BAG17N: "img/night-bag17.png",
       BAG18D: "img/day-bag18.png",
       BAG18N: "img/night-bag18.png",
       BAG19D: "img/day-bag19.png",
       BAG19N: "img/night-bag19.png",
       BAG20D: "img/day-bag20.png",
       BAG20N: "img/night-bag20.png",
       BAG21D: "img/day-bag21.png",
       BAG21N: "img/night-bag21.png",
       BAG22D: "img/day-bag22.png",
       BAG22N: "img/night-bag22.png",
       BAG23D: "img/day-bag23.png",
       BAG23N: "img/night-bag23.png",
       BAG24D: "img/day-bag24.png",
       BAG24N: "img/night-bag24.png",
       BAG25D: "img/day-bag25.png",
       BAG25N: "img/night-bag25.png",
       BAG26D: "img/day-bag26.png",
       BAG26N: "img/night-bag26.png",
       BAG27D: "img/day-bag27.png",
       BAG27N: "img/night-bag27.png",
       BAG28D: "img/day-bag28.png",
       BAG28N: "img/night-bag28.png",
       BAG29D: "img/day-bag29.png",
       BAG29N: "img/night-bag29.png",
       BAG30D: "img/day-bag30.png",
       BAG30N: "img/night-bag30.png",
       BAG31D: "img/day-bag31.png",
       BAG31N: "img/night-bag31.png",
       BAG32D: "img/day-bag32.png",
       BAG32N: "img/night-bag32.png",
       BAG33D: "img/day-bag33.png",
       BAG33N: "img/night-bag33.png",
       BAG34D: "img/day-bag34.png",
       BAG34N: "img/night-bag34.png",
       BAG35D: "img/day-bag35.png",
       BAG35N: "img/night-bag35.png",
       BAG36D: "img/day-bag36.png",
       BAG36N: "img/night-bag36.png",
       BAG37D: "img/day-bag37.png",
       BAG37N: "img/night-bag37.png",
       BAG38D: "img/day-bag38.png",
       BAG38N: "img/night-bag38.png",
       BAG39D: "img/day-bag39.png",
       BAG39N: "img/night-bag39.png",
       BAG40D: "img/day-bag40.png",
       BAG40N: "img/night-bag40.png",
       BAG41D: "img/day-bag41.png",
       BAG41N: "img/night-bag41.png",
       BAG42D: "img/day-bag42.png",
       BAG42N: "img/night-bag42.png",
       BAG43D: "img/day-bag43.png",
       BAG43N: "img/night-bag43.png",
       BAG44D: "img/day-bag44.png",
       BAG44N: "img/night-bag44.png",
       BAG45D: "img/day-bag45.png",
       BAG45N: "img/night-bag45.png",
       BAG46D: "img/day-bag46.png",
       BAG46N: "img/night-bag46.png",
       BAG47D: "img/day-bag47.png",
       BAG47N: "img/night-bag47.png",
       BAG48D: "img/day-bag48.png",
       BAG48N: "img/night-bag48.png",
       BAG49D: "img/day-bag49.png",
       BAG49N: "img/night-bag49.png",
       BAG50D: "img/day-bag50.png",
       BAG50N: "img/night-bag50.png",
       BAG51D: "img/day-bag51.png",
       BAG51N: "img/night-bag51.png",
       BAG52D: "img/day-bag52.png",
       BAG52N: "img/night-bag52.png",
       BAG53D: "img/day-bag53.png",
       BAG53N: "img/night-bag53.png",
       BAG54D: "img/day-bag54.png",
       BAG54N: "img/night-bag54.png",
       BAG55D: "img/day-bag55.png",
       BAG55N: "img/night-bag55.png",
       BAG56D: "img/day-bag56.png",
       BAG56N: "img/night-bag56.png",
       BAG57D: "img/day-bag57.png",
       BAG57N: "img/night-bag57.png",
       BAG58D: "img/day-bag58.png",
       BAG58N: "img/night-bag58.png",
       BAG59D: "img/day-bag59.png",
       BAG59N: "img/night-bag59.png",
       BAG60D: "img/day-bag60.png",
       BAG60N: "img/night-bag60.png",
       BAG61D: "img/day-bag61.png",
       BAG61N: "img/night-bag61.png",
       BAG62D: "img/day-bag62.png",
       BAG62N: "img/night-bag62.png",
       BAG63D: "img/day-bag63.png",
       BAG63N: "img/night-bag63.png",
       BAG64D: "img/day-bag64.png",
       BAG64N: "img/night-bag64.png",
       BAG65D: "img/day-bag65.png",
       BAG65N: "img/night-bag65.png",
       BAG66D: "img/day-bag66.png",
       BAG66N: "img/night-bag66.png",
       BAG67D: "img/day-bag67.png",
       BAG67N: "img/night-bag67.png",
       BAG68D: "img/day-bag68.png",
       BAG68N: "img/night-bag68.png",
       ACCESSORY0D: "img/day-accessory0.png",
       ACCESSORY17D: "img/day-accessory0-pacques.png",
       ACCESSORY17N: "img/night-accessory0-pacques.png",
       ACCESSORY13D: "img/day-accessory13.png",
       ACCESSORY13N: "img/night-accessory13.png",
       ACCESSORY14D: "img/day-accessory14.png",
       ACCESSORY14N: "img/night-accessory14.png",
       ACCESSORY15D: "img/day-accessory15.png",
       ACCESSORY15N: "img/night-accessory15.png",
       ACCESSORY16D: "img/day-accessory16.png",
       ACCESSORY16N: "img/night-accessory16.png",
       ACCESSORY18D: "img/day-accessory17.png",
       ACCESSORY18N: "img/day-accessory17.png",
       ACCESSORY19D: "img/day-accessory19.png",
       ACCESSORY19N: "img/night-accessory19.png",
       ACCESSORY20D: "img/day-accessory20.png",
       ACCESSORY20N: "img/night-accessory20.png",
       ACCESSORY21D: "img/day-accessory21.png",
       ACCESSORY21N: "img/night-accessory21.png",
       ACCESSORY22D: "img/day-accessory22.png",
       ACCESSORY22N: "img/night-accessory22.png",
       ACCESSORY23D: "img/day-accessory23.png",
       ACCESSORY23N: "img/night-accessory23.png",
       ACCESSORY24D: "img/day-accessory24.png",
       ACCESSORY24N: "img/night-accessory24.png",
       ACCESSORY25D: "img/day-accessory25.png",
       ACCESSORY25N: "img/night-accessory25.png",
       ACCESSORY26D: "img/day-accessory26.png",
       ACCESSORY26N: "img/night-accessory26.png",
       ACCESSORY27D: "img/day-accessory27.png",
       ACCESSORY27N: "img/night-accessory27.png",
       ACCESSORY28D: "img/day-accessory18.png",
       ACCESSORY28N: "img/night-accessory18.png",
       ACCESSORY29D: "img/day-accessory29.png",
       ACCESSORY29N: "img/night-accessory29.png",
       ACCESSORY30D: "img/day-accessory30.png",
       ACCESSORY30N: "img/night-accessory30.png",
       ACCESSORY31D: "img/day-accessory31.png",
       ACCESSORY31N: "img/night-accessory31.png",
       ACCESSORY32D: "img/day-accessory32.png",
       ACCESSORY32N: "img/night-accessory32.png",
       ACCESSORY33D: "img/day-accessory33.png",
       ACCESSORY33N: "img/night-accessory33.png",
       ACCESSORY34D: "img/day-accessory34.png",
       ACCESSORY34N: "img/night-accessory34.png",
       ACCESSORY35D: "img/day-accessory35.png",
       ACCESSORY35N: "img/night-accessory35.png",
       ACCESSORY36D: "img/day-accessory28.png",
       ACCESSORY36N: "img/night-accessory28.png",
       ACCESSORY37D: "img/day-accessory36.png",
       ACCESSORY37N: "img/night-accessory36.png",
       ACCESSORY38D: "img/day-accessory37.png",
       ACCESSORY38N: "img/night-accessory37.png",
       ACCESSORY39D: "img/day-accessory39.png",
       ACCESSORY39N: "img/night-accessory39.png",
       ACCESSORY40D: "img/day-accessory40.png",
       ACCESSORY40N: "img/night-accessory40.png",
       ACCESSORY41D: "img/day-accessory41.png",
       ACCESSORY41N: "img/night-accessory41.png",
       ACCESSORY42D: "img/day-accessory42.png",
       ACCESSORY42N: "img/night-accessory42.png",
       ACCESSORY43D: "img/day-accessory43.png",
       ACCESSORY43N: "img/night-accessory43.png",
       ACCESSORY44D: "img/day-accessory44.png",
       ACCESSORY44N: "img/night-accessory44.png",
       ACCESSORY45D: "img/day-accessory38.png",
       ACCESSORY45N: "img/night-accessory38.png",
       ACCESSORY46D: "img/day-accessory46.png",
       ACCESSORY46N: "img/night-accessory46.png",
       ACCESSORY47D: "img/day-accessory47.png",
       ACCESSORY47N: "img/night-accessory47.png",
       ACCESSORY48D: "img/day-accessory48.png",
       ACCESSORY48N: "img/night-accessory48.png",
       ACCESSORY49D: "img/day-accessory49.png",
       ACCESSORY49N: "img/night-accessory49.png",
       ACCESSORY50D: "img/day-accessory45.png",
       ACCESSORY50N: "img/night-accessory45.png",
       ACCESSORY51D: "img/day-accessory50.png",
       ACCESSORY51N: "img/night-accessory50.png",
       ACCESSORY52D: "img/day-accessory51.png",
       ACCESSORY52N: "img/night-accessory51.png",
       ACCESSORY53D: "img/day-accessory52.png",
       ACCESSORY53N: "img/night-accessory52.png",
       ACCESSORY54D: "img/day-accessory53.png",
       ACCESSORY54N: "img/night-accessory53.png",
       ACCESSORY55D: "img/day-accessory54.png",
       ACCESSORY55N: "img/night-accessory54.png",
       ACCESSORY56D: "img/day-accessory55.png",
       ACCESSORY56N: "img/night-accessory55.png",
       ACCESSORY57D: "img/day-accessory56.png",
       ACCESSORY57N: "img/night-accessory56.png",
       ACCESSORY58D: "img/day-accessory57.png",
       ACCESSORY58N: "img/night-accessory57.png",
       ACCESSORY59D: "img/day-accessory58.png",
       ACCESSORY59N: "img/night-accessory58.png",
       ACCESSORY60D: "img/day-accessory59.png",
       ACCESSORY60N: "img/night-accessory59.png",
       ACCESSORY61D: "img/day-accessory60.png",
       ACCESSORY61N: "img/night-accessory60.png",
       ACCESSORY62D: "img/day-accessory61.png",
       ACCESSORY62N: "img/night-accessory61.png",
       ACCESSORY63D: "img/day-accessory62.png",
       ACCESSORY63N: "img/night-accessory62.png",
       ACCESSORY64D: "img/day-accessory63.png",
       ACCESSORY64N: "img/night-accessory63.png",
       ACCESSORY65D: "img/day-accessory64.png",
       ACCESSORY65N: "img/night-accessory64.png",
       ACCESSORY66D: "img/day-accessory65.png",
       ACCESSORY66N: "img/night-accessory65.png",
       ACCESSORY67D: "img/day-accessory66.png",
       ACCESSORY67N: "img/night-accessory66.png",
       ACCESSORY68D: "img/day-accessory67.png",
       ACCESSORY68N: "img/night-accessory67.png",
       ACCESSORY69D: "img/day-accessory68.png",
       ACCESSORY69N: "img/night-accessory68.png",
       ACCESSORY70D: "img/day-accessory69.png",
       ACCESSORY70N: "img/night-accessory69.png",
       ACCESSORY71D: "img/day-accessory70.png",
       ACCESSORY71N: "img/night-accessory70.png",
       ACCESSORY72D: "img/day-accessory71.png",
       ACCESSORY72N: "img/night-accessory71.png",
       ACCESSORY73D: "img/day-accessory72.png",
       ACCESSORY73N: "img/night-accessory72.png",
       ACCESSORY74D: "img/day-accessory73.png",
       ACCESSORY74N: "img/night-accessory73.png",
       ACCESSORY75D: "img/day-accessory74.png",
       ACCESSORY75N: "img/night-accessory74.png",
       ACCESSORY76D: "img/day-accessory75.png",
       ACCESSORY76N: "img/night-accessory75.png",
       ACCESSORY77D: "img/day-accessory76.png",
       ACCESSORY77N: "img/night-accessory76.png",
       ACCESSORY78D: "img/day-accessory77.png",
       ACCESSORY78N: "img/night-accessory77.png",
       ACCESSORY79D: "img/day-accessory78.png",
       ACCESSORY79N: "img/night-accessory78.png",
       ACCESSORY80D: "img/day-accessory79.png",
       ACCESSORY80N: "img/night-accessory79.png",
       ACCESSORY81D: "img/day-accessory80.png",
       ACCESSORY81N: "img/night-accessory80.png",
       ACCESSORY82D: "img/day-accessory81.png",
       ACCESSORY82N: "img/night-accessory81.png",
       BOOK0D: "img/day-book0.png",
       BOOK0N: "img/night-book0.png",
       BOOK1D: "img/day-book1.png",
       BOOK1N: "img/night-book1.png",
       BOOK2D: "img/day-book2.png",
       BOOK2N: "img/night-book2.png",
       BOOK3D: "img/day-book3.png",
       BOOK3N: "img/night-book3.png",
       BOOK4D: "img/day-book4.png",
       BOOK4N: "img/night-book4.png",
       BOOK5D: "img/day-book5.png",
       BOOK5N: "img/night-book5.png",
       BOOK6D: "img/day-book6.png",
       BOOK6N: "img/night-book6.png",
       BOOK7D: "img/day-book7.png",
       BOOK7N: "img/night-book7.png",
       BOOK8D: "img/day-book8.png",
       BOOK8N: "img/night-book8.png",
       BOOK9D: "img/day-book9.png",
       BOOK9N: "img/night-book9.png",
       BOOK10D: "img/day-book10.png",
       BOOK10N: "img/night-book10.png",
       BOOK11D: "img/day-book11.png",
       BOOK11N: "img/night-book11.png",
       BOOK12D: "img/day-book12.png",
       BOOK12N: "img/night-book12.png",
       BOOK13D: "img/day-book13.png",
       BOOK13N: "img/night-book13.png",
       BOOK14D: "img/day-book14.png",
       BOOK14N: "img/night-book14.png",
       BOOK15D: "img/day-book15.png",
       BOOK15N: "img/night-book15.png",
       BOOK16D: "img/day-book16.png",
       BOOK16N: "img/night-book16.png",
       BOOK17D: "img/day-book17.png",
       BOOK17N: "img/night-book17.png",
       BOOK18D: "img/day-book18.png",
       BOOK18N: "img/night-book18.png",
       BOOK19D: "img/day-book19.png",
       BOOK19N: "img/night-book19.png",
       BOOK20D: "img/day-book20.png",
       BOOK20N: "img/night-book20.png",
       BOOK21D: "img/day-book21.png",
       BOOK21N: "img/night-book21.png",
       BOOK22D: "img/day-book22.png",
       BOOK22N: "img/night-book22.png",
       BOOK23D: "img/day-book23.png",
       BOOK23N: "img/night-book23.png",
       BOOK24D: "img/day-book24.png",
       BOOK24N: "img/night-book24.png",
       BOOK25D: "img/day-book25.png",
       BOOK25N: "img/night-book25.png",
       BOOK26D: "img/day-book26.png",
       BOOK26N: "img/night-book26.png",
       BOOK27D: "img/day-book27.png",
       BOOK27N: "img/night-book27.png",
       BOOK28D: "img/day-book28.png",
       BOOK28N: "img/night-book28.png",
       BOOK29D: "img/day-book29.png",
       BOOK29N: "img/night-book29.png",
       BOOK30D: "img/day-book30.png",
       BOOK30N: "img/night-book30.png",
       BOOK31D: "img/day-book31.png",
       BOOK31N: "img/night-book31.png",
       BOOK32D: "img/day-book32.png",
       BOOK32N: "img/night-book32.png",
       BOOK33D: "img/day-book33.png",
       BOOK33N: "img/night-book33.png",
       BOOK34D: "img/day-book34.png",
       BOOK34N: "img/night-book34.png",
       BOOK35D: "img/day-book35.png",
       BOOK35N: "img/night-book35.png",
       BOOK36D: "img/day-book36.png",
       BOOK36N: "img/night-book36.png",
       BOOK37D: "img/day-book37.png",
       BOOK37N: "img/night-book37.png",
       BOOK38D: "img/day-book38.png",
       BOOK38N: "img/night-book38.png",
       BOOK39D: "img/day-book39.png",
       BOOK39N: "img/night-book39.png",
       BOOK40D: "img/day-book40.png",
       BOOK40N: "img/night-book40.png",
       BOOK41D: "img/day-book41.png",
       BOOK41N: "img/night-book41.png",
       BOOK42D: "img/day-book42.png",
       BOOK42N: "img/night-book42.png",
       BOOK43D: "img/day-book43.png",
       BOOK43N: "img/night-book43.png",
       BOOK44D: "img/day-book44.png",
       BOOK44N: "img/night-book44.png",
       BOOK45D: "img/day-book45.png",
       BOOK45N: "img/night-book45.png",
       CRATE1D: "img/day-crate1.png",
       CRATE1N: "img/night-crate1.png",
       CRATE2D: "img/day-crate2.png",
       CRATE2N: "img/night-crate2.png",
       CRATE3D: "img/day-crate3.png",
       CRATE3N: "img/night-crate3.png",
       CRATE4D: "img/day-crate4.png",
       CRATE4N: "img/night-crate4.png",
       CRATE5D: "img/day-crate5.png",
       CRATE5N: "img/night-crate5.png",
       CRATE6D: "img/day-crate6.png",
       CRATE6N: "img/night-crate6.png",
       CRATE7D: "img/day-crate7.png",
       CRATE7N: "img/night-crate7.png",
       CRATE8D: "img/day-crate8.png",
       CRATE8N: "img/night-crate8.png",
       CRATE9D: "img/day-crate9.png",
       CRATE9N: "img/night-crate9.png",
       CRATE10D: "img/day-crate10.png",
       CRATE10N: "img/night-crate10.png",
       CRATE11D: "img/day-crate11.png",
       CRATE11N: "img/night-crate11.png",
       CRATE12D: "img/day-crate12.png",
       CRATE12N: "img/night-crate12.png",
       CRATE13D: "img/day-crate13.png",
       CRATE13N: "img/night-crate13.png",
       CRATE14D: "img/day-crate14.png",
       CRATE14N: "img/night-crate14.png",
       CRATE15D: "img/day-crate15.png",
       CRATE15N: "img/night-crate15.png",
       CRATE16D: "img/day-crate16.png",
       CRATE16N: "img/night-crate16.png",
       CRATE17D: "img/day-crate17.png",
       CRATE17N: "img/night-crate17.png",
       CRATE18D: "img/day-crate18.png",
       CRATE18N: "img/night-crate18.png",
       CRATE19D: "img/day-crate19.png",
       CRATE19N: "img/night-crate19.png",
       CRATE20D: "img/day-crate20.png",
       CRATE20N: "img/night-crate20.png",
       CRATE21D: "img/day-crate21.png",
       CRATE21N: "img/night-crate21.png",
       CRATE22D: "img/day-crate22.png",
       CRATE22N: "img/night-crate22.png",
       CRATE23D: "img/day-crate23.png",
       CRATE23N: "img/night-crate23.png",
       CRATE24D: "img/day-crate24.png",
       CRATE24N: "img/night-crate24.png",
       CRATE25D: "img/day-crate25.png",
       CRATE25N: "img/night-crate25.png",
       CRATE26D: "img/day-crate26.png",
       CRATE26N: "img/night-crate26.png",
       CRATE27D: "img/day-crate27.png",
       CRATE27N: "img/night-crate27.png",
       CRATE28D: "img/day-crate28.png",
       CRATE28N: "img/night-crate28.png",
       CRATE29D: "img/day-crate29.png",
       CRATE29N: "img/night-crate29.png",
       CRATE30D: "img/day-crate30.png",
       CRATE30N: "img/night-crate30.png",
       CRATE31D: "img/day-crate31.png",
       CRATE31N: "img/night-crate31.png",
       CRATE32D: "img/day-crate32.png",
       CRATE32N: "img/night-crate32.png",
       CRATE33D: "img/day-crate33.png",
       CRATE33N: "img/night-crate33.png",
       CRATE34D: "img/day-crate34.png",
       CRATE34N: "img/night-crate34.png",
       CRATE35D: "img/day-crate35.png",
       CRATE35N: "img/night-crate35.png",
       CRATE36D: "img/day-crate36.png",
       CRATE36N: "img/night-crate36.png",
       CRATE37D: "img/day-crate37.png",
       CRATE37N: "img/night-crate37.png",
       CRATE38D: "img/day-crate38.png",
       CRATE38N: "img/night-crate38.png",
       CRATE39D: "img/day-crate39.png",
       CRATE39N: "img/night-crate39.png",
       CRATE40D: "img/day-crate40.png",
       CRATE40N: "img/night-crate40.png",
       CRATE41D: "img/day-crate41.png",
       CRATE41N: "img/night-crate41.png",
       CRATE42D: "img/day-crate42.png",
       CRATE42N: "img/night-crate42.png",
       CRATE43D: "img/day-crate43.png",
       CRATE43N: "img/night-crate43.png",
       CRATE44D: "img/day-crate44.png",
       CRATE44N: "img/night-crate44.png",
       CRATE45D: "img/day-crate45.png",
       CRATE45N: "img/night-crate45.png",
       CRATE46D: "img/day-crate46.png",
       CRATE46N: "img/night-crate46.png",
       CRATE47D: "img/day-crate47.png",
       CRATE47N: "img/night-crate47.png",
       CRATE48D: "img/day-crate48.png",
       CRATE48N: "img/night-crate48.png",
       CRATE49D: "img/day-crate49.png",
       CRATE49N: "img/night-crate49.png",
       CRATE50D: "img/day-crate50.png",
       CRATE50N: "img/night-crate50.png",
       CRATE51D: "img/day-crate51.png",
       CRATE51N: "img/night-crate51.png",
       CRATE52D: "img/day-crate52.png",
       CRATE52N: "img/night-crate52.png",
       CRATE53D: "img/day-crate53.png",
       CRATE53N: "img/night-crate53.png",
       CRATE54D: "img/day-crate54.png",
       CRATE54N: "img/night-crate54.png",
       CRATE55D: "img/day-crate55.png",
       CRATE55N: "img/night-crate55.png",
       CRATE56D: "img/day-crate56.png",
       CRATE56N: "img/night-crate56.png",
       CRATE57D: "img/day-crate57.png",
       CRATE57N: "img/night-crate57.png",
       CRATE58D: "img/day-crate58.png",
       CRATE58N: "img/night-crate58.png",
       CRATE59D: "img/day-crate59.png",
       CRATE59N: "img/night-crate59.png",
       CRATE60D: "img/day-crate60.png",
       CRATE60N: "img/night-crate60.png",
       CRATE61D: "img/day-crate61.png",
       CRATE61N: "img/night-crate61.png",
       CRATE62D: "img/day-crate62.png",
       CRATE62N: "img/night-crate62.png",
       CRATE63D: "img/day-crate63.png",
       CRATE63N: "img/night-crate63.png",
       CRATE64D: "img/day-crate64.png",
       CRATE64N: "img/night-crate64.png",
       CRATE65D: "img/day-crate65.png",
       CRATE65N: "img/night-crate65.png",
       CRATE66D: "img/day-crate66.png",
       CRATE66N: "img/night-crate66.png",
       CRATE67D: "img/day-crate67.png",
       CRATE67N: "img/night-crate67.png",
       CRATE68D: "img/day-crate68.png",
       CRATE68N: "img/night-crate68.png",
       CRATE69D: "img/day-crate69.png",
       CRATE69N: "img/night-crate69.png",
       CRATE70D: "img/day-crate70.png",
       CRATE70N: "img/night-crate70.png",
       CRATE71D: "img/day-crate71.png",
       CRATE71N: "img/night-crate71.png",
       CRATE72D: "img/day-crate72.png",
       CRATE72N: "img/night-crate72.png",
       DECORATION_0D: "img/day-herb0.png",
       DECORATION_1D: "img/day-herb1.png",
       DECORATION_2D: "img/day-herb2.png",
       DECORATION_3D: "img/day-herb3.png",
       DECORATION_4D: "img/day-herb4.png",
       DECORATION_5D: "img/day-herb5.png",
       DECORATION_6D: "img/day-herb6.png",
       DECORATION_7D: "img/day-herb7.png",
       DECORATION_8D: "img/day-herb8.png",
       DECORATION_9D: "img/day-herb9.png",
       DECORATION_10D: "img/day-herb10.png",
       DECORATION_11D: "img/day-herb11.png",
       DECORATION_12D: "img/day-herb12.png",
       DECORATION_13D: "img/day-herb13.png",
       DECORATION_14D: "img/day-herb14.png",
       DECORATION_15D: "img/day-herb15.png",
       DECORATION_16D: "img/day-shell0.png",
       DECORATION_17D: "img/day-shell1.png",
       DECORATION_18D: "img/day-shell2.png",
       DECORATION_19D: "img/day-leaf1.png",
       DECORATION_20D: "img/day-leaf2.png",
       DECORATION_21D: "img/day-leaf3.png",
       DECORATION_22D: "img/day-leaf4.png",
       DECORATION_23D: "img/day-leaf5.png",
       DECORATION_24D: "img/day-leaf6.png",
       DECORATION_25D: "img/day-leaf7.png",
       DECORATION_26D: "img/day-leaf8.png",
       DECORATION_27D: "img/day-rock0.png",
       DECORATION_28D: "img/day-rock1.png",
       DECORATION_29D: "img/day-rock2.png",
       DECORATION_30D: "img/day-rock3.png",
       DECORATION_31D: "img/day-rock4.png",
       DECORATION_32D: "img/day-rock5.png",
       DECORATION_33D: "img/day-rock6.png",
       DECORATION_34D: "img/day-rock7.png",
       DECORATION_35D: "img/day-rock8.png",
       DECORATION_36D: "img/day-rock9.png",
       DECORATION_37D: "img/day-rock10.png",
       DECORATION_38D: "img/day-rock11.png",
       DECORATION_39D: "img/day-rock12.png",
       DECORATION_40D: "img/day-rock13.png",
       DECORATION_41D: "img/day-flower1.png",
       DECORATION_42D: "img/day-flower2.png",
       DECORATION_43D: "img/day-flower3.png",
       DECORATION_44D: "img/day-flower4.png",
       DECORATION_45D: "img/day-flower5.png",
       DECORATION_46D: "img/day-flower6.png",
       DECORATION_47D: "img/day-flower7.png",
       DECORATION_48D: "img/day-flower8.png",
       DECORATION_49D: "img/day-flower9.png",
       DECORATION_50D: "img/day-herb16.png",
       DECORATION_51D: "img/day-herb17.png",
       DECORATION_52D: "img/day-herb18.png",
       DECORATION_53D: "img/day-herb19.png",
       DECORATION_54D: "img/day-herb20.png",
       DECORATION_55D: "img/day-herb21.png",
       DECORATION_0N: "img/night-herb0.png",
       DECORATION_1N: "img/night-herb1.png",
       DECORATION_2N: "img/night-herb2.png",
       DECORATION_3N: "img/night-herb3.png",
       DECORATION_4N: "img/night-herb4.png",
       DECORATION_5N: "img/night-herb5.png",
       DECORATION_6N: "img/night-herb6.png",
       DECORATION_7N: "img/night-herb7.png",
       DECORATION_8N: "img/night-herb8.png",
       DECORATION_9N: "img/night-herb9.png",
       DECORATION_10N: "img/night-herb10.png",
       DECORATION_11N: "img/night-herb11.png",
       DECORATION_12N: "img/night-herb12.png",
       DECORATION_13N: "img/night-herb13.png",
       DECORATION_14N: "img/night-herb14.png",
       DECORATION_15N: "img/night-herb15.png",
       DECORATION_16N: "img/night-shell0.png",
       DECORATION_17N: "img/night-shell1.png",
       DECORATION_18N: "img/night-shell2.png",
       DECORATION_19N: "img/night-leaf1.png",
       DECORATION_20N: "img/night-leaf2.png",
       DECORATION_21N: "img/night-leaf3.png",
       DECORATION_22N: "img/night-leaf4.png",
       DECORATION_23N: "img/night-leaf5.png",
       DECORATION_24N: "img/night-leaf6.png",
       DECORATION_25N: "img/night-leaf7.png",
       DECORATION_26N: "img/night-leaf8.png",
       DECORATION_27N: "img/night-rock0.png",
       DECORATION_28N: "img/night-rock1.png",
       DECORATION_29N: "img/night-rock2.png",
       DECORATION_30N: "img/night-rock3.png",
       DECORATION_31N: "img/night-rock4.png",
       DECORATION_32N: "img/night-rock5.png",
       DECORATION_33N: "img/night-rock6.png",
       DECORATION_34N: "img/night-rock7.png",
       DECORATION_35N: "img/night-rock8.png",
       DECORATION_36N: "img/night-rock9.png",
       DECORATION_37N: "img/night-rock10.png",
       DECORATION_38N: "img/night-rock11.png",
       DECORATION_39N: "img/night-rock12.png",
       DECORATION_40N: "img/night-rock13.png",
       DECORATION_41N: "img/night-flower1.png",
       DECORATION_42N: "img/night-flower2.png",
       DECORATION_43N: "img/night-flower3.png",
       DECORATION_44N: "img/night-flower4.png",
       DECORATION_45N: "img/night-flower5.png",
       DECORATION_46N: "img/night-flower6.png",
       DECORATION_47N: "img/night-flower7.png",
       DECORATION_48N: "img/night-flower8.png",
       DECORATION_49N: "img/night-flower9.png",
       DECORATION_50N: "img/night-herb16.png",
       DECORATION_51N: "img/night-herb17.png",
       DECORATION_52N: "img/night-herb18.png",
       DECORATION_53N: "img/night-herb19.png",
       DECORATION_54N: "img/night-herb20.png",
       DECORATION_55N: "img/night-herb21.png",
       DAY_RIVER_000_010_000: "img/day-river000-010-000.png",
       DAY_RIVER_000_010_010: "img/day-river000-010-010.png",
       DAY_RIVER_000_011_000: "img/day-river000-011-000.png",
       DAY_RIVER_000_011_010: "img/day-river000-011-010.png",
       DAY_RIVER_000_011_011: "img/day-river000-011-011.png",
       DAY_RIVER_000_110_000: "img/day-river000-110-000.png",
       DAY_RIVER_000_110_010: "img/day-river000-110-010.png",
       DAY_RIVER_000_110_110: "img/day-river000-110-110.png",
       DAY_RIVER_000_111_000: "img/day-river000-111-000.png",
       DAY_RIVER_000_111_010: "img/day-river000-111-010.png",
       DAY_RIVER_000_111_011: "img/day-river000-111-011.png",
       DAY_RIVER_000_111_110: "img/day-river000-111-110.png",
       DAY_RIVER_000_111_111: "img/day-river000-111-111.png",
       DAY_RIVER_010_010_000: "img/day-river010-010-000.png",
       DAY_RIVER_010_010_010: "img/day-river010-010-010.png",
       DAY_RIVER_010_011_000: "img/day-river010-011-000.png",
       DAY_RIVER_010_011_010: "img/day-river010-011-010.png",
       DAY_RIVER_010_011_011: "img/day-river010-011-011.png",
       DAY_RIVER_010_110_000: "img/day-river010-110-000.png",
       DAY_RIVER_010_110_010: "img/day-river010-110-010.png",
       DAY_RIVER_010_110_110: "img/day-river010-110-110.png",
       DAY_RIVER_010_111_000: "img/day-river010-111-000.png",
       DAY_RIVER_010_111_010: "img/day-river010-111-010.png",
       DAY_RIVER_010_111_011: "img/day-river010-111-011.png",
       DAY_RIVER_010_111_110: "img/day-river010-111-110.png",
       DAY_RIVER_010_111_111: "img/day-river010-111-111.png",
       DAY_RIVER_011_011_000: "img/day-river011-011-000.png",
       DAY_RIVER_011_011_010: "img/day-river011-011-010.png",
       DAY_RIVER_011_011_011: "img/day-river011-011-011.png",
       DAY_RIVER_011_111_000: "img/day-river011-111-000.png",
       DAY_RIVER_011_111_010: "img/day-river011-111-010.png",
       DAY_RIVER_011_111_011: "img/day-river011-111-011.png",
       DAY_RIVER_011_111_110: "img/day-river011-111-110.png",
       DAY_RIVER_011_111_111: "img/day-river011-111-111.png",
       DAY_RIVER_110_110_000: "img/day-river110-110-000.png",
       DAY_RIVER_110_110_010: "img/day-river110-110-010.png",
       DAY_RIVER_110_110_110: "img/day-river110-110-110.png",
       DAY_RIVER_110_111_000: "img/day-river110-111-000.png",
       DAY_RIVER_110_111_010: "img/day-river110-111-010.png",
       DAY_RIVER_110_111_011: "img/day-river110-111-011.png",
       DAY_RIVER_110_111_110: "img/day-river110-111-110.png",
       DAY_RIVER_110_111_111: "img/day-river110-111-111.png",
       DAY_RIVER_111_111_011: "img/day-river111-111-011.png",
       DAY_RIVER_111_111_110: "img/day-river111-111-110.png",
       DAY_RIVER_111_111_011: "img/day-river111-111-011.png",
       DAY_RIVER_111_111_000: "img/day-river111-111-000.png",
       DAY_RIVER_111_111_111: "img/day-river111-111-111.png",
       DAY_RIVER_111_111_010: "img/day-river111-111-010.png",
       NIGHT_RIVER_000_010_000: "img/night-river000-010-000.png",
       NIGHT_RIVER_000_010_010: "img/night-river000-010-010.png",
       NIGHT_RIVER_000_011_000: "img/night-river000-011-000.png",
       NIGHT_RIVER_000_011_010: "img/night-river000-011-010.png",
       NIGHT_RIVER_000_011_011: "img/night-river000-011-011.png",
       NIGHT_RIVER_000_110_000: "img/night-river000-110-000.png",
       NIGHT_RIVER_000_110_010: "img/night-river000-110-010.png",
       NIGHT_RIVER_000_110_110: "img/night-river000-110-110.png",
       NIGHT_RIVER_000_111_000: "img/night-river000-111-000.png",
       NIGHT_RIVER_000_111_010: "img/night-river000-111-010.png",
       NIGHT_RIVER_000_111_011: "img/night-river000-111-011.png",
       NIGHT_RIVER_000_111_110: "img/night-river000-111-110.png",
       NIGHT_RIVER_000_111_111: "img/night-river000-111-111.png",
       NIGHT_RIVER_010_010_000: "img/night-river010-010-000.png",
       NIGHT_RIVER_010_010_010: "img/night-river010-010-010.png",
       NIGHT_RIVER_010_011_000: "img/night-river010-011-000.png",
       NIGHT_RIVER_010_011_010: "img/night-river010-011-010.png",
       NIGHT_RIVER_010_011_011: "img/night-river010-011-011.png",
       NIGHT_RIVER_010_110_000: "img/night-river010-110-000.png",
       NIGHT_RIVER_010_110_010: "img/night-river010-110-010.png",
       NIGHT_RIVER_010_110_110: "img/night-river010-110-110.png",
       NIGHT_RIVER_010_111_000: "img/night-river010-111-000.png",
       NIGHT_RIVER_010_111_010: "img/night-river010-111-010.png",
       NIGHT_RIVER_010_111_011: "img/night-river010-111-011.png",
       NIGHT_RIVER_010_111_110: "img/night-river010-111-110.png",
       NIGHT_RIVER_010_111_111: "img/night-river010-111-111.png",
       NIGHT_RIVER_011_011_000: "img/night-river011-011-000.png",
       NIGHT_RIVER_011_011_010: "img/night-river011-011-010.png",
       NIGHT_RIVER_011_011_011: "img/night-river011-011-011.png",
       NIGHT_RIVER_011_111_000: "img/night-river011-111-000.png",
       NIGHT_RIVER_011_111_010: "img/night-river011-111-010.png",
       NIGHT_RIVER_011_111_011: "img/night-river011-111-011.png",
       NIGHT_RIVER_011_111_110: "img/night-river011-111-110.png",
       NIGHT_RIVER_011_111_111: "img/night-river011-111-111.png",
       NIGHT_RIVER_110_110_000: "img/night-river110-110-000.png",
       NIGHT_RIVER_110_110_010: "img/night-river110-110-010.png",
       NIGHT_RIVER_110_110_110: "img/night-river110-110-110.png",
       NIGHT_RIVER_110_111_000: "img/night-river110-111-000.png",
       NIGHT_RIVER_110_111_010: "img/night-river110-111-010.png",
       NIGHT_RIVER_110_111_011: "img/night-river110-111-011.png",
       NIGHT_RIVER_110_111_110: "img/night-river110-111-110.png",
       NIGHT_RIVER_110_111_111: "img/night-river110-111-111.png",
       NIGHT_RIVER_111_111_011: "img/night-river111-111-011.png",
       NIGHT_RIVER_111_111_110: "img/night-river111-111-110.png",
       NIGHT_RIVER_111_111_011: "img/night-river111-111-011.png",
       NIGHT_RIVER_111_111_000: "img/night-river111-111-000.png",
       NIGHT_RIVER_111_111_111: "img/night-river111-111-111.png",
       NIGHT_RIVER_111_111_010: "img/night-river111-111-010.png",
       DAY_RIVER_COMPO1: "img/day-pebblecompo1.png",
       DAY_RIVER_COMPO2: "img/day-pebblecompo2.png",
       DAY_RIVER_COMPO3: "img/day-pebblecompo3.png",
       DAY_RIVER_COMPO4: "img/day-pebblecompo4.png",
       DAY_RIVER_COMPO5: "img/day-pebblecompo5.png",
       DAY_RIVER_COMPO6: "img/day-pebblecompo6.png",
       DAY_RIVER_COMPO7: "img/day-pebblecompo7.png",
       DAY_RIVER_COMPO8: "img/day-pebblecompo8.png",
       DAY_RIVER_COMPO9: "img/day-pebblecompo9.png",
       DAY_RIVER_COMPO10: "img/day-pebblecompo10.png",
       DAY_RIVER_COMPO11: "img/day-pebblecompo11.png",
       DAY_RIVER_COMPO12: "img/day-pebblecompo12.png",
       DAY_RIVER_COMPO13: "img/day-pebblecompo13.png",
       DAY_RIVER_COMPO14: "img/day-pebblecompo14.png",
       DAY_RIVER_COMPO15: "img/day-pebblecompo15.png",
       DAY_RIVER_COMPO16: "img/day-pebblecompo16.png",
       DAY_RIVER_COMPO17: "img/day-pebblecompo17.png",
       DAY_RIVER_COMPO18: "img/day-pebblecompo18.png",
       DAY_RIVER_COMPO19: "img/day-pebblecompo19.png",
       DAY_RIVER_COMPO20: "img/day-pebblecompo20.png",
       DAY_RIVER_COMPO21: "img/day-pebblecompo21.png",
       DAY_RIVER_COMPO22: "img/day-pebblecompo22.png",
       DAY_RIVER_COMPO23: "img/day-pebblecompo23.png",
       DAY_RIVER_COMPO24: "img/day-pebblecompo24.png",
       DAY_RIVER_COMPO25: "img/day-pebblecompo25.png",
       DAY_RIVER_COMPO26: "img/day-pebblecompo26.png",
       DAY_RIVER_COMPO27: "img/day-pebblecompo27.png",
       DAY_RIVER_COMPO28: "img/day-pebblecompo28.png",
       NIGHT_RIVER_COMPO1: "img/night-pebblecompo1.png",
       NIGHT_RIVER_COMPO2: "img/night-pebblecompo2.png",
       NIGHT_RIVER_COMPO3: "img/night-pebblecompo3.png",
       NIGHT_RIVER_COMPO4: "img/night-pebblecompo4.png",
       NIGHT_RIVER_COMPO5: "img/night-pebblecompo5.png",
       NIGHT_RIVER_COMPO6: "img/night-pebblecompo6.png",
       NIGHT_RIVER_COMPO7: "img/night-pebblecompo7.png",
       NIGHT_RIVER_COMPO8: "img/night-pebblecompo8.png",
       NIGHT_RIVER_COMPO9: "img/night-pebblecompo9.png",
       NIGHT_RIVER_COMPO10: "img/night-pebblecompo10.png",
       NIGHT_RIVER_COMPO11: "img/night-pebblecompo11.png",
       NIGHT_RIVER_COMPO12: "img/night-pebblecompo12.png",
       NIGHT_RIVER_COMPO13: "img/night-pebblecompo13.png",
       NIGHT_RIVER_COMPO14: "img/night-pebblecompo14.png",
       NIGHT_RIVER_COMPO15: "img/night-pebblecompo15.png",
       NIGHT_RIVER_COMPO16: "img/night-pebblecompo16.png",
       NIGHT_RIVER_COMPO17: "img/night-pebblecompo17.png",
       NIGHT_RIVER_COMPO18: "img/night-pebblecompo18.png",
       NIGHT_RIVER_COMPO19: "img/night-pebblecompo19.png",
       NIGHT_RIVER_COMPO20: "img/night-pebblecompo20.png",
       NIGHT_RIVER_COMPO21: "img/night-pebblecompo21.png",
       NIGHT_RIVER_COMPO22: "img/night-pebblecompo22.png",
       NIGHT_RIVER_COMPO23: "img/night-pebblecompo23.png",
       NIGHT_RIVER_COMPO24: "img/night-pebblecompo24.png",
       NIGHT_RIVER_COMPO25: "img/night-pebblecompo25.png",
       NIGHT_RIVER_COMPO26: "img/night-pebblecompo26.png",
       NIGHT_RIVER_COMPO27: "img/night-pebblecompo27.png",
       NIGHT_RIVER_COMPO28: "img/night-pebblecompo28.png",
       BABY_MAMMOTHD: "img/day-baby-mammoth.png",
       BABY_MAMMOTH_TAMEDD: "img/day-baby-mammoth-tamed.png",
       BABY_MAMMOTH_ATTACKD: "img/day-baby-mammoth-angry.png",
       BABY_MAMMOTHN: "img/night-baby-mammoth.png",
       BABY_MAMMOTH_TAMEDN: "img/night-baby-mammoth-tamed.png",
       BABY_MAMMOTH_ATTACKN: "img/night-baby-mammoth-angry.png",
       INV_BABY_MAMMOTH_OUT: "img/inv-mammoth-out.png",
       INV_BABY_MAMMOTH_IN: "img/inv-mammoth-in.png",
       INV_BABY_MAMMOTH_CLICK: "img/inv-mammoth-click.png",
       HURT_BABY_MAMMOTH: "img/hurt-baby-mammoth.png",
       BABY_MAMMOTH_STEP: "img/baby-mammoth-step.png",
       FLOWER_HATD: "img/day-flower-hat.png",
       FLOWER_HATN: "img/night-flower-hat.png",
       INV_FLOWER_HAT_OUT: "img/inv-flower-hat-out.png",
       INV_FLOWER_HAT_IN: "img/inv-flower-hat-in.png",
       INV_FLOWER_HAT_CLICK: "img/inv-flower-hat-click.png",
       FUR_HATD: "img/day-fur-hat.png",
       FUR_HATN: "img/night-fur-hat.png",
       INV_FUR_HAT_OUT: "img/inv-fur-hat-out.png",
       INV_FUR_HAT_IN: "img/inv-fur-hat-in.png",
       INV_FUR_HAT_CLICK: "img/inv-fur-hat-click.png",
       MAMMOTHD: "img/day-mammoth.png",
       MAMMOTHN: "img/night-mammoth.png",
       HURT_MAMMOTH: "img/hurt-mammoth.png",
       INV_FUR_MAMMOTH_OUT: "img/inv-mammoth-fur-out.png",
       INV_FUR_MAMMOTH_IN: "img/inv-mammoth-fur-in.png",
       INV_FUR_MAMMOTH_CLICK: "img/inv-mammoth-fur-click.png",
       INV_WOOD_BOW_OUT: "img/inv-wood-bow-out.png",
       INV_WOOD_BOW_IN: "img/inv-wood-bow-in.png",
       INV_WOOD_BOW_CLICK: "img/inv-wood-bow-click.png",
       INV_WOOD_ARROW_OUT: "img/inv-wood-arrow-out.png",
       INV_WOOD_ARROW_IN: "img/inv-wood-arrow-in.png",
       INV_WOOD_ARROW_CLICK: "img/inv-wood-arrow-click.png",
       WOOD_BOWD: "img/day-wood-bow2.png",
       WOOD_BOWN: "img/night-wood-bow2.png",
       WOOD_ARROWD: "img/day-wood-arrow.png",
       WOOD_ARROWN: "img/night-wood-arrow.png",
       INV_STONE_BOW_OUT: "img/inv-stone-bow-out.png",
       INV_STONE_BOW_IN: "img/inv-stone-bow-in.png",
       INV_STONE_BOW_CLICK: "img/inv-stone-bow-click.png",
       INV_STONE_ARROW_OUT: "img/inv-stone-arrow-out.png",
       INV_STONE_ARROW_IN: "img/inv-stone-arrow-in.png",
       INV_STONE_ARROW_CLICK: "img/inv-stone-arrow-click.png",
       STONE_BOWD: "img/day-stone-bow.png",
       STONE_BOWN: "img/night-stone-bow.png",
       STONE_ARROWD: "img/day-stone-arrow.png",
       STONE_ARROWN: "img/night-stone-arrow.png",
       INV_GOLD_BOW_OUT: "img/inv-gold-bow-out.png",
       INV_GOLD_BOW_IN: "img/inv-gold-bow-in.png",
       INV_GOLD_BOW_CLICK: "img/inv-gold-bow-click.png",
       INV_GOLD_ARROW_OUT: "img/inv-gold-arrow-out.png",
       INV_GOLD_ARROW_IN: "img/inv-gold-arrow-in.png",
       INV_GOLD_ARROW_CLICK: "img/inv-gold-arrow-click.png",
       GOLD_BOWD: "img/day-gold-bow.png",
       GOLD_BOWN: "img/night-gold-bow.png",
       GOLD_ARROWD: "img/day-gold-arrow.png",
       GOLD_ARROWN: "img/night-gold-arrow.png",
       INV_DIAMOND_BOW_OUT: "img/inv-diamond-bow-out.png",
       INV_DIAMOND_BOW_IN: "img/inv-diamond-bow-in.png",
       INV_DIAMOND_BOW_CLICK: "img/inv-diamond-bow-click.png",
       INV_DIAMOND_ARROW_OUT: "img/inv-diamond-arrow-out.png",
       INV_DIAMOND_ARROW_IN: "img/inv-diamond-arrow-in.png",
       INV_DIAMOND_ARROW_CLICK: "img/inv-diamond-arrow-click.png",
       DIAMOND_BOWD: "img/day-diamond-bow.png",
       DIAMOND_BOWN: "img/night-diamond-bow.png",
       DIAMOND_ARROWD: "img/day-diamond-arrow.png",
       DIAMOND_ARROWN: "img/night-diamond-arrow.png",
       INV_AMETHYST_BOW_OUT: "img/inv-amethyst-bow-out.png",
       INV_AMETHYST_BOW_IN: "img/inv-amethyst-bow-in.png",
       INV_AMETHYST_BOW_CLICK: "img/inv-amethyst-bow-click.png",
       INV_AMETHYST_ARROW_OUT: "img/inv-amethyst-arrow-out.png",
       INV_AMETHYST_ARROW_IN: "img/inv-amethyst-arrow-in.png",
       INV_AMETHYST_ARROW_CLICK: "img/inv-amethyst-arrow-click.png",
       AMETHYST_BOWD: "img/day-amethyst-bow.png",
       AMETHYST_BOWN: "img/night-amethyst-bow.png",
       AMETHYST_ARROWD: "img/day-amethyst-arrow.png",
       AMETHYST_ARROWN: "img/night-amethyst-arrow.png",
       INV_DRAGON_BOW_OUT: "img/inv-dragon-bow-out.png",
       INV_DRAGON_BOW_IN: "img/inv-dragon-bow-in.png",
       INV_DRAGON_BOW_CLICK: "img/inv-dragon-bow-click.png",
       INV_DRAGON_ARROW_OUT: "img/inv-dragon-arrow-out.png",
       INV_DRAGON_ARROW_IN: "img/inv-dragon-arrow-in.png",
       INV_DRAGON_ARROW_CLICK: "img/inv-dragon-arrow-click.png",
       DRAGON_BOWD: "img/day-dragon-bow.png",
       DRAGON_BOWN: "img/night-dragon-bow.png",
       DRAGON_ARROWD: "img/day-dragon-arrow.png",
       DRAGON_ARROWN: "img/night-dragon-arrow.png",
       INV_REIDITE_BOW_OUT: "img/inv-reidite-bow-out.png",
       INV_REIDITE_BOW_IN: "img/inv-reidite-bow-in.png",
       INV_REIDITE_BOW_CLICK: "img/inv-reidite-bow-click.png",
       INV_REIDITE_ARROW_OUT: "img/inv-reidite-arrow-out.png",
       INV_REIDITE_ARROW_IN: "img/inv-reidite-arrow-in.png",
       INV_REIDITE_ARROW_CLICK: "img/inv-reidite-arrow-click.png",
       REIDITE_BOWD: "img/day-reidite-bow.png",
       REIDITE_BOWN: "img/night-reidite-bow.png",
       REIDITE_ARROWD: "img/day-reidite-arrow.png",
       REIDITE_ARROWN: "img/night-reidite-arrow.png",
       BANDAGE_ACTIVATED: "img/bandage-activated.png",
       AUTO_FEED: "img/auto-feed.png",
       STOP_REGENERATION_BLIZZARD: "img/stop-regeneration.png",
       STOP_REGENERATION: "img/stop-regeneration2.png",
       WOOD_TOWERD: "img/day-wood-platform.png",
       WOOD_TOWERN: "img/night-wood-platform.png",
       INV_WOOD_TOWER_IN: "img/inv-wood-platform-in.png",
       INV_WOOD_TOWER_OUT: "img/inv-wood-platform-out.png",
       INV_WOOD_TOWER_CLICK: "img/inv-wood-platform-click.png",
       WOOD_SHIELDD: "img/day-wood-shield.png",
       WOOD_SHIELDN: "img/night-wood-shield.png",
       STONE_SHIELDD: "img/day-stone-shield.png",
       STONE_SHIELDN: "img/night-stone-shield.png",
       GOLD_SHIELDD: "img/day-gold-shield.png",
       GOLD_SHIELDN: "img/night-gold-shield.png",
       DIAMOND_SHIELDD: "img/day-diamond-shield.png",
       DIAMOND_SHIELDN: "img/night-diamond-shield.png",
       AMETHYST_SHIELDD: "img/day-amethyst-shield.png",
       AMETHYST_SHIELDN: "img/night-amethyst-shield.png",
       REIDITE_SHIELDD: "img/day-reidite-shield.png",
       REIDITE_SHIELDN: "img/night-reidite-shield.png",
       INV_WOOD_SHIELD_IN: "img/inv-wood-shield-in.png",
       INV_WOOD_SHIELD_OUT: "img/inv-wood-shield-out.png",
       INV_WOOD_SHIELD_CLICK: "img/inv-wood-shield-click.png",
       INV_STONE_SHIELD_IN: "img/inv-stone-shield-in.png",
       INV_STONE_SHIELD_OUT: "img/inv-stone-shield-out.png",
       INV_STONE_SHIELD_CLICK: "img/inv-stone-shield-click.png",
       INV_GOLD_SHIELD_IN: "img/inv-gold-shield-in.png",
       INV_GOLD_SHIELD_OUT: "img/inv-gold-shield-out.png",
       INV_GOLD_SHIELD_CLICK: "img/inv-gold-shield-click.png",
       INV_DIAMOND_SHIELD_IN: "img/inv-diamond-shield-in.png",
       INV_DIAMOND_SHIELD_OUT: "img/inv-diamond-shield-out.png",
       INV_DIAMOND_SHIELD_CLICK: "img/inv-diamond-shield-click.png",
       INV_AMETHYST_SHIELD_IN: "img/inv-amethyst-shield-in.png",
       INV_AMETHYST_SHIELD_OUT: "img/inv-amethyst-shield-out.png",
       INV_AMETHYST_SHIELD_CLICK: "img/inv-amethyst-shield-click.png",
       INV_REIDITE_SHIELD_IN: "img/inv-reidite-shield-in.png",
       INV_REIDITE_SHIELD_OUT: "img/inv-reidite-shield-out.png",
       INV_REIDITE_SHIELD_CLICK: "img/inv-reidite-shield-click.png",
       MACHETED: "img/day-machete.png",
       MACHETEN: "img/night-machete.png",
       INV_MACHETE_IN: "img/inv-machete-in.png",
       INV_MACHETE_OUT: "img/inv-machete-out.png",
       INV_MACHETE_CLICK: "img/inv-machete-click.png"
   },
   DUMP_IMAGES = {},
   PREPROC_IMAGES = {},
   IMAGES)
       DUMP_IMAGES[Z] = IMAGES[Z];
   sprite = [],
   RARITY = {},
   RARITY.FREE = 0,
   RARITY.WOOD = 1,
   RARITY.STONE = 2,
   RARITY.GOLD = 3,
   RARITY.DIAMOND = 4,
   RARITY.AMETHYST = 5,
   RARITY.REIDITE = 6,
   RARITY.SPECIAL = 7,
   RARITY.LEVEL = 8,
   COSMETICS = {},
   MINIMAP_UTILS = [],
   find_cosmetics_per_id = function(e, i) {
       for (var t = 0; t < e.length; t++)
           if (e[t].id === i)
               return t;
       return -1
   }
   ;
   var te = [];
   function re(e, i) {
       for (var t = 0; t < te.length; t += i) {
           var r = te[t];
           r[0] === e && ae(r[0], r[1], r[2], r[3])
       }
   }
   function ne() {
       re("isl", 1),
       re("wtb", 20),
       re("la", 1),
       re("c", 1),
       re("s", 1),
       re("f", 1),
       re("p", 1),
       re("g", 1),
       re("d", 1),
       re("a", 1),
       re("re", 1),
       re("m", 1),
       te = []
   }
   function oe(e, i, t, r) {
       te.push([e, i, t, r])
   }
   function ae(e, i, t, r) {
       var n = MINIMAP_UTILS[e];
       if (void 0 !== n)
           for (var o = 0; o < 2; o++) {
               var a = n[i][o]
                 , s = 193 * r / UI.nw
                 , T = 193 * t / UI.nh
                 , I = a.width / 3.5
                 , E = a.height / 3.5;
               sprite[SPRITE.MINIMAP_CTX][o].drawImage(a, s - I / 2, T - E / 2, I, E),
               s = 600 * r / UI.nw,
               T = 600 * t / UI.nh,
               I = a.width / 1.5,
               E = a.height / 1.5,
               sprite[SPRITE.BIGMAP_CTX][o].drawImage(a, s - I / 2, T - E / 2, I, E)
           }
   }
   function se(e, i, t, r) {
       i && (e.fillStyle = i,
       e.fill()),
       t && (e.lineWidth = r,
       e.strokeStyle = t,
       e.stroke())
   }
   function Te(e, i, t, r, n, o) {
       r < 2 * o && (o = r / 2),
       n < 2 * o && (o = n / 2),
       0 > o && (o = 0),
       e.beginPath(),
       e.moveTo(i + o, t),
       e.arcTo(i + r, t, i + r, t + n, o),
       e.arcTo(i + r, t + n, i, t + n, o),
       e.arcTo(i, t + n, i, t, o),
       e.arcTo(i, t, i + r, t, o),
       e.closePath()
   }
   function Ie(e, i, t, r, n, o) {
       r < 2 * o && (o = r / 2),
       n < 2 * o && (o = n / 2),
       0 > o && (o = 0),
       e.beginPath(),
       e.moveTo(i + o, t),
       e.arcTo(i + r, t, i + r, t + n, 0),
       e.arcTo(i + r, t + n, i, t + n, o),
       e.arcTo(i, t + n, i, t, 0),
       e.arcTo(i, t, i + r, t, o),
       e.closePath()
   }
   function Ee(e, i, t, r) {
       e.beginPath(),
       e.arc(i, t, r, 0, 2 * Math.PI)
   }
   function _e(e, i, t, r, n) {
       e.beginPath(),
       e.lineCap = "round",
       e.arc(i, t, r, 0, 2 * Math.PI * n)
   }
   function ue(e, i, t, r) {
       var n = 2 * Math.PI / i;
       e.beginPath();
       for (var o = [{
           x: t,
           y: 0
       }], a = [], T = 1; T < i; T++) {
           o.push({
               x: Math.cos(T * n) * t,
               y: Math.sin(T * n) * t
           });
           var I = o.length;
           a.push(s.middle_point(o[I - 2], o[I - 1]))
       }
       a.push(s.middle_point(o[o.length - 1], o[0]));
       var E = a[a.length - 1];
       e.moveTo(E.x, E.y);
       for (T = 0; T < i; T++)
           e.arcTo(o[T].x, o[T].y, a[T].x, a[T].y, r);
       e.closePath()
   }
   function he(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d")
         , n = Math.sqrt(i.width * i.width + i.height * i.height);
       return d2 = n / 2,
       t.width = n,
       t.height = n,
       r.translate(d2, d2),
       r.rotate(e),
       r.drawImage(i, -i.width / 2, -i.height / 2),
       t
   }
   function Re(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d")
         , n = Math.floor(28 * e)
         , o = Math.floor(20 * e);
       r.font = o + "px Baloo Paaji";
       var a = 8 * e
         , s = r.measureText(i).width + 2 * a;
       return t.width = s,
       t.height = n,
       Te(r, 0, 0, s, n, 10 * e),
       r.globalAlpha = .5,
       se(r, "#000"),
       r.globalAlpha = 1,
       r.textBaseline = "middle",
       r.font = o + "px Baloo Paaji",
       r.beginPath(),
       r.fillStyle = "#FFF",
       r.fillText(i, a, n / 2),
       t
   }
   function Ae(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 120 * e,
       r.height = 110 * e,
       1 == t ? (Ee(n, 35 * e, 75 * e, 19.72308292331602 * e),
       se(n, i[1], i[0], 4 * e),
       n.save(),
       n.translate(11 * e, 77 * e),
       Te(n, -4 * e, -4 * e, 8 * e, 8 * e, 10 * e),
       n.restore(),
       se(n, void 0, i[0], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(11 * e, 81 * e),
       n.bezierCurveTo(13 * e, 105 * e, 9 * e, 106 * e, 8 * e, 91 * e),
       se(n, void 0, i[0], 4 * e)) : 2 == t ? (Ee(n, 85 * e, 75 * e, 16 * e),
       se(n, i[0], i[0], 4 * e),
       n.scale(-1.7 * e, 1.7 * e),
       n.translate(-120 * e, 0 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(20 * e, 95 * e),
       n.bezierCurveTo(56.5 * e, 54 * e, 56.5 * e, 54 * e, 93 * e, 13 * e),
       n.bezierCurveTo(89 * e, 13 * e, 89 * e, 13 * e, 85 * e, 13 * e),
       n.bezierCurveTo(49.5 * e, 53 * e, 49.5 * e, 53 * e, 14 * e, 93 * e),
       n.bezierCurveTo(15 * e, 94 * e, 15 * e, 94 * e, 19 * e, 95 * e),
       n.closePath(),
       se(n, i[0], i[0], 4 * e)) : 3 == t ? (n.translate(-52 * e, 0),
       n.save(),
       n.translate(84.5 * e, 36.5 * e),
       n.rotate(-.96),
       Te(n, -5.5 * e, -15.5 * e, 11 * e, 31 * e, 4 * e),
       n.restore(),
       se(n, i[0], i[1], 4 * e),
       n.save(),
       n.translate(84 * e, 36 * e),
       n.rotate(.64),
       Te(n, -5 * e, -16 * e, 10 * e, 32 * e, 4 * e),
       n.restore(),
       se(n, i[0], i[1], 4 * e),
       n.save(),
       n.translate(83.5 * e, 36.5 * e),
       n.rotate(.68),
       Te(n, -2.5 * e, -6.5 * e, 5 * e, 13 * e, 4 * e),
       n.restore(),
       se(n, i[1])) : 4 == t ? (Ee(n, 35 * e, 85 * e, 17 * e),
       se(n, i[1], i[0], 3 * e),
       Ee(n, 85 * e, 85 * e, 17 * e),
       se(n, i[1], i[0], 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(53 * e, 86 * e),
       n.bezierCurveTo(59 * e, 83 * e, 63 * e, 83 * e, 67 * e, 86 * e),
       se(n, void 0, i[0], 4 * e)) : 5 == t ? (n.scale(1.2, 1.2),
       n.translate(-27 * e, -8 * e),
       n.scale(1.2, 1.2),
       n.translate(-10 * e, 0),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(97 * e, 23 * e),
       n.bezierCurveTo(105 * e, 24 * e, 107 * e, 37 * e, 97 * e, 39 * e),
       n.bezierCurveTo(85 * e, 40 * e, 84 * e, 22 * e, 97 * e, 23 * e),
       n.closePath(),
       se(n, void 0, i[0], 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(96 * e, 24 * e),
       n.bezierCurveTo(96 * e, 30.5 * e, 96 * e, 30.5 * e, 96 * e, 37 * e),
       n.closePath(),
       se(n, void 0, i[0], 3 * e),
       n.translate(0, -2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(88 * e, 37 * e),
       n.bezierCurveTo(93 * e, 33 * e, 91.5 * e, 34.5 * e, 95 * e, 32 * e),
       n.bezierCurveTo(98.5 * e, 34 * e, 98.5 * e, 34 * e, 102 * e, 36 * e),
       se(n, void 0, i[0], 3 * e)) : 6 == t ? (Ee(n, 13 * e, 79 * e, 5 * e),
       se(n, i[0]),
       Ee(n, 106 * e, 79 * e, 5 * e),
       se(n, i[0])) : 7 == t ? (n.translate(0 * e, 5 * e),
       n.globalAlpha = .5,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(27 * e, 14.399993896484375 * e),
       n.bezierCurveTo(29 * e, 4.399993896484375 * e, 44 * e, 16.399993896484375 * e, 37 * e, 21.399993896484375 * e),
       n.bezierCurveTo(47 * e, 17.399993896484375 * e, 45 * e, 36.399993896484375 * e, 37 * e, 32.399993896484375 * e),
       n.bezierCurveTo(44 * e, 40.399993896484375 * e, 28 * e, 47.399993896484375 * e, 26 * e, 37.399993896484375 * e),
       n.bezierCurveTo(22 * e, 46.399993896484375 * e, 9 * e, 37.399993896484375 * e, 16 * e, 30.399993896484375 * e),
       n.bezierCurveTo(6 * e, 34.399993896484375 * e, 9 * e, 15.399993896484375 * e, 18 * e, 19.399993896484375 * e),
       n.bezierCurveTo(10 * e, 12.399993896484375 * e, 26 * e, 7.399993896484375 * e, 26 * e, 14.399993896484375 * e),
       n.closePath(),
       se(n, i[3]),
       n.globalAlpha = 1,
       n.translate(0 * e, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(27 * e, 14.399993896484375 * e),
       n.bezierCurveTo(29 * e, 4.399993896484375 * e, 44 * e, 16.399993896484375 * e, 37 * e, 21.399993896484375 * e),
       n.bezierCurveTo(47 * e, 17.399993896484375 * e, 45 * e, 36.399993896484375 * e, 37 * e, 32.399993896484375 * e),
       n.bezierCurveTo(44 * e, 40.399993896484375 * e, 28 * e, 47.399993896484375 * e, 26 * e, 37.399993896484375 * e),
       n.bezierCurveTo(22 * e, 46.399993896484375 * e, 9 * e, 37.399993896484375 * e, 16 * e, 30.399993896484375 * e),
       n.bezierCurveTo(6 * e, 34.399993896484375 * e, 9 * e, 15.399993896484375 * e, 18 * e, 19.399993896484375 * e),
       n.bezierCurveTo(10 * e, 12.399993896484375 * e, 26 * e, 7.399993896484375 * e, 26 * e, 14.399993896484375 * e),
       n.closePath(),
       se(n, i[1], i[2], 2 * e),
       Ee(n, 27 * e, 26.800003051757812 * e, 5 * e),
       se(n, i[0])) : 8 == t && (n.translate(-32 * e, -19 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(123 * e, 46 * e),
       n.bezierCurveTo(132 * e, 46 * e, 135 * e, 39 * e, 134 * e, 33 * e),
       n.bezierCurveTo(145 * e, 43 * e, 142 * e, 65 * e, 127 * e, 66 * e),
       n.bezierCurveTo(118 * e, 61 * e, 119 * e, 51 * e, 123 * e, 46 * e),
       n.closePath(),
       se(n, i[0], i[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(49 * e, 32 * e),
       n.bezierCurveTo(49 * e, 44 * e, 56 * e, 44 * e, 61 * e, 46 * e),
       n.bezierCurveTo(67 * e, 52 * e, 65 * e, 65 * e, 55 * e, 66 * e),
       n.bezierCurveTo(37 * e, 60 * e, 42 * e, 38 * e, 49 * e, 32 * e),
       n.closePath(),
       se(n, i[0], i[1], 4 * e)),
       r
   }
   function de(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d")
         , n = 120 * e
         , o = 110 * e
         , a = n / 2
         , s = o / 2
         , T = 20 * e
         , I = 112 * e
         , E = 82 * e
         , _ = I / 2
         , u = E / 2
         , h = 4 * e;
       return t.width = n,
       t.height = o,
       r.globalAlpha = 1,
       r.translate(a, s),
       Te(r, -_, -u, I, E, T),
       se(r, i, i, h),
       t
   }
   function Se(e, i, t) {
       var r = (n = document.createElement("canvas")).getContext("2d");
       if (n.width = 176 * e,
       n.height = 127 * e,
       8 == t)
           r.globalAlpha = .3,
           r.save(),
           r.translate(87 * e, 64.5 * e),
           Te(r, -56 * e, -41.5 * e, 112 * e, 83 * e, 18 * e),
           r.restore(),
           se(r, i[0], i[1], 4 * e),
           r.save(),
           r.translate(82 * e, 69.5 * e),
           Te(r, -51 * e, -36.5 * e, 102 * e, 73 * e, 18 * e),
           r.restore(),
           se(r, i[2], i[1], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(55 * e, 41 * e),
           r.bezierCurveTo(38 * e, 41 * e, 37 * e, 50 * e, 38 * e, 61 * e),
           r.bezierCurveTo(42 * e, 50 * e, 46 * e, 46 * e, 55 * e, 42 * e),
           r.closePath(),
           se(r, i[3]),
           r.globalAlpha = 1,
           r.translate(26 * e, 10 * e),
           Ee(r, 35 * e, 75 * e, 15 * e),
           se(r, i[4]),
           Ee(r, 85 * e, 75 * e, 15 * e),
           se(r, i[4]),
           Ee(r, 32 * e, 67 * e, 5 * e),
           se(r, i[5]),
           Ee(r, 82 * e, 67 * e, 5 * e),
           se(r, i[5]);
       else if (9 == t) {
           var n;
           r = (n = document.createElement("canvas")).getContext("2d");
           n.width = 332 * e,
           n.height = 127 * e,
           r.globalAlpha = .5,
           r.translate(0, -36 * e),
           r.save(),
           r.translate(165.25 * e, 106.84375 * e),
           Te(r, -56.5 * e, -41.5 * e, 113 * e, 83 * e, 18 * e),
           r.restore(),
           se(r, i[0]),
           r.globalAlpha = 1,
           r.translate(0, 20 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(210.75 * e, 72.84375 * e),
           r.bezierCurveTo(238.75 * e, 74.84375 * e, 270.75 * e, 85.84375 * e, 269.75 * e, 90.84375 * e),
           r.bezierCurveTo(268.75 * e, 94.84375 * e, 221.75 * e, 81.84375 * e, 206.75 * e, 85.84375 * e),
           r.closePath(),
           se(r, i[1], i[2], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(208.75 * e, 69.84375 * e),
           r.bezierCurveTo(241.75 * e, 61.84375 * e, 265.75 * e, 65.84375 * e, 286.75 * e, 69.84375 * e),
           r.bezierCurveTo(290.75 * e, 75.84375 * e, 225.75 * e, 69.84375 * e, 215.75 * e, 80.84375 * e),
           r.closePath(),
           se(r, i[1], i[2], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(209.75 * e, 69.84375 * e),
           r.bezierCurveTo(228.75 * e, 51.84375 * e, 265.75 * e, 46.84375 * e, 294.75 * e, 51.84375 * e),
           r.bezierCurveTo(301.75 * e, 55.84375 * e, 224.75 * e, 60.84375 * e, 216.75 * e, 80.84375 * e),
           r.closePath(),
           se(r, i[1], i[2], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(193.75 * e, 72.84375 * e),
           r.bezierCurveTo(206.75 * e, 47.84375 * e, 221.75 * e, 37.84375 * e, 249.75 * e, 35.84375 * e),
           r.bezierCurveTo(264.75 * e, 34.84375 * e, 305.75 * e, 16.84375 * e, 300.75 * e, 24.84375 * e),
           r.bezierCurveTo(273.75 * e, 45.84375 * e, 245.75 * e, 46.84375 * e, 235.75 * e, 62.84375 * e),
           r.bezierCurveTo(218.75 * e, 82.84375 * e, 215.75 * e, 87.84375 * e, 199.75 * e, 84.84375 * e),
           r.closePath(),
           se(r, i[1], i[2], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(126.75 * e, 80.34375 * e),
           r.bezierCurveTo(94.75 * e, 88.34375 * e, 83.75 * e, 88.34375 * e, 65.75 * e, 90.34375 * e),
           r.bezierCurveTo(61.75 * e, 87.34375 * e, 86.75 * e, 77.34375 * e, 129.75 * e, 70.34375 * e),
           r.closePath(),
           se(r, i[1], i[2], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(120.75 * e, 72.34375 * e),
           r.bezierCurveTo(128.75 * e, 62.34375 * e, 98.75 * e, 64.34375 * e, 49.75 * e, 68.34375 * e),
           r.bezierCurveTo(34.75 * e, 75.34375 * e, 101.75 * e, 72.34375 * e, 124.75 * e, 78.34375 * e),
           r.closePath(),
           se(r, i[1], i[2], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(128.75 * e, 76.34375 * e),
           r.bezierCurveTo(111.75 * e, 54.34375 * e, 69.75 * e, 48.34375 * e, 39.75 * e, 50.34375 * e),
           r.bezierCurveTo(26.75 * e, 53.34375 * e, 86.75 * e, 59.34375 * e, 123.75 * e, 78.34375 * e),
           r.closePath(),
           se(r, i[1], i[2], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(143.75 * e, 74.34375 * e),
           r.bezierCurveTo(128.75 * e, 48.34375 * e, 108.75 * e, 35.34375 * e, 81.75 * e, 35.34375 * e),
           r.bezierCurveTo(63.75 * e, 33.34375 * e, 26.75 * e, 15.34375 * e, 29.75 * e, 25.34375 * e),
           r.bezierCurveTo(33.75 * e, 30.34375 * e, 49.75 * e, 40.34375 * e, 70.75 * e, 49.34375 * e),
           r.bezierCurveTo(94.75 * e, 54.34375 * e, 104.75 * e, 72.34375 * e, 128.75 * e, 88.34375 * e),
           r.closePath(),
           se(r, i[1], i[2], 4 * e),
           r.translate(0, -28 * e),
           r.save(),
           r.translate(165.25 * e, 106.84375 * e),
           Te(r, -56.5 * e, -41.5 * e, 113 * e, 83 * e, 18 * e),
           r.restore(),
           se(r, i[1], i[2], 4 * e),
           r.translate(28 * e, 15 * e),
           r.translate(0, 8 * e),
           r.globalAlpha = .5,
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(83 * e, 52 * e),
           r.bezierCurveTo(78 * e, 65 * e, 110 * e, 72 * e, 139 * e, 71 * e),
           r.bezierCurveTo(176 * e, 71 * e, 193 * e, 61 * e, 191 * e, 54 * e),
           r.bezierCurveTo(202 * e, 58 * e, 198 * e, 72 * e, 187 * e, 75 * e),
           r.bezierCurveTo(143 * e, 87 * e, 107 * e, 79 * e, 89 * e, 75 * e),
           r.bezierCurveTo(72 * e, 69 * e, 74 * e, 58 * e, 83 * e, 52 * e),
           r.closePath(),
           se(r, i[0]),
           r.globalAlpha = 1,
           r.translate(0 * e, -8 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(83 * e, 52 * e),
           r.bezierCurveTo(78 * e, 65 * e, 110 * e, 72 * e, 139 * e, 71 * e),
           r.bezierCurveTo(176 * e, 71 * e, 193 * e, 61 * e, 191 * e, 54 * e),
           r.bezierCurveTo(202 * e, 58 * e, 198 * e, 72 * e, 187 * e, 75 * e),
           r.bezierCurveTo(143 * e, 87 * e, 107 * e, 79 * e, 89 * e, 75 * e),
           r.bezierCurveTo(72 * e, 69 * e, 74 * e, 58 * e, 83 * e, 52 * e),
           r.closePath(),
           se(r, i[5], i[6], 4 * e),
           r.translate(-28 * e, -15 * e),
           Ee(r, 141.75 * e, 127.34375 * e, 15 * e),
           se(r, i[3]),
           Ee(r, 191.75 * e, 127.09375 * e, 15 * e),
           se(r, i[3]),
           Ee(r, 138.75 * e, 119.34375 * e, 5 * e),
           se(r, i[4]),
           Ee(r, 188.75 * e, 119.34375 * e, 5 * e),
           se(r, i[4]),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(125.75 * e, 139.34375 * e),
           r.bezierCurveTo(134.75 * e, 134.34375 * e, 143.75 * e, 134.34375 * e, 156.75 * e, 139.34375 * e),
           r.bezierCurveTo(153.25 * e, 141.84375 * e, 153.25 * e, 141.84375 * e, 149.75 * e, 144.34375 * e),
           r.bezierCurveTo(140.25 * e, 144.34375 * e, 140.25 * e, 144.34375 * e, 130.75 * e, 144.34375 * e),
           r.closePath(),
           se(r, i[1]),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(176.75 * e, 139.34375 * e),
           r.bezierCurveTo(183.75 * e, 135.34375 * e, 199.75 * e, 135.34375 * e, 205.75 * e, 139.34375 * e),
           r.bezierCurveTo(203.25 * e, 141.34375 * e, 203.25 * e, 141.34375 * e, 200.75 * e, 143.34375 * e),
           r.bezierCurveTo(190.75 * e, 143.84375 * e, 190.75 * e, 143.84375 * e, 180.75 * e, 144.34375 * e),
           r.closePath(),
           se(r, i[1])
       } else
           r.globalAlpha = .75,
           r.translate(0, 8 * e),
           r.save(),
           r.translate(87 * e, 64.5 * e),
           Te(r, -56 * e, -41.5 * e, 112 * e, 83 * e, 18 * e),
           r.restore(),
           se(r, i[0]),
           r.globalAlpha = 1,
           r.translate(0, -8 * e),
           r.save(),
           r.translate(87 * e, 64.5 * e),
           Te(r, -56 * e, -41.5 * e, 112 * e, 83 * e, 18 * e),
           r.restore(),
           se(r, i[1], i[2], 4 * e),
           0 == t ? (r.translate(27 * e, 10 * e),
           Ee(r, 35 * e, 75 * e, 15 * e),
           se(r, i[3]),
           Ee(r, 85 * e, 75 * e, 15 * e),
           se(r, i[3]),
           Ee(r, 32 * e, 67 * e, 5 * e),
           se(r, i[4]),
           Ee(r, 82 * e, 67 * e, 5 * e),
           se(r, i[4])) : 1 == t ? (r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(35 * e, 73 * e),
           r.bezierCurveTo(40 * e, 72 * e, 38 * e, 68 * e, 35 * e, 67 * e),
           r.bezierCurveTo(25 * e, 67 * e, 21 * e, 65 * e, 16 * e, 61 * e),
           r.bezierCurveTo(10 * e, 60 * e, 16 * e, 64 * e, 20 * e, 67 * e),
           r.bezierCurveTo(3 * e, 70 * e, 12 * e, 68.5 * e, 4 * e, 70 * e),
           r.bezierCurveTo(2 * e, 71 * e, 6 * e, 72 * e, 13 * e, 73 * e),
           r.bezierCurveTo(12.5 * e, 76.5 * e, 12.5 * e, 76.5 * e, 12 * e, 80 * e),
           r.bezierCurveTo(12 * e, 83 * e, 15 * e, 80 * e, 18 * e, 73 * e),
           r.bezierCurveTo(26.5 * e, 73.5 * e, 26.5 * e, 73.5 * e, 35 * e, 74 * e),
           r.closePath(),
           se(r, i[5], i[6], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(134 * e, 64 * e),
           r.bezierCurveTo(141.5 * e, 64 * e, 141.5 * e, 64 * e, 149 * e, 64 * e),
           r.bezierCurveTo(153 * e, 59 * e, 156 * e, 56 * e, 159 * e, 56 * e),
           r.bezierCurveTo(161 * e, 57 * e, 160 * e, 60 * e, 155 * e, 65 * e),
           r.bezierCurveTo(165 * e, 71 * e, 168 * e, 72 * e, 169 * e, 74 * e),
           r.bezierCurveTo(169 * e, 76 * e, 159 * e, 71 * e, 156 * e, 72 * e),
           r.bezierCurveTo(154 * e, 72 * e, 155 * e, 75 * e, 156 * e, 79 * e),
           r.bezierCurveTo(155 * e, 81 * e, 153 * e, 78 * e, 150 * e, 72 * e),
           r.bezierCurveTo(142 * e, 71.5 * e, 142 * e, 71.5 * e, 134 * e, 71 * e),
           r.bezierCurveTo(130 * e, 69 * e, 131 * e, 65 * e, 135 * e, 64 * e),
           r.closePath(),
           se(r, i[5], i[6], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(80 * e, 95 * e),
           r.bezierCurveTo(83 * e, 88 * e, 89 * e, 88 * e, 92 * e, 95 * e),
           r.bezierCurveTo(92 * e, 105 * e, 88 * e, 110 * e, 86 * e, 110 * e),
           r.bezierCurveTo(83 * e, 107 * e, 82 * e, 104 * e, 80 * e, 96 * e),
           r.closePath(),
           se(r, i[7], i[8], 3 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(81 * e, 100 * e),
           r.bezierCurveTo(82 * e, 97 * e, 83 * e, 96 * e, 85 * e, 96 * e),
           r.bezierCurveTo(82 * e, 100 * e, 82 * e, 101 * e, 83 * e, 103 * e),
           r.closePath(),
           se(r, i[8]),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(83 * e, 103 * e),
           r.bezierCurveTo(83 * e, 102 * e, 84 * e, 100 * e, 86 * e, 100 * e),
           r.bezierCurveTo(84 * e, 103 * e, 84 * e, 105 * e, 84 * e, 106 * e),
           r.closePath(),
           se(r, i[8]),
           r.translate(27 * e, 10 * e),
           Ee(r, 35 * e, 75 * e, 15 * e),
           se(r, i[3]),
           Ee(r, 85 * e, 75 * e, 15 * e),
           se(r, i[3]),
           Ee(r, 32 * e, 67 * e, 5 * e),
           se(r, i[4]),
           Ee(r, 82 * e, 67 * e, 5 * e),
           se(r, i[4])) : 2 == t ? (r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(48 * e, 22 * e),
           r.bezierCurveTo(85.5 * e, 22 * e, 85.5 * e, 22 * e, 123 * e, 22 * e),
           r.bezierCurveTo(138 * e, 23 * e, 147 * e, 34 * e, 143 * e, 62 * e),
           r.bezierCurveTo(142 * e, 67 * e, 144 * e, 70 * e, 149 * e, 73 * e),
           r.bezierCurveTo(147 * e, 77 * e, 145 * e, 77 * e, 143 * e, 77 * e),
           r.bezierCurveTo(141 * e, 85 * e, 145 * e, 92 * e, 148 * e, 97 * e),
           r.bezierCurveTo(142 * e, 103 * e, 134 * e, 105 * e, 121 * e, 106 * e),
           r.bezierCurveTo(85 * e, 106 * e, 85 * e, 106 * e, 49 * e, 106 * e),
           r.bezierCurveTo(32 * e, 104 * e, 29 * e, 101 * e, 24 * e, 95 * e),
           r.bezierCurveTo(30 * e, 86 * e, 31 * e, 85 * e, 30 * e, 78 * e),
           r.bezierCurveTo(27.5 * e, 76 * e, 27.5 * e, 76 * e, 25 * e, 74 * e),
           r.bezierCurveTo(31 * e, 68 * e, 31 * e, 60 * e, 30 * e, 46 * e),
           r.bezierCurveTo(31 * e, 31 * e, 37 * e, 23 * e, 47 * e, 22 * e),
           r.closePath(),
           se(r, i[1], i[2], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(30 * e, 44 * e),
           r.bezierCurveTo(66 * e, 48 * e, 99 * e, 45 * e, 141 * e, 39 * e),
           se(r, void 0, i[3], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(30 * e, 67 * e),
           r.bezierCurveTo(80 * e, 44 * e, 118 * e, 43 * e, 141 * e, 60 * e),
           se(r, void 0, i[3], 4 * e),
           r.globalAlpha = .4,
           Ee(r, 31 * e, 44 * e, 9 * e),
           se(r, i[4]),
           Ee(r, 42 * e, 47 * e, 9 * e),
           se(r, i[5]),
           Ee(r, 70 * e, 42 * e, 9 * e),
           se(r, i[6]),
           Ee(r, 53 * e, 45 * e, 9 * e),
           se(r, i[7]),
           Ee(r, 103 * e, 40 * e, 9 * e),
           se(r, i[8]),
           Ee(r, 116 * e, 41 * e, 9 * e),
           se(r, i[5]),
           Ee(r, 131 * e, 41 * e, 9 * e),
           se(r, i[4]),
           Ee(r, 39 * e, 64 * e, 9 * e),
           se(r, i[7]),
           Ee(r, 51 * e, 60 * e, 9 * e),
           se(r, i[6]),
           Ee(r, 74 * e, 53 * e, 9 * e),
           se(r, i[4]),
           Ee(r, 83 * e, 51 * e, 9 * e),
           se(r, i[8]),
           Ee(r, 95 * e, 51 * e, 9 * e),
           se(r, i[6]),
           Ee(r, 107 * e, 49 * e, 9 * e),
           se(r, i[7]),
           Ee(r, 120 * e, 50 * e, 9 * e),
           se(r, i[4]),
           Ee(r, 137 * e, 57 * e, 9 * e),
           se(r, i[5]),
           r.globalAlpha = 1,
           Ee(r, 31 * e, 44 * e, 4 * e),
           se(r, i[4]),
           Ee(r, 42 * e, 47 * e, 4 * e),
           se(r, i[5]),
           Ee(r, 53 * e, 45 * e, 4 * e),
           se(r, i[7]),
           Ee(r, 70 * e, 43 * e, 4 * e),
           se(r, i[6]),
           Ee(r, 50 * e, 59 * e, 4 * e),
           se(r, i[6]),
           Ee(r, 39 * e, 64 * e, 4 * e),
           se(r, i[7]),
           Ee(r, 83 * e, 51 * e, 4 * e),
           se(r, i[4]),
           Ee(r, 74 * e, 53 * e, 4 * e),
           se(r, i[8]),
           Ee(r, 95 * e, 51 * e, 4 * e),
           se(r, i[6]),
           Ee(r, 103 * e, 41 * e, 4 * e),
           se(r, i[8]),
           Ee(r, 107 * e, 49 * e, 4 * e),
           se(r, i[7]),
           Ee(r, 116 * e, 41 * e, 4 * e),
           se(r, i[5]),
           Ee(r, 131 * e, 41 * e, 4 * e),
           se(r, i[4]),
           Ee(r, 137 * e, 57 * e, 4 * e),
           se(r, i[5]),
           Ee(r, 120 * e, 50 * e, 4 * e),
           se(r, i[4]),
           r.translate(27 * e, 10 * e),
           Ee(r, 35 * e, 75 * e, 15 * e),
           se(r, i[9]),
           Ee(r, 85 * e, 75 * e, 15 * e),
           se(r, i[9]),
           Ee(r, 32 * e, 67 * e, 5 * e),
           se(r, i[10]),
           Ee(r, 82 * e, 67 * e, 5 * e),
           se(r, i[10])) : 3 == t ? (r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(23 * e, 95 * e),
           r.bezierCurveTo(30 * e, 85 * e, 30 * e, 83 * e, 30 * e, 72 * e),
           r.bezierCurveTo(30 * e, 61.5 * e, 30 * e, 61.5 * e, 30 * e, 51 * e),
           r.bezierCurveTo(29 * e, 33 * e, 42 * e, 23 * e, 54 * e, 24 * e),
           r.bezierCurveTo(86.5 * e, 24 * e, 86.5 * e, 24 * e, 119 * e, 24 * e),
           r.bezierCurveTo(135 * e, 24 * e, 143 * e, 33 * e, 143 * e, 47 * e),
           r.bezierCurveTo(143 * e, 63.5 * e, 143 * e, 63.5 * e, 143 * e, 80 * e),
           r.bezierCurveTo(142 * e, 86 * e, 147 * e, 93 * e, 150 * e, 96 * e),
           r.bezierCurveTo(144 * e, 107 * e, 113 * e, 112 * e, 84 * e, 111 * e),
           r.bezierCurveTo(52 * e, 112 * e, 34 * e, 106 * e, 23 * e, 96 * e),
           r.closePath(),
           se(r, i[1], i[2], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(30 * e, 81 * e),
           r.bezierCurveTo(56 * e, 99 * e, 104 * e, 98 * e, 142 * e, 84 * e),
           r.bezierCurveTo(145.5 * e, 89.5 * e, 145.5 * e, 89.5 * e, 149 * e, 95 * e),
           r.bezierCurveTo(142 * e, 106 * e, 127 * e, 110 * e, 81 * e, 110 * e),
           r.bezierCurveTo(36 * e, 112 * e, 28 * e, 99 * e, 23 * e, 95 * e),
           r.bezierCurveTo(31 * e, 87 * e, 31 * e, 82 * e, 30 * e, 81 * e),
           r.closePath(),
           se(r, i[3], i[2], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(23 * e, 95 * e),
           r.bezierCurveTo(30 * e, 85 * e, 30 * e, 83 * e, 30 * e, 72 * e),
           r.bezierCurveTo(30 * e, 61.5 * e, 30 * e, 61.5 * e, 30 * e, 51 * e),
           r.bezierCurveTo(29 * e, 33 * e, 42 * e, 23 * e, 54 * e, 24 * e),
           r.bezierCurveTo(86.5 * e, 24 * e, 86.5 * e, 24 * e, 119 * e, 24 * e),
           r.bezierCurveTo(135 * e, 24 * e, 143 * e, 33 * e, 143 * e, 47 * e),
           r.bezierCurveTo(143 * e, 63.5 * e, 143 * e, 63.5 * e, 143 * e, 80 * e),
           r.bezierCurveTo(142 * e, 86 * e, 147 * e, 93 * e, 150 * e, 96 * e),
           r.bezierCurveTo(144 * e, 107 * e, 113 * e, 112 * e, 84 * e, 111 * e),
           r.bezierCurveTo(52 * e, 112 * e, 34 * e, 106 * e, 23 * e, 96 * e),
           r.closePath(),
           se(r, void 0, i[2], 4 * e),
           r.translate(27 * e, 10 * e),
           Ee(r, 35 * e, 75 * e, 15 * e),
           se(r, i[6]),
           Ee(r, 85 * e, 75 * e, 15 * e),
           se(r, i[6]),
           Ee(r, 32 * e, 67 * e, 5 * e),
           se(r, i[7]),
           Ee(r, 82 * e, 67 * e, 5 * e),
           se(r, i[7]),
           r.translate(-96 * e, -25 * e),
           r.scale(1.8, 1.8),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(85 * e, 21 * e),
           r.bezierCurveTo(73 * e, 16 * e, 70 * e, 16 * e, 70 * e, 26 * e),
           r.bezierCurveTo(72 * e, 34 * e, 75 * e, 37 * e, 85 * e, 26 * e),
           r.closePath(),
           se(r, i[4], i[5], 3 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(89 * e, 21 * e),
           r.bezierCurveTo(104 * e, 16 * e, 105 * e, 19 * e, 106 * e, 24 * e),
           r.bezierCurveTo(105 * e, 36 * e, 97 * e, 36 * e, 90 * e, 28 * e),
           r.closePath(),
           se(r, i[4], i[5], 3 * e),
           Ee(r, 87 * e, 23 * e, 6.324555320336759 * e),
           se(r, i[4], i[5], 3 * e)) : 4 == t ? (r.translate(27 * e, 8 * e),
           Ee(r, 15 * e, 76 * e, 9.219544457292887 * e),
           se(r, i[3]),
           Ee(r, 106 * e, 76 * e, 9.219544457292887 * e),
           se(r, i[3]),
           r.translate(-27 * e, -8 * e),
           r.translate(27 * e, 10 * e),
           Ee(r, 35 * e, 75 * e, 15 * e),
           se(r, i[5]),
           Ee(r, 85 * e, 75 * e, 15 * e),
           se(r, i[5]),
           Ee(r, 32 * e, 67 * e, 5 * e),
           se(r, i[6]),
           Ee(r, 82 * e, 67 * e, 5 * e),
           se(r, i[6]),
           r.translate(-27 * e, -10 * e),
           r.translate(27 * e, 8 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(52 * e, 86 * e),
           r.bezierCurveTo(54 * e, 78 * e, 65 * e, 80 * e, 67 * e, 85 * e),
           r.bezierCurveTo(69 * e, 89 * e, 64 * e, 99 * e, 71 * e, 106 * e),
           r.bezierCurveTo(75 * e, 109 * e, 61 * e, 108 * e, 58 * e, 102 * e),
           r.bezierCurveTo(53 * e, 97 * e, 52 * e, 91 * e, 52 * e, 86 * e),
           r.closePath(),
           se(r, i[4])) : 6 == t ? (r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.translate(2 * e, 0),
           r.moveTo(28 * e, 69 * e),
           r.bezierCurveTo(26 * e, 39 * e, 31 * e, 25 * e, 52 * e, 24 * e),
           r.bezierCurveTo(86 * e, 23.5 * e, 86 * e, 23.5 * e, 120 * e, 23 * e),
           r.bezierCurveTo(137 * e, 23 * e, 145 * e, 33 * e, 144 * e, 53 * e),
           r.bezierCurveTo(144.5 * e, 63 * e, 144.5 * e, 63 * e, 145 * e, 73 * e),
           r.bezierCurveTo(141 * e, 41 * e, 106 * e, 41 * e, 98 * e, 59 * e),
           r.bezierCurveTo(92 * e, 69 * e, 94 * e, 98 * e, 90 * e, 95 * e),
           r.bezierCurveTo(86 * e, 95 * e, 86 * e, 95 * e, 82 * e, 95 * e),
           r.bezierCurveTo(79 * e, 94 * e, 87 * e, 33 * e, 48 * e, 47 * e),
           r.bezierCurveTo(31 * e, 57 * e, 30 * e, 65 * e, 28 * e, 72 * e),
           r.closePath(),
           se(r, i[3]),
           r.save(),
           r.translate(87 * e, 64.5 * e),
           Te(r, -56 * e, -41.5 * e, 112 * e, 83 * e, 18 * e),
           r.restore(),
           se(r, void 0, i[2], 4 * e),
           r.translate(27 * e, 10 * e),
           Ee(r, 35 * e, 75 * e, 15 * e),
           se(r, i[3]),
           Ee(r, 85 * e, 75 * e, 15 * e),
           se(r, i[3]),
           Ee(r, 32 * e, 67 * e, 5 * e),
           se(r, i[4]),
           Ee(r, 82 * e, 67 * e, 5 * e),
           se(r, i[4]),
           r.scale(1.4, 1.4),
           r.translate(-43.5 * e, -32 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(86 * e, 105 * e),
           r.bezierCurveTo(89 * e, 103 * e, 90 * e, 100 * e, 92 * e, 97 * e),
           r.bezierCurveTo(93 * e, 91 * e, 85 * e, 90 * e, 81 * e, 95 * e),
           r.bezierCurveTo(80 * e, 97 * e, 83 * e, 101 * e, 85 * e, 105 * e),
           r.closePath(),
           se(r, i[5], i[6], 3 * e)) : 7 == t ? (r.save(),
           r.translate(86 * e, 64.5 * e),
           Te(r, -16 * e, -43.5 * e, 32 * e, 87 * e, 5 * e),
           r.restore(),
           se(r, i[3], i[4], 4 * e),
           r.translate(0, 6 * e),
           r.globalAlpha = .5,
           r.save(),
           r.translate(85.5 * e, 47 * e),
           Te(r, -58.5 * e, -8 * e, 117 * e, 16 * e, 5 * e),
           r.restore(),
           se(r, i[0]),
           r.translate(0, -6 * e),
           r.globalAlpha = 1,
           r.save(),
           r.translate(85.5 * e, 47 * e),
           Te(r, -58.5 * e, -8 * e, 117 * e, 16 * e, 5 * e),
           r.restore(),
           se(r, i[3], i[4], 4 * e),
           r.translate(0, 7 * e),
           r.globalAlpha = .5,
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(84 * e, 44 * e),
           r.bezierCurveTo(85 * e, 26 * e, 96 * e, 23 * e, 103 * e, 30 * e),
           r.bezierCurveTo(110 * e, 36 * e, 110 * e, 47 * e, 92 * e, 50 * e),
           r.closePath(),
           se(r, i[0]),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(87 * e, 44 * e),
           r.bezierCurveTo(108 * e, 47 * e, 109 * e, 54 * e, 102 * e, 63 * e),
           r.bezierCurveTo(92 * e, 77 * e, 80 * e, 61 * e, 84 * e, 49 * e),
           r.closePath(),
           se(r, i[0]),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(84 * e, 43 * e),
           r.bezierCurveTo(86 * e, 24 * e, 72 * e, 23 * e, 68 * e, 31 * e),
           r.bezierCurveTo(56 * e, 42 * e, 70 * e, 49 * e, 81 * e, 47 * e),
           r.closePath(),
           se(r, i[0]),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(78 * e, 45 * e),
           r.bezierCurveTo(61 * e, 49 * e, 60 * e, 58 * e, 68 * e, 64 * e),
           r.bezierCurveTo(78 * e, 75 * e, 84 * e, 65 * e, 89 * e, 54 * e),
           r.closePath(),
           se(r, i[0]),
           r.translate(0, -7 * e),
           r.globalAlpha = 1,
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(84 * e, 44 * e),
           r.bezierCurveTo(85 * e, 26 * e, 96 * e, 23 * e, 103 * e, 30 * e),
           r.bezierCurveTo(110 * e, 36 * e, 110 * e, 47 * e, 92 * e, 50 * e),
           r.closePath(),
           se(r, i[3], i[4], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(87 * e, 44 * e),
           r.bezierCurveTo(108 * e, 47 * e, 109 * e, 54 * e, 102 * e, 63 * e),
           r.bezierCurveTo(92 * e, 77 * e, 80 * e, 61 * e, 84 * e, 49 * e),
           r.closePath(),
           se(r, i[3], i[4], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(84 * e, 43 * e),
           r.bezierCurveTo(86 * e, 24 * e, 72 * e, 23 * e, 68 * e, 31 * e),
           r.bezierCurveTo(56 * e, 42 * e, 70 * e, 49 * e, 81 * e, 47 * e),
           r.closePath(),
           se(r, i[3], i[4], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(78 * e, 45 * e),
           r.bezierCurveTo(61 * e, 49 * e, 60 * e, 58 * e, 68 * e, 64 * e),
           r.bezierCurveTo(78 * e, 75 * e, 84 * e, 65 * e, 89 * e, 54 * e),
           r.closePath(),
           se(r, i[3], i[4], 4 * e),
           r.translate(0, 6 * e),
           r.globalAlpha = .5,
           r.save(),
           r.translate(85 * e, 47.5 * e),
           r.rotate(0),
           Te(r, -10 * e, -10.5 * e, 20 * e, 21 * e, 5 * e),
           r.restore(),
           se(r, i[0]),
           r.translate(0, -6 * e),
           r.globalAlpha = 1,
           r.save(),
           r.translate(85 * e, 47.5 * e),
           r.rotate(0),
           Te(r, -10 * e, -10.5 * e, 20 * e, 21 * e, 5 * e),
           r.restore(),
           se(r, i[3], i[4], 4 * e),
           r.translate(27 * e, 10 * e),
           Ee(r, 35 * e, 75 * e, 15 * e),
           se(r, i[5]),
           Ee(r, 85 * e, 75 * e, 15 * e),
           se(r, i[5]),
           Ee(r, 32 * e, 67 * e, 5 * e),
           se(r, i[6]),
           Ee(r, 82 * e, 67 * e, 5 * e),
           se(r, i[6])) : 5 == t ? (n.width = 211 * e,
           n.height = 152 * e,
           r.globalAlpha = .5,
           r.translate(0, 8 * e),
           r.save(),
           r.translate(105.5 * e, 76.5 * e),
           Te(r, -56 * e, -41.5 * e, 112 * e, 83 * e, 18 * e),
           r.restore(),
           se(r, i[0]),
           r.globalAlpha = 1,
           r.translate(0, -8 * e),
           r.save(),
           r.translate(105.5 * e, 76.5 * e),
           Te(r, -56 * e, -41.5 * e, 112 * e, 83 * e, 18 * e),
           r.restore(),
           se(r, i[1], i[2], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(68 * e, 39 * e),
           r.bezierCurveTo(48 * e, 37 * e, 43 * e, 27 * e, 40 * e, 12 * e),
           r.bezierCurveTo(31 * e, 25 * e, 20 * e, 17 * e, 11 * e, 9 * e),
           r.bezierCurveTo(9 * e, 41 * e, 40 * e, 44 * e, 62 * e, 45 * e),
           r.closePath(),
           se(r, i[3], i[2], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(143 * e, 38 * e),
           r.bezierCurveTo(161 * e, 40 * e, 169 * e, 24 * e, 171 * e, 13 * e),
           r.bezierCurveTo(181 * e, 23 * e, 188 * e, 20 * e, 199 * e, 9 * e),
           r.bezierCurveTo(204 * e, 35 * e, 182 * e, 44 * e, 152 * e, 45 * e),
           r.closePath(),
           se(r, i[3], i[2], 4 * e),
           r.save(),
           r.translate(105.5 * e, 76.5 * e),
           Te(r, -55 * e, -40.5 * e, 106 * e, 77 * e, 18 * e),
           r.restore(),
           se(r, i[1]),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(149 * e, 45 * e),
           r.bezierCurveTo(155 * e, 37 * e, 158 * e, 37 * e, 161 * e, 52 * e),
           r.bezierCurveTo(164 * e, 60 * e, 161 * e, 65 * e, 152 * e, 58 * e),
           r.bezierCurveTo(145 * e, 51 * e, 143 * e, 49 * e, 149 * e, 45 * e),
           r.closePath(),
           se(r, i[4], i[2], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(60 * e, 43 * e),
           r.bezierCurveTo(67 * e, 47 * e, 67 * e, 51 * e, 57 * e, 59 * e),
           r.bezierCurveTo(50 * e, 64 * e, 47 * e, 64 * e, 49 * e, 55 * e),
           r.bezierCurveTo(49 * e, 42 * e, 51 * e, 38 * e, 59 * e, 42 * e),
           r.closePath(),
           se(r, i[4], i[2], 4 * e),
           Ee(r, 105 * e, 107 * e, 10.63014581273465 * e),
           se(r, i[5], i[6], 4 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(105 * e, 100 * e),
           r.bezierCurveTo(111 * e, 101 * e, 113 * e, 104 * e, 112 * e, 109 * e),
           r.closePath(),
           se(r, i[7]),
           r.translate(44.5 * e, 22 * e),
           Ee(r, 35 * e, 75 * e, 15 * e),
           se(r, i[8]),
           Ee(r, 85 * e, 75 * e, 15 * e),
           se(r, i[8]),
           Ee(r, 32 * e, 67 * e, 5 * e),
           se(r, i[9]),
           Ee(r, 82 * e, 67 * e, 5 * e),
           se(r, i[9])) : 9 == t && (r.save(),
           r.translate(110 * e, 22 * e),
           Te(r, -16 * e, -5 * e, 32 * e, 10 * e, 10 * e),
           r.restore(),
           se(r, i[1], i[2], 3 * e),
           r.save(),
           r.translate(109.5 * e, 17 * e),
           Te(r, -18.5 * e, -3 * e, 37 * e, 6 * e, 10 * e),
           r.restore(),
           se(r, i[3], i[4], 3 * e),
           r.globalAlpha = .5,
           r.translate(0, 5 * e),
           r.save(),
           r.translate(86 * e, 40 * e),
           Te(r, -58 * e, -9 * e, 116 * e, 18 * e, 6 * e),
           r.restore(),
           se(r, i[0]),
           r.globalAlpha = 1,
           r.translate(0, -5 * e),
           r.save(),
           r.translate(86 * e, 40 * e),
           Te(r, -58 * e, -9 * e, 116 * e, 18 * e, 6 * e),
           r.restore(),
           se(r, i[3], i[4], 3 * e),
           r.globalAlpha = .75,
           r.translate(0, 5 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(109 * e, 47 * e),
           r.bezierCurveTo(110.5 * e, 45 * e, 110.5 * e, 45 * e, 112 * e, 43 * e),
           r.bezierCurveTo(114 * e, 44 * e, 114 * e, 44 * e, 116 * e, 45 * e),
           r.bezierCurveTo(117.5 * e, 43 * e, 117.5 * e, 43 * e, 119 * e, 41 * e),
           r.bezierCurveTo(121 * e, 41.5 * e, 121 * e, 41.5 * e, 123 * e, 42 * e),
           r.closePath(),
           se(r, i[0]),
           r.beginPath(),
           r.translate(0, 5 * e),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(54 * e, 35 * e),
           r.bezierCurveTo(61.5 * e, 35 * e, 61.5 * e, 35 * e, 69 * e, 35 * e),
           r.bezierCurveTo(70 * e, 48 * e, 70 * e, 60 * e, 60 * e, 59 * e),
           r.bezierCurveTo(45 * e, 61 * e, 44 * e, 60 * e, 43 * e, 53 * e),
           r.bezierCurveTo(42 * e, 49 * e, 55 * e, 51 * e, 55 * e, 44 * e),
           r.closePath(),
           se(r, i[0]),
           r.globalAlpha = 1,
           r.translate(0, -5 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(105 * e, 38 * e),
           r.bezierCurveTo(110 * e, 48 * e, 110 * e, 50 * e, 105 * e, 53 * e),
           r.bezierCurveTo(98 * e, 62 * e, 107 * e, 66 * e, 117 * e, 60 * e),
           r.bezierCurveTo(128 * e, 56 * e, 130 * e, 56 * e, 126 * e, 49 * e),
           r.bezierCurveTo(123.5 * e, 41.5 * e, 123.5 * e, 41.5 * e, 121 * e, 34 * e),
           r.closePath(),
           se(r, i[7], i[8], 3 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(109 * e, 47 * e),
           r.bezierCurveTo(110.5 * e, 45 * e, 110.5 * e, 45 * e, 112 * e, 43 * e),
           r.bezierCurveTo(114 * e, 44 * e, 114 * e, 44 * e, 116 * e, 45 * e),
           r.bezierCurveTo(117.5 * e, 43 * e, 117.5 * e, 43 * e, 119 * e, 41 * e),
           r.bezierCurveTo(121 * e, 41.5 * e, 121 * e, 41.5 * e, 123 * e, 42 * e),
           r.closePath(),
           se(r, void 0, i[6], 3 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(84 * e, 33 * e),
           r.bezierCurveTo(88.5 * e, 34.5 * e, 88.5 * e, 34.5 * e, 93 * e, 36 * e),
           r.bezierCurveTo(87 * e, 43 * e, 88 * e, 45 * e, 91 * e, 46 * e),
           r.bezierCurveTo(98 * e, 56 * e, 91 * e, 57 * e, 85 * e, 53 * e),
           r.bezierCurveTo(80 * e, 50 * e, 78 * e, 49 * e, 82 * e, 43 * e),
           r.bezierCurveTo(83.5 * e, 38 * e, 83.5 * e, 38 * e, 85 * e, 33 * e),
           r.closePath(),
           se(r, i[5], i[6], 3 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(54 * e, 35 * e),
           r.bezierCurveTo(61.5 * e, 35 * e, 61.5 * e, 35 * e, 69 * e, 35 * e),
           r.bezierCurveTo(70 * e, 48 * e, 70 * e, 60 * e, 60 * e, 59 * e),
           r.bezierCurveTo(45 * e, 61 * e, 44 * e, 60 * e, 43 * e, 53 * e),
           r.bezierCurveTo(42 * e, 49 * e, 55 * e, 51 * e, 55 * e, 44 * e),
           r.closePath(),
           se(r, i[7], i[8], 3 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(48 * e, 49 * e),
           r.bezierCurveTo(50 * e, 50 * e, 50 * e, 50 * e, 52 * e, 51 * e),
           r.bezierCurveTo(50.5 * e, 52 * e, 50.5 * e, 52 * e, 49 * e, 53 * e),
           r.bezierCurveTo(51 * e, 54.5 * e, 51 * e, 54.5 * e, 53 * e, 56 * e),
           r.bezierCurveTo(51 * e, 57.5 * e, 51 * e, 57.5 * e, 49 * e, 59 * e),
           r.closePath(),
           se(r, void 0, i[6], 3 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(54 * e, 39 * e),
           r.bezierCurveTo(61.5 * e, 39.5 * e, 61.5 * e, 39.5 * e, 69 * e, 40 * e),
           r.closePath(),
           se(r, void 0, i[6], 3 * e),
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(55 * e, 43 * e),
           r.bezierCurveTo(61.5 * e, 43.5 * e, 61.5 * e, 43.5 * e, 68 * e, 44 * e),
           r.closePath(),
           se(r, void 0, i[6], 3 * e),
           r.translate(27 * e, 5 * e),
           Ee(r, 35 * e, 75 * e, 15 * e),
           se(r, i[9]),
           Ee(r, 85 * e, 75 * e, 15 * e),
           se(r, i[9]),
           Ee(r, 32 * e, 67 * e, 5 * e),
           se(r, i[10]),
           Ee(r, 82 * e, 67 * e, 5 * e),
           se(r, i[10]));
       return n
   }
   function le(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 350 * e,
       t.height = 350 * e,
       r.translate(0, 15 * e),
       r.globalAlpha = .5,
       r.save(),
       r.translate(174 * e, 172 * e),
       Te(r, -81 * e, -60 * e, 162 * e, 120 * e, 26 * e),
       r.restore(),
       se(r, i[0]),
       r.translate(0, -15 * e),
       r.globalAlpha = 1,
       r.save(),
       r.translate(174 * e, 172 * e),
       Te(r, -81 * e, -60 * e, 162 * e, 120 * e, 26 * e),
       r.restore(),
       se(r, i[1], i[2], 7 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(179 * e, 211 * e),
       r.bezierCurveTo(183 * e, 204.5 * e, 183 * e, 204.5 * e, 187 * e, 198 * e),
       r.bezierCurveTo(198.5 * e, 191.5 * e, 198.5 * e, 191.5 * e, 210 * e, 185 * e),
       r.bezierCurveTo(215 * e, 176.5 * e, 215 * e, 176.5 * e, 220 * e, 168 * e),
       r.bezierCurveTo(213 * e, 173.5 * e, 213 * e, 173.5 * e, 206 * e, 179 * e),
       r.bezierCurveTo(195 * e, 184 * e, 195 * e, 184 * e, 184 * e, 189 * e),
       r.closePath(),
       se(r, i[3]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(167 * e, 233 * e),
       r.bezierCurveTo(167 * e, 207 * e, 167 * e, 207 * e, 167 * e, 181 * e),
       r.bezierCurveTo(167 * e, 166 * e, 157 * e, 164 * e, 148 * e, 165 * e),
       r.bezierCurveTo(120 * e, 165 * e, 120 * e, 165 * e, 92 * e, 165 * e),
       r.bezierCurveTo(92 * e, 186.5 * e, 92 * e, 186.5 * e, 92 * e, 208 * e),
       r.bezierCurveTo(93 * e, 222 * e, 102 * e, 234 * e, 119 * e, 233 * e),
       r.closePath(),
       se(r, i[1], i[2], 7 * e),
       Ee(r, 152 * e, 179 * e, 6 * e),
       se(r, i[4]),
       Ee(r, 107 * e, 179 * e, 6 * e),
       se(r, i[4]),
       r.save(),
       r.translate(210 * e, 200 * e),
       r.rotate(.2),
       ue(r, 6, 32 * e, 10 * e),
       r.restore(),
       se(r, i[5], i[2], 7 * e),
       r.save(),
       r.translate(210 * e, 200 * e),
       r.rotate(1.0471975511965976),
       ue(r, 6, 19 * e, 6 * e),
       r.restore(),
       se(r, i[6], i[7], 7 * e),
       r.save(),
       r.translate(205 * e, 193 * e),
       r.rotate(0),
       ue(r, 6, 10 * e, 3 * e),
       r.restore(),
       se(r, i[8]),
       r.save(),
       r.translate(137 * e, 200 * e),
       r.rotate(-.5235987755982988),
       ue(r, 6, 20 * e, 5 * e),
       r.restore(),
       se(r, i[6], i[7], 7 * e),
       r.save(),
       r.translate(131 * e, 194 * e),
       ue(r, 6, 10 * e, 3 * e),
       r.restore(),
       se(r, i[8]),
       r.save(),
       r.translate(150.5 * e, 120 * e),
       r.rotate(0),
       Te(r, -19.5 * e, -8 * e, 39 * e, 16 * e, 0 * e),
       r.restore(),
       se(r, void 0, i[2], 7 * e),
       t
   }
   function Ne(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 175 * e,
       r.height = 150 * e,
       0 == t ? (n.globalAlpha = .5,
       n.translate(-88 * e, -95 * e),
       n.save(),
       n.translate(174 * e, 195.5 * e),
       Te(n, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e),
       n.restore(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(174 * e, 170.5 * e),
       Te(n, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e),
       n.restore(),
       se(n, i[1], i[2], 6.5 * e),
       Ee(n, 137 * e, 200 * e, 22.090722034374522 * e),
       se(n, i[3]),
       Ee(n, 210 * e, 200 * e, 22.20360331117452 * e),
       se(n, i[3]),
       Ee(n, 131 * e, 194 * e, 7 * e),
       se(n, i[4]),
       Ee(n, 206 * e, 194 * e, 7 * e),
       se(n, i[4]),
       n.translate(0, 1 * e),
       n.save(),
       n.translate(138.5 * e, 180.5 * e),
       Te(n, -22.5 * e, -11.5 * e, 45 * e, 23 * e, 0 * e),
       n.restore(),
       se(n, i[1]),
       n.save(),
       n.translate(207 * e, 177.5 * e),
       Te(n, -31 * e, -9.5 * e, 62 * e, 19 * e, 0 * e),
       n.restore(),
       se(n, i[1]),
       n.save(),
       n.translate(171.5 * e, 220 * e),
       Te(n, -52.5 * e, -2 * e, 105 * e, 4 * e, 0 * e),
       n.restore(),
       se(n, i[1])) : 1 == t ? (n.globalAlpha = .5,
       n.translate(-88 * e, -95 * e),
       n.save(),
       n.translate(174 * e, 195.5 * e),
       Te(n, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e),
       n.restore(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(174 * e, 170.5 * e),
       Te(n, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e),
       n.restore(),
       se(n, i[1], i[2], 6.5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(183 * e, 223 * e),
       n.bezierCurveTo(193 * e, 187 * e, 215 * e, 193 * e, 227 * e, 159 * e),
       n.bezierCurveTo(227 * e, 194 * e, 209 * e, 187 * e, 183 * e, 223 * e),
       n.closePath(),
       se(n, i[5]),
       Ee(n, 137 * e, 200 * e, 22.090722034374522 * e),
       se(n, i[3]),
       Ee(n, 210 * e, 200 * e, 22.20360331117452 * e),
       se(n, i[3]),
       Ee(n, 131 * e, 190 * e, 7 * e),
       se(n, i[4]),
       Ee(n, 204 * e, 190 * e, 7 * e),
       se(n, i[4]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(120 * e, 154 * e),
       n.bezierCurveTo(125 * e, 146 * e, 131 * e, 143 * e, 147 * e, 137 * e),
       n.bezierCurveTo(139 * e, 147 * e, 129 * e, 152 * e, 121 * e, 154 * e),
       n.closePath(),
       se(n, i[5]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(120 * e, 162 * e),
       n.bezierCurveTo(134 * e, 153 * e, 139 * e, 149 * e, 150 * e, 144 * e),
       n.bezierCurveTo(143 * e, 155 * e, 128 * e, 163 * e, 121 * e, 161 * e),
       n.closePath(),
       se(n, i[5]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(127 * e, 142 * e),
       n.bezierCurveTo(129 * e, 151 * e, 132 * e, 157 * e, 137 * e, 162 * e),
       n.bezierCurveTo(134 * e, 152 * e, 132 * e, 146 * e, 127 * e, 142 * e),
       n.closePath(),
       se(n, i[5]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(135 * e, 140 * e),
       n.bezierCurveTo(141 * e, 144 * e, 143 * e, 150 * e, 143 * e, 157 * e),
       n.bezierCurveTo(138 * e, 150 * e, 136 * e, 145 * e, 135 * e, 140 * e),
       n.closePath(),
       se(n, i[5])) : 2 == t ? (n.globalAlpha = .5,
       n.translate(-88 * e, -95 * e),
       n.save(),
       n.translate(174 * e, 195.5 * e),
       Te(n, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e),
       n.restore(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(174 * e, 170.5 * e),
       Te(n, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e),
       n.restore(),
       se(n, i[1], i[2], 6.5 * e),
       Ee(n, 137 * e, 200 * e, 22.090722034374522 * e),
       se(n, i[3]),
       Ee(n, 210 * e, 200 * e, 22.20360331117452 * e),
       se(n, i[3]),
       Ee(n, 130 * e, 192 * e, 7 * e),
       se(n, i[4]),
       Ee(n, 203 * e, 192 * e, 7 * e),
       se(n, i[4]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(115 * e, 224 * e),
       n.bezierCurveTo(173 * e, 223.5 * e, 173 * e, 223.5 * e, 231 * e, 223 * e),
       n.bezierCurveTo(230 * e, 222 * e, 198 * e, 223 * e, 186 * e, 209 * e),
       n.bezierCurveTo(173.5 * e, 209 * e, 173.5 * e, 209 * e, 161 * e, 209 * e),
       n.bezierCurveTo(146 * e, 224 * e, 114 * e, 223 * e, 116 * e, 224 * e),
       n.closePath(),
       se(n, i[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(112 * e, 193 * e),
       n.bezierCurveTo(154 * e, 182 * e, 194 * e, 183 * e, 234 * e, 192 * e),
       n.bezierCurveTo(217 * e, 154 * e, 148 * e, 127 * e, 112 * e, 192 * e),
       n.closePath(),
       se(n, i[1])) : 3 == t ? (n.globalAlpha = .5,
       n.translate(-88 * e, -95 * e),
       n.save(),
       n.translate(174 * e, 195.5 * e),
       Te(n, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e),
       n.restore(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(174 * e, 170.5 * e),
       Te(n, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e),
       n.restore(),
       se(n, i[1], i[2], 6.5 * e),
       Ee(n, 137 * e, 200 * e, 22.090722034374522 * e),
       se(n, i[3]),
       Ee(n, 210 * e, 200 * e, 22.20360331117452 * e),
       se(n, i[3]),
       Ee(n, 130 * e, 192 * e, 7 * e),
       se(n, i[4]),
       Ee(n, 203 * e, 192 * e, 7 * e),
       se(n, i[4]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(120 * e, 176 * e),
       n.bezierCurveTo(175 * e, 193 * e, 147.5 * e, 184.5 * e, 175 * e, 193 * e),
       n.bezierCurveTo(200 * e, 184.5 * e, 200 * e, 184.5 * e, 225 * e, 176 * e),
       n.closePath(),
       se(n, i[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(226 * e, 223 * e),
       n.bezierCurveTo(173.5 * e, 223 * e, 173.5 * e, 223 * e, 121 * e, 223 * e),
       n.bezierCurveTo(148 * e, 218 * e, 148 * e, 218 * e, 175 * e, 213 * e),
       n.closePath(),
       se(n, i[1])) : 4 == t ? (n.globalAlpha = .5,
       n.translate(-88 * e, -95 * e),
       n.save(),
       n.translate(174 * e, 195.5 * e),
       Te(n, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e),
       n.restore(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(174 * e, 170.5 * e),
       n.rotate(0),
       Te(n, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e),
       n.restore(),
       se(n, i[1], i[2], 6.5 * e),
       Ee(n, 137 * e, 200 * e, 22.090722034374522 * e),
       se(n, i[3]),
       Ee(n, 210 * e, 200 * e, 22.20360331117452 * e),
       se(n, i[3]),
       Ee(n, 137 * e, 203 * e, 8 * e),
       se(n, i[4]),
       Ee(n, 209 * e, 203 * e, 8 * e),
       se(n, i[4]),
       n.save(),
       n.translate(174.5 * e, 218 * e),
       n.rotate(0),
       Te(n, -60.5 * e, -5 * e, 121 * e, 10 * e, 28 * e),
       n.restore(),
       se(n, i[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(113 * e, 190 * e),
       n.bezierCurveTo(144 * e, 181.5 * e, 144 * e, 181.5 * e, 175 * e, 173 * e),
       n.bezierCurveTo(205 * e, 182 * e, 205 * e, 182 * e, 235 * e, 191 * e),
       n.bezierCurveTo(242 * e, 141 * e, 106 * e, 119 * e, 112 * e, 189 * e),
       n.closePath(),
       se(n, i[1])) : 5 == t ? (n.globalAlpha = .5,
       n.translate(-88 * e, -95 * e),
       n.save(),
       n.translate(174 * e, 195.5 * e),
       Te(n, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e),
       n.restore(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(174 * e, 170.5 * e),
       n.rotate(0),
       Te(n, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e),
       n.restore(),
       se(n, i[1], i[2], 6.5 * e),
       Ee(n, 137 * e, 200 * e, 22.090722034374522 * e),
       se(n, i[3]),
       Ee(n, 210 * e, 200 * e, 22.20360331117452 * e),
       se(n, i[3]),
       Ee(n, 140 * e, 196 * e, 7 * e),
       se(n, i[4]),
       Ee(n, 213 * e, 196 * e, 7 * e),
       se(n, i[4]),
       Ee(n, 131 * e, 206 * e, 3 * e),
       se(n, i[4]),
       Ee(n, 204 * e, 206 * e, 3 * e),
       se(n, i[4]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(113 * e, 181 * e),
       n.bezierCurveTo(159 * e, 204 * e, 190 * e, 202 * e, 235 * e, 181 * e),
       n.bezierCurveTo(241 * e, 137 * e, 109 * e, 130 * e, 112 * e, 180 * e),
       n.closePath(),
       se(n, i[1]),
       n.save(),
       n.translate(174 * e, 220 * e),
       n.rotate(0),
       Te(n, -56 * e, -5 * e, 112 * e, 10 * e, 1 * e),
       n.restore(),
       se(n, i[1])) : 6 == t ? (n.globalAlpha = .5,
       n.translate(-88 * e, -95 * e),
       n.save(),
       n.translate(174 * e, 195.5 * e),
       Te(n, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e),
       n.restore(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(174 * e, 170.5 * e),
       Te(n, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e),
       n.restore(),
       se(n, i[1], i[2], 6.5 * e),
       Ee(n, 137 * e, 200 * e, 22.090722034374522 * e),
       se(n, i[3]),
       Ee(n, 210 * e, 200 * e, 22.20360331117452 * e),
       se(n, i[3]),
       Ee(n, 133 * e, 188 * e, 7 * e),
       se(n, i[4]),
       Ee(n, 206 * e, 188 * e, 7 * e),
       se(n, i[4]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(110 * e, 193 * e),
       n.bezierCurveTo(130 * e, 182 * e, 142 * e, 183 * e, 162 * e, 193 * e),
       n.bezierCurveTo(164 * e, 176.5 * e, 164 * e, 176.5 * e, 166 * e, 160 * e),
       n.bezierCurveTo(137 * e, 159 * e, 137 * e, 159 * e, 108 * e, 158 * e),
       n.closePath(),
       se(n, i[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(184 * e, 192 * e),
       n.bezierCurveTo(205 * e, 183 * e, 216 * e, 183 * e, 234 * e, 192 * e),
       n.bezierCurveTo(233.5 * e, 177 * e, 233.5 * e, 177 * e, 233 * e, 162 * e),
       n.bezierCurveTo(209 * e, 161.5 * e, 186 * e, 162 * e, 185 * e, 161 * e),
       n.closePath(),
       se(n, i[1])) : 7 == t ? (n.globalAlpha = .5,
       n.translate(-88 * e, -95 * e),
       n.save(),
       n.translate(174 * e, 195.5 * e),
       Te(n, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e),
       n.restore(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(174 * e, 170.5 * e),
       Te(n, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e),
       n.restore(),
       se(n, i[1], i[2], 6.5 * e),
       Ee(n, 137 * e, 200 * e, 22.090722034374522 * e),
       se(n, i[3]),
       Ee(n, 210 * e, 200 * e, 22.20360331117452 * e),
       se(n, i[3]),
       Ee(n, 130 * e, 206 * e, 7 * e),
       se(n, i[4]),
       Ee(n, 203 * e, 206 * e, 7 * e),
       se(n, i[4]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(108 * e, 191 * e),
       n.bezierCurveTo(141 * e, 184 * e, 141 * e, 184 * e, 174 * e, 177 * e),
       n.bezierCurveTo(207 * e, 184 * e, 207 * e, 184 * e, 240 * e, 191 * e),
       n.bezierCurveTo(244 * e, 140 * e, 113 * e, 121 * e, 108 * e, 191 * e),
       n.closePath(),
       se(n, i[1])) : 8 == t ? (n.globalAlpha = .5,
       n.translate(-88 * e, -95 * e),
       n.save(),
       n.translate(174 * e, 195.5 * e),
       Te(n, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e),
       n.restore(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(174 * e, 170.5 * e),
       Te(n, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e),
       n.restore(),
       se(n, i[1], i[2], 6.5 * e),
       Ee(n, 137 * e, 200 * e, 22.090722034374522 * e),
       se(n, i[3]),
       Ee(n, 210 * e, 200 * e, 22.20360331117452 * e),
       se(n, i[3]),
       Ee(n, 127 * e, 198 * e, 7 * e),
       se(n, i[4]),
       Ee(n, 200 * e, 198 * e, 7 * e),
       se(n, i[4]),
       n.save(),
       n.translate(175 * e, 175.5 * e),
       Te(n, -67 * e, -13.5 * e, 134 * e, 27 * e, 0 * e),
       n.restore(),
       se(n, i[1]),
       n.save(),
       n.translate(172 * e, 219 * e),
       Te(n, -60 * e, -4 * e, 120 * e, 8 * e, 0 * e),
       n.restore(),
       se(n, i[1])) : 9 == t && (n.globalAlpha = .5,
       n.translate(-88 * e, -95 * e),
       n.save(),
       n.translate(174 * e, 195.5 * e),
       Te(n, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e),
       n.restore(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(174 * e, 170.5 * e),
       Te(n, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e),
       n.restore(),
       se(n, i[1], i[2], 6.5 * e),
       Ee(n, 137 * e, 200 * e, 22.090722034374522 * e),
       se(n, i[3]),
       Ee(n, 210 * e, 200 * e, 22.090722034374522 * e),
       se(n, i[3]),
       Ee(n, 143 * e, 200 * e, 7 * e),
       se(n, i[4]),
       Ee(n, 204 * e, 200 * e, 7 * e),
       se(n, i[4])),
       r
   }
   function Ce(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 264 * e,
       r.height = 246 * e,
       n.translate(0, 10 * e),
       n.globalAlpha = i ? .5 : 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(75 * e, 54 * e),
       n.bezierCurveTo(79 * e, 21 * e, 131 * e, 13 * e, 153 * e, 36 * e),
       n.bezierCurveTo(204 * e, 27 * e, 221 * e, 52 * e, 216 * e, 83 * e),
       n.bezierCurveTo(241 * e, 103 * e, 232 * e, 138 * e, 214 * e, 147 * e),
       n.bezierCurveTo(223 * e, 184 * e, 201 * e, 200 * e, 175 * e, 199 * e),
       n.bezierCurveTo(156 * e, 218 * e, 135 * e, 222 * e, 114 * e, 203 * e),
       n.bezierCurveTo(62 * e, 213 * e, 66 * e, 189 * e, 59 * e, 170 * e),
       n.bezierCurveTo(27 * e, 164 * e, 31 * e, 134 * e, 38 * e, 123 * e),
       n.bezierCurveTo(11 * e, 80 * e, 51 * e, 52 * e, 75 * e, 54 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(0, -10 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(75 * e, 54 * e),
       n.bezierCurveTo(79 * e, 21 * e, 131 * e, 13 * e, 153 * e, 36 * e),
       n.bezierCurveTo(204 * e, 27 * e, 221 * e, 52 * e, 216 * e, 83 * e),
       n.bezierCurveTo(241 * e, 103 * e, 232 * e, 138 * e, 214 * e, 147 * e),
       n.bezierCurveTo(223 * e, 184 * e, 201 * e, 200 * e, 175 * e, 199 * e),
       n.bezierCurveTo(156 * e, 218 * e, 135 * e, 222 * e, 114 * e, 203 * e),
       n.bezierCurveTo(62 * e, 213 * e, 66 * e, 189 * e, 59 * e, 170 * e),
       n.bezierCurveTo(27 * e, 164 * e, 31 * e, 134 * e, 38 * e, 123 * e),
       n.bezierCurveTo(11 * e, 80 * e, 51 * e, 52 * e, 75 * e, 54 * e),
       n.closePath(),
       se(n, t[1], t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(121 * e, 102 * e),
       n.bezierCurveTo(111 * e, 80 * e, 110 * e, 66 * e, 108 * e, 51 * e),
       n.bezierCurveTo(119 * e, 65 * e, 129 * e, 85 * e, 135 * e, 99 * e),
       n.bezierCurveTo(142 * e, 67 * e, 146 * e, 60 * e, 152 * e, 50 * e),
       n.bezierCurveTo(154 * e, 71 * e, 152 * e, 85 * e, 149 * e, 104 * e),
       n.bezierCurveTo(166 * e, 88 * e, 175 * e, 83 * e, 188 * e, 78 * e),
       n.bezierCurveTo(179 * e, 91 * e, 170 * e, 103 * e, 160 * e, 112 * e),
       n.bezierCurveTo(186 * e, 107 * e, 191 * e, 107 * e, 204 * e, 108 * e),
       n.bezierCurveTo(195 * e, 114 * e, 179 * e, 120 * e, 163 * e, 123 * e),
       n.bezierCurveTo(183 * e, 130 * e, 186 * e, 135 * e, 192 * e, 140 * e),
       n.bezierCurveTo(179 * e, 141 * e, 164 * e, 139 * e, 153 * e, 135 * e),
       n.bezierCurveTo(158 * e, 145 * e, 163 * e, 159 * e, 165 * e, 177 * e),
       n.bezierCurveTo(154 * e, 166 * e, 145 * e, 153 * e, 138 * e, 139 * e),
       n.bezierCurveTo(133 * e, 155 * e, 125 * e, 170 * e, 117 * e, 182 * e),
       n.bezierCurveTo(116 * e, 160 * e, 119 * e, 151 * e, 124 * e, 138 * e),
       n.bezierCurveTo(107 * e, 150 * e, 95 * e, 156 * e, 82 * e, 159 * e),
       n.bezierCurveTo(94 * e, 140 * e, 101 * e, 136 * e, 113 * e, 128 * e),
       n.bezierCurveTo(78 * e, 123 * e, 75 * e, 121 * e, 67 * e, 118 * e),
       n.bezierCurveTo(85 * e, 112 * e, 94 * e, 112 * e, 111 * e, 113 * e),
       n.bezierCurveTo(89 * e, 97 * e, 85 * e, 93 * e, 78 * e, 82 * e),
       n.bezierCurveTo(92 * e, 85 * e, 101 * e, 90 * e, 121 * e, 102 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(128 * e, 103 * e),
       n.bezierCurveTo(111 * e, 112 * e, 117 * e, 136 * e, 140 * e, 130 * e),
       n.bezierCurveTo(151 * e, 126 * e, 156 * e, 115 * e, 155 * e, 107 * e),
       n.bezierCurveTo(155 * e, 96 * e, 154 * e, 94 * e, 148 * e, 94 * e),
       n.bezierCurveTo(141 * e, 94 * e, 146 * e, 104 * e, 136 * e, 104 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       r
   }
   function ge(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 70 * e,
       r.height = 70 * e,
       n.globalAlpha = .5,
       Ee(n, 26 * e, 26 * e, 9 * e),
       se(n, t[0]),
       Ee(n, 56 * e, 36 * e, 9 * e),
       se(n, t[1]),
       Ee(n, 40 * e, 50 * e, 9 * e),
       se(n, t[2]),
       n.globalAlpha = 1,
       Ee(n, 26 * e, 26 * e, 5 * e),
       se(n, t[0]),
       Ee(n, 56 * e, 36 * e, 5 * e),
       se(n, t[1]),
       Ee(n, 40 * e, 50 * e, 5 * e),
       se(n, t[2]),
       r
   }
   function be(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 22 * e,
       r.height = 22 * e,
       n.globalAlpha = .4,
       Ee(n, 11 * e, 11 * e, 10 * e),
       se(n, t[0]),
       n.globalAlpha = .7,
       Ee(n, 11 * e, 11 * e, 7 * e),
       se(n, t[0]),
       n.globalAlpha = 1,
       Ee(n, 11 * e, 11 * e, 4 * e),
       se(n, t[0]),
       r
   }
   function Oe(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 20 * e,
       r.height = 20 * e,
       n.globalAlpha = .5,
       Ee(n, 10 * e, 10 * e, 9 * e),
       se(n, t[0]),
       r
   }
   function pe(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 248 * e,
       r.height = 247 * e,
       n.save(),
       n.translate(69.5 * e, 145 * e),
       Te(n, -8.5 * e, -63 * e, 17 * e, 127 * e, 1 * e),
       n.restore(),
       se(n, t[0]),
       n.save(),
       n.translate(183 * e, 145 * e),
       Te(n, -8 * e, -63 * e, 16 * e, 126 * e, 1 * e),
       n.restore(),
       se(n, t[0]),
       n.save(),
       n.translate(123.5 * e, 62.5 * e),
       n.rotate(6.28),
       Te(n, -84.5 * e, -25.5 * e, 169 * e, 51 * e, 5 * e),
       n.restore(),
       se(n, t[2], t[1], 6 * e),
       n.save(),
       n.translate(123.5 * e, 118 * e),
       n.rotate(6.24),
       Te(n, -85.5 * e, -24 * e, 169 * e, 48 * e, 5 * e),
       n.restore(),
       se(n, t[3], t[1], 6 * e),
       n.save(),
       n.translate(122 * e, 177.5 * e),
       n.rotate(6.32),
       Te(n, -84 * e, -23.5 * e, 169 * e, 47 * e, 5 * e),
       n.restore(),
       se(n, t[2], t[1], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(37 * e, 157 * e),
       n.bezierCurveTo(49 * e, 160 * e, 49 * e, 160 * e, 61 * e, 163 * e),
       n.bezierCurveTo(49.5 * e, 165.5 * e, 49.5 * e, 165.5 * e, 38 * e, 168 * e),
       n.closePath(),
       se(n, t[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(205 * e, 175 * e),
       n.bezierCurveTo(192.5 * e, 180 * e, 192.5 * e, 180 * e, 180 * e, 185 * e),
       n.bezierCurveTo(193 * e, 188 * e, 193 * e, 188 * e, 206 * e, 191 * e),
       n.closePath(),
       se(n, t[1]),
       r
   }
   function ce(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 248 * e,
       r.height = 247 * e,
       n.save(),
       n.translate(182 * e, 120 * e),
       Te(n, -8 * e, -67 * e, 16 * e, 134 * e, 1 * e),
       n.restore(),
       se(n, t[0]),
       n.save(),
       n.translate(68.5 * e, 127.5 * e),
       Te(n, -8.5 * e, -70.5 * e, 17 * e, 141 * e, 1 * e),
       n.restore(),
       se(n, t[0]),
       n.save(),
       n.translate(123.5 * e, 68 * e),
       Te(n, -82.5 * e, -24 * e, 165 * e, 48 * e, 4 * e),
       n.restore(),
       se(n, t[2], t[1], 6 * e),
       n.save(),
       n.translate(123 * e, 179.5 * e),
       Te(n, -83 * e, -24.5 * e, 166 * e, 49 * e, 4 * e),
       n.restore(),
       se(n, t[2], t[1], 6 * e),
       n.save(),
       n.translate(123.5 * e, 123.5 * e),
       n.rotate(6.24),
       Te(n, -82.5 * e, -24.5 * e, 165 * e, 49 * e, 4 * e),
       n.restore(),
       se(n, t[3], t[1], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(204 * e, 112 * e),
       n.bezierCurveTo(149 * e, 121.5 * e, 96 * e, 130 * e, 94 * e, 131 * e),
       n.bezierCurveTo(149.5 * e, 127.5 * e, 149.5 * e, 127.5 * e, 205 * e, 124 * e),
       n.closePath(),
       se(n, t[1]),
       r
   }
   function ve(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 248 * e,
       r.height = 247 * e,
       n.save(),
       n.translate(183 * e, 107 * e),
       Te(n, -8 * e, -70.5 * e, 16 * e, 141 * e, 1 * e),
       n.restore(),
       se(n, t[0]),
       n.save(),
       n.translate(69.5 * e, 110 * e),
       Te(n, -8.5 * e, -71 * e, 17 * e, 143 * e, 1 * e),
       n.restore(),
       se(n, t[0]),
       n.save(),
       n.translate(123.5 * e, 181 * e),
       Te(n, -84.5 * e, -26 * e, 169 * e, 52 * e, 5 * e),
       n.restore(),
       se(n, t[2], t[1], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(41 * e, 95 * e),
       n.bezierCurveTo(105 * e, 96 * e, 113 * e, 99 * e, 134 * e, 102 * e),
       n.bezierCurveTo(147 * e, 106 * e, 173 * e, 100 * e, 207 * e, 105 * e),
       n.bezierCurveTo(210 * e, 105 * e, 207 * e, 140 * e, 207 * e, 154 * e),
       n.bezierCurveTo(123.5 * e, 151.5 * e, 123.5 * e, 151.5 * e, 40 * e, 149 * e),
       n.bezierCurveTo(37 * e, 145 * e, 39 * e, 95 * e, 41 * e, 96 * e),
       n.closePath(),
       se(n, t[2], t[1], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(68 * e, 75 * e),
       n.bezierCurveTo(54 * e, 72.5 * e, 54 * e, 72.5 * e, 40 * e, 70 * e),
       n.bezierCurveTo(38 * e, 46 * e, 40 * e, 46 * e, 53 * e, 46 * e),
       n.bezierCurveTo(201 * e, 41 * e, 201 * e, 41 * e, 201 * e, 42 * e),
       n.bezierCurveTo(211 * e, 40 * e, 208 * e, 53 * e, 208 * e, 72 * e),
       n.bezierCurveTo(209 * e, 91 * e, 210 * e, 96 * e, 194 * e, 94 * e),
       n.bezierCurveTo(119 * e, 97 * e, 119 * e, 97 * e, 44 * e, 100 * e),
       n.bezierCurveTo(39 * e, 99 * e, 40 * e, 96 * e, 40 * e, 80 * e),
       n.bezierCurveTo(54 * e, 77.5 * e, 54 * e, 77.5 * e, 68 * e, 75 * e),
       n.closePath(),
       se(n, t[3], t[1], 6 * e),
       r
   }
   function Pe(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 191 * e,
       r.height = 153 * e,
       n.globalAlpha = .5,
       n.translate(0, 10 * e),
       n.save(),
       n.translate(97.49996948242188 * e, 95.12844848632812 * e),
       Te(n, -62.5 * e, -41.5 * e, 125 * e, 83 * e, 20 * e),
       n.restore(),
       se(n, t[0], t[0], 4 * e),
       n.globalAlpha = 1,
       n.translate(0, -10 * e),
       n.save(),
       n.translate(97.49996948242188 * e, 95.12844848632812 * e),
       Te(n, -62.5 * e, -41.5 * e, 125 * e, 83 * e, 20 * e),
       n.restore(),
       se(n, t[1], t[2], 4 * e),
       n.globalCompositeOperation = "destination-out",
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(26.999969482421875 * e, 50.850677490234375 * e),
       n.bezierCurveTo(46.499969482421875 * e, 64.85067749023438 * e, 46.499969482421875 * e, 64.85067749023438 * e, 65.99996948242188 * e, 78.85067749023438 * e),
       n.bezierCurveTo(80.99996948242188 * e, 87.85067749023438 * e, 105.99996948242188 * e, 82.85067749023438 * e, 114.99996948242188 * e, 80.85067749023438 * e),
       n.bezierCurveTo(130.99996948242188 * e, 69.85067749023438 * e, 152.99996948242188 * e, 70.85067749023438 * e, 166.99996948242188 * e, 67.85067749023438 * e),
       n.bezierCurveTo(156.99996948242188 * e, 52.850677490234375 * e, 156.99996948242188 * e, 52.850677490234375 * e, 146.99996948242188 * e, 37.850677490234375 * e),
       n.bezierCurveTo(101.49996948242188 * e, 37.350677490234375 * e, 101.49996948242188 * e, 37.350677490234375 * e, 55.999969482421875 * e, 36.850677490234375 * e),
       n.closePath(),
       se(n, t[2], t[3], 4 * e),
       n.globalCompositeOperation = "source-over",
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(40.999969482421875 * e, 59.850677490234375 * e),
       n.bezierCurveTo(41.999969482421875 * e, 50.850677490234375 * e, 47.999969482421875 * e, 47.850677490234375 * e, 56.999969482421875 * e, 49.850677490234375 * e),
       n.bezierCurveTo(65.99996948242188 * e, 41.850677490234375 * e, 76.99996948242188 * e, 42.850677490234375 * e, 90.99996948242188 * e, 47.850677490234375 * e),
       n.bezierCurveTo(94.99996948242188 * e, 42.850677490234375 * e, 104.99996948242188 * e, 42.850677490234375 * e, 114.99996948242188 * e, 47.850677490234375 * e),
       n.bezierCurveTo(131.99996948242188 * e, 42.850677490234375 * e, 142.99996948242188 * e, 48.850677490234375 * e, 145.99996948242188 * e, 56.850677490234375 * e),
       n.bezierCurveTo(160.99996948242188 * e, 63.850677490234375 * e, 154.99996948242188 * e, 69.85067749023438 * e, 155.99996948242188 * e, 70.85067749023438 * e),
       n.bezierCurveTo(141.99996948242188 * e, 71.85067749023438 * e, 141.99996948242188 * e, 71.85067749023438 * e, 127.99996948242188 * e, 72.85067749023438 * e),
       n.bezierCurveTo(110.99996948242188 * e, 83.85067749023438 * e, 107.99996948242188 * e, 82.85067749023438 * e, 90.99996948242188 * e, 85.85067749023438 * e),
       n.bezierCurveTo(70.99996948242188 * e, 83.85067749023438 * e, 64.99996948242188 * e, 79.85067749023438 * e, 53.999969482421875 * e, 70.85067749023438 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(33.999969482421875 * e, 65.85067749023438 * e),
       n.bezierCurveTo(36.999969482421875 * e, 59.850677490234375 * e, 34.999969482421875 * e, 60.850677490234375 * e, 39.999969482421875 * e, 59.850677490234375 * e),
       n.bezierCurveTo(47.999969482421875 * e, 61.850677490234375 * e, 62.999969482421875 * e, 76.85067749023438 * e, 74.99996948242188 * e, 79.85067749023438 * e),
       n.bezierCurveTo(93.99996948242188 * e, 85.85067749023438 * e, 111.99996948242188 * e, 83.85067749023438 * e, 124.99996948242188 * e, 70.85067749023438 * e),
       n.bezierCurveTo(129.99996948242188 * e, 67.85067749023438 * e, 145.99996948242188 * e, 65.85067749023438 * e, 159.99996948242188 * e, 67.85067749023438 * e),
       n.bezierCurveTo(159.99996948242188 * e, 71.85067749023438 * e, 159.99996948242188 * e, 71.85067749023438 * e, 159.99996948242188 * e, 75.85067749023438 * e),
       n.bezierCurveTo(146.99996948242188 * e, 72.85067749023438 * e, 144.99996948242188 * e, 75.85067749023438 * e, 143.99996948242188 * e, 82.85067749023438 * e),
       n.bezierCurveTo(144.99996948242188 * e, 86.85067749023438 * e, 140.99996948242188 * e, 90.85067749023438 * e, 137.99996948242188 * e, 86.85067749023438 * e),
       n.bezierCurveTo(139.99996948242188 * e, 72.85067749023438 * e, 135.99996948242188 * e, 72.85067749023438 * e, 133.99996948242188 * e, 82.85067749023438 * e),
       n.bezierCurveTo(127.99996948242188 * e, 88.85067749023438 * e, 124.99996948242188 * e, 70.85067749023438 * e, 116.99996948242188 * e, 86.85067749023438 * e),
       n.bezierCurveTo(110.99996948242188 * e, 91.85067749023438 * e, 96.99996948242188 * e, 81.85067749023438 * e, 89.99996948242188 * e, 90.85067749023438 * e),
       n.bezierCurveTo(85.99996948242188 * e, 92.85067749023438 * e, 81.99996948242188 * e, 95.85067749023438 * e, 76.99996948242188 * e, 86.85067749023438 * e),
       n.bezierCurveTo(67.99996948242188 * e, 93.85067749023438 * e, 67.99996948242188 * e, 91.85067749023438 * e, 60.999969482421875 * e, 79.85067749023438 * e),
       n.bezierCurveTo(53.999969482421875 * e, 71.85067749023438 * e, 52.999969482421875 * e, 72.85067749023438 * e, 46.999969482421875 * e, 77.85067749023438 * e),
       n.bezierCurveTo(41.999969482421875 * e, 78.85067749023438 * e, 42.999969482421875 * e, 69.85067749023438 * e, 33.999969482421875 * e, 65.85067749023438 * e),
       n.closePath(),
       se(n, t[5], t[6], 4 * e),
       Ee(n, 68 * e, 111.29513549804688 * e, 15 * e),
       se(n, t[7], t[8], 4 * e),
       Ee(n, 123 * e, 111.29510498046875 * e, 15 * e),
       se(n, t[7], t[8], 4 * e),
       Ee(n, 63 * e, 106 * e, 5 * e),
       se(n, t[9]),
       Ee(n, 118 * e, 106 * e, 5 * e),
       se(n, t[9]),
       r
   }
   function me(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 191 * e,
       r.height = 153 * e,
       n.globalAlpha = .5,
       n.translate(0, 10 * e),
       n.save(),
       n.translate(96.49996948242188 * e, 66.79510498046875 * e),
       n.rotate(0),
       Te(n, -79.5 * e, -48.5 * e, 159 * e, 97 * e, 22 * e),
       n.restore(),
       se(n, t[0], t[0], 4 * e),
       n.globalAlpha = 1,
       n.translate(0, -10 * e),
       n.save(),
       n.translate(96.49996948242188 * e, 66.79510498046875 * e),
       n.rotate(0),
       Te(n, -79.5 * e, -48.5 * e, 159 * e, 97 * e, 22 * e),
       n.restore(),
       se(n, t[1], t[2], 4 * e),
       n.translate(2 * e, 0),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(119 * e, 28 * e),
       n.bezierCurveTo(119 * e, 22 * e, 119 * e, 20 * e, 122 * e, 16 * e),
       n.bezierCurveTo(149 * e, 39 * e, 149 * e, 39 * e, 176 * e, 63 * e),
       n.bezierCurveTo(176 * e, 75 * e, 176 * e, 75 * e, 175 * e, 88 * e),
       n.bezierCurveTo(174 * e, 90 * e, 174 * e, 90 * e, 172 * e, 93 * e),
       n.bezierCurveTo(171 * e, 101 * e, 169 * e, 109 * e, 164 * e, 113 * e),
       n.bezierCurveTo(163 * e, 104 * e, 163 * e, 104 * e, 162 * e, 95 * e),
       n.bezierCurveTo(155 * e, 105 * e, 155 * e, 105 * e, 147 * e, 116 * e),
       n.bezierCurveTo(87 * e, 114 * e, 87 * e, 114 * e, 26 * e, 112 * e),
       n.bezierCurveTo(27 * e, 106 * e, 27 * e, 106 * e, 27 * e, 101 * e),
       n.bezierCurveTo(24 * e, 104 * e, 24 * e, 104 * e, 20 * e, 108 * e),
       n.bezierCurveTo(17 * e, 103 * e, 20 * e, 86 * e, 23 * e, 72 * e),
       n.bezierCurveTo(15 * e, 74 * e, 14 * e, 78 * e, 12 * e, 83 * e),
       n.bezierCurveTo(12 * e, 65 * e, 12 * e, 54 * e, 16 * e, 42 * e),
       n.bezierCurveTo(14 * e, 39 * e, 14 * e, 39 * e, 12 * e, 36 * e),
       n.bezierCurveTo(16 * e, 33 * e, 16 * e, 33 * e, 19 * e, 30 * e),
       n.bezierCurveTo(18 * e, 27 * e, 18 * e, 27 * e, 17 * e, 25 * e),
       n.bezierCurveTo(24 * e, 24 * e, 31 * e, 21 * e, 29 * e, 19 * e),
       n.bezierCurveTo(37 * e, 25 * e, 37 * e, 25 * e, 45 * e, 31 * e),
       n.bezierCurveTo(40 * e, 23 * e, 40 * e, 21 * e, 42 * e, 16 * e),
       n.bezierCurveTo(74 * e, 16 * e, 74 * e, 16 * e, 106 * e, 16 * e),
       n.bezierCurveTo(113 * e, 21 * e, 113 * e, 21 * e, 119 * e, 26 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       r
   }
   function De(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 191 * e,
       t.height = 153 * e,
       r.save(),
       r.translate(96.49996948242188 * e, 66.79510498046875 * e),
       Te(r, -79.5 * e, -48.5 * e, 159 * e, 97 * e, 22 * e),
       r.restore(),
       se(r, i[0], i[0], 4 * e),
       r.translate(2 * e, 0),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(119 * e, 28 * e),
       r.bezierCurveTo(119 * e, 22 * e, 119 * e, 20 * e, 122 * e, 16 * e),
       r.bezierCurveTo(149 * e, 39 * e, 149 * e, 39 * e, 176 * e, 63 * e),
       r.bezierCurveTo(176 * e, 75 * e, 176 * e, 75 * e, 175 * e, 88 * e),
       r.bezierCurveTo(174 * e, 90 * e, 174 * e, 90 * e, 172 * e, 93 * e),
       r.bezierCurveTo(171 * e, 101 * e, 169 * e, 109 * e, 164 * e, 113 * e),
       r.bezierCurveTo(163 * e, 104 * e, 163 * e, 104 * e, 162 * e, 95 * e),
       r.bezierCurveTo(155 * e, 105 * e, 155 * e, 105 * e, 147 * e, 116 * e),
       r.bezierCurveTo(87 * e, 114 * e, 87 * e, 114 * e, 26 * e, 112 * e),
       r.bezierCurveTo(27 * e, 106 * e, 27 * e, 106 * e, 27 * e, 101 * e),
       r.bezierCurveTo(24 * e, 104 * e, 24 * e, 104 * e, 20 * e, 108 * e),
       r.bezierCurveTo(17 * e, 103 * e, 20 * e, 86 * e, 23 * e, 72 * e),
       r.bezierCurveTo(15 * e, 74 * e, 14 * e, 78 * e, 12 * e, 83 * e),
       r.bezierCurveTo(12 * e, 65 * e, 12 * e, 54 * e, 16 * e, 42 * e),
       r.bezierCurveTo(14 * e, 39 * e, 14 * e, 39 * e, 12 * e, 36 * e),
       r.bezierCurveTo(16 * e, 33 * e, 16 * e, 33 * e, 19 * e, 30 * e),
       r.bezierCurveTo(18 * e, 27 * e, 18 * e, 27 * e, 17 * e, 25 * e),
       r.bezierCurveTo(24 * e, 24 * e, 31 * e, 21 * e, 29 * e, 19 * e),
       r.bezierCurveTo(37 * e, 25 * e, 37 * e, 25 * e, 45 * e, 31 * e),
       r.bezierCurveTo(40 * e, 23 * e, 40 * e, 21 * e, 42 * e, 16 * e),
       r.bezierCurveTo(74 * e, 16 * e, 74 * e, 16 * e, 106 * e, 16 * e),
       r.bezierCurveTo(113 * e, 21 * e, 113 * e, 21 * e, 119 * e, 26 * e),
       r.closePath(),
       se(r, i[0], i[0], 4 * e),
       r.save(),
       r.translate(97.49996948242188 * e, 95.12844848632812 * e),
       Te(r, -62.5 * e, -41.5 * e, 125 * e, 83 * e, 20 * e),
       r.restore(),
       se(r, i[0], i[0], 4 * e),
       t
   }
   function Me(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 40 * e
         , a = 40 * e;
       r.width = o,
       r.height = a;
       var s = e * o / 2
         , T = e * a / 2
         , I = 15 * e;
       n.save(),
       n.translate(s, T),
       n.globalAlpha = 1,
       Ee(n, 0, 0, I),
       se(n, t[0]);
       I = 5 * e,
       s = 2 * e,
       T = 1 * e;
       return n.translate(s, T),
       n.globalAlpha = 1,
       Ee(n, 0, 0, I),
       se(n, t[1]),
       n.restore(),
       r
   }
   function Ge(e, i, t, r) {
       var n = document.createElement("canvas")
         , o = n.getContext("2d");
       return n.width = 185 * e,
       n.height = 240 * e,
       o.globalAlpha = .5,
       o.translate(0, 10 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(44 * e, 137 * e),
       o.bezierCurveTo(60 * e, 87 * e, 68 * e, 66 * e, 92 * e, 67 * e),
       o.bezierCurveTo(115 * e, 64 * e, 129 * e, 97 * e, 137 * e, 136 * e),
       o.closePath(),
       se(o, t[0]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(53 * e, 181 * e),
       o.bezierCurveTo(30 * e, 164 * e, 19 * e, 150 * e, 11 * e, 136 * e),
       o.bezierCurveTo(28 * e, 121 * e, 38 * e, 132 * e, 48 * e, 150 * e),
       o.closePath(),
       se(o, t[0]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(63 * e, 208 * e),
       o.bezierCurveTo(75 * e, 224 * e, 86 * e, 228 * e, 93 * e, 228 * e),
       o.bezierCurveTo(104 * e, 229 * e, 116 * e, 219 * e, 122 * e, 205 * e),
       o.closePath(),
       se(o, t[0]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(130 * e, 170 * e),
       o.bezierCurveTo(146 * e, 125 * e, 156 * e, 126 * e, 173 * e, 137 * e),
       o.bezierCurveTo(167 * e, 151 * e, 143 * e, 174 * e, 131 * e, 183 * e),
       o.closePath(),
       se(o, t[0]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(39 * e, 140 * e),
       o.bezierCurveTo(75 * e, 126 * e, 113 * e, 127 * e, 143 * e, 137 * e),
       o.bezierCurveTo(141 * e, 186 * e, 130 * e, 202 * e, 113 * e, 214 * e),
       o.bezierCurveTo(85 * e, 228 * e, 56 * e, 219 * e, 48 * e, 173 * e),
       o.bezierCurveTo(40 * e, 148 * e, 43 * e, 145 * e, 39 * e, 140 * e),
       o.closePath(),
       se(o, t[0]),
       o.globalAlpha = 1,
       o.translate(0, -10 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(44 * e, 137 * e),
       o.bezierCurveTo(60 * e, 87 * e, 68 * e, 66 * e, 92 * e, 67 * e),
       o.bezierCurveTo(115 * e, 64 * e, 129 * e, 97 * e, 137 * e, 136 * e),
       o.closePath(),
       se(o, t[1], t[2], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(53 * e, 181 * e),
       o.bezierCurveTo(30 * e, 164 * e, 19 * e, 150 * e, 11 * e, 136 * e),
       o.bezierCurveTo(28 * e, 121 * e, 38 * e, 132 * e, 48 * e, 150 * e),
       o.closePath(),
       se(o, t[1], t[2], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(63 * e, 208 * e),
       o.bezierCurveTo(75 * e, 224 * e, 86 * e, 228 * e, 93 * e, 228 * e),
       o.bezierCurveTo(104 * e, 229 * e, 116 * e, 219 * e, 122 * e, 205 * e),
       o.closePath(),
       se(o, t[1], t[2], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(130 * e, 170 * e),
       o.bezierCurveTo(146 * e, 125 * e, 156 * e, 126 * e, 173 * e, 137 * e),
       o.bezierCurveTo(167 * e, 151 * e, 143 * e, 174 * e, 131 * e, 183 * e),
       o.closePath(),
       se(o, t[1], t[2], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(39 * e, 140 * e),
       o.bezierCurveTo(75 * e, 126 * e, 113 * e, 127 * e, 143 * e, 137 * e),
       o.bezierCurveTo(141 * e, 186 * e, 130 * e, 202 * e, 113 * e, 214 * e),
       o.bezierCurveTo(85 * e, 228 * e, 56 * e, 219 * e, 48 * e, 173 * e),
       o.bezierCurveTo(40 * e, 148 * e, 43 * e, 145 * e, 39 * e, 140 * e),
       o.closePath(),
       se(o, t[1], t[2], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(59 * e, 99 * e),
       o.bezierCurveTo(71 * e, 68 * e, 81 * e, 68 * e, 94 * e, 67 * e),
       o.bezierCurveTo(105 * e, 66 * e, 119 * e, 75 * e, 123 * e, 96 * e),
       o.bezierCurveTo(104 * e, 91 * e, 101 * e, 94 * e, 94 * e, 97 * e),
       o.bezierCurveTo(76 * e, 92 * e, 73 * e, 93 * e, 60 * e, 99 * e),
       o.closePath(),
       se(o, t[3], t[2], 4 * e),
       0 === r ? (o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(47 * e, 149 * e),
       o.bezierCurveTo(43 * e, 140 * e, 48 * e, 130 * e, 59 * e, 127 * e),
       o.bezierCurveTo(77 * e, 126 * e, 90 * e, 131 * e, 131 * e, 127 * e),
       o.bezierCurveTo(143 * e, 130 * e, 144 * e, 143 * e, 132 * e, 154 * e),
       o.bezierCurveTo(90 * e, 152 * e, 90 * e, 152 * e, 48 * e, 150 * e),
       o.closePath(),
       se(o, t[1]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(40 * e, 139 * e),
       o.bezierCurveTo(48 * e, 113 * e, 76 * e, 119 * e, 91 * e, 126 * e),
       o.bezierCurveTo(117 * e, 113 * e, 135 * e, 117 * e, 144 * e, 134 * e),
       o.bezierCurveTo(144 * e, 138 * e, 144 * e, 138 * e, 144 * e, 142 * e),
       o.bezierCurveTo(128 * e, 124 * e, 108 * e, 124 * e, 91 * e, 136 * e),
       o.bezierCurveTo(59 * e, 124 * e, 50 * e, 137 * e, 42 * e, 148 * e),
       o.closePath(),
       se(o, t[3], t[2], 4 * e)) : (o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(41 * e, 139 * e),
       o.bezierCurveTo(53 * e, 117 * e, 69 * e, 118 * e, 92 * e, 127 * e),
       o.bezierCurveTo(124 * e, 111 * e, 136 * e, 121 * e, 143 * e, 136 * e),
       o.bezierCurveTo(142 * e, 144 * e, 142 * e, 144 * e, 141 * e, 152 * e),
       o.bezierCurveTo(128 * e, 131 * e, 113 * e, 138 * e, 92 * e, 145 * e),
       o.bezierCurveTo(57 * e, 133 * e, 57 * e, 147 * e, 44 * e, 154 * e),
       o.closePath(),
       se(o, t[3], t[2], 4 * e)),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(90 * e, 95 * e),
       o.bezierCurveTo(99 * e, 82 * e, 98 * e, 58 * e, 99 * e, 40 * e),
       o.bezierCurveTo(90 * e, 38 * e, 89 * e, 34 * e, 92 * e, 17 * e),
       o.bezierCurveTo(92 * e, 5 * e, 83 * e, 16 * e, 78 * e, 29 * e),
       o.bezierCurveTo(72 * e, 59 * e, 87 * e, 81 * e, 89 * e, 87 * e),
       o.closePath(),
       se(o, t[1], t[2], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(90 * e, 86 * e),
       o.bezierCurveTo(95 * e, 74 * e, 95 * e, 62 * e, 95 * e, 43 * e),
       o.bezierCurveTo(84 * e, 37 * e, 86 * e, 34 * e, 89 * e, 16 * e),
       o.bezierCurveTo(75 * e, 29 * e, 80 * e, 58 * e, 90 * e, 85 * e),
       o.closePath(),
       se(o, t[1], t[3], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(92 * e, 117 * e),
       o.bezierCurveTo(98 * e, 87 * e, 93 * e, 78 * e, 85 * e, 76 * e),
       o.bezierCurveTo(85.5 * e, 79.5 * e, 85.5 * e, 79.5 * e, 86 * e, 83 * e),
       o.bezierCurveTo(84 * e, 85.5 * e, 84 * e, 85.5 * e, 82 * e, 88 * e),
       o.bezierCurveTo(90 * e, 93 * e, 89 * e, 100 * e, 92 * e, 117 * e),
       o.closePath(),
       se(o, t[1], t[3], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(92 * e, 175 * e),
       o.bezierCurveTo(95 * e, 135 * e, 98 * e, 125 * e, 109 * e, 121 * e),
       o.bezierCurveTo(106 * e, 114 * e, 104 * e, 114 * e, 102 * e, 113 * e),
       o.bezierCurveTo(103 * e, 106 * e, 104 * e, 103 * e, 107 * e, 96 * e),
       o.bezierCurveTo(74 * e, 108 * e, 86 * e, 157 * e, 92 * e, 174 * e),
       o.closePath(),
       se(o, t[1], t[3], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(48 * e, 169 * e),
       o.bezierCurveTo(42 * e, 187 * e, 50 * e, 193 * e, 59 * e, 198 * e),
       o.closePath(),
       se(o, void 0, t[2], 5 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(136 * e, 171 * e),
       o.bezierCurveTo(139 * e, 186 * e, 138 * e, 191 * e, 124 * e, 199 * e),
       o.closePath(),
       se(o, void 0, t[2], 4 * e),
       Ee(o, 63 * e, 180 * e, 15.231546211727817 * e),
       se(o, t[4]),
       Ee(o, 121 * e, 181 * e, 15.652475842498529 * e),
       se(o, t[4]),
       Ee(o, 58 * e, 175 * e, 5.656854249492381 * e),
       se(o, t[2]),
       Ee(o, 116 * e, 175 * e, 5.656854249492381 * e),
       se(o, t[2]),
       n
   }
   function Le(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 185 * e,
       t.height = 240 * e,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(44 * e, 137 * e),
       r.bezierCurveTo(60 * e, 87 * e, 68 * e, 66 * e, 92 * e, 67 * e),
       r.bezierCurveTo(115 * e, 64 * e, 129 * e, 97 * e, 137 * e, 136 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(53 * e, 181 * e),
       r.bezierCurveTo(30 * e, 164 * e, 19 * e, 150 * e, 11 * e, 136 * e),
       r.bezierCurveTo(28 * e, 121 * e, 38 * e, 132 * e, 48 * e, 150 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(63 * e, 208 * e),
       r.bezierCurveTo(75 * e, 224 * e, 86 * e, 228 * e, 93 * e, 228 * e),
       r.bezierCurveTo(104 * e, 229 * e, 116 * e, 219 * e, 122 * e, 205 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(130 * e, 170 * e),
       r.bezierCurveTo(146 * e, 125 * e, 156 * e, 126 * e, 173 * e, 137 * e),
       r.bezierCurveTo(167 * e, 151 * e, 143 * e, 174 * e, 131 * e, 183 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(39 * e, 140 * e),
       r.bezierCurveTo(75 * e, 126 * e, 113 * e, 127 * e, 143 * e, 137 * e),
       r.bezierCurveTo(141 * e, 186 * e, 130 * e, 202 * e, 113 * e, 214 * e),
       r.bezierCurveTo(85 * e, 228 * e, 56 * e, 219 * e, 48 * e, 173 * e),
       r.bezierCurveTo(40 * e, 148 * e, 43 * e, 145 * e, 39 * e, 140 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(90 * e, 95 * e),
       r.bezierCurveTo(99 * e, 82 * e, 98 * e, 58 * e, 99 * e, 40 * e),
       r.bezierCurveTo(90 * e, 38 * e, 89 * e, 34 * e, 92 * e, 17 * e),
       r.bezierCurveTo(92 * e, 5 * e, 83 * e, 16 * e, 78 * e, 29 * e),
       r.bezierCurveTo(72 * e, 59 * e, 87 * e, 81 * e, 89 * e, 87 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(90 * e, 86 * e),
       r.bezierCurveTo(95 * e, 74 * e, 95 * e, 62 * e, 95 * e, 43 * e),
       r.bezierCurveTo(84 * e, 37 * e, 86 * e, 34 * e, 89 * e, 16 * e),
       r.bezierCurveTo(75 * e, 29 * e, 80 * e, 58 * e, 90 * e, 85 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(92 * e, 117 * e),
       r.bezierCurveTo(98 * e, 87 * e, 93 * e, 78 * e, 85 * e, 76 * e),
       r.bezierCurveTo(85.5 * e, 79.5 * e, 85.5 * e, 79.5 * e, 86 * e, 83 * e),
       r.bezierCurveTo(84 * e, 85.5 * e, 84 * e, 85.5 * e, 82 * e, 88 * e),
       r.bezierCurveTo(90 * e, 93 * e, 89 * e, 100 * e, 92 * e, 117 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(92 * e, 175 * e),
       r.bezierCurveTo(95 * e, 135 * e, 98 * e, 125 * e, 109 * e, 121 * e),
       r.bezierCurveTo(106 * e, 114 * e, 104 * e, 114 * e, 102 * e, 113 * e),
       r.bezierCurveTo(103 * e, 106 * e, 104 * e, 103 * e, 107 * e, 96 * e),
       r.bezierCurveTo(74 * e, 108 * e, 86 * e, 157 * e, 92 * e, 174 * e),
       r.closePath(),
       se(r, i[0]),
       t
   }
   function fe(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 185 * e,
       r.height = 240 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(58 * e, 205 * e),
       n.bezierCurveTo(74 * e, 227 * e, 83 * e, 230 * e, 92 * e, 230 * e),
       n.bezierCurveTo(101 * e, 232 * e, 119 * e, 219 * e, 122 * e, 205 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(46 * e, 151 * e),
       n.bezierCurveTo(34 * e, 126 * e, 21 * e, 130 * e, 10 * e, 139 * e),
       n.bezierCurveTo(27 * e, 168 * e, 48 * e, 180 * e, 53 * e, 184 * e),
       n.closePath(),
       se(n, t[3], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(122 * e, 165 * e),
       n.bezierCurveTo(143 * e, 140 * e, 154 * e, 123 * e, 172 * e, 139 * e),
       n.bezierCurveTo(169 * e, 149 * e, 147 * e, 173 * e, 126 * e, 192 * e),
       n.closePath(),
       se(n, t[3], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(47 * e, 129 * e),
       n.bezierCurveTo(55 * e, 90 * e, 71 * e, 66 * e, 93 * e, 69 * e),
       n.bezierCurveTo(116 * e, 70 * e, 122 * e, 88 * e, 136 * e, 127 * e),
       n.bezierCurveTo(143 * e, 137 * e, 144 * e, 137 * e, 144 * e, 142 * e),
       n.bezierCurveTo(138 * e, 199 * e, 128 * e, 206 * e, 108 * e, 219 * e),
       n.bezierCurveTo(84 * e, 228 * e, 65 * e, 224 * e, 50 * e, 191 * e),
       n.bezierCurveTo(41 * e, 161 * e, 41 * e, 157 * e, 39 * e, 144 * e),
       n.bezierCurveTo(40 * e, 140 * e, 42 * e, 137 * e, 47 * e, 129 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(47 * e, 133 * e),
       n.bezierCurveTo(65 * e, 143 * e, 74 * e, 162 * e, 70 * e, 186 * e),
       n.bezierCurveTo(71 * e, 188.5 * e, 71 * e, 188.5 * e, 72 * e, 191 * e),
       n.bezierCurveTo(81 * e, 185.5 * e, 81 * e, 185.5 * e, 90 * e, 180 * e),
       n.bezierCurveTo(99 * e, 185 * e, 99 * e, 185 * e, 108 * e, 190 * e),
       n.bezierCurveTo(110.5 * e, 184.5 * e, 110.5 * e, 184.5 * e, 113 * e, 179 * e),
       n.bezierCurveTo(110 * e, 156 * e, 121 * e, 156 * e, 142 * e, 141 * e),
       n.bezierCurveTo(137.5 * e, 133 * e, 137.5 * e, 133 * e, 133 * e, 125 * e),
       n.bezierCurveTo(116 * e, 78 * e, 112 * e, 70 * e, 91 * e, 71 * e),
       n.bezierCurveTo(62 * e, 69 * e, 59 * e, 107 * e, 48 * e, 132 * e),
       n.closePath(),
       se(n, t[4]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(93 * e, 86 * e),
       n.bezierCurveTo(101 * e, 79 * e, 99 * e, 56 * e, 100 * e, 37 * e),
       n.bezierCurveTo(90 * e, 34 * e, 90 * e, 27 * e, 93 * e, 13 * e),
       n.bezierCurveTo(96 * e, 0 * e, 85 * e, 13 * e, 82 * e, 26 * e),
       n.bezierCurveTo(78 * e, 43 * e, 89 * e, 74 * e, 93 * e, 85 * e),
       n.closePath(),
       se(n, t[3], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(94 * e, 86 * e),
       n.bezierCurveTo(120 * e, 88 * e, 132 * e, 109 * e, 122 * e, 128 * e),
       n.bezierCurveTo(118 * e, 139 * e, 101 * e, 146 * e, 90 * e, 143 * e),
       n.bezierCurveTo(57 * e, 141 * e, 49 * e, 109 * e, 68 * e, 94 * e),
       n.bezierCurveTo(78 * e, 85 * e, 90 * e, 86 * e, 95 * e, 86 * e),
       n.closePath(),
       se(n, t[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(91 * e, 178 * e),
       n.bezierCurveTo(78 * e, 136 * e, 81 * e, 88 * e, 93 * e, 87 * e),
       n.bezierCurveTo(101 * e, 84 * e, 94 * e, 97 * e, 94 * e, 107 * e),
       n.bezierCurveTo(91 * e, 112 * e, 92 * e, 117 * e, 94 * e, 121 * e),
       n.bezierCurveTo(98 * e, 126 * e, 102 * e, 128 * e, 97 * e, 135 * e),
       n.bezierCurveTo(92 * e, 140 * e, 93 * e, 160 * e, 91 * e, 179 * e),
       n.closePath(),
       se(n, t[5], t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(20 * e, 151 * e),
       n.bezierCurveTo(22 * e, 147 * e, 22 * e, 147 * e, 24 * e, 143 * e),
       n.bezierCurveTo(27 * e, 144.5 * e, 27 * e, 144.5 * e, 30 * e, 146 * e),
       n.bezierCurveTo(31 * e, 143 * e, 31 * e, 143 * e, 32 * e, 140 * e),
       n.bezierCurveTo(35 * e, 140.5 * e, 35 * e, 140.5 * e, 38 * e, 141 * e),
       n.bezierCurveTo(31 * e, 132 * e, 29 * e, 131 * e, 22 * e, 132 * e),
       n.bezierCurveTo(14 * e, 135 * e, 13 * e, 135 * e, 11 * e, 138 * e),
       n.bezierCurveTo(15.5 * e, 144.5 * e, 15.5 * e, 144.5 * e, 20 * e, 151 * e),
       n.closePath(),
       se(n, t[6]),
       Ee(n, 61 * e, 183 * e, 16.15549442140351 * e),
       se(n, t[7]),
       Ee(n, 121 * e, 184 * e, 14.866068747318506 * e),
       se(n, t[7]),
       Ee(n, 57 * e, 178 * e, 5.656854249492381 * e),
       se(n, t[2]),
       Ee(n, 116 * e, 177 * e, 5.830951894845301 * e),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(162 * e, 152 * e),
       n.bezierCurveTo(161.5 * e, 148 * e, 161.5 * e, 148 * e, 161 * e, 144 * e),
       n.bezierCurveTo(157.5 * e, 145 * e, 157.5 * e, 145 * e, 154 * e, 146 * e),
       n.bezierCurveTo(153.5 * e, 143 * e, 153.5 * e, 143 * e, 153 * e, 140 * e),
       n.bezierCurveTo(149 * e, 140.5 * e, 149 * e, 140.5 * e, 145 * e, 141 * e),
       n.bezierCurveTo(150 * e, 132 * e, 161 * e, 131 * e, 170 * e, 138 * e),
       n.bezierCurveTo(173 * e, 141 * e, 165 * e, 150 * e, 162 * e, 150 * e),
       n.closePath(),
       se(n, t[6]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(106 * e, 110 * e),
       n.bezierCurveTo(104 * e, 98 * e, 112 * e, 91 * e, 118 * e, 101 * e),
       n.bezierCurveTo(122 * e, 115 * e, 121 * e, 119 * e, 117 * e, 124 * e),
       n.bezierCurveTo(112 * e, 129 * e, 107 * e, 124 * e, 106 * e, 112 * e),
       n.closePath(),
       se(n, t[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(64 * e, 106 * e),
       n.bezierCurveTo(66 * e, 97 * e, 72 * e, 89 * e, 76 * e, 98 * e),
       n.bezierCurveTo(78 * e, 106 * e, 79 * e, 118 * e, 72 * e, 126 * e),
       n.bezierCurveTo(65 * e, 130 * e, 63 * e, 117 * e, 64 * e, 108 * e),
       n.closePath(),
       se(n, t[1]),
       r
   }
   function Ve(e) {
       var i = document.createElement("canvas")
         , t = i.getContext("2d")
         , r = 200 * e
         , n = 200 * e;
       i.width = r,
       i.height = n;
       var o = Ji(.35, !1, ["#0e3022", "#0b8052", "#077b49"]);
       t.drawImage(o, 10, 10);
       o = Xi(.9, !1, ["#3d2a6e", "#8255b5"]);
       t.drawImage(o, 21, 20);
       o = Xi(.9, !1, ["#3d2a6e", "#8255b5"]);
       t.drawImage(o, 38, 28);
       o = Xi(.9, !1, ["#3d2a6e", "#8255b5"]);
       t.drawImage(o, 15, 37);
       o = Xi(.9, !1, ["#3d2a6e", "#8255b5"]);
       return t.drawImage(o, 32, 45),
       i
   }
   function ze(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d")
         , n = 100 * e
         , o = 100 * e
         , a = n / 2
         , s = o / 2;
       t.width = n,
       t.height = o;
       var T = 5 * e
         , I = 28 * e
         , E = T / 2
         , _ = I / 2;
       r.translate(a, s);
       for (var u = 0; u < 4; u++)
           Te(r, -E, -_, T, I, 2 * e),
           r.rotate(Math.PI / 4),
           se(r, i);
       return r.arc(0, 0, 10 * e, 0, 2 * Math.PI),
       se(r, i),
       r.globalCompositeOperation = "destination-out",
       Ee(r, 0, 0, 4 * e),
       r.fill(),
       t
   }
   function He(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 32 * e
         , a = 32 * e
         , s = o / 2
         , T = a / 2;
       r.width = o,
       r.height = a;
       var I = 5 * e
         , E = 28 * e
         , _ = I / 2
         , u = E / 2;
       if (n.translate(0 * e, 0 * e),
       n.translate(s, T),
       1 == t) {
           Ee(n, 0, 0, 10 * e, 0),
           se(n, i[2], i[2], 3 * e);
           for (var h = 0; h < 4; h++)
               Te(n, -_, -u, I, E, 2 * e),
               n.rotate(Math.PI / 4),
               se(n, i[2], i[2], 4 * e)
       }
       Ee(n, 0, 0, 10 * e, 0),
       se(n, i[0], i[1], 1.5 * e);
       for (h = 0; h < 4; h++)
           Te(n, -_, -u, I, E, 2 * e),
           n.rotate(Math.PI / 4),
           se(n, i[0], i[1], 1.5 * e);
       return Ee(n, 0, 0, 10 * e, 0),
       se(n, i[0]),
       Ee(n, 0, 0, 4 * e, 0),
       se(n, i[2], i[1], 1.5 * e),
       n.globalCompositeOperation = "destination-out",
       Ee(n, 0, 0, 4 * e, 0),
       se(n, i[0], i[1], 2 * e),
       n.globalCompositeOperation = "source-over",
       Ee(n, 0, 0, 4 * e, 0),
       se(n, void 0, i[1], 2 * e),
       r
   }
   function ye(e, i, t, r, n, o, a) {
       void 0 === a && (a = 0);
       for (var s = -1 == o ? 0 : o; s >= a; s--)
           for (var T = 0; T < 200; T++)
               for (var I = 0; I < 200; I++) {
                   var E = wI.tiles[I][T];
                   if (E && E[r]) {
                       if (-1 == o)
                           var _ = E[r];
                       else
                           _ = E[r][s];
                       for (var u = 0; _ && u < _.length; u++) {
                           var h = _[u];
                           e.fillStyle = t,
                           Ee(e, h.x * i * .0095, h.y * i * .0095, n * i),
                           e.fill()
                       }
                   }
               }
   }
   function Be(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 200 * e,
       t.height = 200 * e,
       r.translate(9 * e, 12 * e),
       r.fillStyle = i[0],
       r.fillRect(-2, -3, t.width, t.height),
       r.fillStyle = i[9],
       r.fillRect(0, 0, t.width, t.height),
       r.fillStyle = i[17],
       r.fillRect(0, 0, t.width, t.height / 2.1),
       r.fillStyle = i[26],
       r.fillRect(t.width / 1.77, t.height / 2.1, t.width / 2.1, t.height / 2.1),
       r.fillStyle = i[28],
       r.fillRect(t.width / 1.77, t.height / 2.1, 5, t.height / 2.1),
       ye(r, e, i[17], "so", 3, 6, 0),
       ye(r, e, i[28], "isl", 6, 2, 2),
       ye(r, e, i[28], "isl", 6, 1, 1),
       ye(r, e, i[28], "isl", 6, 0, 0),
       ye(r, e, i[5], "plm", 2, 2, 2),
       ye(r, e, i[5], "plm", 2, 1, 1),
       ye(r, e, i[5], "plm", 2, 0, 0),
       ye(r, e, i[5], "t", 2, 5, 4),
       ye(r, e, i[6], "t", 3, 3, 2),
       ye(r, e, i[7], "t", 4, 1, 0),
       ye(r, e, i[8], "b", 3, 3, 2),
       ye(r, e, i[9], "b", 4, 1, 0),
       ye(r, e, i[2], "s", 2, 2, 2),
       ye(r, e, i[3], "s", 3, 1, 1),
       ye(r, e, i[4], "s", 4, 0, 0),
       ye(r, e, i[10], "g", 2, 2, 2),
       ye(r, e, i[11], "g", 3, 1, 1),
       ye(r, e, i[12], "g", 4, 0, 0),
       ye(r, e, i[1], "p", 4, -1),
       ye(r, e, i[25], "dg", 3, 6, 0),
       ye(r, e, i[27], "cs", 2, 2, 2),
       ye(r, e, i[27], "cs", 2, 1, 1),
       ye(r, e, i[27], "cs", 2, 0, 0),
       ye(r, e, i[19], "f", 2, 2, 2),
       ye(r, e, i[20], "f", 3, 1, 1),
       ye(r, e, i[21], "f", 4, 0, 0),
       ye(r, e, i[22], "gw", 2, 2, 2),
       ye(r, e, i[22], "gw", 3, 1, 1),
       ye(r, e, i[22], "gw", 4, 0, 0),
       ye(r, e, i[23], "dw", 3, 1, 1),
       ye(r, e, i[23], "dw", 4, 0, 0),
       ye(r, e, i[23], "dw", 2, 2, 2),
       ye(r, e, i[23], "d", 3, 1, 1),
       ye(r, e, i[23], "d", 4, 0, 0),
       ye(r, e, i[23], "d", 2, 2, 2),
       ye(r, e, i[24], "a", 2, 2, 2),
       ye(r, e, i[24], "a", 3, 1, 1),
       ye(r, e, i[24], "a", 4, 0, 0),
       ye(r, e, i[30], "l", 4, 2, 2),
       ye(r, e, i[30], "l", 4, 1, 1),
       ye(r, e, i[30], "l", 4, 0, 0),
       Ee(r, 0, 0, 0),
       r.globalCompositeOperation = "destination-out",
       r.translate(-9 * e, -4 * e),
       r.rect(5 * e, 0, t.width * e, t.height * e, 10 * e),
       r.lineWidth = 7 * e,
       r.strokeStyle = i[16],
       r.stroke(),
       t
   }
   function we(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = (R = 125 * e) / 2
         , a = (A = 95 * e) / 2
         , s = 10 * e
         , T = 8 * e
         , I = 112 * e
         , E = 82 * e
         , _ = I / 2
         , u = E / 2
         , h = 4 * e;
       r.width = R,
       r.height = A,
       n.translate(o - 4 * e, a + 4 * e),
       n.globalAlpha = i ? .5 : 1,
       Te(n, -_, -u, I, E, s),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -T),
       Te(n, -_, -u, I, E, s),
       se(n, t[1], t[2], h);
       var R = 55 * e
         , A = 45 * e;
       s = 5;
       n.translate(-40 * e, -30 * e),
       Te(n, 0, 0, R, A, s),
       se(n, t[3]);
       var d = ze(.7 * e, t[3]);
       n.drawImage(d, 45 * e, -25 * e);
       d = ze(.7 * e, t[3]);
       n.drawImage(d, 45 * e, 15 * e);
       d = ze(1.2 * e, t[3]);
       n.drawImage(d, 28 * e, -30 * e);
       R = 15 * e,
       A = 70 * e,
       s = 5 * e;
       n.translate(78 * e, -5 * e),
       Te(n, 0, 0, R, A, s),
       se(n, t[4]);
       R = 9 * e,
       A = 50 * e,
       s = 3 * e;
       return n.translate(-20 * e, 20 * e),
       n.rotate(Math.PI / 5),
       n.globalAlpha = .6,
       Te(n, 0, 0, R, A, s),
       se(n, t[5]),
       n.translate(-20 * e, 29 * e),
       n.rotate(Math.PI / 5),
       n.globalAlpha = .6,
       n.beginPath(),
       n.lineJoin = "round",
       n.moveTo(0, 0),
       n.lineTo(0, 30 * e),
       n.lineTo(30 * e, 30 * e),
       n.closePath(),
       se(n, null, t[5], 8 * e),
       r
   }
   function Ke(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d")
         , n = 85 * e
         , o = 115 * e
         , a = 6 * e;
       t.width = n,
       t.height = o,
       r.translate(-130 * e, -60 * e + a),
       r.globalAlpha = .5,
       r.beginPath(),
       r.bezierCurveTo(190 * e, 87 * e, 201 * e, 59 * e, 208 * e, 64 * e),
       r.bezierCurveTo(213 * e, 68 * e, 204 * e, 93 * e, 195 * e, 109 * e),
       r.bezierCurveTo(195 * e, 109 * e, 202 * e, 124 * e, 191 * e, 141 * e),
       r.bezierCurveTo(182 * e, 151 * e, 164 * e, 155 * e, 148 * e, 144 * e),
       r.bezierCurveTo(136 * e, 135 * e, 138 * e, 111 * e, 145 * e, 104 * e),
       r.bezierCurveTo(140 * e, 92 * e, 131 * e, 67 * e, 138 * e, 63 * e),
       r.bezierCurveTo(145 * e, 61 * e, 153 * e, 82 * e, 155 * e, 96 * e),
       r.bezierCurveTo(167 * e, 91 * e, 178 * e, 92 * e, 187 * e, 98 * e),
       r.closePath(),
       se(r, i[0]),
       r.translate(0, -a),
       r.globalAlpha = 1,
       r.beginPath(),
       r.bezierCurveTo(190 * e, 87 * e, 201 * e, 59 * e, 208 * e, 64 * e),
       r.bezierCurveTo(213 * e, 68 * e, 204 * e, 93 * e, 195 * e, 109 * e),
       r.bezierCurveTo(195 * e, 109 * e, 202 * e, 124 * e, 191 * e, 141 * e),
       r.bezierCurveTo(182 * e, 151 * e, 164 * e, 155 * e, 148 * e, 144 * e),
       r.bezierCurveTo(136 * e, 135 * e, 138 * e, 111 * e, 145 * e, 104 * e),
       r.bezierCurveTo(140 * e, 92 * e, 131 * e, 67 * e, 138 * e, 63 * e),
       r.bezierCurveTo(145 * e, 61 * e, 153 * e, 82 * e, 155 * e, 96 * e),
       r.bezierCurveTo(167 * e, 91 * e, 178 * e, 92 * e, 187 * e, 98 * e),
       r.closePath(),
       se(r, i[1], i[2], 4);
       var s = 155 * e
         , T = 133 * e
         , I = 10 * e
         , E = 3 * e
         , _ = s + -3 * e
         , u = T + -5 * e;
       return r.save(),
       r.translate(s, T),
       r.globalAlpha = 1,
       Ee(r, 0, 0, I),
       se(r, i[3]),
       r.restore(),
       r.save(),
       r.translate(_, u),
       r.globalAlpha = 1,
       Ee(r, 0, 0, E),
       se(r, i[4]),
       r.restore(),
       r.save(),
       r.translate(s + 27 * e, T),
       r.globalAlpha = 1,
       Ee(r, 0, 0, I),
       se(r, i[3]),
       r.restore(),
       r.save(),
       r.translate(27 * e + _, u),
       r.globalAlpha = 1,
       Ee(r, 0, 0, E),
       se(r, i[4]),
       t
   }
   function We(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d")
         , n = 85 * e
         , o = 115 * e
         , a = 4 * e;
       return t.width = n,
       t.height = o,
       r.translate(-130 * e, -60 * e),
       r.globalAlpha = 1,
       r.beginPath(),
       r.bezierCurveTo(190 * e, 87 * e, 201 * e, 59 * e, 208 * e, 64 * e),
       r.bezierCurveTo(213 * e, 68 * e, 204 * e, 93 * e, 195 * e, 109 * e),
       r.bezierCurveTo(195 * e, 109 * e, 202 * e, 124 * e, 191 * e, 141 * e),
       r.bezierCurveTo(182 * e, 151 * e, 164 * e, 155 * e, 148 * e, 144 * e),
       r.bezierCurveTo(136 * e, 135 * e, 138 * e, 111 * e, 145 * e, 104 * e),
       r.bezierCurveTo(140 * e, 92 * e, 131 * e, 67 * e, 138 * e, 63 * e),
       r.bezierCurveTo(145 * e, 61 * e, 153 * e, 82 * e, 155 * e, 96 * e),
       r.bezierCurveTo(167 * e, 91 * e, 178 * e, 92 * e, 187 * e, 98 * e),
       r.closePath(),
       se(r, i, i, a),
       t
   }
   function Ye(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 188 * e,
       t.height = 190 * e,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(33.00567626953125 * e, 95.44320678710938 * e),
       r.bezierCurveTo(42.00567626953125 * e, 87.44320678710938 * e, 48.00567626953125 * e, 51.443206787109375 * e, 74.00567626953125 * e, 47.443206787109375 * e),
       r.bezierCurveTo(100.00567626953125 * e, 42.443206787109375 * e, 118.00567626953125 * e, 49.443206787109375 * e, 131.00567626953125 * e, 55.443206787109375 * e),
       r.bezierCurveTo(140.00567626953125 * e, 70.44320678710938 * e, 145.00567626953125 * e, 87.44320678710938 * e, 152.00567626953125 * e, 94.44320678710938 * e),
       r.bezierCurveTo(149.00567626953125 * e, 99.44320678710938 * e, 147.00567626953125 * e, 98.44320678710938 * e, 141.00567626953125 * e, 101.44320678710938 * e),
       r.bezierCurveTo(147.00567626953125 * e, 108.44320678710938 * e, 147.00567626953125 * e, 111.44320678710938 * e, 147.00567626953125 * e, 112.44320678710938 * e),
       r.bezierCurveTo(143.00567626953125 * e, 112.44320678710938 * e, 141.00567626953125 * e, 112.44320678710938 * e, 137.00567626953125 * e, 111.44320678710938 * e),
       r.bezierCurveTo(138.00567626953125 * e, 117.44320678710938 * e, 138.00567626953125 * e, 120.44320678710938 * e, 138.00567626953125 * e, 124.44320678710938 * e),
       r.bezierCurveTo(125.00567626953125 * e, 107.44320678710938 * e, 121.00567626953125 * e, 124.44320678710938 * e, 110.00567626953125 * e, 141.44320678710938 * e),
       r.bezierCurveTo(102.00567626953125 * e, 158.44320678710938 * e, 89.00567626953125 * e, 158.44320678710938 * e, 80.00567626953125 * e, 144.44320678710938 * e),
       r.bezierCurveTo(61.00567626953125 * e, 111.44320678710938 * e, 56.00567626953125 * e, 117.44320678710938 * e, 48.00567626953125 * e, 120.44320678710938 * e),
       r.bezierCurveTo(46.00567626953125 * e, 118.44320678710938 * e, 47.00567626953125 * e, 112.44320678710938 * e, 48.00567626953125 * e, 107.44320678710938 * e),
       r.bezierCurveTo(43.00567626953125 * e, 111.44320678710938 * e, 40.00567626953125 * e, 111.44320678710938 * e, 37.00567626953125 * e, 110.44320678710938 * e),
       r.bezierCurveTo(39.50567626953125 * e, 104.94320678710938 * e, 39.50567626953125 * e, 104.94320678710938 * e, 42.00567626953125 * e, 99.44320678710938 * e),
       r.bezierCurveTo(33.00567626953125 * e, 99.44320678710938 * e, 33.00567626953125 * e, 98.44320678710938 * e, 33.00567626953125 * e, 96.44320678710938 * e),
       r.closePath(),
       se(r, i[0], i[0], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(51.00567626953125 * e, 72.53409576416016 * e),
       r.bezierCurveTo(48.00567626953125 * e, 56.534095764160156 * e, 48.00567626953125 * e, 49.534095764160156 * e, 54.00567626953125 * e, 35.534095764160156 * e),
       r.bezierCurveTo(58.00567626953125 * e, 26.534095764160156 * e, 65.00567626953125 * e, 27.534095764160156 * e, 73.00567626953125 * e, 40.534095764160156 * e),
       r.bezierCurveTo(81.00567626953125 * e, 49.534095764160156 * e, 82.00567626953125 * e, 50.534095764160156 * e, 83.00567626953125 * e, 51.534095764160156 * e),
       r.bezierCurveTo(77.00567626953125 * e, 71.53409576416016 * e, 64.00567626953125 * e, 75.53409576416016 * e, 51.00567626953125 * e, 72.53409576416016 * e),
       r.closePath(),
       se(r, i[0], i[0], 2 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(105.00567626953125 * e, 50.53410339355469 * e),
       r.bezierCurveTo(112.00567626953125 * e, 48.53410339355469 * e, 125.00567626953125 * e, 21.534103393554688 * e, 132.00567626953125 * e, 33.53410339355469 * e),
       r.bezierCurveTo(138.00567626953125 * e, 42.53410339355469 * e, 140.00567626953125 * e, 64.53410339355469 * e, 136.00567626953125 * e, 75.53410339355469 * e),
       r.closePath(),
       se(r, i[0], i[0], 2 * e),
       t
   }
   function Ue(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 188 * e,
       t.height = 190 * e,
       r.globalAlpha = .5,
       r.translate(0, 5 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(33.00567626953125 * e, 95.44320678710938 * e),
       r.bezierCurveTo(42.00567626953125 * e, 87.44320678710938 * e, 48.00567626953125 * e, 51.443206787109375 * e, 74.00567626953125 * e, 47.443206787109375 * e),
       r.bezierCurveTo(100.00567626953125 * e, 42.443206787109375 * e, 118.00567626953125 * e, 49.443206787109375 * e, 131.00567626953125 * e, 55.443206787109375 * e),
       r.bezierCurveTo(140.00567626953125 * e, 70.44320678710938 * e, 145.00567626953125 * e, 87.44320678710938 * e, 152.00567626953125 * e, 94.44320678710938 * e),
       r.bezierCurveTo(149.00567626953125 * e, 99.44320678710938 * e, 147.00567626953125 * e, 98.44320678710938 * e, 141.00567626953125 * e, 101.44320678710938 * e),
       r.bezierCurveTo(147.00567626953125 * e, 108.44320678710938 * e, 147.00567626953125 * e, 111.44320678710938 * e, 147.00567626953125 * e, 112.44320678710938 * e),
       r.bezierCurveTo(143.00567626953125 * e, 112.44320678710938 * e, 141.00567626953125 * e, 112.44320678710938 * e, 137.00567626953125 * e, 111.44320678710938 * e),
       r.bezierCurveTo(138.00567626953125 * e, 117.44320678710938 * e, 138.00567626953125 * e, 120.44320678710938 * e, 138.00567626953125 * e, 124.44320678710938 * e),
       r.bezierCurveTo(125.00567626953125 * e, 107.44320678710938 * e, 121.00567626953125 * e, 124.44320678710938 * e, 110.00567626953125 * e, 141.44320678710938 * e),
       r.bezierCurveTo(102.00567626953125 * e, 158.44320678710938 * e, 89.00567626953125 * e, 158.44320678710938 * e, 80.00567626953125 * e, 144.44320678710938 * e),
       r.bezierCurveTo(61.00567626953125 * e, 111.44320678710938 * e, 56.00567626953125 * e, 117.44320678710938 * e, 48.00567626953125 * e, 120.44320678710938 * e),
       r.bezierCurveTo(46.00567626953125 * e, 118.44320678710938 * e, 47.00567626953125 * e, 112.44320678710938 * e, 48.00567626953125 * e, 107.44320678710938 * e),
       r.bezierCurveTo(43.00567626953125 * e, 111.44320678710938 * e, 40.00567626953125 * e, 111.44320678710938 * e, 37.00567626953125 * e, 110.44320678710938 * e),
       r.bezierCurveTo(39.50567626953125 * e, 104.94320678710938 * e, 39.50567626953125 * e, 104.94320678710938 * e, 42.00567626953125 * e, 99.44320678710938 * e),
       r.bezierCurveTo(33.00567626953125 * e, 99.44320678710938 * e, 33.00567626953125 * e, 98.44320678710938 * e, 33.00567626953125 * e, 96.44320678710938 * e),
       r.closePath(),
       se(r, i[0], i[0], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(60.00567626953125 * e, 99.35227966308594 * e),
       r.bezierCurveTo(70.00567626953125 * e, 82.35227966308594 * e, 85.00567626953125 * e, 86.35227966308594 * e, 87.00567626953125 * e, 97.35227966308594 * e),
       r.bezierCurveTo(89.00567626953125 * e, 101.35227966308594 * e, 88.00567626953125 * e, 105.35227966308594 * e, 87.00567626953125 * e, 110.35227966308594 * e),
       r.bezierCurveTo(89.00567626953125 * e, 111.35227966308594 * e, 91.00567626953125 * e, 112.35227966308594 * e, 93.00567626953125 * e, 115.35227966308594 * e),
       r.bezierCurveTo(96.00567626953125 * e, 111.35227966308594 * e, 99.00567626953125 * e, 111.35227966308594 * e, 100.00567626953125 * e, 110.35227966308594 * e),
       r.bezierCurveTo(98.00567626953125 * e, 92.35227966308594 * e, 103.00567626953125 * e, 86.35227966308594 * e, 113.00567626953125 * e, 89.35227966308594 * e),
       r.bezierCurveTo(122.00567626953125 * e, 92.35227966308594 * e, 123.00567626953125 * e, 94.35227966308594 * e, 126.00567626953125 * e, 98.35227966308594 * e),
       r.bezierCurveTo(124.00567626953125 * e, 102.35227966308594 * e, 123.00567626953125 * e, 103.35227966308594 * e, 121.00567626953125 * e, 104.35227966308594 * e),
       r.bezierCurveTo(124.00567626953125 * e, 105.35227966308594 * e, 126.00567626953125 * e, 107.35227966308594 * e, 129.00567626953125 * e, 111.35227966308594 * e),
       r.bezierCurveTo(115.00567626953125 * e, 122.35227966308594 * e, 113.00567626953125 * e, 145.35227966308594 * e, 100.00567626953125 * e, 152.35227966308594 * e),
       r.bezierCurveTo(91.00567626953125 * e, 158.35227966308594 * e, 83.00567626953125 * e, 149.35227966308594 * e, 76.00567626953125 * e, 138.35227966308594 * e),
       r.bezierCurveTo(67.00567626953125 * e, 114.35227966308594 * e, 63.00567626953125 * e, 113.35227966308594 * e, 59.00567626953125 * e, 111.35227966308594 * e),
       r.bezierCurveTo(62.00567626953125 * e, 107.35227966308594 * e, 64.00567626953125 * e, 105.35227966308594 * e, 66.00567626953125 * e, 104.35227966308594 * e),
       r.bezierCurveTo(63.00567626953125 * e, 100.35227966308594 * e, 62.00567626953125 * e, 100.35227966308594 * e, 60.00567626953125 * e, 99.35227966308594 * e),
       r.closePath(),
       se(r, i[0], i[0], 2 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(51.00567626953125 * e, 72.53409576416016 * e),
       r.bezierCurveTo(48.00567626953125 * e, 56.534095764160156 * e, 48.00567626953125 * e, 49.534095764160156 * e, 54.00567626953125 * e, 35.534095764160156 * e),
       r.bezierCurveTo(58.00567626953125 * e, 26.534095764160156 * e, 65.00567626953125 * e, 27.534095764160156 * e, 73.00567626953125 * e, 40.534095764160156 * e),
       r.bezierCurveTo(81.00567626953125 * e, 49.534095764160156 * e, 82.00567626953125 * e, 50.534095764160156 * e, 83.00567626953125 * e, 51.534095764160156 * e),
       r.bezierCurveTo(77.00567626953125 * e, 71.53409576416016 * e, 64.00567626953125 * e, 75.53409576416016 * e, 51.00567626953125 * e, 72.53409576416016 * e),
       r.closePath(),
       se(r, i[0], i[0], 2 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(105.00567626953125 * e, 50.53410339355469 * e),
       r.bezierCurveTo(112.00567626953125 * e, 48.53410339355469 * e, 125.00567626953125 * e, 21.534103393554688 * e, 132.00567626953125 * e, 33.53410339355469 * e),
       r.bezierCurveTo(138.00567626953125 * e, 42.53410339355469 * e, 140.00567626953125 * e, 64.53410339355469 * e, 136.00567626953125 * e, 75.53410339355469 * e),
       r.closePath(),
       se(r, i[0], i[0], 2 * e),
       r.globalAlpha = 1,
       r.translate(0, -5 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(33.00567626953125 * e, 95.44320678710938 * e),
       r.bezierCurveTo(42.00567626953125 * e, 87.44320678710938 * e, 48.00567626953125 * e, 51.443206787109375 * e, 74.00567626953125 * e, 47.443206787109375 * e),
       r.bezierCurveTo(100.00567626953125 * e, 42.443206787109375 * e, 118.00567626953125 * e, 49.443206787109375 * e, 131.00567626953125 * e, 55.443206787109375 * e),
       r.bezierCurveTo(140.00567626953125 * e, 70.44320678710938 * e, 145.00567626953125 * e, 87.44320678710938 * e, 152.00567626953125 * e, 94.44320678710938 * e),
       r.bezierCurveTo(149.00567626953125 * e, 99.44320678710938 * e, 147.00567626953125 * e, 98.44320678710938 * e, 141.00567626953125 * e, 101.44320678710938 * e),
       r.bezierCurveTo(147.00567626953125 * e, 108.44320678710938 * e, 147.00567626953125 * e, 111.44320678710938 * e, 147.00567626953125 * e, 112.44320678710938 * e),
       r.bezierCurveTo(143.00567626953125 * e, 112.44320678710938 * e, 141.00567626953125 * e, 112.44320678710938 * e, 137.00567626953125 * e, 111.44320678710938 * e),
       r.bezierCurveTo(138.00567626953125 * e, 117.44320678710938 * e, 138.00567626953125 * e, 120.44320678710938 * e, 138.00567626953125 * e, 124.44320678710938 * e),
       r.bezierCurveTo(125.00567626953125 * e, 107.44320678710938 * e, 121.00567626953125 * e, 124.44320678710938 * e, 110.00567626953125 * e, 141.44320678710938 * e),
       r.bezierCurveTo(102.00567626953125 * e, 158.44320678710938 * e, 89.00567626953125 * e, 158.44320678710938 * e, 80.00567626953125 * e, 144.44320678710938 * e),
       r.bezierCurveTo(61.00567626953125 * e, 111.44320678710938 * e, 56.00567626953125 * e, 117.44320678710938 * e, 48.00567626953125 * e, 120.44320678710938 * e),
       r.bezierCurveTo(46.00567626953125 * e, 118.44320678710938 * e, 47.00567626953125 * e, 112.44320678710938 * e, 48.00567626953125 * e, 107.44320678710938 * e),
       r.bezierCurveTo(43.00567626953125 * e, 111.44320678710938 * e, 40.00567626953125 * e, 111.44320678710938 * e, 37.00567626953125 * e, 110.44320678710938 * e),
       r.bezierCurveTo(39.50567626953125 * e, 104.94320678710938 * e, 39.50567626953125 * e, 104.94320678710938 * e, 42.00567626953125 * e, 99.44320678710938 * e),
       r.bezierCurveTo(33.00567626953125 * e, 99.44320678710938 * e, 33.00567626953125 * e, 98.44320678710938 * e, 33.00567626953125 * e, 96.44320678710938 * e),
       r.closePath(),
       se(r, i[1], i[2], 3 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(60.00567626953125 * e, 99.35227966308594 * e),
       r.bezierCurveTo(70.00567626953125 * e, 82.35227966308594 * e, 85.00567626953125 * e, 86.35227966308594 * e, 87.00567626953125 * e, 97.35227966308594 * e),
       r.bezierCurveTo(89.00567626953125 * e, 101.35227966308594 * e, 88.00567626953125 * e, 105.35227966308594 * e, 87.00567626953125 * e, 110.35227966308594 * e),
       r.bezierCurveTo(89.00567626953125 * e, 111.35227966308594 * e, 91.00567626953125 * e, 112.35227966308594 * e, 93.00567626953125 * e, 115.35227966308594 * e),
       r.bezierCurveTo(96.00567626953125 * e, 111.35227966308594 * e, 99.00567626953125 * e, 111.35227966308594 * e, 100.00567626953125 * e, 110.35227966308594 * e),
       r.bezierCurveTo(98.00567626953125 * e, 92.35227966308594 * e, 103.00567626953125 * e, 86.35227966308594 * e, 113.00567626953125 * e, 89.35227966308594 * e),
       r.bezierCurveTo(122.00567626953125 * e, 92.35227966308594 * e, 123.00567626953125 * e, 94.35227966308594 * e, 126.00567626953125 * e, 98.35227966308594 * e),
       r.bezierCurveTo(124.00567626953125 * e, 102.35227966308594 * e, 123.00567626953125 * e, 103.35227966308594 * e, 121.00567626953125 * e, 104.35227966308594 * e),
       r.bezierCurveTo(124.00567626953125 * e, 105.35227966308594 * e, 126.00567626953125 * e, 107.35227966308594 * e, 129.00567626953125 * e, 111.35227966308594 * e),
       r.bezierCurveTo(115.00567626953125 * e, 122.35227966308594 * e, 113.00567626953125 * e, 145.35227966308594 * e, 100.00567626953125 * e, 152.35227966308594 * e),
       r.bezierCurveTo(91.00567626953125 * e, 158.35227966308594 * e, 83.00567626953125 * e, 149.35227966308594 * e, 76.00567626953125 * e, 138.35227966308594 * e),
       r.bezierCurveTo(67.00567626953125 * e, 114.35227966308594 * e, 63.00567626953125 * e, 113.35227966308594 * e, 59.00567626953125 * e, 111.35227966308594 * e),
       r.bezierCurveTo(62.00567626953125 * e, 107.35227966308594 * e, 64.00567626953125 * e, 105.35227966308594 * e, 66.00567626953125 * e, 104.35227966308594 * e),
       r.bezierCurveTo(63.00567626953125 * e, 100.35227966308594 * e, 62.00567626953125 * e, 100.35227966308594 * e, 60.00567626953125 * e, 99.35227966308594 * e),
       r.closePath(),
       se(r, i[3]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(33.00567626953125 * e, 95.44320678710938 * e),
       r.bezierCurveTo(42.00567626953125 * e, 87.44320678710938 * e, 48.00567626953125 * e, 51.443206787109375 * e, 74.00567626953125 * e, 47.443206787109375 * e),
       r.bezierCurveTo(100.00567626953125 * e, 42.443206787109375 * e, 118.00567626953125 * e, 49.443206787109375 * e, 131.00567626953125 * e, 55.443206787109375 * e),
       r.bezierCurveTo(140.00567626953125 * e, 70.44320678710938 * e, 145.00567626953125 * e, 87.44320678710938 * e, 152.00567626953125 * e, 94.44320678710938 * e),
       r.bezierCurveTo(149.00567626953125 * e, 99.44320678710938 * e, 147.00567626953125 * e, 98.44320678710938 * e, 141.00567626953125 * e, 101.44320678710938 * e),
       r.bezierCurveTo(147.00567626953125 * e, 108.44320678710938 * e, 147.00567626953125 * e, 111.44320678710938 * e, 147.00567626953125 * e, 112.44320678710938 * e),
       r.bezierCurveTo(143.00567626953125 * e, 112.44320678710938 * e, 141.00567626953125 * e, 112.44320678710938 * e, 137.00567626953125 * e, 111.44320678710938 * e),
       r.bezierCurveTo(138.00567626953125 * e, 117.44320678710938 * e, 138.00567626953125 * e, 120.44320678710938 * e, 138.00567626953125 * e, 124.44320678710938 * e),
       r.bezierCurveTo(125.00567626953125 * e, 107.44320678710938 * e, 121.00567626953125 * e, 124.44320678710938 * e, 110.00567626953125 * e, 141.44320678710938 * e),
       r.bezierCurveTo(102.00567626953125 * e, 158.44320678710938 * e, 89.00567626953125 * e, 158.44320678710938 * e, 80.00567626953125 * e, 144.44320678710938 * e),
       r.bezierCurveTo(61.00567626953125 * e, 111.44320678710938 * e, 56.00567626953125 * e, 117.44320678710938 * e, 48.00567626953125 * e, 120.44320678710938 * e),
       r.bezierCurveTo(46.00567626953125 * e, 118.44320678710938 * e, 47.00567626953125 * e, 112.44320678710938 * e, 48.00567626953125 * e, 107.44320678710938 * e),
       r.bezierCurveTo(43.00567626953125 * e, 111.44320678710938 * e, 40.00567626953125 * e, 111.44320678710938 * e, 37.00567626953125 * e, 110.44320678710938 * e),
       r.bezierCurveTo(39.50567626953125 * e, 104.94320678710938 * e, 39.50567626953125 * e, 104.94320678710938 * e, 42.00567626953125 * e, 99.44320678710938 * e),
       r.bezierCurveTo(33.00567626953125 * e, 99.44320678710938 * e, 33.00567626953125 * e, 98.44320678710938 * e, 33.00567626953125 * e, 96.44320678710938 * e),
       r.closePath(),
       se(r, void 0, i[2], 3 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(51.00567626953125 * e, 72.53409576416016 * e),
       r.bezierCurveTo(48.00567626953125 * e, 56.534095764160156 * e, 48.00567626953125 * e, 49.534095764160156 * e, 54.00567626953125 * e, 35.534095764160156 * e),
       r.bezierCurveTo(58.00567626953125 * e, 26.534095764160156 * e, 65.00567626953125 * e, 27.534095764160156 * e, 73.00567626953125 * e, 40.534095764160156 * e),
       r.bezierCurveTo(81.00567626953125 * e, 49.534095764160156 * e, 82.00567626953125 * e, 50.534095764160156 * e, 83.00567626953125 * e, 51.534095764160156 * e),
       se(r, i[1], i[2], 3 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(105.00567626953125 * e, 50.53410339355469 * e),
       r.bezierCurveTo(112.00567626953125 * e, 48.53410339355469 * e, 125.00567626953125 * e, 21.534103393554688 * e, 132.00567626953125 * e, 33.53410339355469 * e),
       r.bezierCurveTo(138.00567626953125 * e, 42.53410339355469 * e, 140.00567626953125 * e, 64.53410339355469 * e, 136.00567626953125 * e, 75.53410339355469 * e),
       se(r, i[1], i[2], 3 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(57.00567626953125 * e, 68.53410339355469 * e),
       r.bezierCurveTo(63.00567626953125 * e, 69.53410339355469 * e, 69.00567626953125 * e, 66.53410339355469 * e, 73.00567626953125 * e, 60.53410339355469 * e),
       r.bezierCurveTo(66.00567626953125 * e, 47.53410339355469 * e, 61.00567626953125 * e, 42.53410339355469 * e, 58.00567626953125 * e, 49.53410339355469 * e),
       r.bezierCurveTo(56.00567626953125 * e, 59.53410339355469 * e, 56.00567626953125 * e, 64.53410339355469 * e, 57.00567626953125 * e, 67.53410339355469 * e),
       r.closePath(),
       se(r, i[3]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(115.00567626953125 * e, 59.715911865234375 * e),
       r.bezierCurveTo(119.00567626953125 * e, 48.715911865234375 * e, 126.00567626953125 * e, 41.715911865234375 * e, 129.00567626953125 * e, 48.715911865234375 * e),
       r.bezierCurveTo(131.00567626953125 * e, 56.715911865234375 * e, 133.00567626953125 * e, 71.71591186523438 * e, 127.00567626953125 * e, 68.71591186523438 * e),
       r.bezierCurveTo(120.00567626953125 * e, 67.71591186523438 * e, 114.00567626953125 * e, 59.715911865234375 * e, 116.00567626953125 * e, 58.715911865234375 * e),
       r.closePath(),
       se(r, i[3]),
       Ee(r, 77 * e, 107 * e, 6 * e),
       se(r, i[2]),
       Ee(r, 110 * e, 107 * e, 6 * e),
       se(r, i[2]),
       Ee(r, 75 * e, 105 * e, 3 * e),
       se(r, i[4]),
       Ee(r, 108 * e, 105 * e, 3 * e),
       se(r, i[4]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(88.00567626953125 * e, 141.4431915283203 * e),
       r.bezierCurveTo(93.00567626953125 * e, 137.4431915283203 * e, 96.00567626953125 * e, 138.4431915283203 * e, 100.00567626953125 * e, 141.4431915283203 * e),
       r.bezierCurveTo(103.00567626953125 * e, 143.4431915283203 * e, 101.00567626953125 * e, 149.4431915283203 * e, 95.00567626953125 * e, 148.4431915283203 * e),
       r.bezierCurveTo(85.00567626953125 * e, 148.4431915283203 * e, 86.00567626953125 * e, 145.4431915283203 * e, 88.00567626953125 * e, 142.4431915283203 * e),
       r.closePath(),
       se(r, i[1]),
       t
   }
   function ke(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 55 * e
         , a = 55 * e
         , s = 8 * e;
       return r.width = o,
       r.height = a,
       n.translate(-65 * e, -55 * e + s),
       n.globalAlpha = 1,
       n.beginPath(),
       n.moveTo(95 * e, 60 * e),
       n.bezierCurveTo(107 * e, 62 * e, 110 * e, 73 * e, 107 * e, 79 * e),
       n.bezierCurveTo(104 * e, 85 * e, 85 * e, 93 * e, 81 * e, 88 * e),
       n.bezierCurveTo(74 * e, 80 * e, 85 * e, 60 * e, 95 * e, 60 * e),
       n.closePath(),
       se(n, t[0], t[1], 3),
       n.globalAlpha = 1,
       n.beginPath(),
       n.moveTo(91 * e, 70 * e),
       n.bezierCurveTo(91 * e, 75 * e, 100 * e, 76 * e, 100 * e, 73 * e),
       n.bezierCurveTo(100 * e, 69 * e, 89 * e, 65 * e, 91 * e, 70 * e),
       n.closePath(),
       se(n, t[2], t[3], 3),
       r
   }
   function Fe(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 238 * e,
       t.height = 230 * e,
       r.translate(-93 * e, -110 * e),
       Ee(r, 213.5 * e, 256.75 * e, 75 * e),
       se(r, i),
       Ee(r, 213.5 * e, 175.75 * e, 25 * e),
       se(r, i),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(156.5 * e, 137.75 * e),
       r.bezierCurveTo(170.5 * e, 173.75 * e, 195.5 * e, 177.75 * e, 209.5 * e, 177.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i,
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(217.5 * e, 178.75 * e),
       r.bezierCurveTo(251.5 * e, 177.75 * e, 263.5 * e, 153.75 * e, 270.5 * e, 140.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i,
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(130.5 * e, 124.75 * e),
       r.bezierCurveTo(153.5 * e, 185.75 * e, 198.5 * e, 185.75 * e, 213.5 * e, 185.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i,
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(214.5 * e, 183.75 * e),
       r.bezierCurveTo(265.5 * e, 192.75 * e, 293.5 * e, 141.75 * e, 297.5 * e, 124.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i,
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(107.5 * e, 213.75 * e),
       r.bezierCurveTo(151.5 * e, 190.75 * e, 198.5 * e, 184.75 * e, 210.5 * e, 184.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i,
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(212.5 * e, 187.75 * e),
       r.bezierCurveTo(258.5 * e, 182.75 * e, 286.5 * e, 194.75 * e, 314.5 * e, 206.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i,
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(102.5 * e, 258.75 * e),
       r.bezierCurveTo(142.5 * e, 200.75 * e, 193.5 * e, 194.75 * e, 211.5 * e, 185.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i,
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(214.5 * e, 192.75 * e),
       r.bezierCurveTo(276.5 * e, 194.75 * e, 306.5 * e, 233.75 * e, 316.5 * e, 246.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i,
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(219.5 * e, 158.75 * e),
       r.bezierCurveTo(226.5 * e, 159.75 * e, 227.5 * e, 147.75 * e, 219.5 * e, 145.75 * e),
       r.closePath(),
       r.lineWidth = 10 * e,
       r.strokeStyle = i,
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(210.5 * e, 160.75 * e),
       r.bezierCurveTo(203.5 * e, 159.75 * e, 199.5 * e, 146.75 * e, 210.5 * e, 145.75 * e),
       r.closePath(),
       r.lineWidth = 10 * e,
       r.strokeStyle = i,
       r.stroke(),
       t
   }
   function xe(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 238 * e,
       t.height = 230 * e,
       r.translate(-93 * e, -110 * e + 5 * e),
       r.globalAlpha = .3,
       Ee(r, 213.5 * e, 256.75 * e, 75 * e),
       se(r, i[5]),
       Ee(r, 213.5 * e, 175.75 * e, 25 * e),
       se(r, i[5]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(156.5 * e, 137.75 * e),
       r.bezierCurveTo(170.5 * e, 173.75 * e, 195.5 * e, 177.75 * e, 209.5 * e, 177.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[5],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(217.5 * e, 178.75 * e),
       r.bezierCurveTo(251.5 * e, 177.75 * e, 263.5 * e, 153.75 * e, 270.5 * e, 140.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[5],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(130.5 * e, 124.75 * e),
       r.bezierCurveTo(153.5 * e, 185.75 * e, 198.5 * e, 185.75 * e, 213.5 * e, 185.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[5],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(214.5 * e, 183.75 * e),
       r.bezierCurveTo(265.5 * e, 192.75 * e, 293.5 * e, 141.75 * e, 297.5 * e, 124.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[5],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(107.5 * e, 213.75 * e),
       r.bezierCurveTo(151.5 * e, 190.75 * e, 198.5 * e, 184.75 * e, 210.5 * e, 184.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[5],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(212.5 * e, 187.75 * e),
       r.bezierCurveTo(258.5 * e, 182.75 * e, 286.5 * e, 194.75 * e, 314.5 * e, 206.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[5],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(102.5 * e, 258.75 * e),
       r.bezierCurveTo(142.5 * e, 200.75 * e, 193.5 * e, 194.75 * e, 211.5 * e, 185.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[5],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(214.5 * e, 192.75 * e),
       r.bezierCurveTo(276.5 * e, 194.75 * e, 306.5 * e, 233.75 * e, 316.5 * e, 246.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[5],
       r.stroke(),
       r.translate(0, -5),
       r.globalAlpha = 1,
       Ee(r, 213.5 * e, 256.75 * e, 75 * e),
       se(r, i[3]),
       Ee(r, 213.5 * e, 175.75 * e, 25 * e),
       se(r, i[3]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(219.5 * e, 158.75 * e),
       r.bezierCurveTo(226.5 * e, 159.75 * e, 227.5 * e, 147.75 * e, 219.5 * e, 145.75 * e),
       r.closePath(),
       r.lineWidth = 10 * e,
       r.strokeStyle = i[3],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(210.5 * e, 160.75 * e),
       r.bezierCurveTo(203.5 * e, 159.75 * e, 199.5 * e, 146.75 * e, 210.5 * e, 145.75 * e),
       r.closePath(),
       r.lineWidth = 10 * e,
       r.strokeStyle = i[3],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(219.5 * e, 158.75 * e),
       r.bezierCurveTo(226.5 * e, 159.75 * e, 227.5 * e, 147.75 * e, 219.5 * e, 145.75 * e),
       r.closePath(),
       r.fillStyle = i[0],
       r.fill(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(210.5 * e, 160.75 * e),
       r.bezierCurveTo(203.5 * e, 159.75 * e, 199.5 * e, 146.75 * e, 210.5 * e, 145.75 * e),
       r.closePath(),
       r.fillStyle = i[0],
       r.fill(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(156.5 * e, 137.75 * e),
       r.bezierCurveTo(170.5 * e, 173.75 * e, 195.5 * e, 177.75 * e, 209.5 * e, 177.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[3],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(217.5 * e, 178.75 * e),
       r.bezierCurveTo(251.5 * e, 177.75 * e, 263.5 * e, 153.75 * e, 270.5 * e, 140.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[3],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(130.5 * e, 124.75 * e),
       r.bezierCurveTo(153.5 * e, 185.75 * e, 198.5 * e, 185.75 * e, 213.5 * e, 185.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[3],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(214.5 * e, 183.75 * e),
       r.bezierCurveTo(265.5 * e, 192.75 * e, 293.5 * e, 141.75 * e, 297.5 * e, 124.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[3],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(107.5 * e, 213.75 * e),
       r.bezierCurveTo(151.5 * e, 190.75 * e, 198.5 * e, 184.75 * e, 210.5 * e, 184.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[3],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(212.5 * e, 187.75 * e),
       r.bezierCurveTo(258.5 * e, 182.75 * e, 286.5 * e, 194.75 * e, 314.5 * e, 206.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[3],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(102.5 * e, 258.75 * e),
       r.bezierCurveTo(142.5 * e, 200.75 * e, 193.5 * e, 194.75 * e, 211.5 * e, 185.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[3],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(214.5 * e, 192.75 * e),
       r.bezierCurveTo(276.5 * e, 194.75 * e, 306.5 * e, 233.75 * e, 316.5 * e, 246.75 * e),
       r.lineWidth = 17 * e,
       r.strokeStyle = i[3],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(156.5 * e, 137.75 * e),
       r.bezierCurveTo(170.5 * e, 173.75 * e, 195.5 * e, 177.75 * e, 209.5 * e, 177.75 * e),
       r.lineWidth = 8 * e,
       r.strokeStyle = i[0],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(217.5 * e, 178.75 * e),
       r.bezierCurveTo(251.5 * e, 177.75 * e, 263.5 * e, 153.75 * e, 270.5 * e, 140.75 * e),
       r.lineWidth = 8 * e,
       r.strokeStyle = i[0],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(130.5 * e, 124.75 * e),
       r.bezierCurveTo(153.5 * e, 185.75 * e, 198.5 * e, 185.75 * e, 213.5 * e, 185.75 * e),
       r.lineWidth = 8 * e,
       r.strokeStyle = i[0],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(214.5 * e, 183.75 * e),
       r.bezierCurveTo(265.5 * e, 192.75 * e, 293.5 * e, 141.75 * e, 297.5 * e, 124.75 * e),
       r.lineWidth = 8 * e,
       r.strokeStyle = i[0],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(107.5 * e, 213.75 * e),
       r.bezierCurveTo(151.5 * e, 190.75 * e, 198.5 * e, 184.75 * e, 210.5 * e, 184.75 * e),
       r.lineWidth = 8 * e,
       r.strokeStyle = i[0],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(212.5 * e, 187.75 * e),
       r.bezierCurveTo(258.5 * e, 182.75 * e, 286.5 * e, 194.75 * e, 314.5 * e, 206.75 * e),
       r.lineWidth = 8 * e,
       r.strokeStyle = i[0],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(102.5 * e, 258.75 * e),
       r.bezierCurveTo(142.5 * e, 200.75 * e, 193.5 * e, 194.75 * e, 211.5 * e, 185.75 * e),
       r.lineWidth = 8 * e,
       r.strokeStyle = i[0],
       r.stroke(),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(214.5 * e, 192.75 * e),
       r.bezierCurveTo(276.5 * e, 194.75 * e, 306.5 * e, 233.75 * e, 316.5 * e, 246.75 * e),
       r.lineWidth = 8 * e,
       r.strokeStyle = i[0],
       r.stroke(),
       Ee(r, 213.5 * e, 256.75 * e, 70 * e),
       se(r, i[0]),
       Ee(r, 213.5 * e, 175.75 * e, 20 * e),
       se(r, i[0]),
       Ee(r, 222 * e, 166 * e, 5 * e),
       r.fillStyle = i[2],
       r.fill(),
       Ee(r, 205 * e, 166 * e, 5 * e),
       r.fillStyle = i[2],
       r.fill(),
       Ee(r, 206.2 * e, 167 * e, 2.5 * e),
       r.fillStyle = i[4],
       r.fill(),
       Ee(r, 223.2 * e, 167 * e, 2.5 * e),
       r.fillStyle = i[4],
       r.fill(),
       r.save(),
       r.translate(213.5 * e, 293.75 * e),
       r.rotate(.76),
       Te(r, -22 * e, -21 * e, 44 * e, 42 * e, 6 * e),
       r.restore(),
       r.fillStyle = i[1],
       r.fill(),
       r.save(),
       r.translate(212.5 * e, 258.25 * e),
       r.rotate(.8),
       Te(r, -15 * e, -14.5 * e, 30 * e, 29 * e, 6 * e),
       r.restore(),
       r.fillStyle = i[1],
       r.fill(),
       t
   }
   function Je(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 450 * e,
       t.height = 470 * e,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(226.5 * e, 91.546875 * e),
       r.bezierCurveTo(254.5 * e, 115.546875 * e, 261.5 * e, 115.546875 * e, 294.5 * e, 109.546875 * e),
       r.bezierCurveTo(299.5 * e, 141.546875 * e, 315.5 * e, 151.546875 * e, 344.5 * e, 158.546875 * e),
       r.bezierCurveTo(330.5 * e, 195.546875 * e, 341.5 * e, 207.546875 * e, 361.5 * e, 226.546875 * e),
       r.bezierCurveTo(331.5 * e, 251.546875 * e, 335.5 * e, 270.546875 * e, 342.5 * e, 295.546875 * e),
       r.bezierCurveTo(300.5 * e, 296.546875 * e, 293.5 * e, 325.546875 * e, 292.5 * e, 344.546875 * e),
       r.bezierCurveTo(257.5 * e, 326.546875 * e, 242.5 * e, 338.546875 * e, 224.5 * e, 361.546875 * e),
       r.bezierCurveTo(200.5 * e, 329.546875 * e, 180.5 * e, 334.546875 * e, 155.5 * e, 341.546875 * e),
       r.bezierCurveTo(146.5 * e, 307.546875 * e, 140.5 * e, 302.546875 * e, 107.5 * e, 292.546875 * e),
       r.bezierCurveTo(117.5 * e, 253.546875 * e, 109.5 * e, 244.546875 * e, 89.5 * e, 224.546875 * e),
       r.bezierCurveTo(118.5 * e, 191.546875 * e, 114.5 * e, 182.546875 * e, 108.5 * e, 156.546875 * e),
       r.bezierCurveTo(143.5 * e, 149.546875 * e, 150.5 * e, 136.546875 * e, 157.5 * e, 106.546875 * e),
       r.bezierCurveTo(202.5 * e, 120.546875 * e, 211.5 * e, 103.546875 * e, 228.5 * e, 91.546875 * e),
       r.closePath(),
       se(r, void 0, i[0], 4),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(224.5 * e, 129.546875 * e),
       r.bezierCurveTo(247.5 * e, 147.546875 * e, 252.5 * e, 143.546875 * e, 274.5 * e, 141.546875 * e),
       r.bezierCurveTo(279.5 * e, 163.546875 * e, 289.5 * e, 168.546875 * e, 311.5 * e, 178.546875 * e),
       r.bezierCurveTo(301.5 * e, 199.546875 * e, 307.5 * e, 213.546875 * e, 323.5 * e, 226.546875 * e),
       r.bezierCurveTo(303.5 * e, 240.546875 * e, 303.5 * e, 255.546875 * e, 312.5 * e, 275.546875 * e),
       r.bezierCurveTo(281.5 * e, 278.546875 * e, 276.5 * e, 291.546875 * e, 272.5 * e, 313.546875 * e),
       r.bezierCurveTo(248.5 * e, 301.546875 * e, 239.5 * e, 310.546875 * e, 224.5 * e, 324.546875 * e),
       r.bezierCurveTo(211.5 * e, 304.546875 * e, 199.5 * e, 301.546875 * e, 176.5 * e, 309.546875 * e),
       r.bezierCurveTo(165.5 * e, 276.546875 * e, 159.5 * e, 275.546875 * e, 138.5 * e, 274.546875 * e),
       r.bezierCurveTo(148.5 * e, 248.546875 * e, 140.5 * e, 237.546875 * e, 125.5 * e, 225.546875 * e),
       r.bezierCurveTo(145.5 * e, 205.546875 * e, 146.5 * e, 195.546875 * e, 142.5 * e, 176.546875 * e),
       r.bezierCurveTo(173.5 * e, 164.546875 * e, 173.5 * e, 155.546875 * e, 178.5 * e, 140.546875 * e),
       r.bezierCurveTo(214.5 * e, 143.546875 * e, 214.5 * e, 135.546875 * e, 226.5 * e, 129.546875 * e),
       r.closePath(),
       se(r, void 0, i[0], 4),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(224.5 * e, 160.546875 * e),
       r.bezierCurveTo(236.5 * e, 168.546875 * e, 239.5 * e, 168.546875 * e, 258.5 * e, 168.546875 * e),
       r.bezierCurveTo(261.5 * e, 185.546875 * e, 268.5 * e, 187.546875 * e, 282.5 * e, 192.546875 * e),
       r.bezierCurveTo(277.5 * e, 208.546875 * e, 283.5 * e, 216.546875 * e, 289.5 * e, 228.546875 * e),
       r.bezierCurveTo(277.5 * e, 243.546875 * e, 280.5 * e, 253.546875 * e, 281.5 * e, 260.546875 * e),
       r.bezierCurveTo(264.5 * e, 260.546875 * e, 259.5 * e, 269.546875 * e, 256.5 * e, 283.546875 * e),
       r.bezierCurveTo(244.5 * e, 276.546875 * e, 232.5 * e, 283.546875 * e, 223.5 * e, 291.546875 * e),
       r.bezierCurveTo(213.5 * e, 276.546875 * e, 205.5 * e, 278.546875 * e, 190.5 * e, 281.546875 * e),
       r.bezierCurveTo(181.5 * e, 262.546875 * e, 173.5 * e, 259.546875 * e, 165.5 * e, 258.546875 * e),
       r.bezierCurveTo(169.5 * e, 239.546875 * e, 167.5 * e, 233.546875 * e, 157.5 * e, 225.546875 * e),
       r.bezierCurveTo(169.5 * e, 208.546875 * e, 170.5 * e, 203.546875 * e, 168.5 * e, 192.546875 * e),
       r.bezierCurveTo(181.5 * e, 187.546875 * e, 188.5 * e, 179.546875 * e, 192.5 * e, 168.546875 * e),
       r.bezierCurveTo(216.5 * e, 170.546875 * e, 218.5 * e, 163.546875 * e, 225.5 * e, 160.546875 * e),
       r.closePath(),
       se(r, void 0, i[0], 4),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(205.5 * e, 194.546875 * e),
       r.bezierCurveTo(216.5 * e, 192.546875 * e, 219.5 * e, 191.546875 * e, 225.5 * e, 185.546875 * e),
       r.bezierCurveTo(232.5 * e, 193.546875 * e, 237.5 * e, 191.546875 * e, 246.5 * e, 192.546875 * e),
       r.bezierCurveTo(249.5 * e, 202.546875 * e, 253.5 * e, 205.546875 * e, 258.5 * e, 207.546875 * e),
       r.bezierCurveTo(259.5 * e, 222.546875 * e, 256.5 * e, 223.546875 * e, 265.5 * e, 226.546875 * e),
       r.bezierCurveTo(256.5 * e, 231.546875 * e, 255.5 * e, 241.546875 * e, 259.5 * e, 248.546875 * e),
       r.bezierCurveTo(250.5 * e, 245.546875 * e, 245.5 * e, 252.546875 * e, 243.5 * e, 260.546875 * e),
       r.bezierCurveTo(234.5 * e, 256.546875 * e, 229.5 * e, 258.546875 * e, 223.5 * e, 265.546875 * e),
       r.bezierCurveTo(218.5 * e, 255.546875 * e, 213.5 * e, 257.546875 * e, 204.5 * e, 261.546875 * e),
       r.bezierCurveTo(203.5 * e, 251.546875 * e, 198.5 * e, 248.546875 * e, 189.5 * e, 244.546875 * e),
       r.bezierCurveTo(194.5 * e, 237.546875 * e, 192.5 * e, 231.546875 * e, 184.5 * e, 225.546875 * e),
       r.bezierCurveTo(191.5 * e, 211.546875 * e, 192.5 * e, 209.546875 * e, 190.5 * e, 204.546875 * e),
       r.bezierCurveTo(200.5 * e, 204.546875 * e, 204.5 * e, 198.546875 * e, 207.5 * e, 194.546875 * e),
       r.closePath(),
       se(r, void 0, i[0], 4),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(149.5 * e, 93.546875 * e),
       r.bezierCurveTo(287.5 * e, 332.546875 * e, 226 * e, 225.546875 * e, 302.5 * e, 357.546875 * e),
       r.closePath(),
       se(r, void 0, i[0], 4),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(224.5 * e, 66.546875 * e),
       r.bezierCurveTo(224.5 * e, 223.546875 * e, 224.5 * e, 223.546875 * e, 224.5 * e, 380.546875 * e),
       r.closePath(),
       se(r, void 0, i[0], 4),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(302.5 * e, 88.546875 * e),
       r.bezierCurveTo(222.5 * e, 227.546875 * e, 222.5 * e, 227.546875 * e, 142.5 * e, 366.546875 * e),
       r.closePath(),
       se(r, void 0, i[0], 4),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(361.5 * e, 147.546875 * e),
       r.bezierCurveTo(223 * e, 226.546875 * e, 223 * e, 226.546875 * e, 84.5 * e, 305.546875 * e),
       r.closePath(),
       se(r, void 0, i[0], 4),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(379.5 * e, 225.546875 * e),
       r.bezierCurveTo(221 * e, 225.546875 * e, 221 * e, 225.546875 * e, 62.5 * e, 225.546875 * e),
       r.closePath(),
       se(r, void 0, i[0], 4),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(90.5 * e, 147.546875 * e),
       r.bezierCurveTo(226.5 * e, 226.546875 * e, 226.5 * e, 226.546875 * e, 362.5 * e, 305.546875 * e),
       r.closePath(),
       se(r, void 0, i[0], 4),
       t
   }
   function Xe(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 400 * e,
       r.height = 400 * e,
       n.save(),
       n.translate(202.5 * e, 147.5 * e),
       Te(n, -96.5 * e, -21.5 * e, 193 * e, 193 * e, 0 * e),
       n.restore(),
       se(n, i[0], i[1], 12 * e),
       n.save(),
       n.translate(202.5 * e, 190.5 * e),
       Te(n, 96.5 * e, -21.5 * e, -193 * e, 43 * e, 0 * e),
       n.restore(),
       se(n, i[2], i[1], 12 * e),
       n.save(),
       n.save(),
       n.translate(202.5 * e, 233.5 * e),
       Te(n, -96.5 * e, -20.5 * e, 193 * e, 41 * e, 0 * e),
       n.restore(),
       se(n, i[3], i[1], 12 * e),
       n.save(),
       n.translate(202.5 * e, 275 * e),
       Te(n, 96.5 * e, -21 * e, -193 * e, 42 * e, 0 * e),
       n.restore(),
       se(n, i[0], i[1], 12 * e),
       n.save(),
       n.translate(201 * e, 212 * e),
       n.rotate(8.64),
       Te(n, -116 * e, -22 * e, 232 * e, 44 * e, 10 * e),
       n.restore(),
       se(n, i[3], i[1], 12 * e),
       n.save(),
       n.translate(203.5 * e, 121.5 * e),
       Te(n, -115.5 * e, -20.5 * e, 231 * e, 41 * e, 10 * e),
       n.restore(),
       se(n, i[3], i[1], 12 * e),
       n.save(),
       n.translate(203.5 * e, 299 * e),
       Te(n, -115.5 * e, -20 * e, 231 * e, 40 * e, 10 * e),
       n.restore(),
       se(n, i[3], i[1], 12 * e),
       n.save(),
       n.translate(298.5 * e, 210 * e),
       Te(n, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e),
       n.restore(),
       se(n, i[3], i[1], 12 * e),
       n.save(),
       n.translate(108.5 * e, 210 * e),
       Te(n, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e),
       n.restore(),
       se(n, i[3], i[1], 12 * e),
       n.save(),
       n.translate(204 * e, 121.5 * e),
       Te(n, -92 * e, -9.5 * e, 184 * e, 19 * e, 10 * e),
       n.restore(),
       se(n, i[3], i[3], 10 * e),
       n.save(),
       n.translate(197 * e, 299 * e),
       Te(n, 85 * e, -9 * e, -170 * e, 18 * e, 10 * e),
       n.restore(),
       se(n, i[3], i[3], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(94 * e, 317 * e),
       n.bezierCurveTo(110.5 * e, 299.5 * e, 110.5 * e, 299.5 * e, 127 * e, 282 * e),
       n.closePath(),
       se(n, void 0, i[1], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(279 * e, 142 * e),
       n.bezierCurveTo(296.5 * e, 125.5 * e, 296.5 * e, 125.5 * e, 314 * e, 109 * e),
       n.closePath(),
       se(n, void 0, i[1], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(93 * e, 106 * e),
       n.bezierCurveTo(110.5 * e, 124 * e, 110.5 * e, 124 * e, 128 * e, 142 * e),
       n.closePath(),
       se(n, void 0, i[1], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(281 * e, 282 * e),
       n.bezierCurveTo(296 * e, 297.5 * e, 296 * e, 297.5 * e, 311 * e, 313 * e),
       n.closePath(),
       se(n, void 0, i[1], 12 * e),
       0 == t ? (n.scale(2, 2),
       n.translate(-7 * e, 55 * e),
       n.rotate(-.5),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(60 * e, 47 * e),
       n.bezierCurveTo(81 * e, 46 * e, 85 * e, 47 * e, 83 * e, 63 * e),
       n.bezierCurveTo(83 * e, 72 * e, 83 * e, 75 * e, 72 * e, 73 * e),
       n.bezierCurveTo(68 * e, 80 * e, 69 * e, 82 * e, 66 * e, 73 * e),
       n.bezierCurveTo(62 * e, 81 * e, 61 * e, 82 * e, 59 * e, 73 * e),
       n.bezierCurveTo(54 * e, 81 * e, 55 * e, 81 * e, 52 * e, 74 * e),
       n.bezierCurveTo(38 * e, 76 * e, 41 * e, 74 * e, 40 * e, 66 * e),
       n.bezierCurveTo(38 * e, 45 * e, 39 * e, 49 * e, 59 * e, 47 * e),
       n.closePath(),
       se(n, i[4], i[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(68 * e, 54 * e),
       n.bezierCurveTo(75 * e, 54 * e, 77 * e, 62 * e, 71 * e, 64 * e),
       n.bezierCurveTo(62 * e, 65 * e, 63 * e, 54 * e, 68 * e, 54 * e),
       n.closePath(),
       se(n, i[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(50 * e, 55 * e),
       n.bezierCurveTo(57 * e, 55 * e, 58 * e, 65 * e, 52 * e, 65 * e),
       n.bezierCurveTo(44 * e, 66 * e, 44 * e, 54 * e, 50 * e, 55 * e),
       n.closePath(),
       se(n, i[3])) : 1 == t && (n.scale(.6, .6),
       n.translate(185 * e, 165 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(108 * e, 56 * e),
       n.bezierCurveTo(136 * e, 58 * e, 203 * e, 69 * e, 234 * e, 75 * e),
       n.bezierCurveTo(246 * e, 77 * e, 247 * e, 78 * e, 245 * e, 90 * e),
       n.bezierCurveTo(238 * e, 143 * e, 228 * e, 197 * e, 214 * e, 259 * e),
       n.bezierCurveTo(212 * e, 267 * e, 209 * e, 270 * e, 189 * e, 268 * e),
       n.bezierCurveTo(142 * e, 264 * e, 106 * e, 260 * e, 75 * e, 253 * e),
       n.bezierCurveTo(60 * e, 250 * e, 64 * e, 250 * e, 66 * e, 221 * e),
       n.bezierCurveTo(71 * e, 168 * e, 87 * e, 95 * e, 98 * e, 67 * e),
       n.bezierCurveTo(101 * e, 57 * e, 103 * e, 56 * e, 106 * e, 56 * e),
       n.closePath(),
       se(n, i[4], i[4], 20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(112 * e, 72 * e),
       n.bezierCurveTo(132 * e, 73 * e, 227 * e, 85 * e, 226 * e, 91 * e),
       n.bezierCurveTo(231 * e, 89 * e, 217 * e, 196 * e, 200 * e, 250 * e),
       n.bezierCurveTo(196 * e, 254 * e, 175 * e, 249 * e, 166 * e, 249 * e),
       n.bezierCurveTo(91 * e, 241 * e, 82 * e, 236 * e, 83 * e, 232 * e),
       n.bezierCurveTo(90 * e, 144 * e, 108 * e, 71 * e, 111 * e, 72 * e),
       n.closePath(),
       se(n, void 0, i[0], 13 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(132 * e, 117 * e),
       n.bezierCurveTo(171 * e, 86 * e, 191 * e, 101 * e, 188 * e, 134 * e),
       n.bezierCurveTo(185 * e, 154 * e, 170 * e, 158 * e, 153 * e, 158 * e),
       n.bezierCurveTo(143 * e, 172 * e, 146 * e, 180 * e, 147 * e, 193 * e),
       se(n, void 0, i[0], 20 * e),
       Ee(n, 142 * e, 221 * e, 16.1245154965971 * e),
       se(n, i[0])),
       r
   }
   function qe(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 400 * e,
       t.height = 400 * e,
       r.save(),
       r.translate(202.5 * e, 147.5 * e),
       Te(r, -96.5 * e, -21.5 * e, 193 * e, 43 * e, 0 * e),
       r.restore(),
       se(r, i[0], i[0], 12 * e),
       r.save(),
       r.translate(202.5 * e, 190.5 * e),
       Te(r, 96.5 * e, -21.5 * e, -193 * e, 43 * e, 0 * e),
       r.restore(),
       se(r, i[0], i[0], 12 * e),
       r.save(),
       r.translate(202.5 * e, 233.5 * e),
       Te(r, -96.5 * e, -20.5 * e, 193 * e, 41 * e, 0 * e),
       r.restore(),
       se(r, i[0], i[0], 12 * e),
       r.save(),
       r.translate(202.5 * e, 275 * e),
       Te(r, 96.5 * e, -21 * e, -193 * e, 42 * e, 0 * e),
       r.restore(),
       se(r, i[0], i[0], 12 * e),
       r.save(),
       r.translate(203.5 * e, 121.5 * e),
       Te(r, -115.5 * e, -20.5 * e, 231 * e, 41 * e, 10 * e),
       r.restore(),
       se(r, i[0], i[0], 12 * e),
       r.save(),
       r.translate(203.5 * e, 299 * e),
       Te(r, -115.5 * e, -20 * e, 231 * e, 40 * e, 10 * e),
       r.restore(),
       se(r, i[0], i[0], 12 * e),
       r.save(),
       r.translate(298.5 * e, 210 * e),
       Te(r, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e),
       r.restore(),
       se(r, i[0], i[0], 12 * e),
       r.save(),
       r.translate(108.5 * e, 210 * e),
       Te(r, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e),
       r.restore(),
       se(r, i[0], i[0], 12 * e),
       t
   }
   function je(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 650 * e,
       t.height = 650 * e,
       r.scale(1.9, 1.9),
       r.save(),
       r.translate(202.5 * e, 147.5 * e),
       Te(r, -96.5 * e, -21.5 * e, 193 * e, 193 * e, 0 * e),
       r.restore(),
       se(r, i[4], i[1], 12 * e),
       r.save(),
       r.translate(203.5 * e, 121.5 * e),
       Te(r, -115.5 * e, -20.5 * e, 231 * e, 41 * e, 10 * e),
       r.restore(),
       se(r, i[3], i[1], 12 * e),
       r.save(),
       r.translate(203.5 * e, 299 * e),
       Te(r, -115.5 * e, -20 * e, 231 * e, 40 * e, 10 * e),
       r.restore(),
       se(r, i[3], i[1], 12 * e),
       r.save(),
       r.translate(298.5 * e, 210 * e),
       Te(r, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e),
       r.restore(),
       se(r, i[3], i[1], 12 * e),
       r.save(),
       r.translate(108.5 * e, 210 * e),
       Te(r, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e),
       r.restore(),
       se(r, i[3], i[1], 12 * e),
       r.save(),
       r.translate(204 * e, 121.5 * e),
       Te(r, -92 * e, -9.5 * e, 184 * e, 19 * e, 10 * e),
       r.restore(),
       se(r, i[3], i[3], 10 * e),
       r.save(),
       r.translate(197 * e, 299 * e),
       Te(r, 85 * e, -9 * e, -170 * e, 18 * e, 10 * e),
       r.restore(),
       se(r, i[3], i[3], 10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(94 * e, 317 * e),
       r.bezierCurveTo(110.5 * e, 299.5 * e, 110.5 * e, 299.5 * e, 127 * e, 282 * e),
       r.closePath(),
       se(r, void 0, i[1], 12 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(279 * e, 142 * e),
       r.bezierCurveTo(296.5 * e, 125.5 * e, 296.5 * e, 125.5 * e, 314 * e, 109 * e),
       r.closePath(),
       se(r, void 0, i[1], 12 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(93 * e, 106 * e),
       r.bezierCurveTo(110.5 * e, 124 * e, 110.5 * e, 124 * e, 128 * e, 142 * e),
       r.closePath(),
       se(r, void 0, i[1], 12 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(281 * e, 282 * e),
       r.bezierCurveTo(296 * e, 297.5 * e, 296 * e, 297.5 * e, 311 * e, 313 * e),
       r.closePath(),
       se(r, void 0, i[1], 12 * e),
       t
   }
   function Ze(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 400 * e,
       r.height = 400 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(101 * e, 255 * e),
       n.bezierCurveTo(113 * e, 243 * e, 179 * e, 210 * e, 219 * e, 196 * e),
       n.bezierCurveTo(252 * e, 203 * e, 288 * e, 215 * e, 318 * e, 233 * e),
       n.bezierCurveTo(304 * e, 254 * e, 258 * e, 273 * e, 215 * e, 296 * e),
       n.bezierCurveTo(161 * e, 287 * e, 119 * e, 270 * e, 102 * e, 257 * e),
       n.closePath(),
       se(n, t[0], t[1], 14 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(99 * e, 258 * e),
       n.bezierCurveTo(99 * e, 272.5 * e, 99 * e, 272.5 * e, 99 * e, 287 * e),
       n.bezierCurveTo(166 * e, 319 * e, 193 * e, 320 * e, 212 * e, 324 * e),
       n.bezierCurveTo(292 * e, 286 * e, 312 * e, 271 * e, 319 * e, 263 * e),
       n.bezierCurveTo(320 * e, 249 * e, 320 * e, 241 * e, 318 * e, 234 * e),
       n.bezierCurveTo(300 * e, 254 * e, 254 * e, 277 * e, 216 * e, 294 * e),
       n.bezierCurveTo(190 * e, 296 * e, 135 * e, 276 * e, 102 * e, 258 * e),
       n.closePath(),
       se(n, t[2], t[1], 14 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(212 * e, 323 * e),
       n.bezierCurveTo(211.5 * e, 310.5 * e, 211.5 * e, 310.5 * e, 211 * e, 298 * e),
       n.closePath(),
       se(n, void 0, t[1], 14 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(212 * e, 210 * e),
       n.bezierCurveTo(286 * e, 210 * e, 331 * e, 254 * e, 212 * e, 276 * e),
       n.bezierCurveTo(108 * e, 276 * e, 112 * e, 222 * e, 213 * e, 208 * e),
       n.closePath(),
       se(n, t[3], t[4], 14 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(98 * e, 200 * e),
       n.bezierCurveTo(126 * e, 216 * e, 177 * e, 232 * e, 213 * e, 237 * e),
       n.bezierCurveTo(266 * e, 218 * e, 288 * e, 209 * e, 318 * e, 190 * e),
       n.bezierCurveTo(269 * e, 164 * e, 239 * e, 158 * e, 214 * e, 153 * e),
       n.bezierCurveTo(148 * e, 172 * e, 131 * e, 182 * e, 98 * e, 200 * e),
       n.closePath(),
       se(n, t[0], t[1], 14 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(97 * e, 204 * e),
       n.bezierCurveTo(97 * e, 215.5 * e, 97 * e, 215.5 * e, 97 * e, 227 * e),
       n.bezierCurveTo(148 * e, 250 * e, 179 * e, 256 * e, 212 * e, 262 * e),
       n.bezierCurveTo(268 * e, 244 * e, 281 * e, 233 * e, 318 * e, 214 * e),
       n.bezierCurveTo(318 * e, 203 * e, 318 * e, 203 * e, 318 * e, 192 * e),
       n.bezierCurveTo(250 * e, 225 * e, 236 * e, 231 * e, 214 * e, 239 * e),
       n.bezierCurveTo(158 * e, 228 * e, 126 * e, 215 * e, 99 * e, 201 * e),
       n.closePath(),
       se(n, t[2], t[1], 14 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(212 * e, 260 * e),
       n.bezierCurveTo(212 * e, 251.5 * e, 212 * e, 251.5 * e, 212 * e, 243 * e),
       n.closePath(),
       se(n, void 0, t[1], 14 * e),
       Ee(n, 161 * e, 201 * e, 13 * e),
       se(n, t[5]),
       Ee(n, 216 * e, 205 * e, 8.06225774829855 * e),
       se(n, t[5]),
       Ee(n, 216 * e, 175 * e, 6.708203932499369 * e),
       se(n, t[5]),
       Ee(n, 271 * e, 191 * e, 5.0990195135927845 * e),
       se(n, t[5]),
       Ee(n, 206 * e, 180 * e, 11.180339887498949 * e),
       se(n, t[5]),
       r
   }
   function Qe(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 400 * e,
       r.height = 400 * e,
       n.save(),
       n.translate(85 * e, 237 * e),
       n.rotate(1.5707963267948966),
       ue(n, 6, 54.585977194239184 * e, 1 * e),
       n.restore(),
       se(n, t[1], t[2], 12 * e),
       n.save(),
       n.translate(178 * e, 238 * e),
       n.rotate(1.5707963267948966),
       ue(n, 6, 52.53573932334064 * e, 1 * e),
       n.restore(),
       se(n, t[1], t[2], 12 * e),
       n.save(),
       n.translate(270 * e, 239 * e),
       n.rotate(1.5707963267948966),
       ue(n, 6, 53.58058329516393 * e, 1 * e),
       n.restore(),
       se(n, t[1], t[2], 12 * e),
       n.save(),
       n.translate(222 * e, 312 * e),
       n.rotate(1.5707963267948966),
       ue(n, 6, 52.53573932334064 * e, 1 * e),
       n.restore(),
       se(n, t[1], t[2], 12 * e),
       n.save(),
       n.translate(317 * e, 159 * e),
       n.rotate(1.5707963267948966),
       ue(n, 6, 57.63465889766331 * e, 1 * e),
       n.restore(),
       se(n, t[1], t[2], 12 * e),
       n.save(),
       n.translate(223.5 * e, 139.0625 * e),
       n.rotate(1.5707963267948966),
       ue(n, 6, 51.66236541235796 * e, 1 * e),
       n.restore(),
       se(n, t[1], t[2], 12 * e),
       n.save(),
       n.translate(132.5 * e, 137.0625 * e),
       n.rotate(1.5707963267948966),
       ue(n, 6, 52.009614495783374 * e, 1 * e),
       n.restore(),
       se(n, t[1], t[2], 12 * e),
       n.save(),
       n.translate(178.5 * e, 58.0625 * e),
       n.rotate(1.5707963267948966),
       ue(n, 6, 53.16013544000805 * e, 1 * e),
       n.restore(),
       se(n, t[1], t[2], 12 * e),
       n.save(),
       n.translate(177.5 * e, 216.0625 * e),
       n.rotate(1.5707963267948966),
       ue(n, 6, 50 * e, 1 * e),
       n.restore(),
       se(n, t[1], t[2], 12 * e),
       n.save(),
       n.translate(84.5 * e, 215.0625 * e),
       n.rotate(1.5707963267948966),
       ue(n, 6, 54 * e, 1 * e),
       n.restore(),
       se(n, t[1], t[2], 12 * e),
       n.save(),
       n.translate(319.5 * e, 138.0625 * e),
       n.rotate(1.5707963267948966),
       ue(n, 6, 55.08175741568164 * e, 1 * e),
       n.restore(),
       se(n, t[1], t[2], 12 * e),
       n.save(),
       n.translate(269.5 * e, 216.0625 * e),
       n.rotate(1.5707963267948966),
       ue(n, 6, 54.589376255824725 * e, 1 * e),
       n.restore(),
       se(n, t[1], t[2], 12 * e),
       n.save(),
       n.translate(221.5 * e, 293.0625 * e),
       n.rotate(.5235987755982988),
       ue(n, 6, 49.49747468305833 * e, 1 * e),
       n.restore(),
       se(n, t[1], t[2], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(221.5 * e, 342.0625 * e),
       n.bezierCurveTo(221.5 * e, 350.5625 * e, 221.5 * e, 350.5625 * e, 221.5 * e, 359.0625 * e),
       n.closePath(),
       se(n, void 0, t[2], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(84.5 * e, 270.0625 * e),
       n.bezierCurveTo(84.5 * e, 277.0625 * e, 84.5 * e, 277.0625 * e, 84.5 * e, 284.0625 * e),
       n.closePath(),
       se(n, void 0, t[2], 12 * e),
       n.save(),
       n.translate(84.5 * e, 215.0625 * e),
       n.rotate(.5235987755982988),
       ue(n, 6, 30 * e, 15 * e),
       n.restore(),
       se(n, t[3]),
       n.save(),
       n.translate(177.5 * e, 215.0625 * e),
       n.rotate(.5235987755982988),
       ue(n, 6, 30 * e, 15 * e),
       n.restore(),
       se(n, t[3]),
       n.save(),
       n.translate(222.5 * e, 294.0625 * e),
       n.rotate(.5235987755982988),
       ue(n, 6, 30 * e, 15 * e),
       n.restore(),
       se(n, t[3]),
       n.save(),
       n.translate(270.5 * e, 216.0625 * e),
       n.rotate(.5235987755982988),
       ue(n, 6, 30 * e, 15 * e),
       n.restore(),
       se(n, t[3]),
       n.save(),
       n.translate(320.5 * e, 134.0625 * e),
       n.rotate(.5235987755982988),
       ue(n, 6, 30 * e, 15 * e),
       n.restore(),
       se(n, t[3]),
       n.save(),
       n.translate(224.5 * e, 138.0625 * e),
       n.rotate(.5235987755982988),
       ue(n, 6, 30 * e, 15 * e),
       n.restore(),
       se(n, t[3]),
       n.save(),
       n.translate(133.5 * e, 137.0625 * e),
       n.rotate(.5235987755982988),
       ue(n, 6, 30 * e, 15 * e),
       n.restore(),
       se(n, t[3]),
       n.save(),
       n.translate(178.5 * e, 56.0625 * e),
       n.rotate(.5235987755982988),
       ue(n, 6, 30 * e, 15 * e),
       n.restore(),
       se(n, t[3]),
       r
   }
   function $e(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 52 * e,
       r.height = 65 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(9.833328247070312 * e, 12.078125 * e),
       n.bezierCurveTo(15.333328247070312 * e, 28.078125 * e, 15.333328247070312 * e, 28.078125 * e, 20.833328247070312 * e, 44.078125 * e),
       n.closePath(),
       se(n, void 0, t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(7.8333282470703125 * e, 20.078125 * e),
       n.bezierCurveTo(16.833328247070312 * e, 32.578125 * e, 16.833328247070312 * e, 32.578125 * e, 25.833328247070312 * e, 45.078125 * e),
       n.closePath(),
       se(n, void 0, t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(23.833328247070312 * e, 26.078125 * e),
       n.bezierCurveTo(25.833328247070312 * e, 11.078125 * e, 16.833328247070312 * e, 8.078125 * e, 14.833328247070312 * e, 7.078125 * e),
       n.bezierCurveTo(11.833328247070312 * e, 17.078125 * e, 13.833328247070312 * e, 22.078125 * e, 23.833328247070312 * e, 27.078125 * e),
       n.closePath(),
       se(n, t[0], t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35.83332824707031 * e, 8.078125 * e),
       n.bezierCurveTo(34.83332824707031 * e, 27.078125 * e, 28.833328247070312 * e, 27.078125 * e, 23.833328247070312 * e, 28.078125 * e),
       n.bezierCurveTo(21.833328247070312 * e, 14.078125 * e, 26.833328247070312 * e, 11.078125 * e, 35.83332824707031 * e, 8.078125 * e),
       n.closePath(),
       se(n, t[0], t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(25.833328247070312 * e, 39.078125 * e),
       n.bezierCurveTo(20.833328247070312 * e, 29.078125 * e, 14.833328247070312 * e, 27.078125 * e, 5.8333282470703125 * e, 29.078125 * e),
       n.bezierCurveTo(9.833328247070312 * e, 39.078125 * e, 16.833328247070312 * e, 42.078125 * e, 25.833328247070312 * e, 40.078125 * e),
       n.closePath(),
       se(n, t[0], t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(42.83332824707031 * e, 23.078125 * e),
       n.bezierCurveTo(35.83332824707031 * e, 35.078125 * e, 31.833328247070312 * e, 37.078125 * e, 25.833328247070312 * e, 36.078125 * e),
       n.bezierCurveTo(25.833328247070312 * e, 24.078125 * e, 33.83332824707031 * e, 21.078125 * e, 42.83332824707031 * e, 23.078125 * e),
       n.closePath(),
       se(n, t[0], t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(23.833328247070312 * e, 24.078125 * e),
       n.bezierCurveTo(20.833328247070312 * e, 34.078125 * e, 23.833328247070312 * e, 40.078125 * e, 27.833328247070312 * e, 43.078125 * e),
       n.bezierCurveTo(37.33332824707031 * e, 28.078125 * e, 37.33332824707031 * e, 28.078125 * e, 46.83332824707031 * e, 13.078125 * e),
       se(n, void 0, t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(38.83332824707031 * e, 14.078125 * e),
       n.bezierCurveTo(34.83332824707031 * e, 24.078125 * e, 34.83332824707031 * e, 24.078125 * e, 30.833328247070312 * e, 34.078125 * e),
       se(n, void 0, t[1], 2 * e),
       r
   }
   function ei(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 170 * e,
       r.height = 173 * e,
       n.translate(5 * e, 5 * e),
       n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(86.25 * e, 84.953125 * e),
       n.rotate(.32),
       ue(n, 7, 42.15447781671598 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.save(),
       n.translate(86.25 * e, 84.953125 * e),
       n.rotate(.32),
       ue(n, 7, 42.15447781671598 * e, 10 * e),
       n.restore(),
       se(n, t[1], t[2], 4 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.save(),
       n.translate(86.25 * e, 84.953125 * e),
       n.rotate(.28),
       ue(n, 7, 30.463092423455635 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.save(),
       n.translate(86.25 * e, 84.953125 * e),
       n.rotate(.28),
       ue(n, 7, 30.463092423455635 * e, 10 * e),
       n.restore(),
       se(n, t[3], t[4], 4 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       Ee(n, 86.25 * e, 84.953125 * e, 18.867962264113206 * e),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       Ee(n, 86.25 * e, 84.953125 * e, 18.867962264113206 * e),
       se(n, t[5], t[6], 4 * e),
       r
   }
   function ii(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 170 * e,
       r.height = 173 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(85.25 * e, 82.953125 * e),
       n.bezierCurveTo(98.25 * e, 46.453125 * e, 98.25 * e, 46.453125 * e, 111.25 * e, 9.953125 * e),
       n.closePath(),
       se(n, void 0, t[0], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(111.25 * e, 8.953125 * e),
       n.bezierCurveTo(117.75 * e, 12.453125 * e, 117.75 * e, 12.453125 * e, 124.25 * e, 15.953125 * e),
       n.bezierCurveTo(113.75 * e, 39.953125 * e, 113.75 * e, 39.953125 * e, 103.25 * e, 63.953125 * e),
       n.bezierCurveTo(97.75 * e, 64.953125 * e, 97.75 * e, 64.953125 * e, 92.25 * e, 65.953125 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(111.25 * e, 8.953125 * e),
       n.bezierCurveTo(117.75 * e, 12.453125 * e, 117.75 * e, 12.453125 * e, 124.25 * e, 15.953125 * e),
       n.bezierCurveTo(113.75 * e, 39.953125 * e, 113.75 * e, 39.953125 * e, 103.25 * e, 63.953125 * e),
       n.bezierCurveTo(97.75 * e, 64.953125 * e, 97.75 * e, 64.953125 * e, 92.25 * e, 65.953125 * e),
       n.closePath(),
       se(n, t[7]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(85.25 * e, 82.953125 * e),
       n.bezierCurveTo(98.25 * e, 46.453125 * e, 98.25 * e, 46.453125 * e, 111.25 * e, 9.953125 * e),
       n.closePath(),
       se(n, void 0, t[6], 4 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(87.25 * e, 84.953125 * e),
       n.bezierCurveTo(123.75 * e, 100.453125 * e, 123.75 * e, 100.453125 * e, 160.25 * e, 115.953125 * e),
       n.closePath(),
       se(n, void 0, t[0], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(160.25 * e, 114.953125 * e),
       n.bezierCurveTo(156.25 * e, 122.453125 * e, 156.25 * e, 122.453125 * e, 152.25 * e, 129.953125 * e),
       n.bezierCurveTo(130.25 * e, 117.953125 * e, 130.25 * e, 117.953125 * e, 108.25 * e, 105.953125 * e),
       n.bezierCurveTo(107.25 * e, 98.953125 * e, 107.25 * e, 98.953125 * e, 106.25 * e, 91.953125 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(160.25 * e, 114.953125 * e),
       n.bezierCurveTo(156.25 * e, 122.453125 * e, 156.25 * e, 122.453125 * e, 152.25 * e, 129.953125 * e),
       n.bezierCurveTo(130.25 * e, 117.953125 * e, 130.25 * e, 117.953125 * e, 108.25 * e, 105.953125 * e),
       n.bezierCurveTo(107.25 * e, 98.953125 * e, 107.25 * e, 98.953125 * e, 106.25 * e, 91.953125 * e),
       n.closePath(),
       se(n, t[7]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(87.25 * e, 84.953125 * e),
       n.bezierCurveTo(123.75 * e, 100.453125 * e, 123.75 * e, 100.453125 * e, 160.25 * e, 115.953125 * e),
       n.closePath(),
       se(n, void 0, t[6], 4 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(83.25 * e, 83.953125 * e),
       n.bezierCurveTo(47.75 * e, 68.453125 * e, 47.75 * e, 68.453125 * e, 12.25 * e, 52.953125 * e),
       n.closePath(),
       se(n, void 0, t[0], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(13.25 * e, 53.953125 * e),
       n.bezierCurveTo(17.25 * e, 46.953125 * e, 17.25 * e, 46.953125 * e, 21.25 * e, 39.953125 * e),
       n.bezierCurveTo(42.75 * e, 52.453125 * e, 42.75 * e, 52.453125 * e, 64.25 * e, 64.953125 * e),
       n.bezierCurveTo(64.25 * e, 70.953125 * e, 64.25 * e, 70.953125 * e, 64.25 * e, 76.953125 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(13.25 * e, 53.953125 * e),
       n.bezierCurveTo(17.25 * e, 46.953125 * e, 17.25 * e, 46.953125 * e, 21.25 * e, 39.953125 * e),
       n.bezierCurveTo(42.75 * e, 52.453125 * e, 42.75 * e, 52.453125 * e, 64.25 * e, 64.953125 * e),
       n.bezierCurveTo(64.25 * e, 70.953125 * e, 64.25 * e, 70.953125 * e, 64.25 * e, 76.953125 * e),
       n.closePath(),
       se(n, t[7]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(83.25 * e, 83.953125 * e),
       n.bezierCurveTo(47.75 * e, 68.453125 * e, 47.75 * e, 68.453125 * e, 12.25 * e, 52.953125 * e),
       n.closePath(),
       se(n, void 0, t[6], 4 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(84.25 * e, 86.953125 * e),
       n.bezierCurveTo(70.25 * e, 123.953125 * e, 70.25 * e, 123.953125 * e, 56.25 * e, 160.953125 * e),
       n.closePath(),
       se(n, void 0, t[0], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(56.25 * e, 159.953125 * e),
       n.bezierCurveTo(49.25 * e, 155.453125 * e, 49.25 * e, 155.453125 * e, 42.25 * e, 150.953125 * e),
       n.bezierCurveTo(54.25 * e, 127.953125 * e, 54.25 * e, 127.953125 * e, 66.25 * e, 104.953125 * e),
       n.bezierCurveTo(71.25 * e, 104.953125 * e, 71.25 * e, 104.953125 * e, 76.25 * e, 104.953125 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(56.25 * e, 159.953125 * e),
       n.bezierCurveTo(49.25 * e, 155.453125 * e, 49.25 * e, 155.453125 * e, 42.25 * e, 150.953125 * e),
       n.bezierCurveTo(54.25 * e, 127.953125 * e, 54.25 * e, 127.953125 * e, 66.25 * e, 104.953125 * e),
       n.bezierCurveTo(71.25 * e, 104.953125 * e, 71.25 * e, 104.953125 * e, 76.25 * e, 104.953125 * e),
       n.closePath(),
       se(n, t[7]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(84.25 * e, 86.953125 * e),
       n.bezierCurveTo(70.25 * e, 123.953125 * e, 70.25 * e, 123.953125 * e, 56.25 * e, 160.953125 * e),
       n.closePath(),
       se(n, void 0, t[6], 4 * e),
       r
   }
   function ti(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 170 * e,
       r.height = 173 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.save(),
       n.translate(86.25 * e, 84.953125 * e),
       ue(n, 7, 9.848857801796104 * e, 5 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.save(),
       n.translate(86.25 * e, 84.953125 * e),
       ue(n, 7, 9.848857801796104 * e, 5 * e),
       n.restore(),
       se(n, t[8], t[9], 4 * e),
       r
   }
   function ri(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 75 * e
         , a = 55 * e;
       return r.width = o,
       r.height = a,
       n.translate(-30 * e, -40 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.bezierCurveTo(67 * e, 56 * e, 72 * e, 71 * e, 72 * e, 71 * e),
       n.bezierCurveTo(72 * e, 71 * e, 84 * e, 70 * e, 75 * e, 82 * e),
       n.bezierCurveTo(70 * e, 88 * e, 61 * e, 89 * e, 58 * e, 89 * e),
       n.bezierCurveTo(55 * e, 89 * e, 40 * e, 89 * e, 46 * e, 77 * e),
       n.bezierCurveTo(46 * e, 77 * e, 43 * e, 63 * e, 43 * e, 63 * e),
       n.bezierCurveTo(35 * e, 61 * e, 35 * e, 53 * e, 42 * e, 47 * e),
       n.bezierCurveTo(48 * e, 42 * e, 62 * e, 41 * e, 66 * e, 43 * e),
       n.bezierCurveTo(70 * e, 45 * e, 72 * e, 48 * e, 67 * e, 56 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.bezierCurveTo(68 * e, 61 * e, 72 * e, 76 * e, 72 * e, 76 * e),
       n.bezierCurveTo(65 * e, 85 * e, 61 * e, 85 * e, 49 * e, 83 * e),
       n.bezierCurveTo(49 * e, 83 * e, 44 * e, 63 * e, 44 * e, 63 * e),
       n.bezierCurveTo(54 * e, 63 * e, 60 * e, 63 * e, 67 * e, 55 * e),
       n.closePath(),
       se(n, t[1]),
       n.beginPath(),
       n.moveTo(69 * e, 65 * e),
       n.bezierCurveTo(70 * e, 61 * e, 81 * e, 66 * e, 86 * e, 66 * e),
       n.bezierCurveTo(90 * e, 66 * e, 97 * e, 63 * e, 97 * e, 56 * e),
       n.bezierCurveTo(97 * e, 50 * e, 93 * e, 47 * e, 88 * e, 44 * e),
       se(n, !1, t[1], 2),
       n.beginPath(),
       n.moveTo(50 * e, 48 * e),
       n.bezierCurveTo(43 * e, 52 * e, 50 * e, 54 * e, 51 * e, 54 * e),
       n.bezierCurveTo(54 * e, 54 * e, 59 * e, 52 * e, 59 * e, 49 * e),
       n.bezierCurveTo(59 * e, 48 * e, 55 * e, 46 * e, 50 * e, 48 * e),
       se(n, t[2]),
       r
   }
   function ni(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 195 * e
         , a = 190 * e
         , s = o / 2
         , T = a / 2;
       r.width = o,
       r.height = a;
       var I = 10 * e
         , E = 35 * e
         , _ = 150 * e
         , u = E / 2
         , h = _ / 2
         , R = 4 * e;
       return n.translate(s - 5 * e, T - 5 * e),
       n.rotate(-Math.PI / 1.25),
       n.globalAlpha = 1,
       Te(n, -u, -h, E, _, I),
       se(n, t[0], t[1], R),
       n.translate(0, 0),
       n.rotate(Math.PI / 3),
       n.globalAlpha = 1,
       Te(n, -u, -h, E, _, I),
       se(n, t[0], t[1], R),
       n.translate(0, 5),
       Te(n, -u / 2, -h / 2, E / 2, _ / 3, I - 2),
       se(n, t[1]),
       r
   }
   function oi(e, i, t, r, n) {
       var o = document.createElement("canvas")
         , a = o.getContext("2d")
         , s = 70 * e
         , T = 70 * e
         , I = 10 * e
         , E = 5 * e;
       o.width = s,
       o.height = T + E;
       for (var _ = 0; _ < i.length; _++) {
           var u = i[_];
           a.globalAlpha = u.a;
           var h = u.f(t, !1, u.c);
           a.save(),
           a.translate(s / 2 + u.x * e, T / 2 + u.y * e),
           a.rotate(u.r),
           a.drawImage(h, -h.width / 2, -h.height / 2),
           a.restore()
       }
       var R = [];
       for (_ = 0; _ < r.length; _++) {
           var A = document.createElement("canvas")
             , d = A.getContext("2d");
           A.width = s,
           A.height = T + E,
           d.globalAlpha = n / 2,
           2 == _ ? Te(d, 0, E, s, T, I) : Te(d, 0, 0, s, T + E, I),
           se(d, "#081a19"),
           d.globalAlpha = n,
           Te(d, 0, 2 == _ ? E : 0, s, T, I),
           se(d, r[_]),
           d.globalAlpha = 1,
           2 == _ ? d.drawImage(o, 0, E) : d.drawImage(o, 0, 0),
           R.push(p(A))
       }
       return R
   }
   function ai(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 149 * e,
       t.height = 356 * e,
       r.save(),
       r.translate(74.5 * e, 177.5 * e),
       Te(r, -57.5 * e, -161.5 * e, 100 * e, 323 * e, 10 * e),
       r.restore(),
       se(r, i[0], i[1], 4 * e),
       r.save(),
       r.translate(74.5 * e, 177.5 * e),
       Te(r, -57.5 * e, 50.5 * e, 100 * e, 105 * e, 10 * e),
       r.restore(),
       se(r, i[6], i[1], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(16 * e, 125 * e),
       r.bezierCurveTo(74.5 * e, 125 * e, 118 * e, 125 * e, 118 * e, 125 * e),
       r.closePath(),
       se(r, i[2], i[2], 10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(16 * e, 120 * e),
       r.bezierCurveTo(74.5 * e, 120 * e, 74.5 * e, 120 * e, 118 * e, 120 * e),
       r.closePath(),
       se(r, i[3], i[3], 10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(16 * e, 228 * e),
       r.bezierCurveTo(75 * e, 228.5 * e, 118 * e, 228.5 * e, 118 * e, 229 * e),
       r.closePath(),
       se(r, i[2], i[2], 10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(16 * e, 224 * e),
       r.bezierCurveTo(75 * e, 224 * e, 118 * e, 224 * e, 118 * e, 224 * e),
       r.closePath(),
       se(r, i[3], i[3], 10 * e),
       r.save(),
       r.translate(72 * e, 68.5 * e),
       Te(r, -41.5 * e, -36.5 * e, 73 * e, 73 * e, 13 * e),
       r.restore(),
       se(r, i[4]),
       r.save(),
       r.translate(72 * e, 175.5 * e),
       Te(r, -41.5 * e, -38.5 * e, 73 * e, 73 * e, 13 * e),
       r.restore(),
       se(r, i[4]),
       r.save(),
       r.translate(72 * e, 279.5 * e),
       Te(r, -41.5 * e, -40.5 * e, 73 * e, 73 * e, 13 * e),
       r.restore(),
       se(r, i[4]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(16 * e, 338 * e),
       r.bezierCurveTo(75 * e, 338 * e, 118 * e, 338 * e, 118 * e, 338 * e),
       r.closePath(),
       se(r, i[2], i[2], 10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(16 * e, 333 * e),
       r.bezierCurveTo(75 * e, 333 * e, 118 * e, 333 * e, 118 * e, 333 * e),
       r.closePath(),
       se(r, i[3], i[3], 10 * e),
       t
   }
   function si(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 193 * e
         , a = 198 * e
         , s = 140 * e
         , T = 90 * e;
       r.width = o,
       r.height = a;
       var I = 10 * e
         , E = 25 * e
         , _ = 180 * e
         , u = E / 2
         , h = _ / 2
         , R = 4 * e;
       return n.translate(-25 * e, 1 * e),
       n.translate(s, T),
       n.rotate(-Math.PI / 5),
       Te(n, -u, -h, E, _, I),
       se(n, t[0], t[1], R),
       n.translate(-30 * e, -25 * e),
       n.rotate(Math.PI / 3),
       Te(n, -u, -h, E, _, I),
       se(n, t[0], t[1], R),
       n.translate(35 * e, 30 * e),
       n.rotate(Math.PI / 3),
       Te(n, -u, -h, E, _, I),
       se(n, t[0], t[1], R),
       r
   }
   function Ti(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 145 * e
         , a = 145 * e
         , s = o / 2
         , T = a / 2;
       r.width = o,
       r.height = a;
       var I = 70 * e;
       n.translate(s, T),
       n.globalAlpha = .4,
       Ee(n, 0, 0, I),
       se(n, t[0]);
       I = 50 * e;
       n.translate(0, 0),
       n.globalAlpha = .8,
       Ee(n, 0, 0, I),
       se(n, t[0]);
       I = 35 * e;
       n.translate(0, 0),
       n.globalAlpha = .8,
       Ee(n, 0, 0, I),
       se(n, t[1]);
       I = 20 * e;
       return n.translate(0, 0),
       n.globalAlpha = .8,
       Ee(n, 0, 0, I),
       se(n, t[2]),
       r
   }
   function Ii(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 135 * e
         , a = 190 * e
         , s = o / 2
         , T = a / 2;
       r.width = o,
       r.height = a;
       var I = 10 * e
         , E = 25 * e
         , _ = 180 * e
         , u = E / 2
         , h = _ / 2
         , R = 4 * e;
       return n.translate(s, T),
       n.rotate(-Math.PI / 5),
       n.globalAlpha = 1,
       Te(n, -u, -h, E, _, I),
       se(n, t[0], t[1], R),
       n.translate(0, 0),
       n.rotate(Math.PI / 5),
       n.globalAlpha = 1,
       Te(n, -u, -h, E, _, I),
       se(n, t[0], t[1], R),
       r
   }
   function Ei(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 205 * e
         , a = 205 * e
         , s = o / 2
         , T = a / 2;
       r.width = o,
       r.height = a;
       var I = 100 * e;
       return n.translate(s, T),
       n.globalAlpha = 1,
       Ee(n, 0, 0, I),
       se(n, t[0]),
       r
   }
   function _i(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 370 * e
         , a = 370 * e
         , s = o / 2
         , T = a / 2;
       r.width = o,
       r.height = a;
       var I = 180 * e;
       return n.globalAlpha = .2,
       Ee(n, s, T, I),
       se(n, t[0]),
       r
   }
   function ui(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 155 * e,
       r.height = 127 * e,
       n.globalAlpha = .5,
       n.translate(0, 8 * e),
       n.translate(-7 * e, -20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(55 * e, 68 * e),
       n.bezierCurveTo(86 * e, 64 * e, 117 * e, 66 * e, 134 * e, 68 * e),
       n.bezierCurveTo(152 * e, 69 * e, 165 * e, 86 * e, 152 * e, 104 * e),
       n.bezierCurveTo(146 * e, 87 * e, 122 * e, 89 * e, 98 * e, 90 * e),
       n.bezierCurveTo(64 * e, 89 * e, 41 * e, 91 * e, 36 * e, 106 * e),
       n.bezierCurveTo(19 * e, 92 * e, 31 * e, 71 * e, 54 * e, 69 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -8 * e),
       n.translate(7 * e, 20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(24 * e, 28 * e),
       n.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e),
       n.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e),
       n.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e),
       n.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e),
       n.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e),
       n.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(30 * e, 41 * e),
       n.bezierCurveTo(49 * e, 31 * e, 53 * e, 29 * e, 62 * e, 27 * e),
       n.bezierCurveTo(59 * e, 24 * e, 56 * e, 25 * e, 53 * e, 24 * e),
       n.bezierCurveTo(67 * e, 15 * e, 84 * e, 12 * e, 120 * e, 16 * e),
       n.bezierCurveTo(107 * e, 11 * e, 96 * e, 6 * e, 85 * e, 2 * e),
       n.bezierCurveTo(59 * e, 3 * e, 54 * e, 7 * e, 40 * e, 17 * e),
       n.bezierCurveTo(32.5 * e, 22.5 * e, 32.5 * e, 22.5 * e, 25 * e, 28 * e),
       n.bezierCurveTo(32 * e, 30 * e, 32 * e, 30 * e, 39 * e, 32 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(24 * e, 28 * e),
       n.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e),
       n.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e),
       n.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e),
       n.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e),
       n.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e),
       n.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e),
       n.closePath(),
       se(n, void 0, t[2], 4 * e),
       Ee(n, 18 * e, 38 * e, 14.866068747318506 * e),
       se(n, t[4], t[5], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(39 * e, 30 * e),
       n.bezierCurveTo(27 * e, 38 * e, 25 * e, 50 * e, 26 * e, 60 * e),
       n.bezierCurveTo(36.5 * e, 58.5 * e, 36.5 * e, 58.5 * e, 47 * e, 57 * e),
       se(n, t[1], t[2], 4 * e),
       n.translate(-7 * e, -20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(27 * e, 74 * e),
       n.bezierCurveTo(38 * e, 77.5 * e, 38 * e, 77.5 * e, 49 * e, 81 * e),
       n.bezierCurveTo(54.5 * e, 75.5 * e, 54.5 * e, 75.5 * e, 60 * e, 70 * e),
       n.bezierCurveTo(64 * e, 72 * e, 64 * e, 72 * e, 68 * e, 74 * e),
       n.bezierCurveTo(80.5 * e, 67.5 * e, 80.5 * e, 67.5 * e, 93 * e, 61 * e),
       n.bezierCurveTo(104.5 * e, 68 * e, 104.5 * e, 68 * e, 116 * e, 75 * e),
       n.bezierCurveTo(120.5 * e, 72.5 * e, 120.5 * e, 72.5 * e, 125 * e, 70 * e),
       n.bezierCurveTo(129 * e, 75 * e, 129 * e, 75 * e, 133 * e, 80 * e),
       n.bezierCurveTo(145.5 * e, 76.5 * e, 145.5 * e, 76.5 * e, 158 * e, 73 * e),
       n.bezierCurveTo(158 * e, 87 * e, 158 * e, 93 * e, 155 * e, 95 * e),
       n.bezierCurveTo(152.5 * e, 96 * e, 152.5 * e, 96 * e, 150 * e, 97 * e),
       n.bezierCurveTo(121 * e, 85 * e, 108 * e, 86 * e, 93 * e, 85 * e),
       n.bezierCurveTo(64 * e, 85 * e, 52 * e, 95 * e, 38 * e, 99 * e),
       n.bezierCurveTo(36 * e, 98.5 * e, 36 * e, 98.5 * e, 34 * e, 98 * e),
       n.bezierCurveTo(25 * e, 98 * e, 27 * e, 91 * e, 27 * e, 76 * e),
       n.closePath(),
       se(n, t[6], t[7], 6 * e),
       r
   }
   function hi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 155 * e,
       r.height = 127 * e,
       n.globalAlpha = .5,
       n.translate(0, 8 * e),
       n.translate(-7 * e, -20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(55 * e, 68 * e),
       n.bezierCurveTo(86 * e, 64 * e, 117 * e, 66 * e, 134 * e, 68 * e),
       n.bezierCurveTo(152 * e, 69 * e, 165 * e, 86 * e, 152 * e, 104 * e),
       n.bezierCurveTo(146 * e, 87 * e, 122 * e, 89 * e, 98 * e, 90 * e),
       n.bezierCurveTo(64 * e, 89 * e, 41 * e, 91 * e, 36 * e, 106 * e),
       n.bezierCurveTo(19 * e, 92 * e, 31 * e, 71 * e, 54 * e, 69 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -8 * e),
       n.translate(7 * e, 20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(24 * e, 28 * e),
       n.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e),
       n.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e),
       n.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e),
       n.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e),
       n.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e),
       n.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(30 * e, 41 * e),
       n.bezierCurveTo(49 * e, 31 * e, 53 * e, 29 * e, 62 * e, 27 * e),
       n.bezierCurveTo(59 * e, 24 * e, 56 * e, 25 * e, 53 * e, 24 * e),
       n.bezierCurveTo(67 * e, 15 * e, 84 * e, 12 * e, 120 * e, 16 * e),
       n.bezierCurveTo(107 * e, 11 * e, 96 * e, 6 * e, 85 * e, 2 * e),
       n.bezierCurveTo(59 * e, 3 * e, 54 * e, 7 * e, 40 * e, 17 * e),
       n.bezierCurveTo(32.5 * e, 22.5 * e, 32.5 * e, 22.5 * e, 25 * e, 28 * e),
       n.bezierCurveTo(32 * e, 30 * e, 32 * e, 30 * e, 39 * e, 32 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(24 * e, 28 * e),
       n.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e),
       n.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e),
       n.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e),
       n.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e),
       n.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e),
       n.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e),
       n.closePath(),
       se(n, void 0, t[2], 4 * e),
       Ee(n, 18 * e, 38 * e, 14.866068747318506 * e),
       se(n, t[4], t[5], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(39 * e, 30 * e),
       n.bezierCurveTo(27 * e, 38 * e, 25 * e, 50 * e, 26 * e, 60 * e),
       n.bezierCurveTo(36.5 * e, 58.5 * e, 36.5 * e, 58.5 * e, 47 * e, 57 * e),
       se(n, t[1], t[2], 4 * e),
       n.translate(-7 * e, -20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(55 * e, 68 * e),
       n.bezierCurveTo(86 * e, 64 * e, 117 * e, 66 * e, 134 * e, 68 * e),
       n.bezierCurveTo(152 * e, 69 * e, 165 * e, 86 * e, 152 * e, 104 * e),
       n.bezierCurveTo(146 * e, 87 * e, 122 * e, 89 * e, 98 * e, 90 * e),
       n.bezierCurveTo(64 * e, 89 * e, 41 * e, 91 * e, 36 * e, 106 * e),
       n.bezierCurveTo(19 * e, 92 * e, 31 * e, 71 * e, 54 * e, 69 * e),
       n.closePath(),
       se(n, t[4], t[5], 4 * e),
       r
   }
   function Ri(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d")
         , n = 220 * e
         , o = 220 * e
         , a = 32 * e
         , s = 4 * e;
       return t.width = n,
       t.height = o,
       r.translate(n / 2, o / 2 + 10 * e),
       r.globalAlpha = .5,
       Ee(r, 0, 0, a),
       se(r, i[0], i[0]),
       r.translate(0, -8 * e),
       r.globalAlpha = 1,
       Ee(r, 0, 0, a),
       se(r, i[1], i[2], s),
       t
   }
   function Ai(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d")
         , n = 40 * e
         , o = 40 * e
         , a = 16 * e
         , s = 4 * e;
       return t.width = n,
       t.height = o,
       r.translate(n / 2, o / 2),
       r.globalAlpha = 1,
       Ee(r, 0, 0, a),
       se(r, i[0], i[1], s),
       t
   }
   function di(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d")
         , n = 220 * e
         , o = 220 * e
         , a = 16 * e;
       return t.width = n,
       t.height = o,
       r.translate(n / 2, o / 2),
       r.globalAlpha = .5,
       Ee(r, 0, 0, a),
       se(r, i[0]),
       r.globalAlpha = 1,
       t
   }
   function Si(e, i, t, r) {
       var n = document.createElement("canvas")
         , o = n.getContext("2d")
         , a = 210 * e
         , s = 205 * e
         , T = 30 * e
         , I = 20 * e
         , E = 200 * e
         , _ = 180 * e
         , u = E / 2
         , h = _ / 2;
       return n.width = a,
       n.height = s,
       n.width = 419 * e,
       n.height = 412 * e,
       1 == r ? (o.save(),
       o.translate(10 * e, 0 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(117.99996948242188 * e, 216.40621948242188 * e),
       o.bezierCurveTo(86.99996948242188 * e, 221.40621948242188 * e, 74.99996948242188 * e, 217.40621948242188 * e, 60.999969482421875 * e, 205.40621948242188 * e),
       se(o, void 0, i[4], 3 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(114.99996948242188 * e, 227.40621948242188 * e),
       o.bezierCurveTo(90.99996948242188 * e, 233.40621948242188 * e, 66.99996948242188 * e, 228.40621948242188 * e, 43.999969482421875 * e, 225.40621948242188 * e),
       se(o, void 0, i[4], 3 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(110.99996948242188 * e, 236.40621948242188 * e),
       o.bezierCurveTo(94.99996948242188 * e, 244.40621948242188 * e, 79.99996948242188 * e, 249.40621948242188 * e, 60.999969482421875 * e, 249.40621948242188 * e),
       se(o, void 0, i[4], 3 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(111.99996948242188 * e, 206.29513549804688 * e),
       o.bezierCurveTo(91.99996948242188 * e, 206.29513549804688 * e, 87.99996948242188 * e, 201.29513549804688 * e, 79.99996948242188 * e, 192.29513549804688 * e),
       se(o, void 0, i[4], 3 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(109.99996948242188 * e, 249.18402099609375 * e),
       o.bezierCurveTo(97.99996948242188 * e, 263.18402099609375 * e, 85.99996948242188 * e, 271.18402099609375 * e, 65.99996948242188 * e, 277.18402099609375 * e),
       se(o, void 0, i[4], 3 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(105.99996948242188 * e, 192.18402099609375 * e),
       o.bezierCurveTo(99.49996948242188 * e, 197.68402099609375 * e, 99.49996948242188 * e, 197.68402099609375 * e, 92.99996948242188 * e, 203.18402099609375 * e),
       o.bezierCurveTo(95.99996948242188 * e, 213.18402099609375 * e, 95.99996948242188 * e, 215.18402099609375 * e, 89.99996948242188 * e, 219.18402099609375 * e),
       o.bezierCurveTo(91.99996948242188 * e, 223.18402099609375 * e, 91.99996948242188 * e, 226.18402099609375 * e, 87.99996948242188 * e, 230.18402099609375 * e),
       o.bezierCurveTo(89.99996948242188 * e, 234.18402099609375 * e, 91.99996948242188 * e, 237.18402099609375 * e, 90.99996948242188 * e, 244.18402099609375 * e),
       o.bezierCurveTo(96.99996948242188 * e, 252.18402099609375 * e, 96.99996948242188 * e, 256.18402099609375 * e, 95.99996948242188 * e, 262.18402099609375 * e),
       o.bezierCurveTo(106.49996948242188 * e, 264.18402099609375 * e, 106.49996948242188 * e, 264.18402099609375 * e, 116.99996948242188 * e, 266.18402099609375 * e),
       se(o, void 0, i[4], 3 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(104.99996948242188 * e, 183.29513549804688 * e),
       o.bezierCurveTo(99.99996948242188 * e, 193.29513549804688 * e, 93.99996948242188 * e, 195.29513549804688 * e, 89.99996948242188 * e, 201.29513549804688 * e),
       o.bezierCurveTo(86.99996948242188 * e, 212.29513549804688 * e, 85.99996948242188 * e, 214.29513549804688 * e, 81.99996948242188 * e, 215.29513549804688 * e),
       o.bezierCurveTo(83.99996948242188 * e, 223.29513549804688 * e, 83.99996948242188 * e, 227.29513549804688 * e, 79.99996948242188 * e, 230.29513549804688 * e),
       o.bezierCurveTo(83.99996948242188 * e, 235.29513549804688 * e, 84.99996948242188 * e, 240.29513549804688 * e, 79.99996948242188 * e, 246.29513549804688 * e),
       o.bezierCurveTo(86.99996948242188 * e, 251.29513549804688 * e, 91.99996948242188 * e, 256.2951354980469 * e, 89.99996948242188 * e, 266.2951354980469 * e),
       o.bezierCurveTo(102.99996948242188 * e, 269.2951354980469 * e, 102.99996948242188 * e, 269.2951354980469 * e, 115.99996948242188 * e, 272.2951354980469 * e),
       se(o, void 0, i[4], 3 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(107.99996948242188 * e, 177.85067749023438 * e),
       o.bezierCurveTo(95.99996948242188 * e, 187.35067749023438 * e, 95.99996948242188 * e, 187.35067749023438 * e, 83.99996948242188 * e, 196.85067749023438 * e),
       o.bezierCurveTo(82.99996948242188 * e, 203.85067749023438 * e, 80.99996948242188 * e, 209.85067749023438 * e, 72.99996948242188 * e, 210.85067749023438 * e),
       o.bezierCurveTo(73.99996948242188 * e, 220.85067749023438 * e, 73.99996948242188 * e, 221.85067749023438 * e, 66.99996948242188 * e, 227.85067749023438 * e),
       o.bezierCurveTo(71.99996948242188 * e, 235.85067749023438 * e, 73.99996948242188 * e, 239.85067749023438 * e, 71.99996948242188 * e, 247.85067749023438 * e),
       o.bezierCurveTo(80.99996948242188 * e, 257.8506774902344 * e, 81.99996948242188 * e, 263.8506774902344 * e, 77.99996948242188 * e, 271.8506774902344 * e),
       o.bezierCurveTo(95.49996948242188 * e, 272.8506774902344 * e, 95.49996948242188 * e, 272.8506774902344 * e, 112.99996948242188 * e, 273.8506774902344 * e),
       se(o, void 0, i[4], 3 * e),
       o.restore()) : 2 == r && (o.save(),
       o.translate(130 * e, 35 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(170.99996948242188 * e, 133.85067749023438 * e),
       o.bezierCurveTo(195.99996948242188 * e, 129.85067749023438 * e, 196.99996948242188 * e, 111.85067749023438 * e, 200.99996948242188 * e, 88.85067749023438 * e),
       se(o, void 0, i[4], 3 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(169.99996948242188 * e, 143.85067749023438 * e),
       o.bezierCurveTo(189.99996948242188 * e, 145.85067749023438 * e, 207.99996948242188 * e, 126.85067749023438 * e, 222.99996948242188 * e, 100.85067749023438 * e),
       se(o, void 0, i[4], 3 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(170.99996948242188 * e, 157.85067749023438 * e),
       o.bezierCurveTo(193.99996948242188 * e, 160.85067749023438 * e, 210.99996948242188 * e, 151.85067749023438 * e, 232.99996948242188 * e, 139.85067749023438 * e),
       se(o, void 0, i[4], 3 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(169.99996948242188 * e, 168.85067749023438 * e),
       o.bezierCurveTo(192.99996948242188 * e, 175.85067749023438 * e, 203.99996948242188 * e, 177.85067749023438 * e, 245.99996948242188 * e, 168.85067749023438 * e),
       se(o, void 0, i[4], 3 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(167.99996948242188 * e, 168.85067749023438 * e),
       o.bezierCurveTo(183.99996948242188 * e, 189.85067749023438 * e, 191.99996948242188 * e, 193.85067749023438 * e, 220.99996948242188 * e, 196.85067749023438 * e),
       se(o, void 0, i[4], 3 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(176.99996948242188 * e, 117.85067749023438 * e),
       o.bezierCurveTo(181.99996948242188 * e, 120.85067749023438 * e, 181.99996948242188 * e, 120.85067749023438 * e, 186.99996948242188 * e, 123.85067749023438 * e),
       o.bezierCurveTo(183.99996948242188 * e, 137.85067749023438 * e, 185.99996948242188 * e, 136.85067749023438 * e, 190.99996948242188 * e, 136.85067749023438 * e),
       o.bezierCurveTo(186.99996948242188 * e, 147.85067749023438 * e, 189.99996948242188 * e, 152.85067749023438 * e, 193.99996948242188 * e, 155.85067749023438 * e),
       o.bezierCurveTo(187.99996948242188 * e, 165.85067749023438 * e, 190.99996948242188 * e, 169.85067749023438 * e, 190.99996948242188 * e, 172.85067749023438 * e),
       o.bezierCurveTo(186.99996948242188 * e, 183.85067749023438 * e, 186.99996948242188 * e, 185.85067749023438 * e, 189.99996948242188 * e, 188.85067749023438 * e),
       o.bezierCurveTo(182.49996948242188 * e, 195.35067749023438 * e, 182.49996948242188 * e, 195.35067749023438 * e, 174.99996948242188 * e, 201.85067749023438 * e),
       se(o, void 0, i[4], 3 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(176.99996948242188 * e, 112.18402099609375 * e),
       o.bezierCurveTo(183.99996948242188 * e, 119.18402099609375 * e, 186.99996948242188 * e, 117.18402099609375 * e, 192.99996948242188 * e, 116.18402099609375 * e),
       o.bezierCurveTo(191.99996948242188 * e, 126.18402099609375 * e, 193.99996948242188 * e, 130.18402099609375 * e, 199.99996948242188 * e, 130.18402099609375 * e),
       o.bezierCurveTo(194.99996948242188 * e, 145.18402099609375 * e, 197.99996948242188 * e, 147.18402099609375 * e, 201.99996948242188 * e, 153.18402099609375 * e),
       o.bezierCurveTo(196.99996948242188 * e, 164.18402099609375 * e, 197.99996948242188 * e, 169.18402099609375 * e, 201.99996948242188 * e, 174.18402099609375 * e),
       o.bezierCurveTo(194.99996948242188 * e, 184.18402099609375 * e, 196.99996948242188 * e, 187.18402099609375 * e, 200.99996948242188 * e, 193.18402099609375 * e),
       o.bezierCurveTo(185.99996948242188 * e, 195.18402099609375 * e, 181.99996948242188 * e, 201.18402099609375 * e, 174.99996948242188 * e, 210.18402099609375 * e),
       se(o, void 0, i[4], 3 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(176.99996948242188 * e, 101.29513549804688 * e),
       o.bezierCurveTo(181.99996948242188 * e, 108.29513549804688 * e, 189.99996948242188 * e, 110.29513549804688 * e, 195.99996948242188 * e, 107.29513549804688 * e),
       o.bezierCurveTo(197.99996948242188 * e, 121.29513549804688 * e, 200.99996948242188 * e, 122.29513549804688 * e, 206.99996948242188 * e, 122.29513549804688 * e),
       o.bezierCurveTo(201.99996948242188 * e, 138.29513549804688 * e, 204.99996948242188 * e, 142.29513549804688 * e, 211.99996948242188 * e, 148.29513549804688 * e),
       o.bezierCurveTo(201.99996948242188 * e, 156.29513549804688 * e, 205.99996948242188 * e, 167.29513549804688 * e, 213.99996948242188 * e, 173.29513549804688 * e),
       o.bezierCurveTo(204.99996948242188 * e, 181.29513549804688 * e, 204.99996948242188 * e, 187.29513549804688 * e, 205.99996948242188 * e, 193.29513549804688 * e),
       o.bezierCurveTo(190.99996948242188 * e, 198.29513549804688 * e, 181.99996948242188 * e, 205.29513549804688 * e, 174.99996948242188 * e, 214.29513549804688 * e),
       se(o, void 0, i[4], 3 * e),
       o.restore()),
       o.translate(n.width / 2, n.height / 2),
       r || (o.globalAlpha = .5,
       Te(o, -u, -h, E, _ + I, T),
       se(o, i[0]),
       t && o.rotate(Math.PI),
       o.globalAlpha = 1,
       Te(o, -u, -h, E, _, T),
       se(o, i[1], i[2], 4),
       o.globalAlpha = 1,
       Te(o, 35 * e - u, 20 * e - h, E - 50 * e, _ - 50 * e, T - 10 * e),
       se(o, i[3])),
       3 == r ? (o.translate(-n.width / 2, -n.height / 2),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(121 * e, 190 * e),
       o.bezierCurveTo(129 * e, 186 * e, 137 * e, 183 * e, 135 * e, 163 * e),
       o.bezierCurveTo(131 * e, 135 * e, 153 * e, 127 * e, 177 * e, 124 * e),
       o.bezierCurveTo(198 * e, 120 * e, 208 * e, 122 * e, 226 * e, 128 * e),
       o.bezierCurveTo(261 * e, 112 * e, 271 * e, 126 * e, 287 * e, 147 * e),
       o.bezierCurveTo(310 * e, 163 * e, 304 * e, 183 * e, 283 * e, 196 * e),
       o.bezierCurveTo(296 * e, 249 * e, 278 * e, 262 * e, 253 * e, 263 * e),
       o.bezierCurveTo(210 * e, 264 * e, 188 * e, 252 * e, 177 * e, 234 * e),
       o.bezierCurveTo(133 * e, 242 * e, 123 * e, 241 * e, 115 * e, 225 * e),
       o.bezierCurveTo(109 * e, 206 * e, 115 * e, 193 * e, 121 * e, 190 * e),
       o.closePath(),
       se(o, i[4]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(219 * e, 144 * e),
       o.bezierCurveTo(251 * e, 121 * e, 277 * e, 136 * e, 276 * e, 159 * e),
       o.bezierCurveTo(276 * e, 176 * e, 273 * e, 191 * e, 242 * e, 193 * e),
       o.bezierCurveTo(226 * e, 228 * e, 155 * e, 219 * e, 150 * e, 183 * e),
       o.bezierCurveTo(142 * e, 144 * e, 174 * e, 127 * e, 219 * e, 144 * e),
       o.closePath(),
       se(o, i[5]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(123 * e, 214 * e),
       o.bezierCurveTo(119 * e, 198 * e, 129 * e, 189 * e, 146 * e, 194 * e),
       o.bezierCurveTo(158 * e, 201 * e, 165 * e, 218 * e, 147 * e, 226 * e),
       o.bezierCurveTo(135 * e, 230 * e, 125 * e, 222 * e, 123 * e, 214 * e),
       o.closePath(),
       se(o, i[5]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(257 * e, 199 * e),
       o.bezierCurveTo(264 * e, 199 * e, 275 * e, 213 * e, 261 * e, 220 * e),
       o.bezierCurveTo(246 * e, 225 * e, 235 * e, 200 * e, 257 * e, 199 * e),
       o.closePath(),
       se(o, i[5]),
       o.translate(-5 * e, 55 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(186 * e, 123 * e),
       o.bezierCurveTo(198 * e, 115 * e, 219 * e, 110 * e, 219 * e, 123 * e),
       o.bezierCurveTo(216 * e, 135 * e, 171 * e, 143 * e, 186 * e, 123 * e),
       o.closePath(),
       se(o, i[5]),
       o.translate(5 * e, -55 * e),
       o.translate(-5 * e, 15 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(171 * e, 241 * e),
       o.bezierCurveTo(189 * e, 234 * e, 200 * e, 248 * e, 189 * e, 254 * e),
       o.bezierCurveTo(179 * e, 260 * e, 158 * e, 246 * e, 171 * e, 241 * e),
       o.closePath(),
       se(o, i[5])) : 4 == r && (o.translate(-n.width / 2, -n.height / 2),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(30 * e, 167 * e),
       o.bezierCurveTo(47 * e, 144 * e, 64 * e, 140 * e, 80 * e, 147 * e),
       o.bezierCurveTo(95 * e, 154 * e, 95 * e, 159 * e, 100 * e, 179 * e),
       o.bezierCurveTo(105 * e, 202 * e, 95 * e, 218 * e, 69 * e, 218 * e),
       o.bezierCurveTo(48 * e, 236 * e, 26 * e, 223 * e, 28 * e, 213 * e),
       o.bezierCurveTo(28 * e, 205 * e, 29 * e, 199 * e, 32 * e, 195 * e),
       o.bezierCurveTo(21 * e, 183 * e, 27 * e, 173 * e, 30 * e, 167 * e),
       o.closePath(),
       se(o, i[4]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(26 * e, 145 * e),
       o.bezierCurveTo(32 * e, 138 * e, 37 * e, 137 * e, 40 * e, 139 * e),
       o.bezierCurveTo(43 * e, 140 * e, 41 * e, 150 * e, 31 * e, 159 * e),
       o.bezierCurveTo(23 * e, 166 * e, 17 * e, 158 * e, 26 * e, 145 * e),
       o.closePath(),
       se(o, i[4]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(13 * e, 193 * e),
       o.bezierCurveTo(21 * e, 187 * e, 30 * e, 190 * e, 20 * e, 202 * e),
       o.bezierCurveTo(13 * e, 208 * e, 7 * e, 202 * e, 13 * e, 193 * e),
       o.closePath(),
       se(o, i[4]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(121 * e, 190 * e),
       o.bezierCurveTo(129 * e, 186 * e, 137 * e, 183 * e, 135 * e, 163 * e),
       o.bezierCurveTo(131 * e, 135 * e, 153 * e, 127 * e, 177 * e, 124 * e),
       o.bezierCurveTo(198 * e, 120 * e, 208 * e, 122 * e, 226 * e, 128 * e),
       o.bezierCurveTo(261 * e, 112 * e, 271 * e, 126 * e, 287 * e, 147 * e),
       o.bezierCurveTo(310 * e, 163 * e, 304 * e, 183 * e, 283 * e, 196 * e),
       o.bezierCurveTo(296 * e, 249 * e, 278 * e, 262 * e, 253 * e, 263 * e),
       o.bezierCurveTo(210 * e, 264 * e, 188 * e, 252 * e, 177 * e, 234 * e),
       o.bezierCurveTo(133 * e, 242 * e, 123 * e, 241 * e, 115 * e, 225 * e),
       o.bezierCurveTo(109 * e, 206 * e, 115 * e, 193 * e, 121 * e, 190 * e),
       o.closePath(),
       se(o, i[4]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(335 * e, 196 * e),
       o.bezierCurveTo(312 * e, 208 * e, 300 * e, 185 * e, 309 * e, 167 * e),
       o.bezierCurveTo(314 * e, 141 * e, 339 * e, 127 * e, 359 * e, 144 * e),
       o.bezierCurveTo(363 * e, 148 * e, 364 * e, 150 * e, 364 * e, 150 * e),
       o.bezierCurveTo(392 * e, 143 * e, 396 * e, 183 * e, 378 * e, 204 * e),
       o.bezierCurveTo(367 * e, 215 * e, 339 * e, 208 * e, 335 * e, 196 * e),
       o.closePath(),
       se(o, i[4]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(349 * e, 212 * e),
       o.bezierCurveTo(339 * e, 216 * e, 334 * e, 208 * e, 341 * e, 203 * e),
       o.bezierCurveTo(353 * e, 198 * e, 361 * e, 205 * e, 349 * e, 212 * e),
       o.closePath(),
       se(o, i[4]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(46 * e, 165 * e),
       o.bezierCurveTo(55 * e, 148 * e, 85 * e, 157 * e, 83 * e, 175 * e),
       o.bezierCurveTo(99 * e, 185 * e, 89 * e, 212 * e, 66 * e, 204 * e),
       o.bezierCurveTo(55 * e, 212 * e, 43 * e, 212 * e, 41 * e, 202 * e),
       o.bezierCurveTo(39 * e, 194 * e, 42 * e, 187 * e, 49 * e, 185 * e),
       o.bezierCurveTo(44 * e, 175 * e, 45 * e, 172 * e, 46 * e, 165 * e),
       o.closePath(),
       se(o, i[4]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(219 * e, 144 * e),
       o.bezierCurveTo(251 * e, 121 * e, 277 * e, 136 * e, 276 * e, 159 * e),
       o.bezierCurveTo(276 * e, 176 * e, 273 * e, 191 * e, 242 * e, 193 * e),
       o.bezierCurveTo(226 * e, 228 * e, 155 * e, 219 * e, 150 * e, 183 * e),
       o.bezierCurveTo(142 * e, 144 * e, 174 * e, 127 * e, 219 * e, 144 * e),
       o.closePath(),
       se(o, i[5]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(123 * e, 214 * e),
       o.bezierCurveTo(119 * e, 198 * e, 129 * e, 189 * e, 146 * e, 194 * e),
       o.bezierCurveTo(158 * e, 201 * e, 165 * e, 218 * e, 147 * e, 226 * e),
       o.bezierCurveTo(135 * e, 230 * e, 125 * e, 222 * e, 123 * e, 214 * e),
       o.closePath(),
       se(o, i[5]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(257 * e, 199 * e),
       o.bezierCurveTo(264 * e, 199 * e, 275 * e, 213 * e, 261 * e, 220 * e),
       o.bezierCurveTo(246 * e, 225 * e, 235 * e, 200 * e, 257 * e, 199 * e),
       o.closePath(),
       se(o, i[5]),
       o.translate(-5 * e, 55 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(186 * e, 123 * e),
       o.bezierCurveTo(198 * e, 115 * e, 219 * e, 110 * e, 219 * e, 123 * e),
       o.bezierCurveTo(216 * e, 135 * e, 171 * e, 143 * e, 186 * e, 123 * e),
       o.closePath(),
       se(o, i[5]),
       o.translate(5 * e, -55 * e),
       o.translate(-5 * e, 15 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(171 * e, 241 * e),
       o.bezierCurveTo(189 * e, 234 * e, 200 * e, 248 * e, 189 * e, 254 * e),
       o.bezierCurveTo(179 * e, 260 * e, 158 * e, 246 * e, 171 * e, 241 * e),
       o.closePath(),
       se(o, i[5]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(367 * e, 164 * e),
       o.bezierCurveTo(380 * e, 160 * e, 391 * e, 185 * e, 371 * e, 189 * e),
       o.bezierCurveTo(362 * e, 192 * e, 354 * e, 191 * e, 350 * e, 185 * e),
       o.bezierCurveTo(326 * e, 205 * e, 314 * e, 182 * e, 316 * e, 171 * e),
       o.bezierCurveTo(317 * e, 150 * e, 332 * e, 143 * e, 347 * e, 147 * e),
       o.bezierCurveTo(361 * e, 151 * e, 366 * e, 158 * e, 367 * e, 164 * e),
       o.closePath(),
       se(o, i[4])),
       n
   }
   function li(e, i, t, r) {
       var n = document.createElement("canvas")
         , o = n.getContext("2d");
       return n.width = 121 * e,
       n.height = 130 * e,
       o.translate(0, 20 * e),
       1 == t && (o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(6 * e, 23 * e),
       o.bezierCurveTo(6 * e, 46 * e, 6 * e, 46 * e, 6 * e, 69 * e),
       o.bezierCurveTo(21 * e, 69 * e, 21 * e, 69 * e, 36 * e, 69 * e),
       o.bezierCurveTo(45.5 * e, 78.5 * e, 45.5 * e, 78.5 * e, 55 * e, 88 * e),
       o.bezierCurveTo(55.5 * e, 45.5 * e, 55.5 * e, 45.5 * e, 56 * e, 3 * e),
       o.bezierCurveTo(47 * e, 14 * e, 47 * e, 14 * e, 38 * e, 25 * e),
       o.bezierCurveTo(23 * e, 25 * e, 23 * e, 25 * e, 6 * e, 23 * e),
       o.closePath(),
       se(o, void 0, i[3], 13 * e)),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(6 * e, 23 * e),
       o.bezierCurveTo(6 * e, 46 * e, 6 * e, 46 * e, 6 * e, 69 * e),
       o.bezierCurveTo(21 * e, 69 * e, 21 * e, 69 * e, 36 * e, 69 * e),
       o.bezierCurveTo(45.5 * e, 78.5 * e, 45.5 * e, 78.5 * e, 55 * e, 88 * e),
       o.bezierCurveTo(55.5 * e, 45.5 * e, 55.5 * e, 45.5 * e, 56 * e, 3 * e),
       o.bezierCurveTo(47 * e, 14 * e, 47 * e, 14 * e, 38 * e, 25 * e),
       o.bezierCurveTo(23 * e, 25 * e, 23 * e, 25 * e, 6 * e, 23 * e),
       o.closePath(),
       se(o, i[1], i[2], 4 * e),
       1 == r ? (o.translate(0, 5 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(67 * e, 30 * e),
       o.bezierCurveTo(73 * e, 47 * e, 69 * e, 45 * e, 67 * e, 58 * e),
       se(o, void 0, i[0], 10 * e),
       o.translate(3, 0 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(70 * e, 17 * e),
       o.bezierCurveTo(83 * e, 45 * e, 76 * e, 55 * e, 70 * e, 69 * e),
       se(o, void 0, i[0], 10 * e),
       o.translate(3, 0 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(76 * e, 8 * e),
       o.bezierCurveTo(88 * e, 31 * e, 89 * e, 55 * e, 76 * e, 79 * e),
       se(o, void 0, i[0], 10 * e),
       1 == t ? (o.translate(-6 * e, -5 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(67 * e, 30 * e),
       o.bezierCurveTo(73 * e, 47 * e, 69 * e, 45 * e, 67 * e, 58 * e),
       se(o, void 0, i[3], 18 * e),
       o.translate(3, 0 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(70 * e, 17 * e),
       o.bezierCurveTo(83 * e, 45 * e, 76 * e, 55 * e, 70 * e, 69 * e),
       se(o, void 0, i[3], 18 * e),
       o.translate(3, 0 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(76 * e, 8 * e),
       o.bezierCurveTo(88 * e, 31 * e, 89 * e, 55 * e, 76 * e, 79 * e),
       se(o, void 0, i[3], 18 * e),
       o.translate(-6, 0 * e)) : o.translate(-6 * e, -5 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(67 * e, 30 * e),
       o.bezierCurveTo(73 * e, 47 * e, 69 * e, 45 * e, 67 * e, 58 * e),
       se(o, void 0, i[2], 10 * e),
       o.translate(3, 0 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(70 * e, 17 * e),
       o.bezierCurveTo(83 * e, 45 * e, 76 * e, 55 * e, 70 * e, 69 * e),
       se(o, void 0, i[2], 10 * e),
       o.translate(3, 0 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(76 * e, 8 * e),
       o.bezierCurveTo(88 * e, 31 * e, 89 * e, 55 * e, 76 * e, 79 * e),
       se(o, void 0, i[2], 10 * e)) : (1 == t ? (o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(108 * e, 27 * e),
       o.bezierCurveTo(94 * e, 45.5 * e, 94 * e, 45.5 * e, 80 * e, 64 * e),
       o.closePath(),
       se(o, void 0, i[3], 18 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(79 * e, 30 * e),
       o.bezierCurveTo(93 * e, 47 * e, 93 * e, 47 * e, 107 * e, 64 * e),
       o.closePath(),
       se(o, void 0, i[3], 18 * e)) : (o.translate(0, -5 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(108 * e, 27 * e),
       o.bezierCurveTo(94 * e, 45.5 * e, 94 * e, 45.5 * e, 80 * e, 64 * e),
       o.closePath(),
       se(o, void 0, i[0], 7 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(79 * e, 30 * e),
       o.bezierCurveTo(93 * e, 47 * e, 93 * e, 47 * e, 107 * e, 64 * e),
       o.closePath(),
       se(o, void 0, i[0], 7 * e),
       o.translate(0, 5 * e)),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(108 * e, 27 * e),
       o.bezierCurveTo(94 * e, 45.5 * e, 94 * e, 45.5 * e, 80 * e, 64 * e),
       o.closePath(),
       se(o, void 0, i[2], 7 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(79 * e, 30 * e),
       o.bezierCurveTo(93 * e, 47 * e, 93 * e, 47 * e, 107 * e, 64 * e),
       o.closePath(),
       se(o, void 0, i[2], 7 * e)),
       n
   }
   function Ni() {
       document.createElement("canvas").getContext("2d").rotate(Math.PI / 2)
   }
   function Ci(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = (u = 450 * e) / 2
         , a = (h = 145 * e) / 2
         , s = 10 * e
         , T = 300 * e
         , I = 30 * e
         , E = T / 2
         , _ = I / 2;
       if (t) {
           var u = 145 * e
             , h = 450 * e;
           r.width = u,
           r.height = h,
           n.rotate(Math.PI / 2),
           n.save(),
           n.globalAlpha = .5,
           Te(n, 100 * e, -110 * e, T, I, s),
           se(n, i[0]),
           n.translate(178 * e, -98 * e),
           Te(n, -E, -_ - 6 * e, 100 * e, 100 * e, s),
           se(n, i[0]),
           n.translate(-50 * e, 5 * e),
           Te(n, 220 * e, -15 * e, 90 * e, 90 * e, s),
           se(n, i[0]),
           n.restore(),
           n.save(),
           n.globalAlpha = 1,
           n.translate(250 * e, -63 * e),
           Te(n, -E - 20 * e, -_, T, I, s),
           se(n, i[1], i[2], 4),
           n.translate(-70 * e, -40 * e),
           Te(n, -E - 20 * e, -_, 100 * e, 100 * e, s),
           se(n, i[3], i[4], 4),
           n.translate(-70 * e, 15 * e),
           Te(n, 220 * e, -22 * e, 90 * e, 90 * e, s),
           se(n, i[3], i[4], 4),
           Te(n, 230 * e, -12 * e, 55 * e, 55 * e, s),
           se(n, i[5]),
           n.translate(-70 * e, 0),
           Te(n, -15 * e, -2 * e, 60 * e, 60 * e, s),
           se(n, i[5]),
           n.restore()
       } else
           r.width = u,
           r.height = h,
           n.save(),
           n.globalAlpha = .5,
           n.translate(o, a + 10 * e),
           Te(n, -E, -_, T, I, s),
           se(n, i[0]),
           n.translate(-65 * e, -25 * e),
           Te(n, -E, -_ - 6 * e, 100 * e, 100 * e, 15 * e),
           se(n, i[0]),
           n.translate(-35 * e, -5 * e),
           Te(n, 220 * e, -15 * e, 90 * e, 90 * e, 15 * e),
           se(n, i[0]),
           n.restore(),
           n.save(),
           n.globalAlpha = 1,
           n.translate(240 * e, 70 * e),
           Te(n, -E, -_, T, I, s),
           se(n, i[1], i[2], 4),
           n.translate(-60 * e, -40 * e),
           Te(n, -E - 20 * e, -_, 100 * e, 100 * e, 15 * e),
           se(n, i[3], i[4], 4),
           n.translate(-55 * e, 10 * e),
           Te(n, 220 * e, -22 * e, 90 * e, 90 * e, 15 * e),
           se(n, i[3], i[4], 4),
           Te(n, 240 * e, -12 * e, 55 * e, 55 * e, 12 * e),
           se(n, i[5]),
           n.translate(45 * e, 0 * e),
           Te(n, -145 * e, -2 * e, 60 * e, 60 * e, 12 * e),
           se(n, i[5]),
           n.restore();
       return r
   }
   function gi(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d")
         , n = Math.max(i.width, e.width)
         , o = Math.max(i.height, e.height);
       return t.width = n,
       t.height = o,
       r.drawImage(e, (n - e.width) / 2, (o - e.height) / 2),
       r.drawImage(i, (n - i.width) / 2, (o - i.height) / 2),
       t
   }
   function bi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 105 * e
         , a = 125 * e
         , s = 4 * e
         , T = 10 * e
         , I = 5 * e
         , E = 10 * e
         , _ = 110 * e
         , u = E / 2
         , h = _ / 2;
       return r.width = o,
       r.height = a,
       n.save(),
       n.globalAlpha = i ? .5 : 1,
       n.translate(o / 2 + 8 * e, a / 2 + I),
       Te(n, -u, -h, E, _, T),
       se(n, i ? t[0] : t[1]),
       n.translate(-130 * e + I, -128 * e + I),
       n.beginPath(),
       n.bezierCurveTo(159 * e, 93 * e, 156 * e, 99 * e, 154 * e, 102 * e),
       n.bezierCurveTo(128 * e, 92 * e, 90 * e, 93 * e, 72 * e, 96 * e),
       n.bezierCurveTo(68 * e, 84 * e, 143 * e, 73 * e, 162 * e, 86 * e),
       n.closePath(),
       se(n, t[2]),
       n.restore(),
       n.translate(o / 2 + 8, a / 2),
       n.globalAlpha = 1,
       Te(n, -u, -h, E, _, T),
       se(n, t[3], t[4], s),
       n.translate(-130 * e, -125 * e),
       n.beginPath(),
       n.bezierCurveTo(159 * e, 93 * e, 156 * e, 99 * e, 154 * e, 102 * e),
       n.bezierCurveTo(128 * e, 92 * e, 90 * e, 93 * e, 72 * e, 96 * e),
       n.bezierCurveTo(68 * e, 84 * e, 143 * e, 73 * e, 162 * e, 86 * e),
       n.closePath(),
       se(n, t[5], t[6], s),
       r
   }
   function Oi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 170 * e,
       r.height = 469 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(20 * e, 20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(88 * e, 30 * e),
       n.bezierCurveTo(96 * e, 49.5 * e, 96 * e, 49.5 * e, 104 * e, 69 * e),
       n.bezierCurveTo(105.5 * e, 41.5 * e, 105.5 * e, 41.5 * e, 107 * e, 14 * e),
       n.bezierCurveTo(114 * e, 9.5 * e, 114 * e, 9.5 * e, 121 * e, 5 * e),
       n.bezierCurveTo(135.5 * e, 27.5 * e, 135.5 * e, 27.5 * e, 150 * e, 50 * e),
       n.bezierCurveTo(110.5 * e, 286 * e, 110.5 * e, 286 * e, 103 * e, 331 * e),
       n.bezierCurveTo(69.5 * e, 325 * e, 69.5 * e, 325 * e, 36 * e, 319 * e),
       n.bezierCurveTo(56.5 * e, 180 * e, 56.5 * e, 180 * e, 77 * e, 41 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(118 * e, 31 * e),
       n.bezierCurveTo(125 * e, 43 * e, 125 * e, 43 * e, 132 * e, 55 * e),
       n.bezierCurveTo(109.5 * e, 185.5 * e, 109.5 * e, 185.5 * e, 87 * e, 316 * e),
       n.bezierCurveTo(72 * e, 313.5 * e, 72 * e, 313.5 * e, 57 * e, 311 * e),
       n.bezierCurveTo(76.5 * e, 181 * e, 76.5 * e, 181 * e, 96 * e, 51 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(56 * e, 328 * e),
       n.bezierCurveTo(47 * e, 385.5 * e, 47 * e, 385.5 * e, 38 * e, 443 * e),
       n.bezierCurveTo(52 * e, 446 * e, 52 * e, 446 * e, 66 * e, 449 * e),
       n.bezierCurveTo(76.5 * e, 388.5 * e, 76.5 * e, 388.5 * e, 87 * e, 328 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(74 * e, 302 * e),
       n.bezierCurveTo(104 * e, 316.5 * e, 104 * e, 316.5 * e, 134 * e, 331 * e),
       n.bezierCurveTo(133 * e, 341 * e, 133 * e, 341 * e, 132 * e, 351 * e),
       n.bezierCurveTo(69.5 * e, 342 * e, 69.5 * e, 342 * e, 7 * e, 333 * e),
       n.bezierCurveTo(8 * e, 323 * e, 8 * e, 323 * e, 9 * e, 313 * e),
       n.closePath(),
       se(n, t[0]),
       n.save(),
       n.translate(51.5 * e, 440.5 * e),
       n.rotate(.2),
       Te(n, -20.5 * e, -18.5 * e, 41 * e, 37 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(73 * e, 316 * e),
       n.bezierCurveTo(90 * e, 324.5 * e, 90 * e, 324.5 * e, 107 * e, 333 * e),
       n.bezierCurveTo(70 * e, 327.5 * e, 70 * e, 327.5 * e, 33 * e, 322 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-20 * e, -20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(88 * e, 30 * e),
       n.bezierCurveTo(96 * e, 49.5 * e, 96 * e, 49.5 * e, 104 * e, 69 * e),
       n.bezierCurveTo(105.5 * e, 41.5 * e, 105.5 * e, 41.5 * e, 107 * e, 14 * e),
       n.bezierCurveTo(114 * e, 9.5 * e, 114 * e, 9.5 * e, 121 * e, 5 * e),
       n.bezierCurveTo(135.5 * e, 27.5 * e, 135.5 * e, 27.5 * e, 150 * e, 50 * e),
       n.bezierCurveTo(110.5 * e, 286 * e, 110.5 * e, 286 * e, 103 * e, 331 * e),
       n.bezierCurveTo(69.5 * e, 325 * e, 69.5 * e, 325 * e, 36 * e, 319 * e),
       n.bezierCurveTo(56.5 * e, 180 * e, 56.5 * e, 180 * e, 77 * e, 41 * e),
       n.closePath(),
       se(n, t[1], t[2], 7 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(118 * e, 31 * e),
       n.bezierCurveTo(125 * e, 43 * e, 125 * e, 43 * e, 132 * e, 55 * e),
       n.bezierCurveTo(109.5 * e, 185.5 * e, 109.5 * e, 185.5 * e, 87 * e, 316 * e),
       n.bezierCurveTo(72 * e, 313.5 * e, 72 * e, 313.5 * e, 57 * e, 311 * e),
       n.bezierCurveTo(76.5 * e, 181 * e, 76.5 * e, 181 * e, 96 * e, 51 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(88 * e, 30 * e),
       n.bezierCurveTo(96 * e, 49.5 * e, 96 * e, 49.5 * e, 104 * e, 69 * e),
       n.bezierCurveTo(105.5 * e, 41.5 * e, 105.5 * e, 41.5 * e, 107 * e, 14 * e),
       n.bezierCurveTo(114 * e, 9.5 * e, 114 * e, 9.5 * e, 121 * e, 5 * e),
       n.bezierCurveTo(135.5 * e, 27.5 * e, 135.5 * e, 27.5 * e, 150 * e, 50 * e),
       n.bezierCurveTo(110.5 * e, 286 * e, 110.5 * e, 286 * e, 103 * e, 331 * e),
       n.bezierCurveTo(69.5 * e, 325 * e, 69.5 * e, 325 * e, 36 * e, 319 * e),
       n.bezierCurveTo(56.5 * e, 180 * e, 56.5 * e, 180 * e, 77 * e, 41 * e),
       n.closePath(),
       se(n, void 0, t[2], 7 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(56 * e, 328 * e),
       n.bezierCurveTo(47 * e, 385.5 * e, 47 * e, 385.5 * e, 38 * e, 443 * e),
       n.bezierCurveTo(52 * e, 446 * e, 52 * e, 446 * e, 66 * e, 449 * e),
       n.bezierCurveTo(76.5 * e, 388.5 * e, 76.5 * e, 388.5 * e, 87 * e, 328 * e),
       n.closePath(),
       se(n, t[4], t[5], 7 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(74 * e, 302 * e),
       n.bezierCurveTo(104 * e, 316.5 * e, 104 * e, 316.5 * e, 134 * e, 331 * e),
       n.bezierCurveTo(133 * e, 341 * e, 133 * e, 341 * e, 132 * e, 351 * e),
       n.bezierCurveTo(69.5 * e, 342 * e, 69.5 * e, 342 * e, 7 * e, 333 * e),
       n.bezierCurveTo(8 * e, 323 * e, 8 * e, 323 * e, 9 * e, 313 * e),
       n.closePath(),
       se(n, t[4], t[5], 7 * e),
       n.save(),
       n.translate(51.5 * e, 440.5 * e),
       n.rotate(.2),
       Te(n, -20.5 * e, -18.5 * e, 41 * e, 37 * e, 10 * e),
       n.restore(),
       se(n, t[4], t[5], 7 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(73 * e, 316 * e),
       n.bezierCurveTo(90 * e, 324.5 * e, 90 * e, 324.5 * e, 107 * e, 333 * e),
       n.bezierCurveTo(70 * e, 327.5 * e, 70 * e, 327.5 * e, 33 * e, 322 * e),
       n.closePath(),
       se(n, t[6]),
       r
   }
   function pi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 424 * e,
       r.height = 788 * e,
       n.translate(25 * e, 25 * e),
       n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(193.5 * e, 602.5 * e),
       n.rotate(-.12),
       Te(n, -26.5 * e, -97.5 * e, 53 * e, 195 * e, 25 * e),
       n.restore(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(137 * e, 519 * e),
       n.bezierCurveTo(182 * e, 513 * e, 182 * e, 513 * e, 227 * e, 507 * e),
       n.bezierCurveTo(214 * e, 417 * e, 189 * e, 304 * e, 221 * e, 180 * e),
       n.bezierCurveTo(191 * e, 126 * e, 192 * e, 105 * e, 198 * e, 64 * e),
       n.bezierCurveTo(123 * e, 102 * e, 99 * e, 285 * e, 137 * e, 517 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(175 * e, 119 * e),
       n.bezierCurveTo(176 * e, 142 * e, 184 * e, 165 * e, 197 * e, 183 * e),
       n.bezierCurveTo(167 * e, 325 * e, 191 * e, 405 * e, 202 * e, 502 * e),
       n.bezierCurveTo(180 * e, 503 * e, 180 * e, 503 * e, 158 * e, 504 * e),
       n.bezierCurveTo(135 * e, 396 * e, 134 * e, 185 * e, 175 * e, 119 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(110 * e, 518 * e),
       n.bezierCurveTo(111.5 * e, 533 * e, 111.5 * e, 533 * e, 113 * e, 548 * e),
       n.bezierCurveTo(162.5 * e, 544 * e, 162.5 * e, 544 * e, 212 * e, 540 * e),
       n.bezierCurveTo(312 * e, 535 * e, 281 * e, 665 * e, 225 * e, 665 * e),
       n.bezierCurveTo(227 * e, 686.5 * e, 227 * e, 686.5 * e, 229 * e, 708 * e),
       n.bezierCurveTo(343 * e, 684 * e, 354 * e, 496 * e, 222 * e, 498 * e),
       n.bezierCurveTo(165.5 * e, 503 * e, 165.5 * e, 503 * e, 109 * e, 508 * e),
       n.closePath(),
       se(n, t[0]),
       Ee(n, 204 * e, 693 * e, 36.013886210738214 * e),
       se(n, t[0]),
       Ee(n, 105 * e, 518 * e, 30 * e),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(171 * e, 535 * e),
       n.bezierCurveTo(139.5 * e, 537.5 * e, 139.5 * e, 537.5 * e, 108 * e, 540 * e),
       n.bezierCurveTo(110 * e, 527.5 * e, 110 * e, 527.5 * e, 112 * e, 515 * e),
       n.bezierCurveTo(148 * e, 513 * e, 148 * e, 513 * e, 184 * e, 511 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(244 * e, 669 * e),
       n.bezierCurveTo(248.5 * e, 680 * e, 248.5 * e, 680 * e, 253 * e, 691 * e),
       n.bezierCurveTo(239.5 * e, 697 * e, 239.5 * e, 697 * e, 226 * e, 703 * e),
       n.bezierCurveTo(223 * e, 691.5 * e, 223 * e, 691.5 * e, 220 * e, 680 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(-25 * e, -25 * e),
       n.globalAlpha = 1,
       n.save(),
       n.translate(193.5 * e, 602.5 * e),
       n.rotate(-.12),
       Te(n, -26.5 * e, -97.5 * e, 53 * e, 195 * e, 25 * e),
       n.restore(),
       se(n, t[1], t[2], 16 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(137 * e, 519 * e),
       n.bezierCurveTo(182 * e, 513 * e, 182 * e, 513 * e, 227 * e, 507 * e),
       n.bezierCurveTo(214 * e, 417 * e, 189 * e, 304 * e, 221 * e, 180 * e),
       n.bezierCurveTo(191 * e, 126 * e, 192 * e, 105 * e, 198 * e, 64 * e),
       n.bezierCurveTo(123 * e, 102 * e, 99 * e, 285 * e, 137 * e, 517 * e),
       n.closePath(),
       se(n, t[3], t[4], 16 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(175 * e, 119 * e),
       n.bezierCurveTo(176 * e, 142 * e, 184 * e, 165 * e, 197 * e, 183 * e),
       n.bezierCurveTo(167 * e, 325 * e, 191 * e, 405 * e, 202 * e, 502 * e),
       n.bezierCurveTo(180 * e, 503 * e, 180 * e, 503 * e, 158 * e, 504 * e),
       n.bezierCurveTo(135 * e, 396 * e, 134 * e, 185 * e, 175 * e, 119 * e),
       n.closePath(),
       se(n, t[5]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(110 * e, 518 * e),
       n.bezierCurveTo(111.5 * e, 533 * e, 111.5 * e, 533 * e, 113 * e, 548 * e),
       n.bezierCurveTo(162.5 * e, 544 * e, 162.5 * e, 544 * e, 212 * e, 540 * e),
       n.bezierCurveTo(312 * e, 535 * e, 281 * e, 665 * e, 225 * e, 665 * e),
       n.bezierCurveTo(227 * e, 686.5 * e, 227 * e, 686.5 * e, 229 * e, 708 * e),
       n.bezierCurveTo(343 * e, 684 * e, 354 * e, 496 * e, 222 * e, 498 * e),
       n.bezierCurveTo(165.5 * e, 503 * e, 165.5 * e, 503 * e, 109 * e, 508 * e),
       n.closePath(),
       se(n, t[6], t[4], 16 * e),
       Ee(n, 204 * e, 693 * e, 36.013886210738214 * e),
       se(n, t[6], t[4], 16 * e),
       Ee(n, 105 * e, 518 * e, 30 * e),
       se(n, t[6], t[4], 16 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(171 * e, 535 * e),
       n.bezierCurveTo(139.5 * e, 537.5 * e, 139.5 * e, 537.5 * e, 108 * e, 540 * e),
       n.bezierCurveTo(110 * e, 527.5 * e, 110 * e, 527.5 * e, 112 * e, 515 * e),
       n.bezierCurveTo(148 * e, 513 * e, 148 * e, 513 * e, 184 * e, 511 * e),
       n.closePath(),
       se(n, t[6]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(244 * e, 669 * e),
       n.bezierCurveTo(248.5 * e, 680 * e, 248.5 * e, 680 * e, 253 * e, 691 * e),
       n.bezierCurveTo(239.5 * e, 697 * e, 239.5 * e, 697 * e, 226 * e, 703 * e),
       n.bezierCurveTo(223 * e, 691.5 * e, 223 * e, 691.5 * e, 220 * e, 680 * e),
       n.closePath(),
       se(n, t[6]),
       Ee(n, 204 * e, 693 * e, 17.029386365926403 * e),
       se(n, t[7]),
       Ee(n, 106 * e, 518 * e, 12 * e),
       se(n, t[7]),
       r
   }
   function ci(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 100 * e,
       r.height = 250 * e,
       n.translate(-135 * e, -75 * e),
       n.globalAlpha = i ? .8 : 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(178.5 * e, 238.03125 * e),
       n.bezierCurveTo(177 * e, 175.03125 * e, 177 * e, 175.03125 * e, 175.5 * e, 112.03125 * e),
       n.bezierCurveTo(184.5 * e, 100.53125 * e, 184.5 * e, 100.53125 * e, 193.5 * e, 89.03125 * e),
       n.bezierCurveTo(202 * e, 100.03125 * e, 202 * e, 100.03125 * e, 210.5 * e, 111.03125 * e),
       n.bezierCurveTo(209.5 * e, 174.03125 * e, 209.5 * e, 174.03125 * e, 208.5 * e, 237.03125 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(155.5 * e, 239.03125 * e),
       n.bezierCurveTo(194 * e, 238.53125 * e, 194 * e, 238.53125 * e, 232.5 * e, 238.03125 * e),
       n.bezierCurveTo(232.5 * e, 243.03125 * e, 232.5 * e, 243.03125 * e, 232.5 * e, 248.03125 * e),
       n.bezierCurveTo(194 * e, 248.53125 * e, 194 * e, 248.53125 * e, 155.5 * e, 249.03125 * e),
       n.closePath(),
       se(n, t[0]),
       Ee(n, 160.5 * e, 243.03125 * e, 7 * e),
       se(n, t[0]),
       Ee(n, 227.5 * e, 242.03125 * e, 7 * e),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(185.5 * e, 253.03125 * e),
       n.bezierCurveTo(193.5 * e, 253.03125 * e, 193.5 * e, 253.03125 * e, 201.5 * e, 253.03125 * e),
       n.bezierCurveTo(201.5 * e, 276.03125 * e, 201.5 * e, 276.03125 * e, 201.5 * e, 299.03125 * e),
       n.bezierCurveTo(194.5 * e, 299.03125 * e, 194.5 * e, 299.03125 * e, 187.5 * e, 299.03125 * e),
       n.closePath(),
       se(n, t[0], t[0], 5 * e),
       Ee(n, 194 * e, 298 * e, 9 * e),
       se(n, t[0], t[0], 5 * e),
       n.globalAlpha = 1,
       n.translate(-10 * e, 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(178.5 * e, 238.03125 * e),
       n.bezierCurveTo(177 * e, 175.03125 * e, 177 * e, 175.03125 * e, 175.5 * e, 112.03125 * e),
       n.bezierCurveTo(184.5 * e, 100.53125 * e, 184.5 * e, 100.53125 * e, 193.5 * e, 89.03125 * e),
       n.bezierCurveTo(202 * e, 100.03125 * e, 202 * e, 100.03125 * e, 210.5 * e, 111.03125 * e),
       n.bezierCurveTo(209.5 * e, 174.03125 * e, 209.5 * e, 174.03125 * e, 208.5 * e, 237.03125 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(155.5 * e, 239.03125 * e),
       n.bezierCurveTo(194 * e, 238.53125 * e, 194 * e, 238.53125 * e, 232.5 * e, 238.03125 * e),
       n.bezierCurveTo(232.5 * e, 243.03125 * e, 232.5 * e, 243.03125 * e, 232.5 * e, 248.03125 * e),
       n.bezierCurveTo(194 * e, 248.53125 * e, 194 * e, 248.53125 * e, 155.5 * e, 249.03125 * e),
       n.closePath(),
       se(n, t[1], t[2], 5 * e),
       Ee(n, 160.5 * e, 243.03125 * e, 7 * e),
       se(n, t[1], t[2], 5 * e),
       Ee(n, 227.5 * e, 242.03125 * e, 7 * e),
       se(n, t[1], t[2], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(185.5 * e, 253.03125 * e),
       n.bezierCurveTo(193.5 * e, 253.03125 * e, 193.5 * e, 253.03125 * e, 201.5 * e, 253.03125 * e),
       n.bezierCurveTo(201.5 * e, 276.03125 * e, 201.5 * e, 276.03125 * e, 201.5 * e, 299.03125 * e),
       n.bezierCurveTo(194.5 * e, 299.03125 * e, 194.5 * e, 299.03125 * e, 187.5 * e, 299.03125 * e),
       n.closePath(),
       se(n, t[1], t[2], 7 * e),
       Ee(n, 194 * e, 298 * e, 9 * e),
       se(n, t[1], t[2], 7 * e),
       r
   }
   function vi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 290 * e,
       r.height = 525 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(20 * e, 20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(111 * e, 351 * e),
       n.bezierCurveTo(129 * e, 218 * e, 129 * e, 218 * e, 147 * e, 85 * e),
       n.bezierCurveTo(167 * e, 65.5 * e, 167 * e, 65.5 * e, 187 * e, 46 * e),
       n.bezierCurveTo(201.5 * e, 70.5 * e, 201.5 * e, 70.5 * e, 216 * e, 95 * e),
       n.bezierCurveTo(194.5 * e, 227.5 * e, 194.5 * e, 227.5 * e, 173 * e, 360 * e),
       n.closePath(),
       se(n, t[0]),
       n.save(),
       n.translate(131 * e, 425.5 * e),
       n.rotate(.16),
       Te(n, -14 * e, -56.5 * e, 28 * e, 113 * e, 8 * e),
       n.restore(),
       se(n, t[0]),
       Ee(n, 122 * e, 480 * e, 18.439088914585774 * e),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(79 * e, 371 * e),
       n.bezierCurveTo(131 * e, 373 * e, 145 * e, 378 * e, 197 * e, 388 * e),
       n.bezierCurveTo(205 * e, 382.5 * e, 205 * e, 382.5 * e, 213 * e, 377 * e),
       n.bezierCurveTo(167 * e, 352 * e, 117 * e, 345 * e, 69 * e, 355 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-20 * e, -20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(111 * e, 351 * e),
       n.bezierCurveTo(129 * e, 218 * e, 129 * e, 218 * e, 147 * e, 85 * e),
       n.bezierCurveTo(167 * e, 65.5 * e, 167 * e, 65.5 * e, 187 * e, 46 * e),
       n.bezierCurveTo(201.5 * e, 70.5 * e, 201.5 * e, 70.5 * e, 216 * e, 95 * e),
       n.bezierCurveTo(194.5 * e, 227.5 * e, 194.5 * e, 227.5 * e, 173 * e, 360 * e),
       n.closePath(),
       se(n, t[1], t[2], 12.5 * e),
       n.save(),
       n.translate(131 * e, 425.5 * e),
       n.rotate(.16),
       Te(n, -14 * e, -56.5 * e, 28 * e, 113 * e, 8 * e),
       n.restore(),
       se(n, t[4], t[5], 12.5 * e),
       Ee(n, 122 * e, 480 * e, 18.439088914585774 * e),
       se(n, t[4], t[5], 12.5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(79 * e, 371 * e),
       n.bezierCurveTo(131 * e, 373 * e, 145 * e, 378 * e, 197 * e, 388 * e),
       n.bezierCurveTo(205 * e, 382.5 * e, 205 * e, 382.5 * e, 213 * e, 377 * e),
       n.bezierCurveTo(167 * e, 352 * e, 117 * e, 345 * e, 69 * e, 355 * e),
       n.closePath(),
       se(n, t[4], t[5], 12.5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(128 * e, 345 * e),
       n.bezierCurveTo(142 * e, 345 * e, 147 * e, 346 * e, 158 * e, 349 * e),
       n.bezierCurveTo(177.5 * e, 224.5 * e, 177.5 * e, 224.5 * e, 197 * e, 100 * e),
       n.bezierCurveTo(190.5 * e, 84.5 * e, 190.5 * e, 84.5 * e, 184 * e, 69 * e),
       n.bezierCurveTo(173.5 * e, 82 * e, 173.5 * e, 82 * e, 163 * e, 95 * e),
       n.closePath(),
       se(n, t[3]),
       r
   }
   function Pi(e, i, t, r) {
       var n = document.createElement("canvas")
         , o = n.getContext("2d");
       return n.width = 283 * e,
       n.height = 224 * e,
       o.translate(0, 15 * e),
       o.globalAlpha = .5,
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(93 * e, 55 * e),
       o.bezierCurveTo(127 * e, 27 * e, 195 * e, 42 * e, 213 * e, 78 * e),
       o.bezierCurveTo(254 * e, 134 * e, 226 * e, 198 * e, 153 * e, 197 * e),
       o.bezierCurveTo(59 * e, 204 * e, 56 * e, 158 * e, 51 * e, 115 * e),
       o.bezierCurveTo(50 * e, 93 * e, 81 * e, 62 * e, 90 * e, 57 * e),
       o.closePath(),
       se(o, t[0]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(100 * e, 33 * e),
       o.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e),
       o.closePath(),
       se(o, t[0]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(181 * e, 32 * e),
       o.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e),
       se(o, t[0]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(225 * e, 52 * e),
       o.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e),
       se(o, t[0]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(34 * e, 134 * e),
       o.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e),
       se(o, t[0]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(249 * e, 135 * e),
       o.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e),
       se(o, t[0]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(56 * e, 50 * e),
       o.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e),
       se(o, t[0]),
       o.translate(0, -15 * e),
       o.globalAlpha = 1,
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(100 * e, 33 * e),
       o.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e),
       se(o, void 0, t[2], 40 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(181 * e, 32 * e),
       o.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e),
       se(o, void 0, t[2], 40 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(225 * e, 52 * e),
       o.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e),
       se(o, void 0, t[2], 40 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(34 * e, 134 * e),
       o.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e),
       se(o, void 0, t[2], 40 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(249 * e, 135 * e),
       o.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e),
       se(o, void 0, t[2], 40 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(56 * e, 50 * e),
       o.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e),
       se(o, void 0, t[2], 40 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(93 * e, 55 * e),
       o.bezierCurveTo(127 * e, 27 * e, 195 * e, 42 * e, 213 * e, 78 * e),
       o.bezierCurveTo(254 * e, 134 * e, 226 * e, 198 * e, 153 * e, 197 * e),
       o.bezierCurveTo(59 * e, 204 * e, 56 * e, 158 * e, 51 * e, 115 * e),
       o.bezierCurveTo(50 * e, 93 * e, 81 * e, 62 * e, 90 * e, 57 * e),
       o.closePath(),
       se(o, t[1], t[2], 10 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(100 * e, 33 * e),
       o.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e),
       se(o, void 0, t[1], 20 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(181 * e, 32 * e),
       o.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e),
       se(o, void 0, t[1], 20 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(225 * e, 52 * e),
       o.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e),
       se(o, void 0, t[1], 20 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(34 * e, 134 * e),
       o.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e),
       se(o, void 0, t[1], 20 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(249 * e, 135 * e),
       o.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e),
       se(o, void 0, t[1], 20 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(56 * e, 50 * e),
       o.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e),
       se(o, void 0, t[1], 20 * e),
       Ee(o, 101 * e, 155 * e, 20.591260281974 * e),
       se(o, t[3]),
       Ee(o, 180 * e, 155 * e, 20.591260281974 * e),
       se(o, t[3]),
       Ee(o, 95 * e, 148 * e, 7.211102550927978 * e),
       se(o, t[4]),
       Ee(o, 173 * e, 148 * e, 7.211102550927978 * e),
       se(o, t[4]),
       1 === r && (o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(191 * e, 107 * e),
       o.bezierCurveTo(180 * e, 104 * e, 175 * e, 101 * e, 180 * e, 95 * e),
       o.bezierCurveTo(180 * e, 95 * e, 181 * e, 99 * e, 188 * e, 103 * e),
       o.bezierCurveTo(191 * e, 101 * e, 191 * e, 95 * e, 190 * e, 91 * e),
       o.bezierCurveTo(190 * e, 91 * e, 196 * e, 89 * e, 195 * e, 99 * e),
       o.closePath(),
       se(o, t[2]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(206 * e, 98 * e),
       o.bezierCurveTo(203 * e, 95 * e, 200 * e, 93 * e, 198 * e, 101 * e),
       o.bezierCurveTo(194 * e, 109 * e, 193 * e, 109 * e, 196 * e, 110 * e),
       o.bezierCurveTo(206 * e, 115 * e, 209 * e, 114 * e, 211 * e, 111 * e),
       o.bezierCurveTo(211 * e, 106 * e, 208 * e, 108 * e, 203 * e, 108 * e),
       o.bezierCurveTo(193 * e, 107 * e, 204 * e, 101 * e, 206 * e, 99 * e),
       o.closePath(),
       se(o, t[2]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(172 * e, 111 * e),
       o.bezierCurveTo(172 * e, 106 * e, 174 * e, 105 * e, 185 * e, 109 * e),
       o.bezierCurveTo(190 * e, 109 * e, 189 * e, 114 * e, 185 * e, 120 * e),
       o.bezierCurveTo(181 * e, 125 * e, 180 * e, 126 * e, 176 * e, 122 * e),
       o.bezierCurveTo(182 * e, 119 * e, 187 * e, 110 * e, 182 * e, 112 * e),
       o.closePath(),
       se(o, t[2]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(202 * e, 125 * e),
       o.bezierCurveTo(197 * e, 117 * e, 193 * e, 116 * e, 193 * e, 120 * e),
       o.bezierCurveTo(192.5 * e, 124.5 * e, 192.5 * e, 124.5 * e, 192 * e, 129 * e),
       o.bezierCurveTo(188 * e, 129 * e, 187 * e, 124 * e, 189 * e, 120 * e),
       o.bezierCurveTo(191 * e, 110 * e, 192 * e, 110 * e, 200 * e, 116 * e),
       o.bezierCurveTo(208 * e, 120 * e, 207 * e, 123 * e, 202 * e, 125 * e),
       o.closePath(),
       se(o, t[2])),
       n
   }
   function mi(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 283 * e,
       t.height = 224 * e,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(100 * e, 33 * e),
       r.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e),
       se(r, void 0, i[0], 40 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(181 * e, 32 * e),
       r.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e),
       se(r, void 0, i[0], 40 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(225 * e, 52 * e),
       r.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e),
       se(r, void 0, i[0], 40 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(34 * e, 134 * e),
       r.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e),
       se(r, void 0, i[0], 40 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(249 * e, 135 * e),
       r.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e),
       se(r, void 0, i[0], 40 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(56 * e, 50 * e),
       r.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e),
       se(r, void 0, i[0], 40 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(93 * e, 55 * e),
       r.bezierCurveTo(124 * e, 29 * e, 179 * e, 44 * e, 188 * e, 52 * e),
       r.bezierCurveTo(207 * e, 64 * e, 226 * e, 94 * e, 231 * e, 118 * e),
       r.bezierCurveTo(236 * e, 145 * e, 222 * e, 184 * e, 193 * e, 192 * e),
       r.bezierCurveTo(147 * e, 201 * e, 116 * e, 200 * e, 93 * e, 193 * e),
       r.bezierCurveTo(61 * e, 180 * e, 48 * e, 147 * e, 50 * e, 123 * e),
       r.bezierCurveTo(50 * e, 93 * e, 76 * e, 66 * e, 92 * e, 56 * e),
       r.closePath(),
       se(r, i[0]),
       t
   }
   function Di(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 131 * e,
       r.height = 121 * e,
       n.translate(0, 20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(110 * e, 59 * e),
       n.bezierCurveTo(93 * e, 61.5 * e, 93 * e, 61.5 * e, 76 * e, 64 * e),
       n.bezierCurveTo(84.5 * e, 78.5 * e, 84.5 * e, 78.5 * e, 93 * e, 93 * e),
       n.bezierCurveTo(70 * e, 111 * e, 43 * e, 103 * e, 30 * e, 82 * e),
       n.bezierCurveTo(17 * e, 61 * e, 25 * e, 30 * e, 51 * e, 21 * e),
       n.bezierCurveTo(66 * e, 15 * e, 83 * e, 18 * e, 96 * e, 29 * e),
       n.bezierCurveTo(104 * e, 35 * e, 109 * e, 47 * e, 110 * e, 58 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(110 * e, 59 * e),
       n.bezierCurveTo(93 * e, 61.5 * e, 93 * e, 61.5 * e, 76 * e, 64 * e),
       n.bezierCurveTo(84.5 * e, 78.5 * e, 84.5 * e, 78.5 * e, 93 * e, 93 * e),
       n.bezierCurveTo(70 * e, 111 * e, 43 * e, 103 * e, 30 * e, 82 * e),
       n.bezierCurveTo(17 * e, 61 * e, 25 * e, 30 * e, 51 * e, 21 * e),
       n.bezierCurveTo(66 * e, 15 * e, 83 * e, 18 * e, 96 * e, 29 * e),
       n.bezierCurveTo(104 * e, 35 * e, 109 * e, 47 * e, 110 * e, 58 * e),
       n.closePath(),
       se(n, t[1], t[2], 10 * e),
       r
   }
   function Mi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 104 * e,
       r.height = 112 * e,
       n.translate(0, 15 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(16 * e, 44 * e),
       n.bezierCurveTo(30.5 * e, 48 * e, 30.5 * e, 48 * e, 45 * e, 52 * e),
       n.bezierCurveTo(36.5 * e, 63 * e, 36.5 * e, 63 * e, 28 * e, 74 * e),
       n.bezierCurveTo(32 * e, 86 * e, 61 * e, 92 * e, 78 * e, 76 * e),
       n.bezierCurveTo(93 * e, 62 * e, 92 * e, 40 * e, 80 * e, 26 * e),
       n.bezierCurveTo(65 * e, 11 * e, 42 * e, 16 * e, 34 * e, 21 * e),
       n.bezierCurveTo(22 * e, 27 * e, 16 * e, 39 * e, 16 * e, 44 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -15 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(16 * e, 44 * e),
       n.bezierCurveTo(30.5 * e, 48 * e, 30.5 * e, 48 * e, 45 * e, 52 * e),
       n.bezierCurveTo(36.5 * e, 63 * e, 36.5 * e, 63 * e, 28 * e, 74 * e),
       n.bezierCurveTo(32 * e, 86 * e, 61 * e, 92 * e, 78 * e, 76 * e),
       n.bezierCurveTo(93 * e, 62 * e, 92 * e, 40 * e, 80 * e, 26 * e),
       n.bezierCurveTo(65 * e, 11 * e, 42 * e, 16 * e, 34 * e, 21 * e),
       n.bezierCurveTo(22 * e, 27 * e, 16 * e, 39 * e, 16 * e, 44 * e),
       n.closePath(),
       se(n, t[1], t[2], 8 * e),
       r
   }
   function Gi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 321 * e,
       r.height = 284 * e,
       n.translate(100 * e, 30 * e),
       n.translate(5 * e, 10 * e),
       n.globalAlpha = i ? .5 : 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(58 * e, 33 * e),
       n.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e),
       n.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e),
       n.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e),
       n.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e),
       n.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e),
       n.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(58 * e, 33 * e),
       n.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e),
       n.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e),
       n.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e),
       n.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e),
       n.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e),
       n.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e),
       n.closePath(),
       se(n, t[1], t[2], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(167 * e, 120 * e),
       n.bezierCurveTo(196 * e, 106 * e, 207 * e, 111 * e, 199 * e, 135 * e),
       n.bezierCurveTo(185 * e, 172 * e, 166 * e, 187 * e, 145 * e, 179 * e),
       n.bezierCurveTo(118 * e, 166 * e, 127 * e, 139 * e, 166 * e, 121 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(25 * e, 64 * e),
       n.bezierCurveTo(59 * e, 96 * e, 97 * e, 128 * e, 129 * e, 151 * e),
       n.bezierCurveTo(126 * e, 163 * e, 134 * e, 174 * e, 142 * e, 180 * e),
       n.bezierCurveTo(114 * e, 170 * e, 68 * e, 134 * e, 31 * e, 85 * e),
       n.bezierCurveTo(24 * e, 71 * e, 24 * e, 70 * e, 25 * e, 65 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(161 * e, 141 * e),
       n.bezierCurveTo(181 * e, 131 * e, 186 * e, 135 * e, 173 * e, 152 * e),
       n.bezierCurveTo(163 * e, 163 * e, 155 * e, 161 * e, 151 * e, 150 * e),
       n.bezierCurveTo(147 * e, 140 * e, 155 * e, 131 * e, 175 * e, 125 * e),
       n.bezierCurveTo(190 * e, 120 * e, 196 * e, 121 * e, 189 * e, 143 * e),
       n.bezierCurveTo(182 * e, 167 * e, 169 * e, 174 * e, 157 * e, 174 * e),
       n.bezierCurveTo(138 * e, 172 * e, 139 * e, 162 * e, 140 * e, 156 * e),
       se(n, void 0, t[4], 4 * e),
       n.translate(-100 * e, -30 * e),
       n.translate(10 * e, 70 * e),
       n.translate(5 * e, 10 * e),
       n.globalAlpha = i ? .5 : 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(58 * e, 33 * e),
       n.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e),
       n.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e),
       n.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e),
       n.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e),
       n.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e),
       n.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(58 * e, 33 * e),
       n.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e),
       n.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e),
       n.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e),
       n.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e),
       n.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e),
       n.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e),
       n.closePath(),
       se(n, t[1], t[2], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(167 * e, 120 * e),
       n.bezierCurveTo(196 * e, 106 * e, 207 * e, 111 * e, 199 * e, 135 * e),
       n.bezierCurveTo(185 * e, 172 * e, 166 * e, 187 * e, 145 * e, 179 * e),
       n.bezierCurveTo(118 * e, 166 * e, 127 * e, 139 * e, 166 * e, 121 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(25 * e, 64 * e),
       n.bezierCurveTo(59 * e, 96 * e, 97 * e, 128 * e, 129 * e, 151 * e),
       n.bezierCurveTo(126 * e, 163 * e, 134 * e, 174 * e, 142 * e, 180 * e),
       n.bezierCurveTo(114 * e, 170 * e, 68 * e, 134 * e, 31 * e, 85 * e),
       n.bezierCurveTo(24 * e, 71 * e, 24 * e, 70 * e, 25 * e, 65 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(161 * e, 141 * e),
       n.bezierCurveTo(181 * e, 131 * e, 186 * e, 135 * e, 173 * e, 152 * e),
       n.bezierCurveTo(163 * e, 163 * e, 155 * e, 161 * e, 151 * e, 150 * e),
       n.bezierCurveTo(147 * e, 140 * e, 155 * e, 131 * e, 175 * e, 125 * e),
       n.bezierCurveTo(190 * e, 120 * e, 196 * e, 121 * e, 189 * e, 143 * e),
       n.bezierCurveTo(182 * e, 167 * e, 169 * e, 174 * e, 157 * e, 174 * e),
       n.bezierCurveTo(138 * e, 172 * e, 139 * e, 162 * e, 140 * e, 156 * e),
       se(n, void 0, t[4], 4 * e),
       n.translate(20 * e, -80 * e),
       n.translate(5 * e, 10 * e),
       n.globalAlpha = i ? .5 : 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(58 * e, 33 * e),
       n.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e),
       n.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e),
       n.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e),
       n.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e),
       n.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e),
       n.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(58 * e, 33 * e),
       n.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e),
       n.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e),
       n.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e),
       n.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e),
       n.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e),
       n.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e),
       n.closePath(),
       se(n, t[1], t[2], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(167 * e, 120 * e),
       n.bezierCurveTo(196 * e, 106 * e, 207 * e, 111 * e, 199 * e, 135 * e),
       n.bezierCurveTo(185 * e, 172 * e, 166 * e, 187 * e, 145 * e, 179 * e),
       n.bezierCurveTo(118 * e, 166 * e, 127 * e, 139 * e, 166 * e, 121 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(25 * e, 64 * e),
       n.bezierCurveTo(59 * e, 96 * e, 97 * e, 128 * e, 129 * e, 151 * e),
       n.bezierCurveTo(126 * e, 163 * e, 134 * e, 174 * e, 142 * e, 180 * e),
       n.bezierCurveTo(114 * e, 170 * e, 68 * e, 134 * e, 31 * e, 85 * e),
       n.bezierCurveTo(24 * e, 71 * e, 24 * e, 70 * e, 25 * e, 65 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(161 * e, 141 * e),
       n.bezierCurveTo(181 * e, 131 * e, 186 * e, 135 * e, 173 * e, 152 * e),
       n.bezierCurveTo(163 * e, 163 * e, 155 * e, 161 * e, 151 * e, 150 * e),
       n.bezierCurveTo(147 * e, 140 * e, 155 * e, 131 * e, 175 * e, 125 * e),
       n.bezierCurveTo(190 * e, 120 * e, 196 * e, 121 * e, 189 * e, 143 * e),
       n.bezierCurveTo(182 * e, 167 * e, 169 * e, 174 * e, 157 * e, 174 * e),
       n.bezierCurveTo(138 * e, 172 * e, 139 * e, 162 * e, 140 * e, 156 * e),
       se(n, void 0, t[4], 4 * e),
       r
   }
   function Li(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 290 * e,
       r.height = 525 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(20 * e, 20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(111 * e, 351 * e),
       n.bezierCurveTo(128.5 * e, 218.5 * e, 128.5 * e, 218.5 * e, 146 * e, 86 * e),
       n.bezierCurveTo(166.5 * e, 66.5 * e, 166.5 * e, 66.5 * e, 187 * e, 47 * e),
       n.bezierCurveTo(201 * e, 71.5 * e, 201 * e, 71.5 * e, 215 * e, 96 * e),
       n.bezierCurveTo(193 * e, 228.5 * e, 193 * e, 228.5 * e, 171 * e, 361 * e),
       n.closePath(),
       se(n, t[0]),
       n.save(),
       n.translate(129.5 * e, 424 * e),
       n.rotate(.16),
       Te(n, -15.5 * e, -63 * e, 31 * e, 126 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       Ee(n, 121 * e, 480 * e, 20.396078054371138 * e),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(90 * e, 311 * e),
       n.bezierCurveTo(95 * e, 324 * e, 95 * e, 324 * e, 100 * e, 337 * e),
       n.bezierCurveTo(141.5 * e, 345.5 * e, 141.5 * e, 345.5 * e, 183 * e, 354 * e),
       n.bezierCurveTo(193.5 * e, 342.5 * e, 193.5 * e, 342.5 * e, 204 * e, 331 * e),
       n.bezierCurveTo(202 * e, 354 * e, 202 * e, 354 * e, 200 * e, 377 * e),
       n.bezierCurveTo(147 * e, 388 * e, 106 * e, 371 * e, 79 * e, 356 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-20 * e, -20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(111 * e, 351 * e),
       n.bezierCurveTo(128.5 * e, 218.5 * e, 128.5 * e, 218.5 * e, 146 * e, 86 * e),
       n.bezierCurveTo(166.5 * e, 66.5 * e, 166.5 * e, 66.5 * e, 187 * e, 47 * e),
       n.bezierCurveTo(201 * e, 71.5 * e, 201 * e, 71.5 * e, 215 * e, 96 * e),
       n.bezierCurveTo(193 * e, 228.5 * e, 193 * e, 228.5 * e, 171 * e, 361 * e),
       n.closePath(),
       se(n, t[1], t[2], 12.5 * e),
       n.save(),
       n.translate(129.5 * e, 424 * e),
       n.rotate(.16),
       Te(n, -15.5 * e, -63 * e, 31 * e, 126 * e, 10 * e),
       n.restore(),
       se(n, t[4], t[5], 12.5 * e),
       Ee(n, 121 * e, 480 * e, 20.396078054371138 * e),
       se(n, t[4], t[5], 12.5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(90 * e, 311 * e),
       n.bezierCurveTo(95 * e, 324 * e, 95 * e, 324 * e, 100 * e, 337 * e),
       n.bezierCurveTo(141.5 * e, 345.5 * e, 141.5 * e, 345.5 * e, 183 * e, 354 * e),
       n.bezierCurveTo(193.5 * e, 342.5 * e, 193.5 * e, 342.5 * e, 204 * e, 331 * e),
       n.bezierCurveTo(202 * e, 354 * e, 202 * e, 354 * e, 200 * e, 377 * e),
       n.bezierCurveTo(147 * e, 388 * e, 106 * e, 371 * e, 79 * e, 356 * e),
       n.closePath(),
       se(n, t[1], t[2], 12.5 * e),
       r
   }
   function fi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 290 * e,
       r.height = 525 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(20 * e, 20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(112 * e, 356 * e),
       n.bezierCurveTo(124 * e, 220.5 * e, 124 * e, 220.5 * e, 136 * e, 85 * e),
       n.bezierCurveTo(162.5 * e, 65.5 * e, 162.5 * e, 65.5 * e, 189 * e, 46 * e),
       n.bezierCurveTo(208.5 * e, 72.5 * e, 208.5 * e, 72.5 * e, 228 * e, 99 * e),
       n.bezierCurveTo(200 * e, 232 * e, 200 * e, 232 * e, 172 * e, 365 * e),
       n.closePath(),
       se(n, t[0]),
       n.save(),
       n.translate(131 * e, 423 * e),
       n.rotate(.16),
       Te(n, -14 * e, -53 * e, 28 * e, 106 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.save(),
       n.translate(122 * e, 480 * e),
       n.rotate(1.72),
       ue(n, 4, 26.476404589747453 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(210 * e, 387 * e),
       n.bezierCurveTo(138 * e, 376 * e, 138 * e, 376 * e, 66 * e, 365 * e),
       n.bezierCurveTo(76 * e, 355 * e, 76 * e, 355 * e, 86 * e, 345 * e),
       n.bezierCurveTo(99 * e, 346.5 * e, 99 * e, 346.5 * e, 112 * e, 348 * e),
       n.bezierCurveTo(128.5 * e, 344 * e, 128.5 * e, 344 * e, 145 * e, 340 * e),
       n.bezierCurveTo(158 * e, 348 * e, 158 * e, 348 * e, 171 * e, 356 * e),
       n.bezierCurveTo(184 * e, 358 * e, 184 * e, 358 * e, 197 * e, 360 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(129 * e, 338 * e),
       n.bezierCurveTo(137 * e, 336 * e, 137 * e, 336 * e, 145 * e, 334 * e),
       n.bezierCurveTo(152.5 * e, 338 * e, 152.5 * e, 338 * e, 160 * e, 342 * e),
       n.bezierCurveTo(184 * e, 224 * e, 184 * e, 224 * e, 208 * e, 106 * e),
       n.bezierCurveTo(197 * e, 88 * e, 187 * e, 70 * e, 186 * e, 70 * e),
       n.bezierCurveTo(169.5 * e, 83 * e, 169.5 * e, 83 * e, 153 * e, 96 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-20 * e, -20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(112 * e, 356 * e),
       n.bezierCurveTo(124 * e, 220.5 * e, 124 * e, 220.5 * e, 136 * e, 85 * e),
       n.bezierCurveTo(162.5 * e, 65.5 * e, 162.5 * e, 65.5 * e, 189 * e, 46 * e),
       n.bezierCurveTo(208.5 * e, 72.5 * e, 208.5 * e, 72.5 * e, 228 * e, 99 * e),
       n.bezierCurveTo(200 * e, 232 * e, 200 * e, 232 * e, 172 * e, 365 * e),
       n.closePath(),
       se(n, t[1], t[2], 12.5 * e),
       n.save(),
       n.translate(131 * e, 423 * e),
       n.rotate(.16),
       Te(n, -14 * e, -53 * e, 28 * e, 106 * e, 10 * e),
       n.restore(),
       se(n, t[4], t[5], 12.5 * e),
       n.save(),
       n.translate(122 * e, 480 * e),
       n.rotate(1.72),
       ue(n, 4, 26.476404589747453 * e, 10 * e),
       n.restore(),
       se(n, t[1], t[2], 12.5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(210 * e, 387 * e),
       n.bezierCurveTo(138 * e, 376 * e, 138 * e, 376 * e, 66 * e, 365 * e),
       n.bezierCurveTo(76 * e, 355 * e, 76 * e, 355 * e, 86 * e, 345 * e),
       n.bezierCurveTo(99 * e, 346.5 * e, 99 * e, 346.5 * e, 112 * e, 348 * e),
       n.bezierCurveTo(128.5 * e, 344 * e, 128.5 * e, 344 * e, 145 * e, 340 * e),
       n.bezierCurveTo(158 * e, 348 * e, 158 * e, 348 * e, 171 * e, 356 * e),
       n.bezierCurveTo(184 * e, 358 * e, 184 * e, 358 * e, 197 * e, 360 * e),
       n.closePath(),
       se(n, t[1], t[2], 12.5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(129 * e, 338 * e),
       n.bezierCurveTo(137 * e, 336 * e, 137 * e, 336 * e, 145 * e, 334 * e),
       n.bezierCurveTo(152.5 * e, 338 * e, 152.5 * e, 338 * e, 160 * e, 342 * e),
       n.bezierCurveTo(184 * e, 224 * e, 184 * e, 224 * e, 208 * e, 106 * e),
       n.bezierCurveTo(197 * e, 88 * e, 187 * e, 70 * e, 186 * e, 70 * e),
       n.bezierCurveTo(169.5 * e, 83 * e, 169.5 * e, 83 * e, 153 * e, 96 * e),
       n.closePath(),
       se(n, t[3]),
       r
   }
   function Vi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 290 * e,
       r.height = 525 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(20 * e, 20 * e),
       n.translate(-20 * e, -20 * e),
       n.save(),
       n.translate(132 * e, 423 * e),
       n.rotate(.16),
       Te(n, -14 * e, -61 * e, 28 * e, 122 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(100 * e, 344 * e),
       n.bezierCurveTo(123 * e, 214 * e, 123 * e, 214 * e, 146 * e, 84 * e),
       n.bezierCurveTo(166.5 * e, 65 * e, 166.5 * e, 65 * e, 187 * e, 46 * e),
       n.bezierCurveTo(201 * e, 71 * e, 201 * e, 71 * e, 215 * e, 96 * e),
       n.bezierCurveTo(199.5 * e, 226.5 * e, 199.5 * e, 226.5 * e, 184 * e, 357 * e),
       n.bezierCurveTo(162.5 * e, 362.5 * e, 162.5 * e, 362.5 * e, 141 * e, 368 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(75 * e, 328 * e),
       n.bezierCurveTo(88 * e, 336.5 * e, 88 * e, 336.5 * e, 101 * e, 345 * e),
       n.bezierCurveTo(123.5 * e, 337.5 * e, 123.5 * e, 337.5 * e, 146 * e, 330 * e),
       n.bezierCurveTo(165 * e, 343.5 * e, 165 * e, 343.5 * e, 184 * e, 357 * e),
       n.bezierCurveTo(198.5 * e, 353 * e, 198.5 * e, 353 * e, 213 * e, 349 * e),
       n.bezierCurveTo(200.5 * e, 364.5 * e, 200.5 * e, 364.5 * e, 188 * e, 380 * e),
       n.bezierCurveTo(163 * e, 380.5 * e, 163 * e, 380.5 * e, 138 * e, 381 * e),
       n.bezierCurveTo(112 * e, 373.5 * e, 112 * e, 373.5 * e, 86 * e, 366 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(121 * e, 332 * e),
       n.bezierCurveTo(133.5 * e, 327.5 * e, 133.5 * e, 327.5 * e, 146 * e, 323 * e),
       n.bezierCurveTo(157 * e, 330.5 * e, 157 * e, 330.5 * e, 168 * e, 338 * e),
       n.bezierCurveTo(182.5 * e, 219.5 * e, 182.5 * e, 219.5 * e, 197 * e, 101 * e),
       n.bezierCurveTo(190 * e, 84.5 * e, 190 * e, 84.5 * e, 183 * e, 68 * e),
       n.bezierCurveTo(172.5 * e, 81 * e, 172.5 * e, 81 * e, 162 * e, 94 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(105 * e, 463 * e),
       n.bezierCurveTo(124.5 * e, 466 * e, 124.5 * e, 466 * e, 144 * e, 469 * e),
       n.bezierCurveTo(145.5 * e, 478.5 * e, 145.5 * e, 478.5 * e, 147 * e, 488 * e),
       n.bezierCurveTo(133.5 * e, 495.5 * e, 133.5 * e, 495.5 * e, 120 * e, 503 * e),
       n.bezierCurveTo(108.5 * e, 492 * e, 108.5 * e, 492 * e, 97 * e, 481 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-20 * e, -20 * e),
       n.save(),
       n.translate(132 * e, 423 * e),
       n.rotate(.16),
       Te(n, -14 * e, -61 * e, 28 * e, 122 * e, 10 * e),
       n.restore(),
       se(n, t[4], t[5], 12.5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(100 * e, 344 * e),
       n.bezierCurveTo(123 * e, 214 * e, 123 * e, 214 * e, 146 * e, 84 * e),
       n.bezierCurveTo(166.5 * e, 65 * e, 166.5 * e, 65 * e, 187 * e, 46 * e),
       n.bezierCurveTo(201 * e, 71 * e, 201 * e, 71 * e, 215 * e, 96 * e),
       n.bezierCurveTo(199.5 * e, 226.5 * e, 199.5 * e, 226.5 * e, 184 * e, 357 * e),
       n.bezierCurveTo(162.5 * e, 362.5 * e, 162.5 * e, 362.5 * e, 141 * e, 368 * e),
       n.closePath(),
       se(n, t[1], t[2], 12.5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(75 * e, 328 * e),
       n.bezierCurveTo(88 * e, 336.5 * e, 88 * e, 336.5 * e, 101 * e, 345 * e),
       n.bezierCurveTo(123.5 * e, 337.5 * e, 123.5 * e, 337.5 * e, 146 * e, 330 * e),
       n.bezierCurveTo(165 * e, 343.5 * e, 165 * e, 343.5 * e, 184 * e, 357 * e),
       n.bezierCurveTo(198.5 * e, 353 * e, 198.5 * e, 353 * e, 213 * e, 349 * e),
       n.bezierCurveTo(200.5 * e, 364.5 * e, 200.5 * e, 364.5 * e, 188 * e, 380 * e),
       n.bezierCurveTo(163 * e, 380.5 * e, 163 * e, 380.5 * e, 138 * e, 381 * e),
       n.bezierCurveTo(112 * e, 373.5 * e, 112 * e, 373.5 * e, 86 * e, 366 * e),
       n.closePath(),
       se(n, t[1], t[2], 12.5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(121 * e, 332 * e),
       n.bezierCurveTo(133.5 * e, 327.5 * e, 133.5 * e, 327.5 * e, 146 * e, 323 * e),
       n.bezierCurveTo(157 * e, 330.5 * e, 157 * e, 330.5 * e, 168 * e, 338 * e),
       n.bezierCurveTo(182.5 * e, 219.5 * e, 182.5 * e, 219.5 * e, 197 * e, 101 * e),
       n.bezierCurveTo(190 * e, 84.5 * e, 190 * e, 84.5 * e, 183 * e, 68 * e),
       n.bezierCurveTo(172.5 * e, 81 * e, 172.5 * e, 81 * e, 162 * e, 94 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(105 * e, 463 * e),
       n.bezierCurveTo(124.5 * e, 466 * e, 124.5 * e, 466 * e, 144 * e, 469 * e),
       n.bezierCurveTo(145.5 * e, 478.5 * e, 145.5 * e, 478.5 * e, 147 * e, 488 * e),
       n.bezierCurveTo(133.5 * e, 495.5 * e, 133.5 * e, 495.5 * e, 120 * e, 503 * e),
       n.bezierCurveTo(108.5 * e, 492 * e, 108.5 * e, 492 * e, 97 * e, 481 * e),
       n.closePath(),
       se(n, t[1], t[2], 12.5 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(143 * e, 346 * e),
       n.bezierCurveTo(125 * e, 352 * e, 125 * e, 352 * e, 107 * e, 358 * e),
       n.bezierCurveTo(124 * e, 363 * e, 140 * e, 368 * e, 141 * e, 368 * e),
       n.bezierCurveTo(156.5 * e, 367 * e, 156.5 * e, 367 * e, 172 * e, 366 * e),
       n.closePath(),
       se(n, t[3]),
       r
   }
   function zi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 154 * e,
       r.height = 261 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(125 * e, 69 * e),
       n.bezierCurveTo(123.5 * e, 141.5 * e, 123.5 * e, 141.5 * e, 122 * e, 214 * e),
       n.bezierCurveTo(123 * e, 228 * e, 119 * e, 239 * e, 102 * e, 239 * e),
       n.bezierCurveTo(90 * e, 238 * e, 86 * e, 225 * e, 89 * e, 197 * e),
       n.bezierCurveTo(92 * e, 159 * e, 92 * e, 141 * e, 94 * e, 84 * e),
       n.bezierCurveTo(94 * e, 58 * e, 87 * e, 50 * e, 73 * e, 52 * e),
       n.bezierCurveTo(53 * e, 54 * e, 54 * e, 92 * e, 34 * e, 87 * e),
       n.bezierCurveTo(13 * e, 85 * e, 22 * e, 58 * e, 34 * e, 40 * e),
       n.bezierCurveTo(44 * e, 24 * e, 68 * e, 17 * e, 86 * e, 21 * e),
       n.bezierCurveTo(111 * e, 23 * e, 123 * e, 39 * e, 125 * e, 67 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(125 * e, 69 * e),
       n.bezierCurveTo(123.5 * e, 141.5 * e, 123.5 * e, 141.5 * e, 122 * e, 214 * e),
       n.bezierCurveTo(123 * e, 228 * e, 119 * e, 239 * e, 102 * e, 239 * e),
       n.bezierCurveTo(90 * e, 238 * e, 86 * e, 225 * e, 89 * e, 197 * e),
       n.bezierCurveTo(92 * e, 159 * e, 92 * e, 141 * e, 94 * e, 84 * e),
       n.bezierCurveTo(94 * e, 58 * e, 87 * e, 50 * e, 73 * e, 52 * e),
       n.bezierCurveTo(53 * e, 54 * e, 54 * e, 92 * e, 34 * e, 87 * e),
       n.bezierCurveTo(13 * e, 85 * e, 22 * e, 58 * e, 34 * e, 40 * e),
       n.bezierCurveTo(44 * e, 24 * e, 68 * e, 17 * e, 86 * e, 21 * e),
       n.bezierCurveTo(111 * e, 23 * e, 123 * e, 39 * e, 125 * e, 67 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(31 * e, 43 * e),
       n.bezierCurveTo(31 * e, 61 * e, 43 * e, 70 * e, 51 * e, 75 * e),
       n.bezierCurveTo(48 * e, 84 * e, 41 * e, 89 * e, 33 * e, 86 * e),
       n.bezierCurveTo(23 * e, 88 * e, 20 * e, 76 * e, 23 * e, 62 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(45 * e, 29 * e),
       n.bezierCurveTo(49 * e, 45 * e, 61 * e, 54 * e, 64 * e, 55 * e),
       n.bezierCurveTo(67.5 * e, 53 * e, 67.5 * e, 53 * e, 71 * e, 51 * e),
       n.bezierCurveTo(80 * e, 44 * e, 83 * e, 33 * e, 82 * e, 20 * e),
       n.bezierCurveTo(59 * e, 17 * e, 51 * e, 23 * e, 45 * e, 30 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(86 * e, 56 * e),
       n.bezierCurveTo(90 * e, 33 * e, 103 * e, 25 * e, 105 * e, 27 * e),
       n.bezierCurveTo(116 * e, 31 * e, 121 * e, 45 * e, 122 * e, 50 * e),
       n.bezierCurveTo(112 * e, 62 * e, 103 * e, 63 * e, 91 * e, 62 * e),
       n.bezierCurveTo(89 * e, 59.5 * e, 89 * e, 59.5 * e, 87 * e, 57 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(93 * e, 81 * e),
       n.bezierCurveTo(109 * e, 82 * e, 123 * e, 70 * e, 124 * e, 63 * e),
       n.bezierCurveTo(124 * e, 75.5 * e, 124 * e, 75.5 * e, 124 * e, 88 * e),
       n.bezierCurveTo(119 * e, 99 * e, 103 * e, 103 * e, 94 * e, 103 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(93 * e, 124 * e),
       n.bezierCurveTo(108 * e, 125 * e, 122 * e, 113 * e, 124 * e, 106 * e),
       n.bezierCurveTo(124 * e, 119 * e, 124 * e, 129 * e, 124 * e, 132 * e),
       n.bezierCurveTo(110 * e, 147 * e, 94 * e, 148 * e, 90 * e, 147 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(90 * e, 170 * e),
       n.bezierCurveTo(104 * e, 166 * e, 122 * e, 158 * e, 122 * e, 151 * e),
       n.bezierCurveTo(122 * e, 162.5 * e, 122 * e, 162.5 * e, 122 * e, 174 * e),
       n.bezierCurveTo(111 * e, 191 * e, 97 * e, 191 * e, 89 * e, 191 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(88 * e, 208 * e),
       n.bezierCurveTo(100 * e, 209 * e, 115 * e, 205 * e, 122 * e, 193 * e),
       n.bezierCurveTo(122 * e, 205.5 * e, 122 * e, 205.5 * e, 122 * e, 218 * e),
       n.bezierCurveTo(115 * e, 229 * e, 103 * e, 235 * e, 90 * e, 228 * e),
       n.bezierCurveTo(88 * e, 224 * e, 88 * e, 217 * e, 88 * e, 211 * e),
       n.closePath(),
       se(n, t[3]),
       n.globalAlpha = .4,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(22 * e, 81 * e),
       n.bezierCurveTo(32 * e, 84 * e, 41 * e, 81 * e, 45 * e, 68 * e),
       n.bezierCurveTo(50 * e, 50 * e, 62 * e, 40 * e, 79 * e, 43 * e),
       n.bezierCurveTo(95 * e, 45 * e, 102 * e, 58 * e, 101 * e, 81 * e),
       n.bezierCurveTo(99.5 * e, 120.5 * e, 99.5 * e, 120.5 * e, 98 * e, 160 * e),
       n.bezierCurveTo(96.5 * e, 191.5 * e, 96.5 * e, 191.5 * e, 95 * e, 223 * e),
       n.bezierCurveTo(93 * e, 232 * e, 101 * e, 235 * e, 108 * e, 238 * e),
       n.bezierCurveTo(100 * e, 240 * e, 90 * e, 233 * e, 90 * e, 224 * e),
       n.bezierCurveTo(92 * e, 157 * e, 92 * e, 157 * e, 94 * e, 90 * e),
       n.bezierCurveTo(94 * e, 56 * e, 89 * e, 53 * e, 77 * e, 51 * e),
       n.bezierCurveTo(58 * e, 50 * e, 54 * e, 59 * e, 49 * e, 75 * e),
       n.bezierCurveTo(44 * e, 91 * e, 28 * e, 90 * e, 23 * e, 81 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(82 * e, 123 * e),
       n.bezierCurveTo(88 * e, 130 * e, 88 * e, 127 * e, 94 * e, 128 * e),
       n.bezierCurveTo(91 * e, 136 * e, 94 * e, 137 * e, 99 * e, 142 * e),
       n.bezierCurveTo(97 * e, 149 * e, 99 * e, 152 * e, 105 * e, 155 * e),
       n.bezierCurveTo(107 * e, 159 * e, 113 * e, 159 * e, 120 * e, 158 * e),
       n.bezierCurveTo(121 * e, 160 * e, 125 * e, 163 * e, 132 * e, 163 * e),
       n.bezierCurveTo(133 * e, 166 * e, 136 * e, 169 * e, 138 * e, 170 * e),
       n.bezierCurveTo(133 * e, 171 * e, 132 * e, 172 * e, 129 * e, 174 * e),
       n.bezierCurveTo(122 * e, 170 * e, 120 * e, 170 * e, 116 * e, 174 * e),
       n.bezierCurveTo(108 * e, 170.5 * e, 108 * e, 170.5 * e, 100 * e, 167 * e),
       n.bezierCurveTo(95 * e, 172 * e, 94 * e, 179 * e, 95 * e, 184 * e),
       n.bezierCurveTo(87 * e, 185 * e, 87 * e, 189 * e, 88 * e, 194 * e),
       n.bezierCurveTo(82 * e, 194 * e, 81 * e, 195 * e, 79 * e, 197 * e),
       n.bezierCurveTo(78 * e, 192 * e, 78 * e, 191 * e, 77 * e, 189 * e),
       n.bezierCurveTo(81 * e, 185 * e, 82 * e, 183 * e, 80 * e, 176 * e),
       n.bezierCurveTo(89 * e, 170 * e, 92 * e, 168 * e, 95 * e, 163 * e),
       n.bezierCurveTo(91 * e, 151 * e, 88 * e, 151 * e, 82 * e, 147 * e),
       n.bezierCurveTo(85 * e, 142 * e, 85 * e, 137 * e, 81 * e, 133 * e),
       n.bezierCurveTo(84 * e, 127 * e, 84 * e, 125 * e, 82 * e, 124 * e),
       n.closePath(),
       se(n, t[4], t[5], 4 * e),
       Ee(n, 107 * e, 152 * e, 9 * e),
       se(n, t[6]),
       Ee(n, 105 * e, 173 * e, 9 * e),
       se(n, t[6]),
       Ee(n, 87 * e, 161 * e, 9 * e),
       se(n, t[6]),
       Ee(n, 106 * e, 147 * e, 4 * e),
       se(n, t[7]),
       Ee(n, 104 * e, 167 * e, 4 * e),
       se(n, t[7]),
       Ee(n, 86 * e, 154 * e, 4 * e),
       se(n, t[7]),
       r
   }
   function Hi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 350 * e,
       r.height = 140 * e,
       n.translate(-50 * e, -150 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(184.5 * e, 222.0625 * e),
       n.bezierCurveTo(185.5 * e, 184.0625 * e, 302.5 * e, 171.0625 * e, 313.5 * e, 222.0625 * e),
       n.bezierCurveTo(330.5 * e, 263.0625 * e, 181.5 * e, 274.0625 * e, 184.5 * e, 223.0625 * e),
       n.closePath(),
       se(n, t[0], t[1], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(131.5 * e, 241.0625 * e),
       n.bezierCurveTo(144.5 * e, 278.0625 * e, 270.5 * e, 209.0625 * e, 228.5 * e, 174.0625 * e),
       n.bezierCurveTo(196.5 * e, 147.0625 * e, 117.5 * e, 196.0625 * e, 131.5 * e, 240.0625 * e),
       n.closePath(),
       se(n, t[0], t[1], 8 * e),
       Ee(n, 270.5 * e, 225.0625 * e, 15.811388300841896 * e),
       se(n, t[2]),
       Ee(n, 243.5 * e, 225.0625 * e, 6.082762530298219 * e),
       se(n, t[2]),
       Ee(n, 255.5 * e, 210.0625 * e, 10.816653826391969 * e),
       se(n, t[2]),
       Ee(n, 167.5 * e, 215.0625 * e, 15.297058540778355 * e),
       se(n, t[2]),
       Ee(n, 176.5 * e, 204.0625 * e, 7.280109889280518 * e),
       se(n, t[2]),
       Ee(n, 206.5 * e, 189.0625 * e, 7.280109889280518 * e),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(151.5 * e, 212.0625 * e),
       n.bezierCurveTo(161.5 * e, 204.0625 * e, 173.5 * e, 214.0625 * e, 158.5 * e, 221.0625 * e),
       n.bezierCurveTo(145.5 * e, 228.0625 * e, 144.5 * e, 216.0625 * e, 151.5 * e, 212.0625 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(194.5 * e, 209.0625 * e),
       n.bezierCurveTo(205.5 * e, 202.0625 * e, 215.5 * e, 207.0625 * e, 199.5 * e, 217.0625 * e),
       n.bezierCurveTo(187.5 * e, 224.0625 * e, 182.5 * e, 217.0625 * e, 194.5 * e, 209.0625 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(188.5 * e, 183.0625 * e),
       n.bezierCurveTo(201.5 * e, 176.0625 * e, 213.5 * e, 187.0625 * e, 193.5 * e, 193.0625 * e),
       n.bezierCurveTo(185.5 * e, 194.0625 * e, 175.5 * e, 189.0625 * e, 188.5 * e, 183.0625 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(261.5 * e, 202.0625 * e),
       n.bezierCurveTo(274.5 * e, 201.0625 * e, 282.5 * e, 214.0625 * e, 261.5 * e, 215.0625 * e),
       n.bezierCurveTo(246.5 * e, 214.0625 * e, 248.5 * e, 203.0625 * e, 261.5 * e, 202.0625 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(240.5 * e, 231.0625 * e),
       n.bezierCurveTo(255.5 * e, 231.0625 * e, 254.5 * e, 243.0625 * e, 240.5 * e, 242.0625 * e),
       n.bezierCurveTo(225.5 * e, 239.0625 * e, 225.5 * e, 232.0625 * e, 240.5 * e, 231.0625 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       r
   }
   function yi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 217 * e,
       r.height = 215 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(79 * e, 113 * e),
       n.bezierCurveTo(135 * e, 98 * e, 136 * e, 96 * e, 142 * e, 97 * e),
       n.bezierCurveTo(167 * e, 106 * e, 167 * e, 106 * e, 171 * e, 109 * e),
       n.bezierCurveTo(173 * e, 120 * e, 173 * e, 134 * e, 169 * e, 141 * e),
       n.bezierCurveTo(140 * e, 149.5 * e, 140 * e, 149.5 * e, 111 * e, 158 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(154 * e, 103 * e),
       n.bezierCurveTo(167 * e, 91 * e, 175 * e, 87 * e, 176 * e, 94 * e),
       n.bezierCurveTo(175 * e, 102 * e, 176 * e, 102 * e, 186 * e, 103 * e),
       n.bezierCurveTo(191 * e, 104 * e, 192 * e, 105 * e, 185 * e, 116 * e),
       n.bezierCurveTo(183 * e, 120 * e, 191 * e, 124 * e, 189 * e, 129 * e),
       n.bezierCurveTo(185 * e, 139 * e, 178 * e, 134 * e, 166 * e, 131 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(60 * e, 46 * e),
       n.bezierCurveTo(60 * e, 34 * e, 60 * e, 29 * e, 56 * e, 19 * e),
       n.bezierCurveTo(52 * e, 12 * e, 52 * e, 16 * e, 49 * e, 24 * e),
       n.bezierCurveTo(48 * e, 27 * e, 46 * e, 28 * e, 39 * e, 27 * e),
       n.bezierCurveTo(33 * e, 26 * e, 34 * e, 31 * e, 35 * e, 37 * e),
       n.bezierCurveTo(36 * e, 41 * e, 27 * e, 46 * e, 29 * e, 52 * e),
       n.bezierCurveTo(36 * e, 55 * e, 35 * e, 56 * e, 31 * e, 59 * e),
       n.bezierCurveTo(27 * e, 65 * e, 32 * e, 64 * e, 35 * e, 62 * e),
       n.closePath(),
       se(n, t[4], t[5], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(46 * e, 50 * e),
       n.bezierCurveTo(51 * e, 35 * e, 70 * e, 32 * e, 78 * e, 29 * e),
       n.bezierCurveTo(84 * e, 27 * e, 113 * e, 36 * e, 127 * e, 41 * e),
       n.bezierCurveTo(140 * e, 47 * e, 147 * e, 69 * e, 137 * e, 73 * e),
       n.bezierCurveTo(124 * e, 92 * e, 117 * e, 92 * e, 109 * e, 94 * e),
       n.bezierCurveTo(101 * e, 96 * e, 89 * e, 92 * e, 65 * e, 83 * e),
       n.bezierCurveTo(54 * e, 80 * e, 46 * e, 58 * e, 46 * e, 51 * e),
       n.closePath(),
       se(n, t[4], t[5], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(51 * e, 40 * e),
       n.bezierCurveTo(49 * e, 34 * e, 49 * e, 34 * e, 47 * e, 28 * e),
       n.bezierCurveTo(38 * e, 28 * e, 34 * e, 27 * e, 37 * e, 37 * e),
       n.bezierCurveTo(43 * e, 40.5 * e, 43 * e, 40.5 * e, 49 * e, 44 * e),
       n.closePath(),
       se(n, t[7]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(29 * e, 48 * e),
       n.bezierCurveTo(38 * e, 49 * e, 38 * e, 49 * e, 47 * e, 50 * e),
       n.bezierCurveTo(46.5 * e, 51.5 * e, 46.5 * e, 51.5 * e, 46 * e, 53 * e),
       n.bezierCurveTo(40 * e, 53.5 * e, 40 * e, 53.5 * e, 34 * e, 54 * e),
       n.bezierCurveTo(29 * e, 51 * e, 32 * e, 51.5 * e, 30 * e, 49 * e),
       n.closePath(),
       se(n, t[7]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(89 * e, 61 * e),
       n.bezierCurveTo(101 * e, 70 * e, 109 * e, 90 * e, 102 * e, 90 * e),
       n.bezierCurveTo(97 * e, 91 * e, 87 * e, 91 * e, 60 * e, 80 * e),
       n.bezierCurveTo(48 * e, 65 * e, 46 * e, 56 * e, 48 * e, 53 * e),
       n.bezierCurveTo(50 * e, 52 * e, 66 * e, 56 * e, 89 * e, 61 * e),
       n.closePath(),
       se(n, t[7]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(99 * e, 59 * e),
       n.bezierCurveTo(115 * e, 45 * e, 125 * e, 42 * e, 129 * e, 47 * e),
       n.bezierCurveTo(138 * e, 56 * e, 140 * e, 63 * e, 138 * e, 67 * e),
       n.bezierCurveTo(131 * e, 80 * e, 122 * e, 87 * e, 114 * e, 90 * e),
       n.bezierCurveTo(105 * e, 80 * e, 95 * e, 62 * e, 98 * e, 61 * e),
       n.closePath(),
       se(n, t[7]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(118 * e, 62 * e),
       n.bezierCurveTo(139 * e, 45 * e, 153 * e, 40 * e, 150 * e, 48 * e),
       n.bezierCurveTo(145 * e, 57 * e, 157 * e, 63 * e, 157 * e, 70 * e),
       n.bezierCurveTo(157 * e, 74 * e, 142 * e, 77 * e, 142 * e, 85 * e),
       n.bezierCurveTo(143 * e, 91 * e, 141 * e, 92 * e, 135 * e, 90 * e),
       n.bezierCurveTo(132 * e, 90 * e, 132 * e, 96 * e, 124 * e, 99 * e),
       n.bezierCurveTo(118 * e, 93 * e, 116 * e, 77 * e, 116 * e, 64 * e),
       n.closePath(),
       se(n, t[4], t[5], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(90 * e, 130 * e),
       n.bezierCurveTo(157 * e, 115 * e, 165 * e, 111 * e, 167 * e, 115 * e),
       n.bezierCurveTo(170 * e, 117 * e, 171 * e, 135 * e, 167 * e, 141 * e),
       n.bezierCurveTo(135.5 * e, 149.5 * e, 135.5 * e, 149.5 * e, 104 * e, 158 * e),
       n.closePath(),
       se(n, t[8]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(53 * e, 119 * e),
       n.bezierCurveTo(46 * e, 120 * e, 40 * e, 118 * e, 34 * e, 116 * e),
       n.bezierCurveTo(28 * e, 111 * e, 41 * e, 112 * e, 39 * e, 108 * e),
       n.bezierCurveTo(36 * e, 100 * e, 49 * e, 102 * e, 53 * e, 95 * e),
       n.bezierCurveTo(57 * e, 84 * e, 58 * e, 85 * e, 63 * e, 93 * e),
       n.bezierCurveTo(68 * e, 96 * e, 72 * e, 94 * e, 80 * e, 88 * e),
       n.bezierCurveTo(80 * e, 96 * e, 78 * e, 107 * e, 66 * e, 115 * e),
       n.closePath(),
       se(n, t[9], t[10], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(118 * e, 64 * e),
       n.bezierCurveTo(133.5 * e, 57 * e, 133.5 * e, 57 * e, 149 * e, 50 * e),
       n.bezierCurveTo(145 * e, 54 * e, 154 * e, 65 * e, 157 * e, 68 * e),
       n.bezierCurveTo(138.5 * e, 66.5 * e, 138.5 * e, 66.5 * e, 120 * e, 65 * e),
       n.closePath(),
       se(n, t[8]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(118 * e, 65 * e),
       n.bezierCurveTo(129 * e, 77 * e, 129 * e, 77 * e, 140 * e, 89 * e),
       n.bezierCurveTo(131 * e, 89 * e, 130 * e, 92 * e, 128 * e, 96 * e),
       n.bezierCurveTo(123.5 * e, 82 * e, 123.5 * e, 82 * e, 119 * e, 68 * e),
       n.closePath(),
       se(n, t[8]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(51 * e, 112 * e),
       n.bezierCurveTo(63 * e, 108 * e, 78 * e, 111 * e, 88 * e, 112 * e),
       n.bezierCurveTo(98 * e, 122 * e, 117 * e, 136 * e, 125 * e, 157 * e),
       n.bezierCurveTo(123 * e, 180 * e, 123 * e, 185 * e, 118 * e, 186 * e),
       n.bezierCurveTo(101 * e, 190 * e, 89 * e, 191 * e, 79 * e, 187 * e),
       n.bezierCurveTo(53 * e, 165 * e, 50 * e, 153 * e, 47 * e, 144 * e),
       n.bezierCurveTo(46 * e, 128 * e, 46 * e, 124 * e, 50 * e, 112 * e),
       n.closePath(),
       se(n, t[9], t[10], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(50 * e, 114 * e),
       n.bezierCurveTo(81 * e, 149 * e, 80 * e, 147 * e, 80 * e, 149 * e),
       n.bezierCurveTo(82 * e, 155 * e, 80 * e, 182 * e, 74 * e, 182 * e),
       n.bezierCurveTo(60 * e, 172 * e, 52 * e, 157 * e, 47 * e, 144 * e),
       n.closePath(),
       se(n, t[11], t[11], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(85 * e, 152 * e),
       n.bezierCurveTo(99 * e, 150 * e, 109 * e, 152 * e, 119 * e, 156 * e),
       n.bezierCurveTo(122 * e, 163 * e, 122 * e, 174 * e, 117 * e, 182 * e),
       n.closePath(),
       n.bezierCurveTo(93 * e, 188 * e, 82 * e, 187 * e, 83 * e, 179 * e),
       se(n, t[11], t[11], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(104 * e, 166 * e),
       n.bezierCurveTo(133 * e, 165 * e, 142 * e, 168 * e, 137 * e, 173 * e),
       n.bezierCurveTo(127 * e, 177 * e, 137 * e, 195 * e, 126 * e, 196 * e),
       n.bezierCurveTo(112 * e, 195 * e, 112 * e, 194 * e, 109 * e, 199 * e),
       n.bezierCurveTo(105 * e, 205 * e, 102 * e, 195 * e, 96 * e, 197 * e),
       n.bezierCurveTo(84 * e, 201 * e, 88 * e, 198 * e, 90 * e, 187 * e),
       n.bezierCurveTo(96 * e, 171 * e, 97 * e, 170 * e, 103 * e, 167 * e),
       n.closePath(),
       se(n, t[9], t[10], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(105 * e, 168 * e),
       n.bezierCurveTo(118 * e, 172.5 * e, 118 * e, 172.5 * e, 131 * e, 177 * e),
       n.bezierCurveTo(133 * e, 190 * e, 132 * e, 199 * e, 116 * e, 194 * e),
       n.bezierCurveTo(110 * e, 182 * e, 110 * e, 182 * e, 104 * e, 170 * e),
       n.closePath(),
       se(n, t[10]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(102 * e, 169 * e),
       n.bezierCurveTo(100.5 * e, 182 * e, 100.5 * e, 182 * e, 99 * e, 195 * e),
       n.bezierCurveTo(93.5 * e, 196.5 * e, 93.5 * e, 196.5 * e, 88 * e, 198 * e),
       n.bezierCurveTo(94 * e, 176 * e, 96 * e, 174 * e, 101 * e, 168 * e),
       n.closePath(),
       se(n, t[9], t[9], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(64 * e, 107 * e),
       n.bezierCurveTo(64 * e, 101 * e, 64 * e, 101 * e, 64 * e, 95 * e),
       n.bezierCurveTo(57 * e, 86 * e, 57 * e, 84 * e, 53 * e, 97 * e),
       n.bezierCurveTo(55 * e, 103.5 * e, 55 * e, 103.5 * e, 57 * e, 110 * e),
       n.closePath(),
       se(n, t[11], t[11], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(40 * e, 108 * e),
       n.bezierCurveTo(46.5 * e, 111 * e, 46.5 * e, 111 * e, 53 * e, 114 * e),
       n.bezierCurveTo(50.5 * e, 117 * e, 50.5 * e, 117 * e, 48 * e, 120 * e),
       n.bezierCurveTo(40.5 * e, 117.5 * e, 40.5 * e, 117.5 * e, 33 * e, 115 * e),
       n.bezierCurveTo(36 * e, 112 * e, 36 * e, 112 * e, 39 * e, 109 * e),
       n.closePath(),
       se(n, t[11], t[11], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(189 * e, 106 * e),
       n.bezierCurveTo(178.5 * e, 110.5 * e, 178.5 * e, 110.5 * e, 168 * e, 115 * e),
       n.bezierCurveTo(168.5 * e, 119 * e, 168.5 * e, 119 * e, 169 * e, 123 * e),
       n.bezierCurveTo(179 * e, 124.5 * e, 179 * e, 124.5 * e, 189 * e, 126 * e),
       n.bezierCurveTo(182 * e, 118 * e, 183 * e, 115 * e, 188 * e, 106 * e),
       n.closePath(),
       se(n, t[8]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(69 * e, 178 * e),
       n.bezierCurveTo(69 * e, 141 * e, 70 * e, 136 * e, 77 * e, 137 * e),
       n.bezierCurveTo(88 * e, 133 * e, 101 * e, 134 * e, 108 * e, 137 * e),
       se(n, void 0, t[3], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(55 * e, 161 * e),
       n.bezierCurveTo(54 * e, 124 * e, 55 * e, 119 * e, 62 * e, 119 * e),
       n.bezierCurveTo(74 * e, 117 * e, 85 * e, 117 * e, 93 * e, 119 * e),
       se(n, void 0, t[3], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(91 * e, 29 * e),
       n.bezierCurveTo(74 * e, 33 * e, 62 * e, 46 * e, 57 * e, 54 * e),
       n.bezierCurveTo(57 * e, 63 * e, 68 * e, 76 * e, 77 * e, 87 * e),
       se(n, void 0, t[6], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(107 * e, 33 * e),
       n.bezierCurveTo(82 * e, 51 * e, 80 * e, 52 * e, 79 * e, 59 * e),
       n.bezierCurveTo(78 * e, 65 * e, 93 * e, 86 * e, 101 * e, 93 * e),
       se(n, void 0, t[6], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(130 * e, 98 * e),
       n.bezierCurveTo(126.5 * e, 103 * e, 126.5 * e, 103 * e, 123 * e, 108 * e),
       n.bezierCurveTo(133.5 * e, 107 * e, 133.5 * e, 107 * e, 144 * e, 106 * e),
       n.bezierCurveTo(138.5 * e, 110 * e, 138.5 * e, 110 * e, 133 * e, 114 * e),
       n.bezierCurveTo(142 * e, 114 * e, 142 * e, 114 * e, 151 * e, 114 * e),
       n.bezierCurveTo(146.5 * e, 119.5 * e, 146.5 * e, 119.5 * e, 142 * e, 125 * e),
       n.bezierCurveTo(146.5 * e, 127 * e, 146.5 * e, 127 * e, 151 * e, 129 * e),
       n.bezierCurveTo(147.5 * e, 132 * e, 147.5 * e, 132 * e, 144 * e, 135 * e),
       n.bezierCurveTo(148 * e, 137 * e, 148 * e, 137 * e, 152 * e, 139 * e),
       n.bezierCurveTo(149 * e, 142.5 * e, 149 * e, 142.5 * e, 146 * e, 146 * e),
       se(n, void 0, t[3], 4 * e),
       r
   }
   function Bi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 118 * e,
       r.height = 114 * e,
       n.translate(0, 10 * e),
       Ee(n, 42 * e, 43 * e, 24.758836806279895 * e),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(65 * e, 90 * e),
       n.bezierCurveTo(72 * e, 91 * e, 75 * e, 92 * e, 71 * e, 96 * e),
       n.bezierCurveTo(65 * e, 98 * e, 65 * e, 94 * e, 65 * e, 91 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(87 * e, 45 * e),
       n.bezierCurveTo(108 * e, 59 * e, 100 * e, 86 * e, 85 * e, 91 * e),
       n.bezierCurveTo(80 * e, 96 * e, 68 * e, 95 * e, 58 * e, 87 * e),
       n.bezierCurveTo(53 * e, 80 * e, 61 * e, 64 * e, 66 * e, 58 * e),
       n.bezierCurveTo(73 * e, 48 * e, 78 * e, 44 * e, 87 * e, 45 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(0, -10 * e),
       Ee(n, 42 * e, 43 * e, 24.758836806279895 * e),
       se(n, t[1], t[2], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(65 * e, 90 * e),
       n.bezierCurveTo(72 * e, 91 * e, 75 * e, 92 * e, 71 * e, 96 * e),
       n.bezierCurveTo(65 * e, 98 * e, 65 * e, 94 * e, 65 * e, 91 * e),
       n.closePath(),
       se(n, t[1], t[2], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(87 * e, 45 * e),
       n.bezierCurveTo(108 * e, 59 * e, 100 * e, 86 * e, 85 * e, 91 * e),
       n.bezierCurveTo(80 * e, 96 * e, 68 * e, 95 * e, 58 * e, 87 * e),
       n.bezierCurveTo(53 * e, 80 * e, 61 * e, 64 * e, 66 * e, 58 * e),
       n.bezierCurveTo(73 * e, 48 * e, 78 * e, 44 * e, 87 * e, 45 * e),
       n.closePath(),
       se(n, t[1], t[2], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(52 * e, 16 * e),
       n.bezierCurveTo(55 * e, 19 * e, 54 * e, 20 * e, 55 * e, 22 * e),
       n.bezierCurveTo(52 * e, 24.5 * e, 52 * e, 24.5 * e, 49 * e, 27 * e),
       n.bezierCurveTo(45 * e, 25 * e, 45 * e, 25 * e, 41 * e, 23 * e),
       n.bezierCurveTo(45 * e, 19 * e, 48 * e, 16 * e, 52 * e, 16 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(62 * e, 30 * e),
       n.bezierCurveTo(66 * e, 29 * e, 64 * e, 30 * e, 66 * e, 30 * e),
       n.bezierCurveTo(67 * e, 31 * e, 67 * e, 31 * e, 68 * e, 32 * e),
       n.bezierCurveTo(66.5 * e, 33.5 * e, 66.5 * e, 33.5 * e, 65 * e, 35 * e),
       n.bezierCurveTo(63.5 * e, 32.5 * e, 63.5 * e, 32.5 * e, 62 * e, 30 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(29 * e, 21 * e),
       n.bezierCurveTo(31 * e, 22 * e, 31 * e, 26 * e, 29 * e, 29 * e),
       n.bezierCurveTo(26 * e, 28.5 * e, 26 * e, 28.5 * e, 23 * e, 28 * e),
       n.bezierCurveTo(23 * e, 26.5 * e, 23 * e, 26.5 * e, 23 * e, 25 * e),
       n.bezierCurveTo(25 * e, 23 * e, 25 * e, 23 * e, 27 * e, 21 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(18 * e, 36 * e),
       n.bezierCurveTo(23 * e, 36 * e, 24 * e, 42 * e, 19 * e, 46 * e),
       n.bezierCurveTo(12 * e, 39 * e, 15 * e, 38 * e, 18 * e, 37 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(30 * e, 34 * e),
       n.bezierCurveTo(35 * e, 36 * e, 36 * e, 39 * e, 32 * e, 45 * e),
       n.bezierCurveTo(25 * e, 46 * e, 25 * e, 44 * e, 30 * e, 34 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(59 * e, 35 * e),
       n.bezierCurveTo(58 * e, 27 * e, 57 * e, 27 * e, 52 * e, 31 * e),
       n.bezierCurveTo(50 * e, 36 * e, 53 * e, 38 * e, 58 * e, 36 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(63 * e, 46 * e),
       n.bezierCurveTo(64.5 * e, 46.5 * e, 64.5 * e, 46.5 * e, 66 * e, 47 * e),
       n.bezierCurveTo(70 * e, 50 * e, 70 * e, 53 * e, 61 * e, 55 * e),
       n.bezierCurveTo(62 * e, 50.5 * e, 62 * e, 50.5 * e, 63 * e, 46 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(41 * e, 42 * e),
       n.bezierCurveTo(47 * e, 41 * e, 53 * e, 47 * e, 46 * e, 51 * e),
       n.bezierCurveTo(38 * e, 49 * e, 39 * e, 46 * e, 41 * e, 43 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(44 * e, 57 * e),
       n.bezierCurveTo(54 * e, 57 * e, 54 * e, 58 * e, 55 * e, 61 * e),
       n.bezierCurveTo(54 * e, 63 * e, 52 * e, 64 * e, 48 * e, 65 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(20 * e, 52 * e),
       n.bezierCurveTo(25 * e, 51 * e, 27 * e, 50 * e, 28 * e, 54 * e),
       n.bezierCurveTo(27 * e, 58 * e, 24 * e, 58 * e, 22 * e, 58 * e),
       n.bezierCurveTo(21 * e, 55.5 * e, 21 * e, 55.5 * e, 20 * e, 53 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(30 * e, 61 * e),
       n.bezierCurveTo(37 * e, 61 * e, 39 * e, 63 * e, 39 * e, 68 * e),
       n.bezierCurveTo(36 * e, 68.5 * e, 36 * e, 68.5 * e, 33 * e, 69 * e),
       n.bezierCurveTo(30.5 * e, 67.5 * e, 30.5 * e, 67.5 * e, 28 * e, 66 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(88 * e, 45 * e),
       n.bezierCurveTo(90 * e, 46.5 * e, 90 * e, 46.5 * e, 92 * e, 48 * e),
       n.bezierCurveTo(92 * e, 50 * e, 92 * e, 50 * e, 92 * e, 52 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(96 * e, 53 * e),
       n.bezierCurveTo(97.5 * e, 55 * e, 97.5 * e, 55 * e, 99 * e, 57 * e),
       n.bezierCurveTo(97.5 * e, 59.5 * e, 97.5 * e, 59.5 * e, 96 * e, 62 * e),
       n.bezierCurveTo(93.5 * e, 60.5 * e, 93.5 * e, 60.5 * e, 91 * e, 59 * e),
       n.bezierCurveTo(91.5 * e, 57 * e, 91.5 * e, 57 * e, 92 * e, 55 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(92 * e, 71 * e),
       n.bezierCurveTo(94.5 * e, 70.5 * e, 94.5 * e, 70.5 * e, 97 * e, 70 * e),
       n.bezierCurveTo(98.5 * e, 72.5 * e, 98.5 * e, 72.5 * e, 100 * e, 75 * e),
       n.bezierCurveTo(97 * e, 76.5 * e, 97 * e, 76.5 * e, 94 * e, 78 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(95 * e, 82 * e),
       n.bezierCurveTo(96 * e, 83 * e, 96 * e, 83 * e, 97 * e, 84 * e),
       n.bezierCurveTo(97 * e, 85.5 * e, 97 * e, 85.5 * e, 97 * e, 87 * e),
       n.bezierCurveTo(93.5 * e, 87.5 * e, 93.5 * e, 87.5 * e, 90 * e, 88 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(86 * e, 72 * e),
       n.bezierCurveTo(89 * e, 76 * e, 88 * e, 81 * e, 85 * e, 82 * e),
       n.bezierCurveTo(80 * e, 80 * e, 82 * e, 78 * e, 85 * e, 72 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(80 * e, 86 * e),
       n.bezierCurveTo(84 * e, 88 * e, 86 * e, 88 * e, 85 * e, 93 * e),
       n.bezierCurveTo(80 * e, 96 * e, 79 * e, 96 * e, 76 * e, 91 * e),
       n.closePath(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(84 * e, 46 * e),
       n.bezierCurveTo(93 * e, 51 * e, 91 * e, 62 * e, 80 * e, 78 * e),
       n.bezierCurveTo(74 * e, 86 * e, 66 * e, 90 * e, 60 * e, 86 * e),
       n.bezierCurveTo(55 * e, 79 * e, 57 * e, 73 * e, 67 * e, 57 * e),
       n.bezierCurveTo(71 * e, 51 * e, 79 * e, 44 * e, 84 * e, 46 * e),
       n.closePath(),
       se(n, t[5], t[6], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(76 * e, 60 * e),
       n.bezierCurveTo(80 * e, 66 * e, 75 * e, 74 * e, 68 * e, 74 * e),
       n.bezierCurveTo(60 * e, 64 * e, 68 * e, 59 * e, 76 * e, 59 * e),
       n.closePath(),
       se(n, t[7], t[8], 5 * e),
       r
   }
   function wi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 70 * e
         , a = 90 * e
         , s = 4 * e
         , T = 5 * e;
       return r.width = o,
       r.height = a,
       n.save(),
       n.translate(-80 * e, -70 * e + T),
       n.globalAlpha = .5,
       n.beginPath(),
       n.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e),
       n.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e),
       n.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e),
       n.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e),
       n.closePath(),
       se(n, "#0d1b1c"),
       n.restore(),
       n.save(),
       n.translate(-80 * e, -70 * e + T),
       n.globalAlpha = .5,
       n.beginPath(),
       n.bezierCurveTo(112 * e, 109 * e, 111 * e, 100 * e, 106 * e, 93 * e),
       n.bezierCurveTo(104 * e, 90 * e, 91 * e, 87 * e, 91 * e, 87 * e),
       n.bezierCurveTo(91 * e, 88 * e, 91 * e, 96 * e, 94 * e, 102 * e),
       n.bezierCurveTo(97 * e, 108 * e, 106 * e, 112 * e, 113 * e, 112 * e),
       n.closePath(),
       se(n, "#0d1b1c"),
       n.restore(),
       n.save(),
       n.translate(-80 * e, -70 * e + T),
       n.globalAlpha = .5,
       n.beginPath(),
       n.bezierCurveTo(108 * e, 120 * e, 100 * e, 119 * e, 91 * e, 127 * e),
       n.bezierCurveTo(83 * e, 134 * e, 82 * e, 146 * e, 83 * e, 146 * e),
       n.bezierCurveTo(84 * e, 146 * e, 98 * e, 142 * e, 103 * e, 138 * e),
       n.bezierCurveTo(107 * e, 135 * e, 110 * e, 130 * e, 112 * e, 121 * e),
       n.closePath(),
       se(n, "#0d1b1c"),
       n.restore(),
       n.save(),
       n.translate(3 * e, -93 * e + T),
       n.rotate(Math.PI / 5),
       n.globalAlpha = .5,
       n.beginPath(),
       n.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e),
       n.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e),
       n.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e),
       n.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e),
       n.closePath(),
       se(n, "#0d1b1c"),
       n.restore(),
       n.save(),
       n.translate(-80 * e, -70 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e),
       n.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e),
       n.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e),
       n.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e),
       n.closePath(),
       se(n, t[0], t[1], s),
       n.restore(),
       n.save(),
       n.translate(-80 * e, -70 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.bezierCurveTo(112 * e, 109 * e, 111 * e, 100 * e, 106 * e, 93 * e),
       n.bezierCurveTo(104 * e, 90 * e, 91 * e, 87 * e, 91 * e, 87 * e),
       n.bezierCurveTo(91 * e, 88 * e, 91 * e, 96 * e, 94 * e, 102 * e),
       n.bezierCurveTo(97 * e, 108 * e, 106 * e, 112 * e, 113 * e, 112 * e),
       n.closePath(),
       se(n, t[0], t[1], s),
       n.restore(),
       n.save(),
       n.translate(-80 * e, -70 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.bezierCurveTo(108 * e, 120 * e, 100 * e, 119 * e, 91 * e, 127 * e),
       n.bezierCurveTo(83 * e, 134 * e, 82 * e, 146 * e, 83 * e, 146 * e),
       n.bezierCurveTo(84 * e, 146 * e, 98 * e, 142 * e, 103 * e, 138 * e),
       n.bezierCurveTo(107 * e, 135 * e, 110 * e, 130 * e, 112 * e, 121 * e),
       n.closePath(),
       se(n, t[0], t[1], s),
       n.restore(),
       n.save(),
       n.translate(3 * e, -93 * e),
       n.rotate(Math.PI / 5),
       n.globalAlpha = 1,
       n.beginPath(),
       n.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e),
       n.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e),
       n.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e),
       n.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e),
       n.closePath(),
       se(n, t[0], t[1], s),
       n.restore(),
       r
   }
   function Ki(e) {
       var i = document.createElement("canvas")
         , t = i.getContext("2d")
         , r = q[e];
       t.font = "20px Baloo Paaji";
       var n = 0;
       for (r.length >= 1 && (n = Math.max(0, t.measureText(r[0]).width)),
       t.font = "17px Baloo Paaji",
       r.length >= 2 && (n = Math.max(n, t.measureText(r[1]).width)),
       t.font = "14px Baloo Paaji",
       Z = 2; Z < r.length; Z++)
           n = Math.max(n, t.measureText(r[Z]).width);
       var o = n + 35
         , a = 0;
       if (a = 1 === r.length ? 55 : 2 === r.length ? 85 : 26 * (r.length - 2) + 85,
       i.width = o,
       i.height = a,
       Te(t, 0, 0, o, a, 10),
       t.fillStyle = "#000000",
       t.globalAlpha = .5,
       t.fill(),
       r.length >= 1 && (t.textBaseline = "middle",
       t.font = "20px Baloo Paaji",
       t.globalAlpha = 1,
       t.fillStyle = "#e2c340",
       t.fillText(r[0], 15, 28)),
       r.length >= 2 && (t.font = "17px Baloo Paaji",
       t.fillStyle = "#ffffff",
       t.fillText(r[1], 15, 55),
       a = 55),
       r.length >= 3)
           for (t.font = "14px Baloo Paaji",
           t.globalAlpha = .7,
           Z = 2; Z < r.length; Z++)
               t.fillText(r[Z], 15, a + 28),
               a += 26;
       return i
   }
   function Wi(e) {
       var i = document.createElement("canvas")
         , t = i.getContext("2d");
       for (t.lineJoin = "round"; -1 !== e.indexOf("\\n"); )
           e = e.replace("\\n", "\n");
       e = e.split("\n"),
       color = [];
       var r = 18 * e.length + 10
         , n = 0;
       t.font = "14px Baloo Paaji";
       for (var o = 0; o < e.length; o++)
           "#" === e[o].charAt(0) ? (color[o] = e[o].substring(0, 7),
           e[o] = e[o].substring(8)) : color[o] = "#FFFFFF",
           n = Math.max(t.measureText(e[o]).width + 16, n);
       i.height = r,
       i.width = n;
       for (o = 0; o < e.length; o++) {
           var a = Yi(1, e[o], 14, color[o], null, null, null, null, null, "#000", 6);
           t.drawImage(a, 8, 18 * o + 5)
       }
       return i
   }
   function Yi(e, i, t, r, n, o, a, s, T, I, E) {
       void 0 === E && (E = 0);
       var _ = document.createElement("canvas")
         , u = _.getContext("2d");
       o = o ? o * e : 0;
       var h = Math.floor(e * t);
       u.font = h + "px Baloo Paaji",
       u.lineJoin = "round",
       s *= e;
       var R = a ? 2 * s : 0;
       if (T)
           var A = Math.min(u.measureText(i).width + 2 * e + R, T);
       else
           A = u.measureText(i).width + 2 * e + R + E * e * 2;
       h = (h + o + E) * e + R;
       return _.width = A,
       _.height = h,
       a && (u.fillStyle = a,
       Te(u, 0, 0, A, h, 2 * s),
       u.fill(),
       u.translate(s, s)),
       u.textBaseline = "middle",
       u.font = t + "px Baloo Paaji",
       u.lineJoin = "round",
       n && (u.beginPath(),
       u.fillStyle = n,
       u.fillText(i, 0, h / 2 + o - R / 2, A)),
       u.beginPath(),
       I && (u.strokeStyle = I,
       u.lineWidth = E,
       u.strokeText(i, E, (h - R) / 2, A)),
       u.fillStyle = r,
       u.fillText(i, E, (h - R) / 2, A),
       _
   }
   function Ui(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 220 * e
         , a = 230 * e
         , s = 100 * e
         , T = s / 4
         , I = 20 * e;
       return r.width = o,
       r.height = a,
       n.translate(o / 2, a / 2 + I),
       n.globalAlpha = .5,
       ue(n, 7, s, T),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -I),
       ue(n, 7, s, T),
       se(n, t[1]),
       ue(n, 6, .65 * s, .65 * T),
       se(n, t[2]),
       r
   }
   function ki(e, i, t, r) {
       var n = document.createElement("canvas")
         , o = n.getContext("2d")
         , a = 220 * e
         , s = 220 * e
         , T = 100 * e
         , I = T / 4;
       return n.width = a,
       n.height = s,
       o.translate(a / 2, s / 2),
       o.globalAlpha = i ? .5 : 1,
       i || o.translate(0 * e, -8 * e),
       ue(o, 7, T, I),
       se(o, i ? t[0] : t[1]),
       o.globalAlpha = 1,
       0 == r ? (ue(o, 6, .65 * T, .65 * I),
       se(o, t[2])) : 1 == r && (o.translate(20 * e, 20 * e),
       ue(o, 6, .45 * T, .4 * I),
       se(o, t[2])),
       n
   }
   function Fi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 120 * e
         , a = 150 * e
         , s = 60 * e
         , T = s / 4
         , I = 15 * e;
       return r.width = o,
       r.height = a,
       n.save(),
       n.translate(o / 2 + 0 * e, a / 2 + 0 * e + I),
       n.rotate(Math.PI / 3),
       n.globalAlpha = .5,
       ue(n, 8, s, T),
       se(n, t[0]),
       n.restore(),
       n.save(),
       n.translate(o / 2 - 11 * e, a / 2 + 12 * e),
       n.globalAlpha = 1,
       n.rotate(Math.PI / 3),
       n.translate(0, -I),
       ue(n, 8, s, T),
       se(n, t[1]),
       n.restore(),
       n.save(),
       n.translate(o / 2 - 9 * e, a / 2 - 12 * e),
       n.rotate(Math.PI / 2.8),
       ue(n, 5, .5 * s, .4 * T),
       se(n, t[2]),
       n.restore(),
       n.save(),
       n.translate(o / 2 + 19 * e, a / 2 + 5 * e),
       n.rotate(Math.PI / 1),
       ue(n, 5, .5 * s, .4 * T),
       se(n, t[2]),
       n.restore(),
       n.save(),
       n.translate(o / 2 - 8 * e, a / 2 + 20 * e),
       n.rotate(Math.PI / 2.25),
       ue(n, 5, .5 * s, .4 * T),
       se(n, t[2]),
       n.restore(),
       r
   }
   function xi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 180 * e
         , a = 210 * e
         , s = (I = 60 * e) / 4
         , T = 20 * e;
       r.width = o,
       r.height = a,
       n.save(),
       n.translate(o / 2 - 0 * e, a / 2 - 35 * e + T),
       n.rotate(Math.PI / -1.8),
       n.globalAlpha = .5,
       n.translate(0 * e, -20 * e),
       ue(n, 5, I, s),
       se(n, t[0]),
       n.restore(),
       n.save(),
       n.translate(o / 2 + 10 * e, a / 2 + 15 * e + T),
       n.rotate(Math.PI / 2),
       n.globalAlpha = .5,
       n.translate(0 * e, -20 * e),
       ue(n, 5, I, s),
       se(n, t[0]),
       n.restore(),
       n.save(),
       n.translate(o / 2 - 50 * e, a / 2 + 40 * e + T),
       n.rotate(Math.PI / 3),
       n.globalAlpha = .5,
       n.translate(0, -20 * e),
       ue(n, 5, I, s),
       se(n, t[0]),
       n.restore(),
       n.save(),
       n.translate(o / 2 - 0 * e, a / 2 - 35 * e),
       n.rotate(Math.PI / -1.8),
       n.globalAlpha = 1,
       n.translate(0 * e, -20 * e),
       ue(n, 5, I, s),
       se(n, t[1]),
       n.restore(),
       n.save(),
       n.translate(o / 2 + 10 * e, a / 2 + 15 * e),
       n.rotate(Math.PI / 2),
       n.globalAlpha = 1,
       n.translate(0, -20 * e),
       ue(n, 5, I, s),
       se(n, t[1]),
       n.restore(),
       n.save(),
       n.translate(o / 2 - 50 * e, a / 2 + 40 * e),
       n.rotate(Math.PI / 3),
       n.globalAlpha = 1,
       n.translate(0, -20 * e),
       ue(n, 5, I, s),
       se(n, t[1]),
       n.restore();
       var I;
       s = (I = 30 * e) / 4;
       return n.save(),
       n.translate(o / 2 + 5 * e, a / 2 - 20 * e),
       n.rotate(Math.PI / -1.8),
       n.globalAlpha = 1,
       n.translate(0, -20 * e),
       ue(n, 5, I, s),
       se(n, t[2]),
       n.restore(),
       n.save(),
       n.translate(o / 2 + 0 * e, a / 2 + 10 * e),
       n.rotate(Math.PI / 2),
       n.globalAlpha = 1,
       n.translate(0, -20 * e),
       ue(n, 5, I, s),
       se(n, t[2]),
       n.restore(),
       n.save(),
       n.translate(o / 2 - 45 * e, a / 2 + 35 * e),
       n.rotate(Math.PI / 3),
       n.globalAlpha = 1,
       n.translate(0, -20 * e),
       ue(n, 5, I, s),
       se(n, t[2]),
       n.restore(),
       Ee(n, o / 2 - 7 * e, a / 2 + 7 * e, 5),
       se(n, t[2]),
       r
   }
   function Ji(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 140 * e
         , a = 150 * e
         , s = 10 * e
         , T = 4 * e;
       return r.width = o,
       r.height = a,
       n.translate(-50 * e, -38 * e + s),
       n.globalAlpha = i ? .5 : 1,
       n.beginPath(),
       n.bezierCurveTo(160 * e, 65 * e, 160 * e, 85 * e, 152 * e, 95 * e),
       n.bezierCurveTo(152 * e, 95 * e, 173 * e, 94 * e, 187 * e, 102 * e),
       n.bezierCurveTo(187 * e, 102 * e, 180 * e, 120 * e, 155 * e, 126 * e),
       n.bezierCurveTo(154 * e, 126 * e, 166 * e, 138 * e, 169 * e, 148 * e),
       n.bezierCurveTo(169 * e, 148 * e, 148 * e, 152 * e, 133 * e, 140 * e),
       n.bezierCurveTo(133 * e, 140 * e, 134 * e, 160 * e, 122 * e, 175 * e),
       n.bezierCurveTo(122 * e, 175 * e, 107 * e, 162 * e, 107 * e, 144 * e),
       n.bezierCurveTo(107 * e, 144 * e, 98 * e, 164 * e, 73 * e, 167 * e),
       n.bezierCurveTo(73 * e, 167 * e, 72 * e, 134 * e, 90 * e, 127 * e),
       n.bezierCurveTo(90 * e, 127 * e, 70 * e, 134 * e, 55 * e, 123 * e),
       n.bezierCurveTo(55 * e, 123 * e, 58 * e, 115 * e, 75 * e, 104 * e),
       n.bezierCurveTo(75 * e, 104 * e, 66 * e, 96 * e, 61 * e, 77 * e),
       n.bezierCurveTo(61 * e, 77 * e, 83 * e, 74 * e, 102 * e, 89 * e),
       n.bezierCurveTo(102 * e, 89 * e, 92 * e, 66 * e, 110 * e, 41 * e),
       n.bezierCurveTo(111 * e, 40 * e, 130 * e, 54 * e, 130 * e, 82 * e),
       n.bezierCurveTo(130 * e, 82 * e, 143 * e, 67 * e, 159 * e, 65 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(0, 0 - s),
       n.globalAlpha = 1,
       n.beginPath(),
       n.bezierCurveTo(160 * e, 65 * e, 160 * e, 85 * e, 152 * e, 95 * e),
       n.bezierCurveTo(152 * e, 95 * e, 173 * e, 94 * e, 187 * e, 102 * e),
       n.bezierCurveTo(187 * e, 102 * e, 180 * e, 120 * e, 155 * e, 126 * e),
       n.bezierCurveTo(154 * e, 126 * e, 166 * e, 138 * e, 169 * e, 148 * e),
       n.bezierCurveTo(169 * e, 148 * e, 148 * e, 152 * e, 133 * e, 140 * e),
       n.bezierCurveTo(133 * e, 140 * e, 134 * e, 160 * e, 122 * e, 175 * e),
       n.bezierCurveTo(122 * e, 175 * e, 107 * e, 162 * e, 107 * e, 144 * e),
       n.bezierCurveTo(107 * e, 144 * e, 98 * e, 164 * e, 73 * e, 167 * e),
       n.bezierCurveTo(73 * e, 167 * e, 72 * e, 134 * e, 90 * e, 127 * e),
       n.bezierCurveTo(90 * e, 127 * e, 70 * e, 134 * e, 55 * e, 123 * e),
       n.bezierCurveTo(55 * e, 123 * e, 58 * e, 115 * e, 75 * e, 104 * e),
       n.bezierCurveTo(75 * e, 104 * e, 66 * e, 96 * e, 61 * e, 77 * e),
       n.bezierCurveTo(61 * e, 77 * e, 83 * e, 74 * e, 102 * e, 89 * e),
       n.bezierCurveTo(102 * e, 89 * e, 92 * e, 66 * e, 110 * e, 41 * e),
       n.bezierCurveTo(111 * e, 40 * e, 130 * e, 54 * e, 130 * e, 82 * e),
       n.bezierCurveTo(130 * e, 82 * e, 143 * e, 67 * e, 159 * e, 65 * e),
       n.closePath(),
       se(n, t[1], t[2], T),
       r
   }
   function Xi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 18 * e
         , a = 18 * e;
       r.width = o,
       r.height = a;
       var s = 9 * e
         , T = 9 * e
         , I = 8 * e;
       n.save(),
       n.translate(s, T),
       n.globalAlpha = 1,
       Ee(n, 0, 0, I),
       se(n, t[0]);
       I = 3 * e,
       s = 0,
       T = -3 * e;
       return n.translate(s, T),
       n.globalAlpha = 1,
       Ee(n, 0, 0, I),
       se(n, t[1]),
       n.restore(),
       r
   }
   function qi(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 80 * e,
       t.height = 100 * e,
       r.scale(.5, .5),
       r.translate(10, 15),
       r.globalAlpha = .5,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(47 * e, 5 * e),
       r.bezierCurveTo(19 * e, 30 * e, 12 * e, 42 * e, 10 * e, 55 * e),
       r.bezierCurveTo(11 * e, 75 * e, 27 * e, 76 * e, 36 * e, 72 * e),
       r.bezierCurveTo(52 * e, 60 * e, 53 * e, 46 * e, 54 * e, 31 * e),
       r.bezierCurveTo(53 * e, 14 * e, 50 * e, 9 * e, 48 * e, 6 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(17 * e, 70 * e),
       r.bezierCurveTo(18 * e, 77 * e, 10 * e, 83 * e, 4 * e, 87 * e),
       se(r, void 0, i[0], 10 * e),
       r.translate(0, -10),
       r.globalAlpha = 1,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(47 * e, 5 * e),
       r.bezierCurveTo(19 * e, 30 * e, 12 * e, 42 * e, 10 * e, 55 * e),
       r.bezierCurveTo(11 * e, 75 * e, 27 * e, 76 * e, 36 * e, 72 * e),
       r.bezierCurveTo(52 * e, 60 * e, 53 * e, 46 * e, 54 * e, 31 * e),
       r.bezierCurveTo(53 * e, 14 * e, 50 * e, 9 * e, 48 * e, 6 * e),
       r.closePath(),
       se(r, i[1], i[2], 8 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(17 * e, 70 * e),
       r.bezierCurveTo(18 * e, 77 * e, 10 * e, 83 * e, 4 * e, 87 * e),
       se(r, void 0, i[2], 8 * e),
       r.globalAlpha = .5,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(17 * e, 70 * e),
       r.bezierCurveTo(33 * e, 52 * e, 39 * e, 33 * e, 48 * e, 7 * e),
       se(r, void 0, i[2], 8 * e),
       t
   }
   function qi(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 234 * e,
       t.height = 183 * e,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(76 * e, 25 * e),
       r.bezierCurveTo(150 * e, 3 * e, 181 * e, 22 * e, 203 * e, 41 * e),
       r.bezierCurveTo(225 * e, 63 * e, 225 * e, 105 * e, 198 * e, 133 * e),
       r.bezierCurveTo(179 * e, 157 * e, 134 * e, 178 * e, 81 * e, 164 * e),
       r.bezierCurveTo(19 * e, 148 * e, 6 * e, 95 * e, 21 * e, 66 * e),
       r.bezierCurveTo(34 * e, 39 * e, 52 * e, 33 * e, 75 * e, 25 * e),
       r.closePath(),
       se(r, i[0], i[0], 4 * e),
       t
   }
   function ji(e, i, t, r) {
       var n = document.createElement("canvas")
         , o = n.getContext("2d");
       if (0 == r) {
           var a = 270 * e
             , s = 250 * e;
           n.width = a,
           n.height = s,
           o.beginPath(),
           o.moveTo(140 * e, 3 * e),
           o.translate(-25 * e, -20 * e),
           o.bezierCurveTo(218 * e, 31 * e, 251 * e, 61 * e, 265 * e, 85 * e),
           o.bezierCurveTo(278 * e, 108 * e, 295 * e, 160 * e, 285 * e, 195 * e),
           o.bezierCurveTo(271 * e, 242 * e, 213 * e, 268 * e, 188 * e, 266 * e),
           o.bezierCurveTo(139 * e, 262 * e, 70 * e, 244 * e, 47 * e, 204 * e),
           o.bezierCurveTo(20 * e, 158 * e, 35 * e, 78 * e, 59 * e, 56 * e),
           o.bezierCurveTo(90 * e, 28 * e, 124 * e, 23 * e, 140 * e, 23 * e),
           o.closePath(),
           se(o, t[0])
       } else if (1 == r) {
           a = 430 * e,
           s = 350 * e;
           n.width = a,
           n.height = s,
           o.beginPath(),
           o.moveTo(180 * e, 5 * e),
           o.translate(-30 * e, -60 * e),
           o.bezierCurveTo(283 * e, 60 * e, 265 * e, 163 * e, 335 * e, 206 * e),
           o.bezierCurveTo(376 * e, 231 * e, 492 * e, 299 * e, 434 * e, 357 * e),
           o.bezierCurveTo(371 * e, 421 * e, 289 * e, 394 * e, 255 * e, 386 * e),
           o.bezierCurveTo(218 * e, 377 * e, 91 * e, 359 * e, 50 * e, 272 * e),
           o.bezierCurveTo(12 * e, 192 * e, 107 * e, 75 * e, 178 * e, 69 * e),
           o.closePath(),
           se(o, t[0])
       } else if (2 == r) {
           a = 400 * e,
           s = 300 * e;
           n.width = a,
           n.height = s,
           o.beginPath(),
           o.moveTo(80 * e, 52 * e),
           o.translate(-40 * e, -30 * e),
           o.bezierCurveTo(124 * e, 77 * e, 241 * e, 22 * e, 311 * e, 65 * e),
           o.bezierCurveTo(352 * e, 90 * e, 404 * e, 176 * e, 346 * e, 234 * e),
           o.bezierCurveTo(283 * e, 298 * e, 179 * e, 299 * e, 145 * e, 291 * e),
           o.bezierCurveTo(108 * e, 282 * e, 100 * e, 239 * e, 63 * e, 205 * e),
           o.bezierCurveTo(37 * e, 181 * e, 45 * e, 131 * e, 80 * e, 107 * e),
           o.closePath(),
           se(o, t[0])
       }
       return n
   }
   function Zi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = e * i * 2
         , a = e * i * 2
         , s = o / 2
         , T = a / 2;
       return r.width = o,
       r.height = a,
       n.translate(s, T),
       Ee(n, 0, 0, i * e, 0),
       se(n, t),
       r
   }
   function Qi(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 373 * e,
       r.height = 314 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.save(),
       n.translate(184.048583984375 * e, 69.1805419921875 * e),
       Te(n, -40 * e, -28.5 * e, 80 * e, 57 * e, 10 * e),
       n.restore(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(185.048583984375 * e, 61.6805419921875 * e),
       n.bezierCurveTo(145.048583984375 * e, 59.6805419921875 * e, 138.048583984375 * e, 41.6805419921875 * e, 148.048583984375 * e, 33.6805419921875 * e),
       n.bezierCurveTo(169.048583984375 * e, 17.6805419921875 * e, 194.048583984375 * e, 20.6805419921875 * e, 210.048583984375 * e, 27.6805419921875 * e),
       n.bezierCurveTo(234.048583984375 * e, 40.6805419921875 * e, 225.048583984375 * e, 57.6805419921875 * e, 186.048583984375 * e, 61.6805419921875 * e),
       n.closePath(),
       se(n, t[0], t[0], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(224.048583984375 * e, 56.6805419921875 * e),
       n.bezierCurveTo(326.048583984375 * e, 69.6805419921875 * e, 363.048583984375 * e, 148.6805419921875 * e, 349.048583984375 * e, 206.6805419921875 * e),
       n.bezierCurveTo(329.048583984375 * e, 278.6805419921875 * e, 252.048583984375 * e, 283.6805419921875 * e, 206.048583984375 * e, 275.6805419921875 * e),
       n.bezierCurveTo(206.548583984375 * e, 266.6805419921875 * e, 206.548583984375 * e, 266.6805419921875 * e, 207.048583984375 * e, 257.6805419921875 * e),
       n.bezierCurveTo(276.048583984375 * e, 268.6805419921875 * e, 308.048583984375 * e, 239.6805419921875 * e, 323.048583984375 * e, 208.6805419921875 * e),
       n.bezierCurveTo(352.048583984375 * e, 145.6805419921875 * e, 292.048583984375 * e, 86.6805419921875 * e, 223.048583984375 * e, 74.6805419921875 * e),
       n.closePath(),
       se(n, t[0], t[0], 6 * e),
       n.save(),
       n.translate(183.548583984375 * e, 119.6805419921875 * e),
       Te(n, -121.5 * e, -45 * e, 243 * e, 90 * e, 40 * e),
       n.restore(),
       se(n, t[0], t[0], 6 * e),
       n.save(),
       n.translate(183.048583984375 * e, 155.6805419921875 * e),
       Te(n, -121 * e, -52 * e, 242 * e, 104 * e, 40 * e),
       n.restore(),
       se(n, t[0], t[0], 6 * e),
       n.save(),
       n.translate(183.048583984375 * e, 205.1805419921875 * e),
       Te(n, -121 * e, -50.5 * e, 242 * e, 101 * e, 40 * e),
       n.restore(),
       se(n, t[0], t[0], 6 * e),
       n.save(),
       n.translate(185.048583984375 * e, 204.1805419921875 * e),
       Te(n, -100 * e, -34.5 * e, 200 * e, 69 * e, 40 * e),
       n.restore(),
       se(n, t[0], t[0], 6 * e),
       Ee(n, 185.048583984375 * e, 257.6805419921875 * e, 27.018512172212592 * e),
       se(n, t[0], t[0], 6 * e),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(224.048583984375 * e, 56.6805419921875 * e),
       n.bezierCurveTo(326.048583984375 * e, 69.6805419921875 * e, 363.048583984375 * e, 148.6805419921875 * e, 349.048583984375 * e, 206.6805419921875 * e),
       n.bezierCurveTo(329.048583984375 * e, 278.6805419921875 * e, 252.048583984375 * e, 283.6805419921875 * e, 206.048583984375 * e, 275.6805419921875 * e),
       n.bezierCurveTo(206.548583984375 * e, 266.6805419921875 * e, 206.548583984375 * e, 266.6805419921875 * e, 207.048583984375 * e, 257.6805419921875 * e),
       n.bezierCurveTo(276.048583984375 * e, 268.6805419921875 * e, 308.048583984375 * e, 239.6805419921875 * e, 323.048583984375 * e, 208.6805419921875 * e),
       n.bezierCurveTo(352.048583984375 * e, 145.6805419921875 * e, 292.048583984375 * e, 86.6805419921875 * e, 223.048583984375 * e, 74.6805419921875 * e),
       n.closePath(),
       se(n, t[3], t[4], 6 * e),
       n.save(),
       n.translate(184.048583984375 * e, 69.1805419921875 * e),
       Te(n, -40 * e, -28.5 * e, 80 * e, 57 * e, 10 * e),
       n.restore(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(185.048583984375 * e, 61.6805419921875 * e),
       n.bezierCurveTo(145.048583984375 * e, 59.6805419921875 * e, 138.048583984375 * e, 41.6805419921875 * e, 148.048583984375 * e, 33.6805419921875 * e),
       n.bezierCurveTo(169.048583984375 * e, 17.6805419921875 * e, 194.048583984375 * e, 20.6805419921875 * e, 210.048583984375 * e, 27.6805419921875 * e),
       n.bezierCurveTo(234.048583984375 * e, 40.6805419921875 * e, 225.048583984375 * e, 57.6805419921875 * e, 186.048583984375 * e, 61.6805419921875 * e),
       n.closePath(),
       se(n, t[1], t[2], 6 * e),
       n.save(),
       n.translate(183.548583984375 * e, 119.6805419921875 * e),
       Te(n, -121.5 * e, -45 * e, 243 * e, 90 * e, 40 * e),
       n.restore(),
       se(n, t[5], t[4], 6 * e),
       n.save(),
       n.translate(183.048583984375 * e, 155.6805419921875 * e),
       Te(n, -121 * e, -52 * e, 242 * e, 104 * e, 40 * e),
       n.restore(),
       se(n, t[3], t[4], 6 * e),
       n.save(),
       n.translate(183.048583984375 * e, 205.1805419921875 * e),
       Te(n, -121 * e, -50.5 * e, 242 * e, 101 * e, 40 * e),
       n.restore(),
       se(n, t[6], t[4], 6 * e),
       n.globalCompositeOperation = "destination-out",
       n.save(),
       n.translate(185.048583984375 * e, 204.1805419921875 * e),
       Te(n, -100 * e, -34.5 * e, 200 * e, 69 * e, 40 * e),
       n.restore(),
       se(n, t[7], t[8], 6 * e),
       n.globalCompositeOperation = "source-over",
       n.globalAlpha = .5,
       n.save(),
       n.translate(185.048583984375 * e, 204.1805419921875 * e),
       Te(n, -100 * e, -34.5 * e, 200 * e, 69 * e, 40 * e),
       n.restore(),
       se(n, t[7], t[8], 6 * e),
       n.globalAlpha = 1,
       n.save(),
       Ee(n, 185.048583984375 * e, 257.6805419921875 * e, 27.018512172212592 * e),
       se(n, t[3], t[4], 6 * e),
       n.restore(),
       r
   }
   function $i(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 220 * e,
       r.height = 180 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(-90 * e, -150 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(104 * e, 237.8000030517578 * e),
       n.bezierCurveTo(110 * e, 237.8000030517578 * e, 110 * e, 237.8000030517578 * e, 116 * e, 237.8000030517578 * e),
       n.bezierCurveTo(116 * e, 241.8000030517578 * e, 116 * e, 241.8000030517578 * e, 116 * e, 245.8000030517578 * e),
       n.bezierCurveTo(115 * e, 245.3000030517578 * e, 115 * e, 245.3000030517578 * e, 114 * e, 244.8000030517578 * e),
       n.bezierCurveTo(109.5 * e, 244.8000030517578 * e, 109.5 * e, 244.8000030517578 * e, 105 * e, 244.8000030517578 * e),
       n.closePath(),
       se(n, t[5], t[5], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(115 * e, 211.20000457763672 * e),
       n.bezierCurveTo(106 * e, 216.20000457763672 * e, 101 * e, 234.20000457763672 * e, 102 * e, 241.20000457763672 * e),
       n.bezierCurveTo(102 * e, 260.2000045776367 * e, 115 * e, 269.2000045776367 * e, 115 * e, 269.2000045776367 * e),
       n.bezierCurveTo(116 * e, 265.2000045776367 * e, 115.5 * e, 265.2000045776367 * e, 116 * e, 261.2000045776367 * e),
       n.bezierCurveTo(112 * e, 264 * e, 108 * e, 254 * e, 106 * e, 242 * e),
       n.bezierCurveTo(105 * e, 232 * e, 110 * e, 222 * e, 115 * e, 218 * e),
       n.bezierCurveTo(116 * e, 216.75 * e, 115.5 * e, 217.375 * e, 116 * e, 216.75 * e),
       n.closePath(),
       se(n, t[5], t[5], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(120 * e, 207 * e),
       n.bezierCurveTo(115 * e, 206 * e, 114 * e, 209 * e, 114 * e, 211 * e),
       n.bezierCurveTo(114 * e, 268 * e, 114 * e, 241 * e, 114 * e, 271 * e),
       n.bezierCurveTo(115 * e, 276 * e, 118 * e, 276 * e, 120 * e, 276 * e),
       n.bezierCurveTo(122 * e, 273 * e, 120.5 * e, 274.5 * e, 121 * e, 273 * e),
       n.bezierCurveTo(121 * e, 241 * e, 121 * e, 241 * e, 121 * e, 209 * e),
       n.closePath(),
       se(n, t[4], t[4], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(284 * e, 238 * e),
       n.bezierCurveTo(289.5 * e, 238 * e, 289.5 * e, 238 * e, 295 * e, 238 * e),
       n.bezierCurveTo(295 * e, 241.5 * e, 295 * e, 241.5 * e, 295 * e, 245 * e),
       n.bezierCurveTo(289.5 * e, 245 * e, 289.5 * e, 245 * e, 284 * e, 245 * e),
       n.closePath(),
       se(n, t[4], t[4], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(283 * e, 211 * e),
       n.bezierCurveTo(293 * e, 216 * e, 297 * e, 231 * e, 297 * e, 241 * e),
       n.bezierCurveTo(298 * e, 254 * e, 290 * e, 265 * e, 284 * e, 269 * e),
       n.bezierCurveTo(283 * e, 266 * e, 283.5 * e, 266 * e, 283 * e, 263 * e),
       n.bezierCurveTo(290 * e, 260 * e, 292 * e, 251 * e, 293 * e, 242 * e),
       n.bezierCurveTo(292 * e, 223 * e, 289 * e, 224 * e, 284 * e, 218 * e),
       n.closePath(),
       se(n, t[4], t[4], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(280 * e, 206 * e),
       n.bezierCurveTo(284 * e, 206 * e, 285 * e, 208 * e, 285 * e, 211 * e),
       n.bezierCurveTo(285 * e, 241.5 * e, 285 * e, 241.5 * e, 285 * e, 272 * e),
       n.bezierCurveTo(284 * e, 275 * e, 284 * e, 275 * e, 280 * e, 275 * e),
       n.bezierCurveTo(279 * e, 273.5 * e, 279 * e, 273.5 * e, 278 * e, 272 * e),
       n.bezierCurveTo(278 * e, 240.5 * e, 278 * e, 240.5 * e, 278 * e, 209 * e),
       n.closePath(),
       se(n, t[4], t[4], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(138 * e, 298.40000915527344 * e),
       n.bezierCurveTo(141 * e, 311.40000915527344 * e, 151 * e, 314.40000915527344 * e, 162 * e, 316.40000915527344 * e),
       n.bezierCurveTo(224 * e, 316.40000915527344 * e, 200 * e, 315.90000915527344 * e, 238 * e, 315.40000915527344 * e),
       n.bezierCurveTo(254 * e, 316.40000915527344 * e, 261 * e, 306.40000915527344 * e, 264 * e, 298.40000915527344 * e),
       n.bezierCurveTo(255 * e, 304.40000915527344 * e, 250 * e, 306.40000915527344 * e, 244 * e, 306.40000915527344 * e),
       n.bezierCurveTo(201 * e, 306.90000915527344 * e, 201 * e, 306.90000915527344 * e, 158 * e, 307.40000915527344 * e),
       n.bezierCurveTo(150 * e, 306.40000915527344 * e, 148 * e, 306.40000915527344 * e, 139 * e, 300.40000915527344 * e),
       n.closePath(),
       se(n, t[4], t[4], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(161 * e, 177.5999984741211 * e),
       n.bezierCurveTo(130 * e, 175.5999984741211 * e, 123 * e, 190.5999984741211 * e, 122 * e, 205.5999984741211 * e),
       n.bezierCurveTo(121 * e, 277.5999984741211 * e, 122 * e, 242.5999984741211 * e, 122 * e, 279.5999984741211 * e),
       n.bezierCurveTo(128 * e, 297.5999984741211 * e, 137 * e, 299.5999984741211 * e, 143 * e, 300.5999984741211 * e),
       n.bezierCurveTo(163 * e, 301.0999984741211 * e, 163 * e, 301.0999984741211 * e, 183 * e, 301.5999984741211 * e),
       n.bezierCurveTo(150 * e, 300.5999984741211 * e, 135 * e, 290.5999984741211 * e, 134 * e, 267.5999984741211 * e),
       n.bezierCurveTo(133 * e, 245.5999984741211 * e, 146 * e, 235.5999984741211 * e, 164 * e, 235.5999984741211 * e),
       n.bezierCurveTo(206 * e, 236.0999984741211 * e, 206 * e, 236.0999984741211 * e, 248 * e, 236.5999984741211 * e),
       n.bezierCurveTo(266 * e, 243.5999984741211 * e, 268 * e, 259.5999984741211 * e, 267 * e, 266.5999984741211 * e),
       n.bezierCurveTo(266 * e, 288.5999984741211 * e, 251 * e, 294.5999984741211 * e, 244 * e, 297.5999984741211 * e),
       n.bezierCurveTo(228.5 * e, 299.5999984741211 * e, 228.5 * e, 299.5999984741211 * e, 213 * e, 301.5999984741211 * e),
       n.bezierCurveTo(236 * e, 301.0999984741211 * e, 236 * e, 301.0999984741211 * e, 259 * e, 300.5999984741211 * e),
       n.bezierCurveTo(272 * e, 295.5999984741211 * e, 277 * e, 288.5999984741211 * e, 278 * e, 271.5999984741211 * e),
       n.bezierCurveTo(277.5 * e, 236.5999984741211 * e, 277.5 * e, 236.5999984741211 * e, 277 * e, 201.5999984741211 * e),
       n.bezierCurveTo(276 * e, 186.5999984741211 * e, 265 * e, 178.5999984741211 * e, 254 * e, 177.5999984741211 * e),
       n.bezierCurveTo(247.5 * e, 177.5999984741211 * e, 247.5 * e, 177.5999984741211 * e, 241 * e, 177.5999984741211 * e),
       n.bezierCurveTo(255 * e, 202.5999984741211 * e, 214 * e, 217.5999984741211 * e, 201 * e, 215.5999984741211 * e),
       n.bezierCurveTo(170 * e, 215.5999984741211 * e, 152 * e, 197.5999984741211 * e, 161 * e, 178.5999984741211 * e),
       n.closePath(),
       se(n, t[4], t[4], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(162 * e, 175.5999984741211 * e),
       n.bezierCurveTo(153 * e, 176.0999984741211 * e, 153 * e, 176.0999984741211 * e, 144 * e, 176.5999984741211 * e),
       n.bezierCurveTo(125 * e, 178.5999984741211 * e, 121 * e, 196.5999984741211 * e, 121 * e, 207.5999984741211 * e),
       n.bezierCurveTo(121 * e, 243.20000076293945 * e, 121 * e, 243.20000076293945 * e, 121 * e, 278.8000030517578 * e),
       n.bezierCurveTo(126 * e, 298.8000030517578 * e, 137 * e, 300.8000030517578 * e, 146 * e, 302.8000030517578 * e),
       n.bezierCurveTo(200.5 * e, 302.8000030517578 * e, 200.5 * e, 302.8000030517578 * e, 255 * e, 302.8000030517578 * e),
       n.bezierCurveTo(271 * e, 301.8000030517578 * e, 279 * e, 288.8000030517578 * e, 279 * e, 273.8000030517578 * e),
       n.bezierCurveTo(279 * e, 236.8000030517578 * e, 279 * e, 236.8000030517578 * e, 279 * e, 199.8000030517578 * e),
       n.bezierCurveTo(274 * e, 178.8000030517578 * e, 263 * e, 177.8000030517578 * e, 255 * e, 175.8000030517578 * e),
       n.bezierCurveTo(248 * e, 175.8000030517578 * e, 248 * e, 175.8000030517578 * e, 241 * e, 175.8000030517578 * e),
       n.bezierCurveTo(240 * e, 175.8000030517578 * e, 240 * e, 175.8000030517578 * e, 239 * e, 175.8000030517578 * e),
       n.bezierCurveTo(254 * e, 200.8000030517578 * e, 222 * e, 211.8000030517578 * e, 202 * e, 212.8000030517578 * e),
       n.bezierCurveTo(168 * e, 213.8000030517578 * e, 151 * e, 190.8000030517578 * e, 163 * e, 176.8000030517578 * e),
       n.closePath(),
       se(n, void 0, t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(198 * e, 161.4000015258789 * e),
       n.bezierCurveTo(198 * e, 186.9000015258789 * e, 198 * e, 186.9000015258789 * e, 198 * e, 212.4000015258789 * e),
       n.bezierCurveTo(201 * e, 212.4000015258789 * e, 201 * e, 212.4000015258789 * e, 204 * e, 212.4000015258789 * e),
       n.bezierCurveTo(204 * e, 186.9000015258789 * e, 204 * e, 186.9000015258789 * e, 204 * e, 161.4000015258789 * e),
       n.closePath(),
       se(n, t[4], t[4], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(161 * e, 194 * e),
       n.bezierCurveTo(188 * e, 169 * e, 231 * e, 179 * e, 241 * e, 194 * e),
       n.bezierCurveTo(239.5 * e, 196 * e, 239.5 * e, 196 * e, 238 * e, 198 * e),
       n.bezierCurveTo(221 * e, 179 * e, 182 * e, 182 * e, 165 * e, 198 * e),
       n.closePath(),
       se(n, t[4], t[4], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(157 * e, 188.80000019073486 * e),
       n.bezierCurveTo(162 * e, 150.80000019073486 * e, 241 * e, 150.80000019073486 * e, 245 * e, 188.80000019073486 * e),
       n.bezierCurveTo(242 * e, 224.80000019073486 * e, 162 * e, 228.80000019073486 * e, 157 * e, 188.80000019073486 * e),
       n.bezierCurveTo(159 * e, 188.80000019073486 * e, 159 * e, 188.80000019073486 * e, 161 * e, 188.80000019073486 * e),
       n.bezierCurveTo(168 * e, 216.80000019073486 * e, 231 * e, 218.80000019073486 * e, 241 * e, 188.80000019073486 * e),
       n.bezierCurveTo(236 * e, 156.80000019073486 * e, 169 * e, 152.80000019073486 * e, 161 * e, 188.80000019073486 * e),
       n.closePath(),
       se(n, t[4], t[4], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(156 * e, 188 * e),
       n.bezierCurveTo(160 * e, 164 * e, 183 * e, 159 * e, 201 * e, 158 * e),
       n.bezierCurveTo(232 * e, 159 * e, 244 * e, 174 * e, 246 * e, 188 * e),
       n.bezierCurveTo(245 * e, 212 * e, 213 * e, 219 * e, 201 * e, 218 * e),
       n.bezierCurveTo(181 * e, 221 * e, 158 * e, 207 * e, 156 * e, 190 * e),
       n.closePath(),
       se(n, void 0, t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(162 * e, 189 * e),
       n.bezierCurveTo(166 * e, 170 * e, 185 * e, 165 * e, 201 * e, 164 * e),
       n.bezierCurveTo(227 * e, 165 * e, 240 * e, 178 * e, 239 * e, 188 * e),
       n.bezierCurveTo(239 * e, 204 * e, 210 * e, 210 * e, 201 * e, 210 * e),
       n.bezierCurveTo(182 * e, 211 * e, 166 * e, 200 * e, 162 * e, 190 * e),
       n.closePath(),
       se(n, void 0, t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(131 * e, 262 * e),
       n.bezierCurveTo(136 * e, 241 * e, 144 * e, 236 * e, 158 * e, 233 * e),
       n.bezierCurveTo(200.5 * e, 233 * e, 229 * e, 232 * e, 243 * e, 233 * e),
       n.bezierCurveTo(259 * e, 235 * e, 267 * e, 248 * e, 269 * e, 260 * e),
       n.bezierCurveTo(269 * e, 266.5 * e, 269 * e, 266.5 * e, 269 * e, 273 * e),
       n.bezierCurveTo(265 * e, 290 * e, 251 * e, 297 * e, 242 * e, 298 * e),
       n.bezierCurveTo(202 * e, 298 * e, 202 * e, 298 * e, 162 * e, 298 * e),
       n.bezierCurveTo(148 * e, 298 * e, 136 * e, 289 * e, 132 * e, 273 * e),
       n.bezierCurveTo(131.5 * e, 268 * e, 131.5 * e, 268 * e, 131 * e, 263 * e),
       n.bezierCurveTo(135 * e, 263 * e, 135 * e, 263 * e, 139 * e, 263 * e),
       n.bezierCurveTo(139 * e, 281 * e, 151 * e, 287 * e, 160 * e, 290 * e),
       n.bezierCurveTo(200.5 * e, 290 * e, 200.5 * e, 290 * e, 241 * e, 290 * e),
       n.bezierCurveTo(252 * e, 290 * e, 257 * e, 281 * e, 262 * e, 271 * e),
       n.bezierCurveTo(261.5 * e, 267 * e, 261.5 * e, 267 * e, 261 * e, 263 * e),
       n.bezierCurveTo(260 * e, 249 * e, 251 * e, 242 * e, 241 * e, 241 * e),
       n.bezierCurveTo(240.5 * e, 240.5 * e, 240.5 * e, 240.5 * e, 240 * e, 240 * e),
       n.bezierCurveTo(200 * e, 240 * e, 200 * e, 240 * e, 160 * e, 240 * e),
       n.bezierCurveTo(145 * e, 244 * e, 142 * e, 250 * e, 139 * e, 264 * e),
       n.closePath(),
       se(n, t[4], t[4], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(130 * e, 264 * e),
       n.bezierCurveTo(132 * e, 244 * e, 144 * e, 235 * e, 157 * e, 232 * e),
       n.bezierCurveTo(245 * e, 232 * e, 201 * e, 232 * e, 245 * e, 232 * e),
       n.bezierCurveTo(264 * e, 235 * e, 269 * e, 251 * e, 270 * e, 264 * e),
       n.bezierCurveTo(272 * e, 291 * e, 248 * e, 299 * e, 242 * e, 299 * e),
       n.bezierCurveTo(200 * e, 299 * e, 200 * e, 299 * e, 158 * e, 299 * e),
       n.bezierCurveTo(139 * e, 298 * e, 130 * e, 276 * e, 130 * e, 265 * e),
       n.closePath(),
       se(n, void 0, t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(140 * e, 265.33333587646484 * e),
       n.bezierCurveTo(141 * e, 250.33333587646484 * e, 148 * e, 244.33333587646484 * e, 160 * e, 241.33333587646484 * e),
       n.bezierCurveTo(200 * e, 241.33333587646484 * e, 200 * e, 241.33333587646484 * e, 240 * e, 241.33333587646484 * e),
       n.bezierCurveTo(256 * e, 243.33333587646484 * e, 260 * e, 255.33333587646484 * e, 260 * e, 265.33333587646484 * e),
       n.bezierCurveTo(261 * e, 281.33333587646484 * e, 247 * e, 289.33333587646484 * e, 240 * e, 289.33333587646484 * e),
       n.bezierCurveTo(161 * e, 289.33333587646484 * e, 200.5 * e, 289.33333587646484 * e, 161 * e, 289.33333587646484 * e),
       n.bezierCurveTo(149 * e, 288.33333587646484 * e, 142 * e, 278.33333587646484 * e, 140 * e, 266.33333587646484 * e),
       n.closePath(),
       se(n, void 0, t[4], 6 * e),
       n.globalAlpha = .5,
       n.scale(1, 1),
       n.translate(105 * e, 155 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(59.27557373046875 * e, 20.406280517578125 * e),
       n.bezierCurveTo(74.27557373046875 * e, 5.406280517578125 * e, 90.27557373046875 * e, 6.406280517578125 * e, 99.27557373046875 * e, 5.406280517578125 * e),
       n.bezierCurveTo(120.27557373046875 * e, 5.406280517578125 * e, 126.27557373046875 * e, 10.406280517578125 * e, 136.27557373046875 * e, 20.406280517578125 * e),
       n.bezierCurveTo(157.77557373046875 * e, 37.906280517578125 * e, 157.77557373046875 * e, 37.906280517578125 * e, 179.27557373046875 * e, 55.406280517578125 * e),
       n.bezierCurveTo(190.27557373046875 * e, 63.406280517578125 * e, 192.27557373046875 * e, 77.40628051757812 * e, 189.27557373046875 * e, 91.40628051757812 * e),
       n.bezierCurveTo(183.27557373046875 * e, 108.40628051757812 * e, 176.27557373046875 * e, 110.40628051757812 * e, 169.27557373046875 * e, 118.40628051757812 * e),
       n.bezierCurveTo(152.27557373046875 * e, 133.40628051757812 * e, 152.27557373046875 * e, 133.40628051757812 * e, 135.27557373046875 * e, 148.40628051757812 * e),
       n.bezierCurveTo(87.27557373046875 * e, 143.40628051757812 * e, 87.27557373046875 * e, 143.40628051757812 * e, 39.27557373046875 * e, 138.40628051757812 * e),
       n.bezierCurveTo(26.77557373046875 * e, 123.40628051757812 * e, 26.77557373046875 * e, 123.40628051757812 * e, 14.27557373046875 * e, 108.40628051757812 * e),
       n.bezierCurveTo(2.27557373046875 * e, 95.40628051757812 * e, 2.27557373046875 * e, 92.40628051757812 * e, 3.27557373046875 * e, 83.40628051757812 * e),
       n.bezierCurveTo(4.27557373046875 * e, 63.406280517578125 * e, 12.27557373046875 * e, 60.406280517578125 * e, 24.27557373046875 * e, 40.406280517578125 * e),
       n.closePath(),
       se(n, t[5], t[5], 4 * e),
       n.globalAlpha = 1,
       n.translate(-110 * e, -155 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(104 * e, 237.8000030517578 * e),
       n.bezierCurveTo(110 * e, 237.8000030517578 * e, 110 * e, 237.8000030517578 * e, 116 * e, 237.8000030517578 * e),
       n.bezierCurveTo(116 * e, 241.8000030517578 * e, 116 * e, 241.8000030517578 * e, 116 * e, 245.8000030517578 * e),
       n.bezierCurveTo(115 * e, 245.3000030517578 * e, 115 * e, 245.3000030517578 * e, 114 * e, 244.8000030517578 * e),
       n.bezierCurveTo(109.5 * e, 244.8000030517578 * e, 109.5 * e, 244.8000030517578 * e, 105 * e, 244.8000030517578 * e),
       n.closePath(),
       se(n, t[0], t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(115 * e, 211.20000457763672 * e),
       n.bezierCurveTo(106 * e, 216.20000457763672 * e, 101 * e, 234.20000457763672 * e, 102 * e, 241.20000457763672 * e),
       n.bezierCurveTo(102 * e, 260.2000045776367 * e, 115 * e, 269.2000045776367 * e, 115 * e, 269.2000045776367 * e),
       n.bezierCurveTo(116 * e, 265.2000045776367 * e, 115.5 * e, 265.2000045776367 * e, 116 * e, 261.2000045776367 * e),
       n.bezierCurveTo(112 * e, 264 * e, 108 * e, 254 * e, 106 * e, 242 * e),
       n.bezierCurveTo(105 * e, 232 * e, 110 * e, 222 * e, 115 * e, 218 * e),
       n.bezierCurveTo(116 * e, 216.75 * e, 115.5 * e, 217.375 * e, 116 * e, 216.75 * e),
       n.closePath(),
       se(n, t[0], t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(120 * e, 207 * e),
       n.bezierCurveTo(115 * e, 206 * e, 114 * e, 209 * e, 114 * e, 211 * e),
       n.bezierCurveTo(114 * e, 268 * e, 114 * e, 241 * e, 114 * e, 271 * e),
       n.bezierCurveTo(115 * e, 276 * e, 118 * e, 276 * e, 120 * e, 276 * e),
       n.bezierCurveTo(122 * e, 273 * e, 120.5 * e, 274.5 * e, 121 * e, 273 * e),
       n.bezierCurveTo(121 * e, 241 * e, 121 * e, 241 * e, 121 * e, 209 * e),
       n.closePath(),
       se(n, t[0], t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(284 * e, 238 * e),
       n.bezierCurveTo(289.5 * e, 238 * e, 289.5 * e, 238 * e, 295 * e, 238 * e),
       n.bezierCurveTo(295 * e, 241.5 * e, 295 * e, 241.5 * e, 295 * e, 245 * e),
       n.bezierCurveTo(289.5 * e, 245 * e, 289.5 * e, 245 * e, 284 * e, 245 * e),
       n.closePath(),
       se(n, t[0], t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(283 * e, 211 * e),
       n.bezierCurveTo(293 * e, 216 * e, 297 * e, 231 * e, 297 * e, 241 * e),
       n.bezierCurveTo(298 * e, 254 * e, 290 * e, 265 * e, 284 * e, 269 * e),
       n.bezierCurveTo(283 * e, 266 * e, 283.5 * e, 266 * e, 283 * e, 263 * e),
       n.bezierCurveTo(290 * e, 260 * e, 292 * e, 251 * e, 293 * e, 242 * e),
       n.bezierCurveTo(292 * e, 223 * e, 289 * e, 224 * e, 284 * e, 218 * e),
       n.closePath(),
       se(n, t[0], t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(280 * e, 206 * e),
       n.bezierCurveTo(284 * e, 206 * e, 285 * e, 208 * e, 285 * e, 211 * e),
       n.bezierCurveTo(285 * e, 241.5 * e, 285 * e, 241.5 * e, 285 * e, 272 * e),
       n.bezierCurveTo(284 * e, 275 * e, 284 * e, 275 * e, 280 * e, 275 * e),
       n.bezierCurveTo(279 * e, 273.5 * e, 279 * e, 273.5 * e, 278 * e, 272 * e),
       n.bezierCurveTo(278 * e, 240.5 * e, 278 * e, 240.5 * e, 278 * e, 209 * e),
       n.closePath(),
       se(n, t[0], t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(138 * e, 298.40000915527344 * e),
       n.bezierCurveTo(141 * e, 311.40000915527344 * e, 151 * e, 314.40000915527344 * e, 162 * e, 316.40000915527344 * e),
       n.bezierCurveTo(224 * e, 316.40000915527344 * e, 200 * e, 315.90000915527344 * e, 238 * e, 315.40000915527344 * e),
       n.bezierCurveTo(254 * e, 316.40000915527344 * e, 261 * e, 306.40000915527344 * e, 264 * e, 298.40000915527344 * e),
       n.bezierCurveTo(255 * e, 304.40000915527344 * e, 250 * e, 306.40000915527344 * e, 244 * e, 306.40000915527344 * e),
       n.bezierCurveTo(201 * e, 306.90000915527344 * e, 201 * e, 306.90000915527344 * e, 158 * e, 307.40000915527344 * e),
       n.bezierCurveTo(150 * e, 306.40000915527344 * e, 148 * e, 306.40000915527344 * e, 139 * e, 300.40000915527344 * e),
       n.closePath(),
       se(n, t[0], t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(161 * e, 177.5999984741211 * e),
       n.bezierCurveTo(130 * e, 175.5999984741211 * e, 123 * e, 190.5999984741211 * e, 122 * e, 205.5999984741211 * e),
       n.bezierCurveTo(121 * e, 277.5999984741211 * e, 122 * e, 242.5999984741211 * e, 122 * e, 279.5999984741211 * e),
       n.bezierCurveTo(128 * e, 297.5999984741211 * e, 137 * e, 299.5999984741211 * e, 143 * e, 300.5999984741211 * e),
       n.bezierCurveTo(163 * e, 301.0999984741211 * e, 163 * e, 301.0999984741211 * e, 183 * e, 301.5999984741211 * e),
       n.bezierCurveTo(150 * e, 300.5999984741211 * e, 135 * e, 290.5999984741211 * e, 134 * e, 267.5999984741211 * e),
       n.bezierCurveTo(133 * e, 245.5999984741211 * e, 146 * e, 235.5999984741211 * e, 164 * e, 235.5999984741211 * e),
       n.bezierCurveTo(206 * e, 236.0999984741211 * e, 206 * e, 236.0999984741211 * e, 248 * e, 236.5999984741211 * e),
       n.bezierCurveTo(266 * e, 243.5999984741211 * e, 268 * e, 259.5999984741211 * e, 267 * e, 266.5999984741211 * e),
       n.bezierCurveTo(266 * e, 288.5999984741211 * e, 251 * e, 294.5999984741211 * e, 244 * e, 297.5999984741211 * e),
       n.bezierCurveTo(228.5 * e, 299.5999984741211 * e, 228.5 * e, 299.5999984741211 * e, 213 * e, 301.5999984741211 * e),
       n.bezierCurveTo(236 * e, 301.0999984741211 * e, 236 * e, 301.0999984741211 * e, 259 * e, 300.5999984741211 * e),
       n.bezierCurveTo(272 * e, 295.5999984741211 * e, 277 * e, 288.5999984741211 * e, 278 * e, 271.5999984741211 * e),
       n.bezierCurveTo(277.5 * e, 236.5999984741211 * e, 277.5 * e, 236.5999984741211 * e, 277 * e, 201.5999984741211 * e),
       n.bezierCurveTo(276 * e, 186.5999984741211 * e, 265 * e, 178.5999984741211 * e, 254 * e, 177.5999984741211 * e),
       n.bezierCurveTo(247.5 * e, 177.5999984741211 * e, 247.5 * e, 177.5999984741211 * e, 241 * e, 177.5999984741211 * e),
       n.bezierCurveTo(255 * e, 202.5999984741211 * e, 214 * e, 217.5999984741211 * e, 201 * e, 215.5999984741211 * e),
       n.bezierCurveTo(170 * e, 215.5999984741211 * e, 152 * e, 197.5999984741211 * e, 161 * e, 178.5999984741211 * e),
       n.closePath(),
       se(n, t[2], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(162 * e, 175.5999984741211 * e),
       n.bezierCurveTo(153 * e, 176.0999984741211 * e, 153 * e, 176.0999984741211 * e, 144 * e, 176.5999984741211 * e),
       n.bezierCurveTo(125 * e, 178.5999984741211 * e, 121 * e, 196.5999984741211 * e, 121 * e, 207.5999984741211 * e),
       n.bezierCurveTo(121 * e, 243.20000076293945 * e, 121 * e, 243.20000076293945 * e, 121 * e, 278.8000030517578 * e),
       n.bezierCurveTo(126 * e, 298.8000030517578 * e, 137 * e, 300.8000030517578 * e, 146 * e, 302.8000030517578 * e),
       n.bezierCurveTo(200.5 * e, 302.8000030517578 * e, 200.5 * e, 302.8000030517578 * e, 255 * e, 302.8000030517578 * e),
       n.bezierCurveTo(271 * e, 301.8000030517578 * e, 279 * e, 288.8000030517578 * e, 279 * e, 273.8000030517578 * e),
       n.bezierCurveTo(279 * e, 236.8000030517578 * e, 279 * e, 236.8000030517578 * e, 279 * e, 199.8000030517578 * e),
       n.bezierCurveTo(274 * e, 178.8000030517578 * e, 263 * e, 177.8000030517578 * e, 255 * e, 175.8000030517578 * e),
       n.bezierCurveTo(248 * e, 175.8000030517578 * e, 248 * e, 175.8000030517578 * e, 241 * e, 175.8000030517578 * e),
       n.bezierCurveTo(240 * e, 175.8000030517578 * e, 240 * e, 175.8000030517578 * e, 239 * e, 175.8000030517578 * e),
       n.bezierCurveTo(254 * e, 200.8000030517578 * e, 222 * e, 211.8000030517578 * e, 202 * e, 212.8000030517578 * e),
       n.bezierCurveTo(168 * e, 213.8000030517578 * e, 151 * e, 190.8000030517578 * e, 163 * e, 176.8000030517578 * e),
       n.closePath(),
       se(n, void 0, t[3], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(198 * e, 161.4000015258789 * e),
       n.bezierCurveTo(198 * e, 186.9000015258789 * e, 198 * e, 186.9000015258789 * e, 198 * e, 212.4000015258789 * e),
       n.bezierCurveTo(201 * e, 212.4000015258789 * e, 201 * e, 212.4000015258789 * e, 204 * e, 212.4000015258789 * e),
       n.bezierCurveTo(204 * e, 186.9000015258789 * e, 204 * e, 186.9000015258789 * e, 204 * e, 161.4000015258789 * e),
       n.closePath(),
       se(n, t[0], t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(161 * e, 194 * e),
       n.bezierCurveTo(188 * e, 169 * e, 231 * e, 179 * e, 241 * e, 194 * e),
       n.bezierCurveTo(239.5 * e, 196 * e, 239.5 * e, 196 * e, 238 * e, 198 * e),
       n.bezierCurveTo(221 * e, 179 * e, 182 * e, 182 * e, 165 * e, 198 * e),
       n.closePath(),
       se(n, t[0], t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(157 * e, 188.80000019073486 * e),
       n.bezierCurveTo(162 * e, 150.80000019073486 * e, 241 * e, 150.80000019073486 * e, 245 * e, 188.80000019073486 * e),
       n.bezierCurveTo(242 * e, 224.80000019073486 * e, 162 * e, 228.80000019073486 * e, 157 * e, 188.80000019073486 * e),
       n.bezierCurveTo(159 * e, 188.80000019073486 * e, 159 * e, 188.80000019073486 * e, 161 * e, 188.80000019073486 * e),
       n.bezierCurveTo(168 * e, 216.80000019073486 * e, 231 * e, 218.80000019073486 * e, 241 * e, 188.80000019073486 * e),
       n.bezierCurveTo(236 * e, 156.80000019073486 * e, 169 * e, 152.80000019073486 * e, 161 * e, 188.80000019073486 * e),
       n.closePath(),
       se(n, t[0], t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(156 * e, 188 * e),
       n.bezierCurveTo(160 * e, 164 * e, 183 * e, 159 * e, 201 * e, 158 * e),
       n.bezierCurveTo(232 * e, 159 * e, 244 * e, 174 * e, 246 * e, 188 * e),
       n.bezierCurveTo(245 * e, 212 * e, 213 * e, 219 * e, 201 * e, 218 * e),
       n.bezierCurveTo(181 * e, 221 * e, 158 * e, 207 * e, 156 * e, 190 * e),
       n.closePath(),
       se(n, void 0, t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(162 * e, 189 * e),
       n.bezierCurveTo(166 * e, 170 * e, 185 * e, 165 * e, 201 * e, 164 * e),
       n.bezierCurveTo(227 * e, 165 * e, 240 * e, 178 * e, 239 * e, 188 * e),
       n.bezierCurveTo(239 * e, 204 * e, 210 * e, 210 * e, 201 * e, 210 * e),
       n.bezierCurveTo(182 * e, 211 * e, 166 * e, 200 * e, 162 * e, 190 * e),
       n.closePath(),
       se(n, void 0, t[1], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(131 * e, 262 * e),
       n.bezierCurveTo(136 * e, 241 * e, 144 * e, 236 * e, 158 * e, 233 * e),
       n.bezierCurveTo(200.5 * e, 233 * e, 229 * e, 232 * e, 243 * e, 233 * e),
       n.bezierCurveTo(259 * e, 235 * e, 267 * e, 248 * e, 269 * e, 260 * e),
       n.bezierCurveTo(269 * e, 266.5 * e, 269 * e, 266.5 * e, 269 * e, 273 * e),
       n.bezierCurveTo(265 * e, 290 * e, 251 * e, 297 * e, 242 * e, 298 * e),
       n.bezierCurveTo(202 * e, 298 * e, 202 * e, 298 * e, 162 * e, 298 * e),
       n.bezierCurveTo(148 * e, 298 * e, 136 * e, 289 * e, 132 * e, 273 * e),
       n.bezierCurveTo(131.5 * e, 268 * e, 131.5 * e, 268 * e, 131 * e, 263 * e),
       n.bezierCurveTo(135 * e, 263 * e, 135 * e, 263 * e, 139 * e, 263 * e),
       n.bezierCurveTo(139 * e, 281 * e, 151 * e, 287 * e, 160 * e, 290 * e),
       n.bezierCurveTo(200.5 * e, 290 * e, 200.5 * e, 290 * e, 241 * e, 290 * e),
       n.bezierCurveTo(252 * e, 290 * e, 257 * e, 281 * e, 262 * e, 271 * e),
       n.bezierCurveTo(261.5 * e, 267 * e, 261.5 * e, 267 * e, 261 * e, 263 * e),
       n.bezierCurveTo(260 * e, 249 * e, 251 * e, 242 * e, 241 * e, 241 * e),
       n.bezierCurveTo(240.5 * e, 240.5 * e, 240.5 * e, 240.5 * e, 240 * e, 240 * e),
       n.bezierCurveTo(200 * e, 240 * e, 200 * e, 240 * e, 160 * e, 240 * e),
       n.bezierCurveTo(145 * e, 244 * e, 142 * e, 250 * e, 139 * e, 264 * e),
       n.closePath(),
       se(n, t[0], t[0], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(130 * e, 264 * e),
       n.bezierCurveTo(132 * e, 244 * e, 144 * e, 235 * e, 157 * e, 232 * e),
       n.bezierCurveTo(245 * e, 232 * e, 201 * e, 232 * e, 245 * e, 232 * e),
       n.bezierCurveTo(264 * e, 235 * e, 269 * e, 251 * e, 270 * e, 264 * e),
       n.bezierCurveTo(272 * e, 291 * e, 248 * e, 299 * e, 242 * e, 299 * e),
       n.bezierCurveTo(200 * e, 299 * e, 200 * e, 299 * e, 158 * e, 299 * e),
       n.bezierCurveTo(139 * e, 298 * e, 130 * e, 276 * e, 130 * e, 265 * e),
       n.closePath(),
       se(n, void 0, t[1], 2 * e),
       r
   }
   function et(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 243 * e,
       t.height = 172 * e,
       Ee(r, 119.5 * e, 140.125 * e, 19 * e),
       se(r, void 0, i[1], 5 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(36.5 * e, 20.125 * e),
       r.bezierCurveTo(119.5 * e, 20.625 * e, 119.5 * e, 20.625 * e, 202.5 * e, 21.125 * e),
       r.bezierCurveTo(214.5 * e, 22.125 * e, 216.5 * e, 26.125 * e, 217.5 * e, 35.125 * e),
       r.bezierCurveTo(221 * e, 76.125 * e, 221 * e, 76.125 * e, 224.5 * e, 117.125 * e),
       r.bezierCurveTo(225.5 * e, 127.125 * e, 221.5 * e, 131.125 * e, 210.5 * e, 132.125 * e),
       r.bezierCurveTo(117.5 * e, 132.125 * e, 117.5 * e, 132.125 * e, 24.5 * e, 132.125 * e),
       r.bezierCurveTo(14.5 * e, 131.125 * e, 13.5 * e, 126.125 * e, 16.5 * e, 111.125 * e),
       r.bezierCurveTo(19.5 * e, 73.125 * e, 19.5 * e, 73.125 * e, 22.5 * e, 35.125 * e),
       r.bezierCurveTo(23.5 * e, 23.125 * e, 29.5 * e, 21.125 * e, 36.5 * e, 20.125 * e),
       r.closePath(),
       se(r, i[0], i[1], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(15.5 * e, 138.625 * e),
       r.bezierCurveTo(120 * e, 138.625 * e, 120 * e, 138.625 * e, 224.5 * e, 138.625 * e),
       r.closePath(),
       se(r, void 0, i[2], 10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(13.5 * e, 131.625 * e),
       r.bezierCurveTo(119.5 * e, 131.625 * e, 119.5 * e, 131.625 * e, 225.5 * e, 131.625 * e),
       r.closePath(),
       se(r, void 0, i[3], 10 * e),
       Ee(r, 119.5 * e, 140.125 * e, 14.866068747318506 * e),
       se(r, i[4], i[5], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(106.5 * e, 146.625 * e),
       r.bezierCurveTo(116.5 * e, 137.625 * e, 118.5 * e, 136.625 * e, 123.5 * e, 138.625 * e),
       r.bezierCurveTo(131.5 * e, 145.625 * e, 133.5 * e, 148.625 * e, 127.5 * e, 152.625 * e),
       r.bezierCurveTo(115.5 * e, 158.625 * e, 111.5 * e, 153.625 * e, 106.5 * e, 147.625 * e),
       r.closePath(),
       se(r, i[6], i[7], 2 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(105.5 * e, 146.625 * e),
       r.bezierCurveTo(116.5 * e, 159.625 * e, 124.5 * e, 156.625 * e, 132.5 * e, 146.625 * e),
       se(r, void 0, i[8], 5 * e),
       r.save(),
       r.translate(75.5 * e, 80.125 * e),
       Te(r, -39 * e, -40 * e, 78 * e, 78 * e, 10 * e),
       r.restore(),
       se(r, i[9]),
       r.save(),
       r.translate(167 * e, 80.125 * e),
       Te(r, -38.5 * e, -39 * e, 78 * e, 78 * e, 10 * e),
       r.restore(),
       se(r, i[9]),
       t
   }
   function it(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 400 * e,
       r.height = 400 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(96.5 * e, 277.34375 * e),
       n.bezierCurveTo(197.5 * e, 259.84375 * e, 197.5 * e, 259.84375 * e, 298.5 * e, 242.34375 * e),
       n.bezierCurveTo(311.5 * e, 231.34375 * e, 307.5 * e, 168.34375 * e, 298.5 * e, 150.34375 * e),
       n.bezierCurveTo(198 * e, 170.34375 * e, 198 * e, 170.34375 * e, 97.5 * e, 190.34375 * e),
       n.closePath(),
       se(n, t[1], t[2], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(98.5 * e, 214.34375 * e),
       n.bezierCurveTo(199 * e, 196.34375 * e, 199 * e, 196.34375 * e, 299.5 * e, 178.34375 * e),
       n.closePath(),
       se(n, void 0, t[2], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(98.5 * e, 247.34375 * e),
       n.bezierCurveTo(201.5 * e, 229.34375 * e, 201.5 * e, 229.34375 * e, 304.5 * e, 211.34375 * e),
       n.closePath(),
       se(n, void 0, t[2], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(97.5 * e, 189.34375 * e),
       n.bezierCurveTo(97 * e, 199.84375 * e, 97 * e, 199.84375 * e, 96.5 * e, 210.34375 * e),
       n.bezierCurveTo(110.5 * e, 204.34375 * e, 110.5 * e, 204.34375 * e, 124.5 * e, 198.34375 * e),
       n.bezierCurveTo(137.5 * e, 203.84375 * e, 137.5 * e, 203.84375 * e, 150.5 * e, 209.34375 * e),
       n.bezierCurveTo(172 * e, 197.84375 * e, 172 * e, 197.84375 * e, 193.5 * e, 186.34375 * e),
       n.bezierCurveTo(211.5 * e, 189.84375 * e, 211.5 * e, 189.84375 * e, 229.5 * e, 193.34375 * e),
       n.bezierCurveTo(240.5 * e, 193.34375 * e, 240.5 * e, 193.34375 * e, 251.5 * e, 193.34375 * e),
       n.bezierCurveTo(261 * e, 182.84375 * e, 261 * e, 182.84375 * e, 270.5 * e, 172.34375 * e),
       n.bezierCurveTo(287.5 * e, 169.34375 * e, 287.5 * e, 169.34375 * e, 304.5 * e, 166.34375 * e),
       n.bezierCurveTo(304.5 * e, 156.34375 * e, 300.5 * e, 145.34375 * e, 298.5 * e, 147.34375 * e),
       n.closePath(),
       se(n, t[3], t[4], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(300.5 * e, 147.34375 * e),
       n.bezierCurveTo(293.5 * e, 121.34375 * e, 278.5 * e, 106.34375 * e, 256.5 * e, 101.34375 * e),
       n.bezierCurveTo(176.5 * e, 145.34375 * e, 176.5 * e, 145.34375 * e, 96.5 * e, 189.34375 * e),
       n.closePath(),
       se(n, t[5], t[6], 12 * e),
       Ee(n, 252.5 * e, 129.34375 * e, 18.027756377319946 * e),
       se(n, t[7]),
       Ee(n, 248.5 * e, 121.34375 * e, 8.246211251235321 * e),
       se(n, t[8]),
       r
   }
   function tt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 400 * e,
       r.height = 400 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(10 * e, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(100.5 * e, 126.34375 * e),
       n.bezierCurveTo(151.5 * e, 104.34375 * e, 279.5 * e, 188.34375 * e, 297.5 * e, 292.34375 * e),
       n.bezierCurveTo(222.5 * e, 307.34375 * e, 106.5 * e, 196.34375 * e, 100.5 * e, 127.34375 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(106.5 * e, 131.34375 * e),
       n.bezierCurveTo(140.5 * e, 142.34375 * e, 225.5 * e, 184.34375 * e, 290.5 * e, 287.34375 * e),
       n.bezierCurveTo(270.5 * e, 188.34375 * e, 152.5 * e, 118.34375 * e, 107.5 * e, 131.34375 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(157.5 * e, 137.34375 * e),
       n.bezierCurveTo(161.5 * e, 138.34375 * e, 164.5 * e, 140.34375 * e, 168.5 * e, 142.34375 * e),
       n.bezierCurveTo(165.5 * e, 156.34375 * e, 141.5 * e, 176.34375 * e, 126.5 * e, 179.34375 * e),
       n.bezierCurveTo(123.5 * e, 173.34375 * e, 120.5 * e, 169.34375 * e, 120.5 * e, 169.34375 * e),
       n.bezierCurveTo(141.5 * e, 161.34375 * e, 156.5 * e, 145.34375 * e, 155.5 * e, 136.34375 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(196.5 * e, 151.34375 * e),
       n.bezierCurveTo(211.5 * e, 158.34375 * e, 224.5 * e, 171.34375 * e, 229.5 * e, 176.34375 * e),
       n.bezierCurveTo(246.5 * e, 163.34375 * e, 259.5 * e, 166.34375 * e, 272.5 * e, 168.34375 * e),
       n.bezierCurveTo(254.5 * e, 146.34375 * e, 214.5 * e, 145.34375 * e, 198.5 * e, 151.34375 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(154.5 * e, 222.34375 * e),
       n.bezierCurveTo(164.5 * e, 234.34375 * e, 173.5 * e, 242.34375 * e, 178.5 * e, 245.34375 * e),
       n.bezierCurveTo(174.5 * e, 265.34375 * e, 180.5 * e, 274.34375 * e, 186.5 * e, 283.34375 * e),
       n.bezierCurveTo(165.5 * e, 277.34375 * e, 151.5 * e, 245.34375 * e, 155.5 * e, 224.34375 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(279.5 * e, 294.34375 * e),
       n.bezierCurveTo(286.5 * e, 285.84375 * e, 286.5 * e, 285.84375 * e, 293.5 * e, 277.34375 * e),
       n.bezierCurveTo(315.5 * e, 280.34375 * e, 315.5 * e, 280.34375 * e, 337.5 * e, 283.34375 * e),
       n.bezierCurveTo(340.5 * e, 311.34375 * e, 317.5 * e, 326.34375 * e, 307.5 * e, 331.34375 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(-10 * e, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(100.5 * e, 126.34375 * e),
       n.bezierCurveTo(151.5 * e, 104.34375 * e, 279.5 * e, 188.34375 * e, 297.5 * e, 292.34375 * e),
       n.bezierCurveTo(222.5 * e, 307.34375 * e, 106.5 * e, 196.34375 * e, 100.5 * e, 127.34375 * e),
       n.closePath(),
       se(n, t[1], t[2], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(106.5 * e, 131.34375 * e),
       n.bezierCurveTo(140.5 * e, 142.34375 * e, 225.5 * e, 184.34375 * e, 290.5 * e, 287.34375 * e),
       n.bezierCurveTo(270.5 * e, 188.34375 * e, 152.5 * e, 118.34375 * e, 107.5 * e, 131.34375 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(157.5 * e, 137.34375 * e),
       n.bezierCurveTo(161.5 * e, 138.34375 * e, 164.5 * e, 140.34375 * e, 168.5 * e, 142.34375 * e),
       n.bezierCurveTo(165.5 * e, 156.34375 * e, 141.5 * e, 176.34375 * e, 126.5 * e, 179.34375 * e),
       n.bezierCurveTo(123.5 * e, 173.34375 * e, 120.5 * e, 169.34375 * e, 120.5 * e, 169.34375 * e),
       n.bezierCurveTo(141.5 * e, 161.34375 * e, 156.5 * e, 145.34375 * e, 155.5 * e, 136.34375 * e),
       n.closePath(),
       se(n, t[4]),
       Ee(n, 125.5 * e, 140.34375 * e, 11.180339887498949 * e),
       se(n, t[5]),
       Ee(n, 122.5 * e, 135.34375 * e, 5.0990195135927845 * e),
       se(n, t[6]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(196.5 * e, 151.34375 * e),
       n.bezierCurveTo(211.5 * e, 158.34375 * e, 224.5 * e, 171.34375 * e, 229.5 * e, 176.34375 * e),
       n.bezierCurveTo(246.5 * e, 163.34375 * e, 259.5 * e, 166.34375 * e, 272.5 * e, 168.34375 * e),
       n.bezierCurveTo(254.5 * e, 146.34375 * e, 214.5 * e, 145.34375 * e, 198.5 * e, 151.34375 * e),
       n.closePath(),
       se(n, t[7], t[8], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(154.5 * e, 222.34375 * e),
       n.bezierCurveTo(164.5 * e, 234.34375 * e, 173.5 * e, 242.34375 * e, 178.5 * e, 245.34375 * e),
       n.bezierCurveTo(174.5 * e, 265.34375 * e, 180.5 * e, 274.34375 * e, 186.5 * e, 283.34375 * e),
       n.bezierCurveTo(165.5 * e, 277.34375 * e, 151.5 * e, 245.34375 * e, 155.5 * e, 224.34375 * e),
       n.closePath(),
       se(n, t[7], t[8], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(279.5 * e, 294.34375 * e),
       n.bezierCurveTo(286.5 * e, 285.84375 * e, 286.5 * e, 285.84375 * e, 293.5 * e, 277.34375 * e),
       n.bezierCurveTo(315.5 * e, 280.34375 * e, 315.5 * e, 280.34375 * e, 337.5 * e, 283.34375 * e),
       n.bezierCurveTo(340.5 * e, 311.34375 * e, 317.5 * e, 326.34375 * e, 307.5 * e, 331.34375 * e),
       n.closePath(),
       se(n, t[7], t[8], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(296.5 * e, 287.34375 * e),
       n.bezierCurveTo(311.5 * e, 291.34375 * e, 311.5 * e, 291.34375 * e, 326.5 * e, 295.34375 * e),
       n.closePath(),
       se(n, void 0, t[9], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(294.5 * e, 289.34375 * e),
       n.bezierCurveTo(308.5 * e, 297.34375 * e, 308.5 * e, 297.34375 * e, 322.5 * e, 305.34375 * e),
       n.closePath(),
       se(n, void 0, t[9], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(294.5 * e, 291.34375 * e),
       n.bezierCurveTo(304 * e, 303.34375 * e, 304 * e, 303.34375 * e, 313.5 * e, 315.34375 * e),
       n.closePath(),
       se(n, void 0, t[9], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(226.5 * e, 161.34375 * e),
       n.bezierCurveTo(230.5 * e, 160.34375 * e, 236.5 * e, 158.34375 * e, 238.5 * e, 161.34375 * e),
       n.bezierCurveTo(238.5 * e, 157.34375 * e, 228.5 * e, 159.34375 * e, 227.5 * e, 161.34375 * e),
       n.closePath(),
       se(n, void 0, t[9], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(167.5 * e, 248.34375 * e),
       n.bezierCurveTo(165.5 * e, 251.34375 * e, 168.5 * e, 256.34375 * e, 168.5 * e, 253.34375 * e),
       n.bezierCurveTo(166.5 * e, 252.34375 * e, 168.5 * e, 246.34375 * e, 166.5 * e, 247.34375 * e),
       n.closePath(),
       se(n, void 0, t[9], 3 * e),
       r
   }
   function rt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 309 * e,
       r.height = 287 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(10 * e, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(34.5 * e, 38.53125 * e),
       n.bezierCurveTo(91.5 * e, 30.53125 * e, 138.5 * e, 68.53125 * e, 169.5 * e, 93.53125 * e),
       n.bezierCurveTo(208.5 * e, 128.53125 * e, 226.5 * e, 157.53125 * e, 233.5 * e, 209.53125 * e),
       n.bezierCurveTo(195.5 * e, 218.53125 * e, 138.5 * e, 191.53125 * e, 105.5 * e, 157.53125 * e),
       n.bezierCurveTo(54.5 * e, 112.53125 * e, 41.5 * e, 80.53125 * e, 33.5 * e, 38.53125 * e),
       n.closePath(),
       se(n, t[0], t[0], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(143.5 * e, 74.53125 * e),
       n.bezierCurveTo(164.5 * e, 73.53125 * e, 159 * e, 74.53125 * e, 174.5 * e, 74.53125 * e),
       n.bezierCurveTo(186 * e, 86.53125 * e, 186 * e, 86.53125 * e, 197.5 * e, 98.53125 * e),
       n.bezierCurveTo(186 * e, 97.03125 * e, 186 * e, 97.03125 * e, 174.5 * e, 95.53125 * e),
       n.closePath(),
       se(n, t[0], t[0], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(87.5 * e, 142.53125 * e),
       n.bezierCurveTo(92 * e, 160.03125 * e, 92 * e, 160.03125 * e, 96.5 * e, 177.53125 * e),
       n.bezierCurveTo(108 * e, 181.53125 * e, 108 * e, 181.53125 * e, 119.5 * e, 185.53125 * e),
       n.bezierCurveTo(116.5 * e, 175.53125 * e, 116.5 * e, 175.53125 * e, 113.5 * e, 165.53125 * e),
       n.closePath(),
       se(n, t[0], t[0], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(236.5 * e, 189.53125 * e),
       n.bezierCurveTo(274.5 * e, 197.53125 * e, 255.5 * e, 194.03125 * e, 274.5 * e, 198.53125 * e),
       n.bezierCurveTo(272.5 * e, 236.53125 * e, 261.5 * e, 237.53125 * e, 242.5 * e, 248.53125 * e),
       n.bezierCurveTo(230.5 * e, 231.03125 * e, 230.5 * e, 231.03125 * e, 218.5 * e, 213.53125 * e),
       n.closePath(),
       se(n, t[0], t[0], 10 * e),
       n.globalAlpha = 1,
       n.translate(-10 * e, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(34.5 * e, 38.53125 * e),
       n.bezierCurveTo(91.5 * e, 30.53125 * e, 138.5 * e, 68.53125 * e, 169.5 * e, 93.53125 * e),
       n.bezierCurveTo(208.5 * e, 128.53125 * e, 226.5 * e, 157.53125 * e, 233.5 * e, 209.53125 * e),
       n.bezierCurveTo(195.5 * e, 218.53125 * e, 138.5 * e, 191.53125 * e, 105.5 * e, 157.53125 * e),
       n.bezierCurveTo(54.5 * e, 112.53125 * e, 41.5 * e, 80.53125 * e, 33.5 * e, 38.53125 * e),
       n.closePath(),
       se(n, t[1], t[2], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(143.5 * e, 74.53125 * e),
       n.bezierCurveTo(164.5 * e, 73.53125 * e, 159 * e, 74.53125 * e, 174.5 * e, 74.53125 * e),
       n.bezierCurveTo(186 * e, 86.53125 * e, 186 * e, 86.53125 * e, 197.5 * e, 98.53125 * e),
       n.bezierCurveTo(186 * e, 97.03125 * e, 186 * e, 97.03125 * e, 174.5 * e, 95.53125 * e),
       n.closePath(),
       se(n, t[1], t[2], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(87.5 * e, 142.53125 * e),
       n.bezierCurveTo(92 * e, 160.03125 * e, 92 * e, 160.03125 * e, 96.5 * e, 177.53125 * e),
       n.bezierCurveTo(108 * e, 181.53125 * e, 108 * e, 181.53125 * e, 119.5 * e, 185.53125 * e),
       n.bezierCurveTo(116.5 * e, 175.53125 * e, 116.5 * e, 175.53125 * e, 113.5 * e, 165.53125 * e),
       n.closePath(),
       se(n, t[1], t[2], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(236.5 * e, 189.53125 * e),
       n.bezierCurveTo(274.5 * e, 197.53125 * e, 255.5 * e, 194.03125 * e, 274.5 * e, 198.53125 * e),
       n.bezierCurveTo(272.5 * e, 236.53125 * e, 261.5 * e, 237.53125 * e, 242.5 * e, 248.53125 * e),
       n.bezierCurveTo(230.5 * e, 231.03125 * e, 230.5 * e, 231.03125 * e, 218.5 * e, 213.53125 * e),
       n.closePath(),
       se(n, t[1], t[2], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(109.5 * e, 51.53125 * e),
       n.bezierCurveTo(107.5 * e, 92.53125 * e, 91.5 * e, 95.53125 * e, 59.5 * e, 101.53125 * e),
       se(n, t[1], t[2], 7 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(72.5 * e, 51.53125 * e),
       n.bezierCurveTo(71 * e, 64.53125 * e, 69.5 * e, 76.53125 * e, 69.5 * e, 77.53125 * e),
       n.closePath(),
       se(n, t[1], t[2], 7 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(84.5 * e, 63.53125 * e),
       n.bezierCurveTo(70.5 * e, 65.03125 * e, 70.5 * e, 65.03125 * e, 56.5 * e, 66.53125 * e),
       n.closePath(),
       se(n, t[1], t[2], 7 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(125.5 * e, 84.53125 * e),
       n.bezierCurveTo(125.5 * e, 110.03125 * e, 125.5 * e, 110.03125 * e, 125.5 * e, 135.53125 * e),
       n.closePath(),
       se(n, t[1], t[2], 7 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(149.5 * e, 108.53125 * e),
       n.bezierCurveTo(150 * e, 137.03125 * e, 150 * e, 137.03125 * e, 150.5 * e, 165.53125 * e),
       n.closePath(),
       se(n, t[1], t[2], 7 * e),
       r
   }
   function nt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 130 * e
         , a = 142 * e
         , s = o / 2
         , T = a / 2;
       return r.width = o,
       r.height = a,
       n.translate(s, T + 7 * e),
       n.globalAlpha = i ? .5 : 1,
       Ee(n, 0, 0, 60 * e),
       se(n, t[0]),
       n.translate(0, -7 * e),
       n.globalAlpha = 1,
       Ee(n, 0, 0, 60 * e, 0),
       se(n, t[1], t[2], 4 * e),
       Ee(n, 0, 0, 40 * e),
       se(n, t[3]),
       Ee(n, 0, 0, 25 * e),
       se(n, t[4], t[5], 8 * e),
       r
   }
   function ot(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d")
         , n = 130 * e
         , o = 142 * e
         , a = n / 2
         , s = o / 2;
       return t.width = n,
       t.height = o,
       Ee(r, a, s, 40 * e, 0),
       se(r, void 0, i[0], 7 * e),
       Ee(r, a, s, 30 * e, 0),
       se(r, void 0, i[0], 7 * e),
       Ee(r, a, s, 20 * e, 0),
       se(r, i[0]),
       t
   }
   function at(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 130 * e,
       r.height = 142 * e,
       n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(65 * e, 80 * e),
       n.rotate(.2),
       ue(n, 9, 60 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(65 * e, 71 * e),
       n.rotate(.2),
       ue(n, 9, 60 * e, 10 * e),
       se(n, t[1], t[2], 4),
       n.rotate(-.32),
       ue(n, 9, 38 * e, 10 * e),
       se(n, t[3], t[4], 4),
       n.rotate(.68),
       ue(n, 9, 20 * e, 8 * e),
       se(n, t[5], t[6], 6),
       n.restore(),
       r
   }
   function st(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 372 * e,
       t.height = 375 * e,
       r.globalAlpha = .5,
       r.translate(15 * e, 15 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(313.0000305175781 * e, 76.58523559570312 * e),
       r.bezierCurveTo(308.0000305175781 * e, 130.58523559570312 * e, 279.0000305175781 * e, 158.58523559570312 * e, 254.00003051757812 * e, 175.58523559570312 * e),
       r.bezierCurveTo(287.0000305175781 * e, 182.58523559570312 * e, 274.0000305175781 * e, 181.08523559570312 * e, 294.0000305175781 * e, 186.58523559570312 * e),
       r.bezierCurveTo(293.5000305175781 * e, 196.08523559570312 * e, 293.5000305175781 * e, 196.08523559570312 * e, 293.0000305175781 * e, 205.58523559570312 * e),
       r.bezierCurveTo(304.0000305175781 * e, 201.08523559570312 * e, 304.0000305175781 * e, 201.08523559570312 * e, 315.0000305175781 * e, 196.58523559570312 * e),
       r.bezierCurveTo(350.0000305175781 * e, 219.58523559570312 * e, 343.0000305175781 * e, 221.58523559570312 * e, 351.0000305175781 * e, 230.58523559570312 * e),
       r.bezierCurveTo(296.0000305175781 * e, 260.5852355957031 * e, 264.0000305175781 * e, 256.5852355957031 * e, 220.00003051757812 * e, 236.58523559570312 * e),
       r.bezierCurveTo(233.00003051757812 * e, 266.5852355957031 * e, 232.00003051757812 * e, 279.5852355957031 * e, 231.00003051757812 * e, 295.5852355957031 * e),
       r.bezierCurveTo(222.00003051757812 * e, 297.5852355957031 * e, 222.00003051757812 * e, 297.5852355957031 * e, 213.00003051757812 * e, 299.5852355957031 * e),
       r.bezierCurveTo(219.50003051757812 * e, 308.0852355957031 * e, 219.50003051757812 * e, 308.0852355957031 * e, 226.00003051757812 * e, 316.5852355957031 * e),
       r.bezierCurveTo(223.00003051757812 * e, 344.5852355957031 * e, 216.00003051757812 * e, 350.5852355957031 * e, 209.00003051757812 * e, 363.5852355957031 * e),
       r.bezierCurveTo(154.00003051757812 * e, 318.5852355957031 * e, 156.00003051757812 * e, 268.5852355957031 * e, 160.00003051757812 * e, 238.58523559570312 * e),
       r.bezierCurveTo(135.00003051757812 * e, 268.5852355957031 * e, 125.00003051757812 * e, 267.5852355957031 * e, 112.00003051757812 * e, 272.5852355957031 * e),
       r.bezierCurveTo(104.50003051757812 * e, 266.5852355957031 * e, 104.50003051757812 * e, 266.5852355957031 * e, 97.00003051757812 * e, 260.5852355957031 * e),
       r.bezierCurveTo(93.00003051757812 * e, 271.0852355957031 * e, 93.00003051757812 * e, 271.0852355957031 * e, 89.00003051757812 * e, 281.5852355957031 * e),
       r.bezierCurveTo(66.00003051757812 * e, 288.5852355957031 * e, 59.000030517578125 * e, 288.5852355957031 * e, 39.000030517578125 * e, 285.5852355957031 * e),
       r.bezierCurveTo(56.000030517578125 * e, 216.58523559570312 * e, 91.00003051757812 * e, 204.58523559570312 * e, 129.00003051757812 * e, 189.58523559570312 * e),
       r.bezierCurveTo(90.00003051757812 * e, 176.58523559570312 * e, 89.00003051757812 * e, 173.58523559570312 * e, 79.00003051757812 * e, 166.58523559570312 * e),
       r.bezierCurveTo(82.00003051757812 * e, 155.08523559570312 * e, 82.00003051757812 * e, 155.08523559570312 * e, 85.00003051757812 * e, 143.58523559570312 * e),
       r.bezierCurveTo(75.50003051757812 * e, 147.58523559570312 * e, 75.50003051757812 * e, 147.58523559570312 * e, 66.00003051757812 * e, 151.58523559570312 * e),
       r.bezierCurveTo(44.000030517578125 * e, 133.58523559570312 * e, 41.000030517578125 * e, 124.58523559570312 * e, 34.000030517578125 * e, 102.58523559570312 * e),
       r.bezierCurveTo(100.00003051757812 * e, 81.58523559570312 * e, 134.00003051757812 * e, 118.58523559570312 * e, 150.00003051757812 * e, 128.58523559570312 * e),
       r.bezierCurveTo(144.00003051757812 * e, 102.58523559570312 * e, 147.00003051757812 * e, 90.58523559570312 * e, 150.00003051757812 * e, 80.58523559570312 * e),
       r.bezierCurveTo(159.50003051757812 * e, 79.08523559570312 * e, 159.50003051757812 * e, 79.08523559570312 * e, 169.00003051757812 * e, 77.58523559570312 * e),
       r.bezierCurveTo(163.00003051757812 * e, 72.58523559570312 * e, 163.00003051757812 * e, 72.58523559570312 * e, 157.00003051757812 * e, 67.58523559570312 * e),
       r.bezierCurveTo(162.00003051757812 * e, 42.585235595703125 * e, 169.00003051757812 * e, 29.585235595703125 * e, 182.00003051757812 * e, 14.585235595703125 * e),
       r.bezierCurveTo(219.00003051757812 * e, 48.585235595703125 * e, 222.00003051757812 * e, 92.58523559570312 * e, 218.00003051757812 * e, 112.58523559570312 * e),
       r.bezierCurveTo(239.00003051757812 * e, 95.58523559570312 * e, 242.00003051757812 * e, 97.58523559570312 * e, 249.00003051757812 * e, 94.58523559570312 * e),
       r.bezierCurveTo(255.00003051757812 * e, 103.08523559570312 * e, 255.00003051757812 * e, 103.08523559570312 * e, 261.0000305175781 * e, 111.58523559570312 * e),
       r.bezierCurveTo(261.5000305175781 * e, 99.58523559570312 * e, 261.5000305175781 * e, 99.58523559570312 * e, 262.0000305175781 * e, 87.58523559570312 * e),
       r.bezierCurveTo(282.0000305175781 * e, 77.58523559570312 * e, 301.0000305175781 * e, 74.58523559570312 * e, 314.0000305175781 * e, 76.58523559570312 * e),
       r.closePath(),
       se(r, i[0]),
       r.globalAlpha = 1,
       r.translate(-15 * e, -15 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(313.0000305175781 * e, 76.58523559570312 * e),
       r.bezierCurveTo(308.0000305175781 * e, 130.58523559570312 * e, 279.0000305175781 * e, 158.58523559570312 * e, 254.00003051757812 * e, 175.58523559570312 * e),
       r.bezierCurveTo(287.0000305175781 * e, 182.58523559570312 * e, 274.0000305175781 * e, 181.08523559570312 * e, 294.0000305175781 * e, 186.58523559570312 * e),
       r.bezierCurveTo(293.5000305175781 * e, 196.08523559570312 * e, 293.5000305175781 * e, 196.08523559570312 * e, 293.0000305175781 * e, 205.58523559570312 * e),
       r.bezierCurveTo(304.0000305175781 * e, 201.08523559570312 * e, 304.0000305175781 * e, 201.08523559570312 * e, 315.0000305175781 * e, 196.58523559570312 * e),
       r.bezierCurveTo(350.0000305175781 * e, 219.58523559570312 * e, 343.0000305175781 * e, 221.58523559570312 * e, 351.0000305175781 * e, 230.58523559570312 * e),
       r.bezierCurveTo(296.0000305175781 * e, 260.5852355957031 * e, 264.0000305175781 * e, 256.5852355957031 * e, 220.00003051757812 * e, 236.58523559570312 * e),
       r.bezierCurveTo(233.00003051757812 * e, 266.5852355957031 * e, 232.00003051757812 * e, 279.5852355957031 * e, 231.00003051757812 * e, 295.5852355957031 * e),
       r.bezierCurveTo(222.00003051757812 * e, 297.5852355957031 * e, 222.00003051757812 * e, 297.5852355957031 * e, 213.00003051757812 * e, 299.5852355957031 * e),
       r.bezierCurveTo(219.50003051757812 * e, 308.0852355957031 * e, 219.50003051757812 * e, 308.0852355957031 * e, 226.00003051757812 * e, 316.5852355957031 * e),
       r.bezierCurveTo(223.00003051757812 * e, 344.5852355957031 * e, 216.00003051757812 * e, 350.5852355957031 * e, 209.00003051757812 * e, 363.5852355957031 * e),
       r.bezierCurveTo(154.00003051757812 * e, 318.5852355957031 * e, 156.00003051757812 * e, 268.5852355957031 * e, 160.00003051757812 * e, 238.58523559570312 * e),
       r.bezierCurveTo(135.00003051757812 * e, 268.5852355957031 * e, 125.00003051757812 * e, 267.5852355957031 * e, 112.00003051757812 * e, 272.5852355957031 * e),
       r.bezierCurveTo(104.50003051757812 * e, 266.5852355957031 * e, 104.50003051757812 * e, 266.5852355957031 * e, 97.00003051757812 * e, 260.5852355957031 * e),
       r.bezierCurveTo(93.00003051757812 * e, 271.0852355957031 * e, 93.00003051757812 * e, 271.0852355957031 * e, 89.00003051757812 * e, 281.5852355957031 * e),
       r.bezierCurveTo(66.00003051757812 * e, 288.5852355957031 * e, 59.000030517578125 * e, 288.5852355957031 * e, 39.000030517578125 * e, 285.5852355957031 * e),
       r.bezierCurveTo(56.000030517578125 * e, 216.58523559570312 * e, 91.00003051757812 * e, 204.58523559570312 * e, 129.00003051757812 * e, 189.58523559570312 * e),
       r.bezierCurveTo(90.00003051757812 * e, 176.58523559570312 * e, 89.00003051757812 * e, 173.58523559570312 * e, 79.00003051757812 * e, 166.58523559570312 * e),
       r.bezierCurveTo(82.00003051757812 * e, 155.08523559570312 * e, 82.00003051757812 * e, 155.08523559570312 * e, 85.00003051757812 * e, 143.58523559570312 * e),
       r.bezierCurveTo(75.50003051757812 * e, 147.58523559570312 * e, 75.50003051757812 * e, 147.58523559570312 * e, 66.00003051757812 * e, 151.58523559570312 * e),
       r.bezierCurveTo(44.000030517578125 * e, 133.58523559570312 * e, 41.000030517578125 * e, 124.58523559570312 * e, 34.000030517578125 * e, 102.58523559570312 * e),
       r.bezierCurveTo(100.00003051757812 * e, 81.58523559570312 * e, 134.00003051757812 * e, 118.58523559570312 * e, 150.00003051757812 * e, 128.58523559570312 * e),
       r.bezierCurveTo(144.00003051757812 * e, 102.58523559570312 * e, 147.00003051757812 * e, 90.58523559570312 * e, 150.00003051757812 * e, 80.58523559570312 * e),
       r.bezierCurveTo(159.50003051757812 * e, 79.08523559570312 * e, 159.50003051757812 * e, 79.08523559570312 * e, 169.00003051757812 * e, 77.58523559570312 * e),
       r.bezierCurveTo(163.00003051757812 * e, 72.58523559570312 * e, 163.00003051757812 * e, 72.58523559570312 * e, 157.00003051757812 * e, 67.58523559570312 * e),
       r.bezierCurveTo(162.00003051757812 * e, 42.585235595703125 * e, 169.00003051757812 * e, 29.585235595703125 * e, 182.00003051757812 * e, 14.585235595703125 * e),
       r.bezierCurveTo(219.00003051757812 * e, 48.585235595703125 * e, 222.00003051757812 * e, 92.58523559570312 * e, 218.00003051757812 * e, 112.58523559570312 * e),
       r.bezierCurveTo(239.00003051757812 * e, 95.58523559570312 * e, 242.00003051757812 * e, 97.58523559570312 * e, 249.00003051757812 * e, 94.58523559570312 * e),
       r.bezierCurveTo(255.00003051757812 * e, 103.08523559570312 * e, 255.00003051757812 * e, 103.08523559570312 * e, 261.0000305175781 * e, 111.58523559570312 * e),
       r.bezierCurveTo(261.5000305175781 * e, 99.58523559570312 * e, 261.5000305175781 * e, 99.58523559570312 * e, 262.0000305175781 * e, 87.58523559570312 * e),
       r.bezierCurveTo(282.0000305175781 * e, 77.58523559570312 * e, 301.0000305175781 * e, 74.58523559570312 * e, 314.0000305175781 * e, 76.58523559570312 * e),
       r.closePath(),
       se(r, i[1], i[2], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(186.00003051757812 * e, 192.94886779785156 * e),
       r.bezierCurveTo(185.00003051757812 * e, 66.94886779785156 * e, 184.50003051757812 * e, 104.94886779785156 * e, 183.00003051757812 * e, 16.948867797851562 * e),
       r.bezierCurveTo(216.00003051757812 * e, 47.94886779785156 * e, 219.00003051757812 * e, 80.94886779785156 * e, 218.00003051757812 * e, 113.94886779785156 * e),
       r.bezierCurveTo(209.00003051757812 * e, 165.94886779785156 * e, 200.00003051757812 * e, 176.94886779785156 * e, 189.00003051757812 * e, 192.94886779785156 * e),
       r.closePath(),
       se(r, i[3], i[3], 2 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(190.00003051757812 * e, 191.94886779785156 * e),
       r.bezierCurveTo(207.00003051757812 * e, 348.94886779785156 * e, 205.00003051757812 * e, 323.94886779785156 * e, 209.00003051757812 * e, 358.94886779785156 * e),
       r.bezierCurveTo(171.00003051757812 * e, 334.94886779785156 * e, 167.00003051757812 * e, 302.94886779785156 * e, 161.00003051757812 * e, 268.94886779785156 * e),
       r.bezierCurveTo(160.00003051757812 * e, 218.94886779785156 * e, 181.00003051757812 * e, 191.94886779785156 * e, 189.00003051757812 * e, 186.94886779785156 * e),
       r.closePath(),
       se(r, i[3], i[3], 2 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(194.00003051757812 * e, 195.94886779785156 * e),
       r.bezierCurveTo(116.00003051757812 * e, 150.94886779785156 * e, 116.00003051757812 * e, 150.94886779785156 * e, 38.000030517578125 * e, 105.94886779785156 * e),
       r.bezierCurveTo(67.00003051757812 * e, 90.94886779785156 * e, 96.00003051757812 * e, 99.94886779785156 * e, 123.00003051757812 * e, 111.94886779785156 * e),
       r.bezierCurveTo(183.00003051757812 * e, 152.94886779785156 * e, 179.00003051757812 * e, 180.94886779785156 * e, 193.00003051757812 * e, 194.94886779785156 * e),
       r.closePath(),
       se(r, i[3], i[3], 2 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(189.00003051757812 * e, 190.94886779785156 * e),
       r.bezierCurveTo(250.00003051757812 * e, 133.94886779785156 * e, 311.0000305175781 * e, 78.94886779785156 * e, 311.0000305175781 * e, 76.94886779785156 * e),
       r.bezierCurveTo(306.0000305175781 * e, 127.94886779785156 * e, 283.0000305175781 * e, 148.94886779785156 * e, 261.0000305175781 * e, 166.94886779785156 * e),
       r.bezierCurveTo(220.00003051757812 * e, 197.94886779785156 * e, 191.00003051757812 * e, 194.94886779785156 * e, 189.00003051757812 * e, 195.94886779785156 * e),
       r.closePath(),
       se(r, i[3], i[3], 2 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(189.00003051757812 * e, 194.94886779785156 * e),
       r.bezierCurveTo(268.5000305175781 * e, 211.94886779785156 * e, 268.5000305175781 * e, 211.94886779785156 * e, 348.0000305175781 * e, 228.94886779785156 * e),
       r.bezierCurveTo(316.0000305175781 * e, 247.94886779785156 * e, 298.0000305175781 * e, 256.94886779785156 * e, 250.00003051757812 * e, 246.94886779785156 * e),
       r.bezierCurveTo(197.00003051757812 * e, 229.94886779785156 * e, 189.00003051757812 * e, 202.94886779785156 * e, 188.00003051757812 * e, 199.94886779785156 * e),
       r.closePath(),
       se(r, i[3], i[3], 2 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(192.00003051757812 * e, 191.94886779785156 * e),
       r.bezierCurveTo(116.50003051757812 * e, 238.44886779785156 * e, 116.50003051757812 * e, 238.44886779785156 * e, 41.000030517578125 * e, 284.94886779785156 * e),
       r.bezierCurveTo(49.000030517578125 * e, 252.94886779785156 * e, 56.000030517578125 * e, 242.94886779785156 * e, 80.00003051757812 * e, 215.94886779785156 * e),
       r.bezierCurveTo(125.00003051757812 * e, 181.94886779785156 * e, 174.00003051757812 * e, 183.94886779785156 * e, 192.00003051757812 * e, 191.94886779785156 * e),
       r.closePath(),
       se(r, i[3], i[3], 2 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(313.0000305175781 * e, 76.58523559570312 * e),
       r.bezierCurveTo(308.0000305175781 * e, 130.58523559570312 * e, 279.0000305175781 * e, 158.58523559570312 * e, 254.00003051757812 * e, 175.58523559570312 * e),
       r.bezierCurveTo(287.0000305175781 * e, 182.58523559570312 * e, 274.0000305175781 * e, 181.08523559570312 * e, 294.0000305175781 * e, 186.58523559570312 * e),
       r.bezierCurveTo(293.5000305175781 * e, 196.08523559570312 * e, 293.5000305175781 * e, 196.08523559570312 * e, 293.0000305175781 * e, 205.58523559570312 * e),
       r.bezierCurveTo(304.0000305175781 * e, 201.08523559570312 * e, 304.0000305175781 * e, 201.08523559570312 * e, 315.0000305175781 * e, 196.58523559570312 * e),
       r.bezierCurveTo(350.0000305175781 * e, 219.58523559570312 * e, 343.0000305175781 * e, 221.58523559570312 * e, 351.0000305175781 * e, 230.58523559570312 * e),
       r.bezierCurveTo(296.0000305175781 * e, 260.5852355957031 * e, 264.0000305175781 * e, 256.5852355957031 * e, 220.00003051757812 * e, 236.58523559570312 * e),
       r.bezierCurveTo(233.00003051757812 * e, 266.5852355957031 * e, 232.00003051757812 * e, 279.5852355957031 * e, 231.00003051757812 * e, 295.5852355957031 * e),
       r.bezierCurveTo(222.00003051757812 * e, 297.5852355957031 * e, 222.00003051757812 * e, 297.5852355957031 * e, 213.00003051757812 * e, 299.5852355957031 * e),
       r.bezierCurveTo(219.50003051757812 * e, 308.0852355957031 * e, 219.50003051757812 * e, 308.0852355957031 * e, 226.00003051757812 * e, 316.5852355957031 * e),
       r.bezierCurveTo(223.00003051757812 * e, 344.5852355957031 * e, 216.00003051757812 * e, 350.5852355957031 * e, 209.00003051757812 * e, 363.5852355957031 * e),
       r.bezierCurveTo(154.00003051757812 * e, 318.5852355957031 * e, 156.00003051757812 * e, 268.5852355957031 * e, 160.00003051757812 * e, 238.58523559570312 * e),
       r.bezierCurveTo(135.00003051757812 * e, 268.5852355957031 * e, 125.00003051757812 * e, 267.5852355957031 * e, 112.00003051757812 * e, 272.5852355957031 * e),
       r.bezierCurveTo(104.50003051757812 * e, 266.5852355957031 * e, 104.50003051757812 * e, 266.5852355957031 * e, 97.00003051757812 * e, 260.5852355957031 * e),
       r.bezierCurveTo(93.00003051757812 * e, 271.0852355957031 * e, 93.00003051757812 * e, 271.0852355957031 * e, 89.00003051757812 * e, 281.5852355957031 * e),
       r.bezierCurveTo(66.00003051757812 * e, 288.5852355957031 * e, 59.000030517578125 * e, 288.5852355957031 * e, 39.000030517578125 * e, 285.5852355957031 * e),
       r.bezierCurveTo(56.000030517578125 * e, 216.58523559570312 * e, 91.00003051757812 * e, 204.58523559570312 * e, 129.00003051757812 * e, 189.58523559570312 * e),
       r.bezierCurveTo(90.00003051757812 * e, 176.58523559570312 * e, 89.00003051757812 * e, 173.58523559570312 * e, 79.00003051757812 * e, 166.58523559570312 * e),
       r.bezierCurveTo(82.00003051757812 * e, 155.08523559570312 * e, 82.00003051757812 * e, 155.08523559570312 * e, 85.00003051757812 * e, 143.58523559570312 * e),
       r.bezierCurveTo(75.50003051757812 * e, 147.58523559570312 * e, 75.50003051757812 * e, 147.58523559570312 * e, 66.00003051757812 * e, 151.58523559570312 * e),
       r.bezierCurveTo(44.000030517578125 * e, 133.58523559570312 * e, 41.000030517578125 * e, 124.58523559570312 * e, 34.000030517578125 * e, 102.58523559570312 * e),
       r.bezierCurveTo(100.00003051757812 * e, 81.58523559570312 * e, 134.00003051757812 * e, 118.58523559570312 * e, 150.00003051757812 * e, 128.58523559570312 * e),
       r.bezierCurveTo(144.00003051757812 * e, 102.58523559570312 * e, 147.00003051757812 * e, 90.58523559570312 * e, 150.00003051757812 * e, 80.58523559570312 * e),
       r.bezierCurveTo(159.50003051757812 * e, 79.08523559570312 * e, 159.50003051757812 * e, 79.08523559570312 * e, 169.00003051757812 * e, 77.58523559570312 * e),
       r.bezierCurveTo(163.00003051757812 * e, 72.58523559570312 * e, 163.00003051757812 * e, 72.58523559570312 * e, 157.00003051757812 * e, 67.58523559570312 * e),
       r.bezierCurveTo(162.00003051757812 * e, 42.585235595703125 * e, 169.00003051757812 * e, 29.585235595703125 * e, 182.00003051757812 * e, 14.585235595703125 * e),
       r.bezierCurveTo(219.00003051757812 * e, 48.585235595703125 * e, 222.00003051757812 * e, 92.58523559570312 * e, 218.00003051757812 * e, 112.58523559570312 * e),
       r.bezierCurveTo(239.00003051757812 * e, 95.58523559570312 * e, 242.00003051757812 * e, 97.58523559570312 * e, 249.00003051757812 * e, 94.58523559570312 * e),
       r.bezierCurveTo(255.00003051757812 * e, 103.08523559570312 * e, 255.00003051757812 * e, 103.08523559570312 * e, 261.0000305175781 * e, 111.58523559570312 * e),
       r.bezierCurveTo(261.5000305175781 * e, 99.58523559570312 * e, 261.5000305175781 * e, 99.58523559570312 * e, 262.0000305175781 * e, 87.58523559570312 * e),
       r.bezierCurveTo(282.0000305175781 * e, 77.58523559570312 * e, 301.0000305175781 * e, 74.58523559570312 * e, 314.0000305175781 * e, 76.58523559570312 * e),
       r.closePath(),
       se(r, void 0, i[2], 4 * e),
       t
   }
   function Tt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 248 * e,
       r.height = 128 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(137 * e, 7 * e),
       n.bezierCurveTo(169 * e, 14 * e, 212 * e, 9 * e, 241 * e, 5 * e),
       n.bezierCurveTo(211 * e, 63 * e, 158 * e, 92 * e, 103 * e, 109 * e),
       n.bezierCurveTo(73 * e, 126 * e, 54 * e, 124 * e, 6 * e, 99 * e),
       n.bezierCurveTo(82 * e, 63 * e, 113 * e, 35 * e, 137 * e, 8 * e),
       n.closePath(),
       se(n, t[0], t[1], 14 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(73 * e, 124 * e),
       n.bezierCurveTo(111 * e, 126 * e, 162 * e, 97 * e, 203 * e, 61 * e),
       n.bezierCurveTo(156 * e, 98 * e, 131 * e, 106 * e, 105 * e, 109 * e),
       n.bezierCurveTo(99 * e, 121 * e, 87 * e, 124 * e, 72 * e, 124 * e),
       n.closePath(),
       se(n, t[2], t[3], 1 * e),
       r
   }
   function It(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 130 * e,
       r.height = 148 * e,
       n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(65 * e, 85 * e),
       n.rotate(1.4),
       ue(n, 7, 60 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(65 * e, 74 * e),
       n.rotate(1.4),
       ue(n, 7, 60 * e, 10 * e),
       se(n, t[1], t[2], 4),
       n.rotate(.64),
       ue(n, 7, 40 * e, 10 * e),
       se(n, t[3], t[4], 4),
       n.rotate(.12),
       ue(n, 7, 23 * e, 5 * e),
       n.restore(),
       se(n, t[5]),
       r
   }
   function Et(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 125 * e,
       r.height = 139 * e,
       n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(63 * e, 79 * e),
       n.rotate(1),
       ue(n, 8, 60 * e, 10 * e),
       se(n, t[0]),
       n.restore(),
       n.globalAlpha = 1,
       n.save(),
       n.translate(63 * e, 69 * e),
       n.rotate(1),
       ue(n, 8, 60 * e, 10 * e),
       se(n, t[1], t[2], 4),
       n.rotate(.56),
       ue(n, 8, 40 * e, 10 * e),
       se(n, t[3], t[4], 4),
       n.rotate(.28),
       ue(n, 8, 28 * e, 8 * e),
       se(n, t[5]),
       n.restore(),
       r
   }
   function _t(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 90 * e,
       r.height = 101 * e,
       n.translate(0 * e, 5 * e),
       0 === Z && (n.globalAlpha = i ? .5 : 1,
       Ee(n, 44 * e, 55 * e, 41 * e),
       se(n, t[0])),
       n.globalAlpha = 1,
       Ee(n, 44 * e, 45 * e, 41 * e),
       se(n, t[1], t[2], 4 * e),
       Ee(n, 44 * e, 45 * e, 31 * e),
       se(n, t[3]),
       n.save(),
       n.translate(45 * e, 45 * e),
       Te(n, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e),
       n.restore(),
       se(n, t[4], t[4], 2 * e),
       n.save(),
       n.translate(45 * e, 45 * e),
       Te(n, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e),
       n.restore(),
       se(n, t[4], t[4], 2 * e),
       Ee(n, 45 * e, 29 * e, 7 * e),
       se(n, t[5]),
       Ee(n, 45 * e, 61 * e, 7 * e),
       se(n, t[5]),
       Ee(n, 28 * e, 45 * e, 7 * e),
       se(n, t[5]),
       Ee(n, 62 * e, 45 * e, 7 * e),
       se(n, t[5]),
       r
   }
   function ut(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 90 * e,
       r.height = 98 * e,
       n.translate(0, 4 * e),
       0 === Z && (n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(44 * e, 50 * e),
       n.rotate(1.4),
       ue(n, 7, 41 * e, 10 * e),
       n.restore(),
       se(n, t[0])),
       n.globalAlpha = 1,
       n.save(),
       n.translate(44 * e, 44 * e),
       n.rotate(1.4),
       ue(n, 7, 41 * e, 10 * e),
       se(n, t[1], t[2], 4 * e),
       ue(n, 7, 35 * e, 10 * e),
       se(n, t[3], t[4], 4 * e),
       ue(n, 7, 23 * e, 5 * e),
       n.restore(),
       se(n, t[5]),
       n.save(),
       n.translate(45 * e, 45 * e),
       n.rotate(0),
       Te(n, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e),
       n.restore(),
       se(n, t[4], t[4], 2 * e),
       n.save(),
       n.translate(45 * e, 45 * e),
       n.rotate(0),
       Te(n, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e),
       n.restore(),
       se(n, t[4], t[4], 2 * e),
       Ee(n, 45 * e, 29 * e, 7 * e),
       se(n, t[5]),
       Ee(n, 45 * e, 61 * e, 7 * e),
       se(n, t[5]),
       Ee(n, 28 * e, 45 * e, 7 * e),
       se(n, t[5]),
       Ee(n, 62 * e, 45 * e, 7 * e),
       se(n, t[5]),
       r
   }
   function ht(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 90 * e,
       r.height = 98 * e,
       n.translate(0, 4 * e),
       0 === Z && (n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(44 * e, 50 * e),
       n.rotate(1),
       ue(n, 8, 41 * e, 10 * e),
       se(n, t[0]),
       n.restore()),
       n.globalAlpha = 1,
       n.save(),
       n.translate(44 * e, 44 * e),
       n.rotate(1),
       ue(n, 8, 41 * e, 10 * e),
       se(n, t[1], t[2], 4 * e),
       n.rotate(.56),
       ue(n, 8, 33 * e, 10 * e),
       se(n, t[3], t[4], 4 * e),
       n.rotate(.28),
       ue(n, 8, 24 * e, 8 * e),
       se(n, t[5]),
       n.restore(),
       n.save(),
       n.translate(45 * e, 45 * e),
       n.rotate(0),
       Te(n, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e),
       n.restore(),
       se(n, t[4], t[4], 2 * e),
       n.save(),
       n.translate(45 * e, 45 * e),
       n.rotate(0),
       Te(n, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e),
       n.restore(),
       se(n, t[4], t[4], 2 * e),
       Ee(n, 45 * e, 29 * e, 7 * e),
       se(n, t[5]),
       Ee(n, 45 * e, 61 * e, 7 * e),
       se(n, t[5]),
       Ee(n, 28 * e, 45 * e, 7 * e),
       se(n, t[5]),
       Ee(n, 62 * e, 45 * e, 7 * e),
       se(n, t[5]),
       r
   }
   function Rt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 300 * e,
       r.height = 300 * e,
       n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(150 * e, 160 * e),
       n.rotate(6.28),
       ue(n, 6, 146 * e, 30 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(150 * e, 150 * e),
       n.rotate(6.28),
       ue(n, 6, 146 * e, 30 * e),
       n.restore(),
       se(n, t[1], t[2], 8 * e),
       n.save(),
       n.translate(150 * e, 150 * e),
       n.rotate(0),
       ue(n, 6, 105 * e, 30 * e),
       n.restore(),
       se(n, t[3], t[3], 8 * e),
       n.save(),
       n.translate(150 * e, 150 * e),
       n.rotate(0),
       ue(n, 6, 66 * e, 30 * e),
       n.restore(),
       se(n, t[4], t[2], 8 * e),
       n.save(),
       n.translate(150 * e, 150 * e),
       n.rotate(0),
       ue(n, 6, 31 * e, 30 * e),
       n.restore(),
       se(n, t[5], t[6], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(150 * e, 207 * e),
       n.bezierCurveTo(150 * e, 151 * e, 150 * e, 101 * e, 150 * e, 94 * e),
       n.closePath(),
       se(n, void 0, t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(118 * e, 100 * e),
       n.bezierCurveTo(118 * e, 205 * e, 118 * e, 207 * e, 118 * e, 200 * e),
       n.closePath(),
       se(n, void 0, t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(183 * e, 100 * e),
       n.bezierCurveTo(183 * e, 203 * e, 183 * e, 203 * e, 183 * e, 200 * e),
       n.closePath(),
       se(n, void 0, t[2], 8 * e),
       r
   }
   function At(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 300 * e,
       r.height = 300 * e,
       n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(150 * e, 160 * e),
       n.rotate(6.28),
       ue(n, 6, 146 * e, 30 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(150 * e, 150 * e),
       n.rotate(6.28),
       ue(n, 6, 146 * e, 30 * e),
       n.restore(),
       se(n, t[1], t[2], 8 * e),
       n.save(),
       n.translate(150 * e, 150 * e),
       n.rotate(0),
       ue(n, 6, 105 * e, 30 * e),
       n.restore(),
       se(n, t[3], t[3], 8 * e),
       n.save(),
       n.translate(150 * e, 150 * e),
       n.rotate(0),
       ue(n, 6, 66 * e, 30 * e),
       n.restore(),
       se(n, t[4], t[2], 8 * e),
       n.save(),
       n.translate(131 * e, 116 * e),
       ue(n, 7, 17 * e, 8 * e),
       n.restore(),
       se(n, t[6]),
       n.save(),
       n.translate(163 * e, 168 * e),
       ue(n, 7, 25 * e, 8 * e),
       n.restore(),
       se(n, t[6]),
       n.save(),
       n.translate(117 * e, 151 * e),
       ue(n, 7, 11 * e, 8 * e),
       n.restore(),
       se(n, t[6]),
       n.save(),
       n.translate(167 * e, 122 * e),
       ue(n, 7, 12 * e, 8 * e),
       n.restore(),
       se(n, t[6]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(150 * e, 207 * e),
       n.bezierCurveTo(150 * e, 151 * e, 150 * e, 101 * e, 150 * e, 94 * e),
       n.closePath(),
       se(n, void 0, t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(118 * e, 100 * e),
       n.bezierCurveTo(118 * e, 205 * e, 118 * e, 207 * e, 118 * e, 200 * e),
       n.closePath(),
       se(n, void 0, t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(183 * e, 100 * e),
       n.bezierCurveTo(183 * e, 203 * e, 183 * e, 203 * e, 183 * e, 200 * e),
       n.closePath(),
       se(n, void 0, t[2], 8 * e),
       r
   }
   function dt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 118 * e,
       r.height = 129 * e,
       n.save(),
       n.translate(90 * e, 90 * e),
       Te(n, -86.5 * e, -86 * e, 110 * e, 110 * e, 15 * e),
       n.restore(),
       se(n, t[0], t[1], 4),
       r
   }
   function St(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 90 * e,
       r.height = 98 * e,
       n.translate(0, 4 * e),
       0 === Z && (n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(44 * e, 50 * e),
       n.rotate(.2),
       ue(n, 9, 41 * e, 10 * e),
       n.restore(),
       se(n, t[0])),
       n.globalAlpha = 1,
       n.save(),
       n.translate(44 * e, 44 * e),
       n.rotate(.2),
       ue(n, 9, 41 * e, 10 * e),
       se(n, t[1], t[2], 4 * e),
       n.rotate(-.32),
       ue(n, 9, 32 * e, 10 * e),
       se(n, t[3], t[4], 4 * e),
       n.rotate(.68),
       ue(n, 9, 23 * e, 8 * e),
       se(n, t[5], t[6], 6 * e),
       n.restore(),
       n.save(),
       n.translate(45 * e, 45 * e),
       n.rotate(0),
       Te(n, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e),
       n.restore(),
       se(n, t[4], t[4], 2 * e),
       n.save(),
       n.translate(45 * e, 45 * e),
       n.rotate(0),
       Te(n, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e),
       n.restore(),
       se(n, t[4], t[4], 2 * e),
       Ee(n, 45 * e, 29 * e, 7 * e),
       se(n, t[5]),
       Ee(n, 45 * e, 61 * e, 7 * e),
       se(n, t[5]),
       Ee(n, 28 * e, 45 * e, 7 * e),
       se(n, t[5]),
       Ee(n, 62 * e, 45 * e, 7 * e),
       se(n, t[5]),
       r
   }
   function lt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 135 * e,
       r.height = 120 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(3.5 * e, 55.25 * e),
       n.bezierCurveTo(3.5 * e, 114.25 * e, 2.5 * e, 109.25 * e, 3.5 * e, 112.25 * e),
       n.bezierCurveTo(5.5 * e, 119.25 * e, 8.5 * e, 119.25 * e, 11.5 * e, 119.25 * e),
       n.bezierCurveTo(15.5 * e, 114.25 * e, 13.5 * e, 95.25 * e, 14.5 * e, 82.25 * e),
       n.closePath(),
       se(n, t[0], t[1], 7 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(6.5 * e, 43.25 * e),
       n.bezierCurveTo(3.5 * e, 27.25 * e, 7.5 * e, 20.25 * e, 25.5 * e, 11.25 * e),
       n.bezierCurveTo(45.5 * e, -.75 * e, 73.5 * e, 1.25 * e, 107.5 * e, 10.25 * e),
       n.bezierCurveTo(131.5 * e, 21.25 * e, 125.5 * e, 34.25 * e, 125.5 * e, 36.25 * e),
       n.closePath(),
       se(n, t[0], t[1], 7 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(120.5 * e, 62.25 * e),
       n.bezierCurveTo(121.5 * e, 95.25 * e, 120.5 * e, 80.25 * e, 120.5 * e, 100.25 * e),
       n.bezierCurveTo(118.5 * e, 119.25 * e, 123.5 * e, 118.25 * e, 129.5 * e, 113.25 * e),
       n.bezierCurveTo(133.5 * e, 107.25 * e, 130.5 * e, 97.25 * e, 130.5 * e, 87.25 * e),
       n.bezierCurveTo(129.5 * e, 56.25 * e, 130 * e, 70.75 * e, 129.5 * e, 54.25 * e),
       n.closePath(),
       se(n, t[0], t[1], 7 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(17.5 * e, 27 * e),
       n.bezierCurveTo(48.5 * e, 5 * e, 93.5 * e, 14 * e, 118.5 * e, 26 * e),
       n.bezierCurveTo(132.5 * e, 35 * e, 133.5 * e, 52 * e, 132.5 * e, 68 * e),
       n.bezierCurveTo(125.5 * e, 87 * e, 116.5 * e, 84 * e, 96.5 * e, 75 * e),
       n.bezierCurveTo(60.5 * e, 66 * e, 52.5 * e, 74 * e, 37.5 * e, 78 * e),
       n.bezierCurveTo(2.5 * e, 86 * e, 3.5 * e, 78 * e, 1.5 * e, 61 * e),
       n.bezierCurveTo(1.5 * e, 37 * e, 9.5 * e, 32 * e, 15.5 * e, 28 * e),
       n.closePath(),
       se(n, t[2], t[3], 7 * e),
       r
   }
   function Nt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 501 * e,
       r.height = 309 * e,
       n.translate(0, 6 * e),
       n.globalAlpha = i ? .5 : 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(126 * e, 184 * e),
       n.bezierCurveTo(169 * e, 196 * e, 194 * e, 198 * e, 227 * e, 198 * e),
       n.bezierCurveTo(235 * e, 222 * e, 236 * e, 223 * e, 241 * e, 226 * e),
       n.bezierCurveTo(245 * e, 228 * e, 257 * e, 228 * e, 263 * e, 226 * e),
       n.bezierCurveTo(267 * e, 225 * e, 270 * e, 211 * e, 275 * e, 198 * e),
       n.bezierCurveTo(332 * e, 194 * e, 347 * e, 192 * e, 372 * e, 188 * e),
       n.bezierCurveTo(366 * e, 174.5 * e, 366 * e, 174.5 * e, 360 * e, 161 * e),
       n.bezierCurveTo(253.5 * e, 162 * e, 253.5 * e, 162 * e, 147 * e, 163 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(100 * e, 116 * e),
       n.bezierCurveTo(90 * e, 101 * e, 96 * e, 89 * e, 106 * e, 83 * e),
       n.bezierCurveTo(86 * e, 79 * e, 86 * e, 52 * e, 93 * e, 38 * e),
       n.bezierCurveTo(99 * e, 51 * e, 107 * e, 57 * e, 122 * e, 63 * e),
       n.bezierCurveTo(130 * e, 53 * e, 141 * e, 46 * e, 161 * e, 46 * e),
       n.bezierCurveTo(157 * e, 31 * e, 158 * e, 20 * e, 169 * e, 6 * e),
       n.bezierCurveTo(171 * e, 24 * e, 186 * e, 33 * e, 198 * e, 45 * e),
       n.bezierCurveTo(252 * e, 45 * e, 252 * e, 45 * e, 306 * e, 45 * e),
       n.bezierCurveTo(323 * e, 33 * e, 332 * e, 21 * e, 335 * e, 7 * e),
       n.bezierCurveTo(349 * e, 21 * e, 347 * e, 36 * e, 345 * e, 46 * e),
       n.bezierCurveTo(364 * e, 46 * e, 369 * e, 48 * e, 377 * e, 63 * e),
       n.bezierCurveTo(398 * e, 58 * e, 403 * e, 49 * e, 409 * e, 40 * e),
       n.bezierCurveTo(419 * e, 57 * e, 411 * e, 79 * e, 398 * e, 85 * e),
       n.bezierCurveTo(405 * e, 100 * e, 405 * e, 106 * e, 401 * e, 118 * e),
       n.bezierCurveTo(332.5 * e, 128.5 * e, 332.5 * e, 128.5 * e, 264 * e, 139 * e),
       n.closePath(),
       se(n, t[1], t[2], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(122 * e, 191 * e),
       n.bezierCurveTo(123 * e, 237 * e, 135 * e, 245 * e, 153 * e, 259 * e),
       n.bezierCurveTo(167 * e, 269 * e, 158 * e, 281 * e, 118 * e, 276 * e),
       n.bezierCurveTo(104 * e, 273 * e, 98 * e, 268 * e, 93 * e, 242 * e),
       n.bezierCurveTo(89 * e, 220 * e, 92 * e, 201 * e, 102 * e, 179 * e),
       n.closePath(),
       se(n, t[3], t[2], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(403 * e, 182 * e),
       n.bezierCurveTo(414 * e, 215 * e, 412 * e, 232 * e, 403 * e, 260 * e),
       n.bezierCurveTo(395 * e, 274 * e, 375 * e, 272 * e, 356 * e, 270 * e),
       n.bezierCurveTo(345 * e, 268 * e, 339 * e, 262 * e, 354 * e, 252 * e),
       n.bezierCurveTo(370 * e, 242 * e, 380 * e, 225 * e, 384 * e, 184 * e),
       n.closePath(),
       se(n, t[3], t[2], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(155 * e, 157 * e),
       n.bezierCurveTo(146 * e, 189 * e, 137 * e, 198 * e, 114 * e, 219 * e),
       n.bezierCurveTo(104 * e, 212 * e, 98 * e, 203 * e, 89 * e, 189 * e),
       n.bezierCurveTo(82 * e, 178 * e, 91 * e, 164 * e, 93 * e, 136 * e),
       n.closePath(),
       se(n, t[4], t[2], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(347 * e, 162 * e),
       n.bezierCurveTo(357 * e, 195 * e, 376 * e, 209 * e, 387 * e, 217 * e),
       n.bezierCurveTo(409 * e, 201 * e, 420 * e, 181 * e, 416 * e, 166 * e),
       n.bezierCurveTo(410 * e, 150 * e, 412 * e, 149 * e, 408 * e, 130 * e),
       n.closePath(),
       se(n, t[4], t[2], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(86 * e, 134 * e),
       n.bezierCurveTo(79 * e, 102 * e, 92 * e, 84 * e, 108 * e, 92 * e),
       n.bezierCurveTo(149 * e, 108 * e, 184 * e, 111 * e, 242 * e, 111 * e),
       n.bezierCurveTo(294 * e, 108 * e, 341 * e, 105 * e, 386 * e, 98 * e),
       n.bezierCurveTo(412 * e, 91 * e, 417 * e, 86 * e, 415 * e, 133 * e),
       n.bezierCurveTo(413 * e, 160 * e, 413 * e, 160 * e, 368 * e, 174 * e),
       n.bezierCurveTo(308 * e, 184 * e, 291 * e, 185 * e, 270 * e, 186 * e),
       n.bezierCurveTo(264 * e, 206 * e, 262 * e, 215 * e, 253 * e, 215 * e),
       n.bezierCurveTo(239 * e, 217 * e, 239 * e, 211 * e, 231 * e, 186 * e),
       n.bezierCurveTo(178 * e, 184 * e, 156 * e, 179 * e, 112 * e, 162 * e),
       n.bezierCurveTo(87 * e, 151 * e, 90 * e, 144 * e, 87 * e, 137 * e),
       n.closePath(),
       se(n, t[4], t[2], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(63 * e, 98 * e),
       n.bezierCurveTo(84 * e, 121 * e, 109 * e, 102 * e, 124 * e, 117 * e),
       n.bezierCurveTo(138 * e, 136 * e, 123 * e, 165 * e, 94 * e, 150 * e),
       n.bezierCurveTo(66 * e, 131 * e, 64 * e, 115 * e, 63 * e, 99 * e),
       n.closePath(),
       se(n, t[3], t[2], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(449 * e, 97 * e),
       n.bezierCurveTo(446 * e, 143 * e, 415 * e, 151 * e, 402 * e, 155 * e),
       n.bezierCurveTo(386 * e, 157 * e, 373 * e, 133 * e, 391 * e, 116 * e),
       n.bezierCurveTo(402 * e, 106 * e, 432 * e, 124 * e, 449 * e, 97 * e),
       n.closePath(),
       se(n, t[3], t[2], 10 * e),
       r
   }
   function Ct(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 304 * e,
       r.height = 278 * e,
       n.translate(10 * e, 25 * e),
       n.globalAlpha = i ? .5 : 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(128 * e, 137 * e),
       n.bezierCurveTo(155 * e, 144 * e, 223 * e, 143 * e, 256 * e, 122 * e),
       n.bezierCurveTo(249 * e, 180 * e, 210 * e, 227 * e, 164 * e, 242 * e),
       n.bezierCurveTo(74 * e, 213 * e, 99 * e, 166 * e, 127 * e, 138 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(284 * e, 52 * e),
       n.bezierCurveTo(126 * e, 112 * e, 89 * e, 177 * e, 170 * e, 241 * e),
       n.bezierCurveTo(103 * e, 275 * e, 20 * e, 239 * e, 12 * e, 159 * e),
       n.bezierCurveTo(5 * e, 76 * e, 75 * e, 4 * e, 165 * e, 13 * e),
       n.bezierCurveTo(233 * e, 15 * e, 260 * e, 33 * e, 284 * e, 52 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(-10 * e, -25 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(128 * e, 137 * e),
       n.bezierCurveTo(155 * e, 144 * e, 223 * e, 143 * e, 256 * e, 122 * e),
       n.bezierCurveTo(249 * e, 180 * e, 210 * e, 227 * e, 164 * e, 242 * e),
       n.bezierCurveTo(74 * e, 213 * e, 99 * e, 166 * e, 127 * e, 138 * e),
       n.closePath(),
       se(n, t[1], t[2], 15 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(284 * e, 52 * e),
       n.bezierCurveTo(126 * e, 112 * e, 89 * e, 177 * e, 170 * e, 241 * e),
       n.bezierCurveTo(103 * e, 275 * e, 20 * e, 239 * e, 12 * e, 159 * e),
       n.bezierCurveTo(5 * e, 76 * e, 75 * e, 4 * e, 165 * e, 13 * e),
       n.bezierCurveTo(233 * e, 15 * e, 260 * e, 33 * e, 284 * e, 52 * e),
       n.closePath(),
       se(n, t[3], t[4], 15 * e),
       r
   }
   function gt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 175 * e,
       r.height = 169 * e,
       n.globalAlpha = .5,
       n.translate(0, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(19 * e, 139 * e),
       n.bezierCurveTo(18 * e, 163 * e, 22 * e, 156 * e, 53 * e, 157 * e),
       n.bezierCurveTo(97.5 * e, 157 * e, 97.5 * e, 157 * e, 142 * e, 157 * e),
       n.bezierCurveTo(150 * e, 157 * e, 153 * e, 156 * e, 154 * e, 142 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -3 * e),
       n.save(),
       n.translate(86.5 * e, 81.5 * e),
       Te(n, -66.5 * e, -65.5 * e, 133 * e, 131 * e, 10 * e),
       n.restore(),
       se(n, t[1], t[2], 5 * e),
       n.save(),
       n.translate(84.5 * e, 79 * e),
       Te(n, -50.5 * e, -49 * e, 101 * e, 98 * e, 10 * e),
       n.restore(),
       se(n, t[3], t[2], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(42 * e, 54 * e),
       n.bezierCurveTo(37 * e, 48 * e, 39 * e, 44 * e, 38 * e, 41 * e),
       n.bezierCurveTo(42 * e, 40 * e, 45 * e, 40 * e, 50 * e, 41 * e),
       n.bezierCurveTo(85 * e, 36 * e, 98 * e, 37 * e, 116 * e, 42 * e),
       n.bezierCurveTo(132 * e, 39 * e, 132 * e, 39 * e, 133 * e, 56 * e),
       n.bezierCurveTo(136 * e, 73 * e, 136 * e, 84 * e, 132 * e, 106 * e),
       n.bezierCurveTo(47 * e, 113 * e, 85.5 * e, 106 * e, 39 * e, 106 * e),
       n.bezierCurveTo(32 * e, 81 * e, 38 * e, 60 * e, 42 * e, 55 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.save(),
       n.translate(28 * e, 24 * e),
       n.rotate(0),
       Te(n, -14 * e, -14 * e, 28 * e, 28 * e, 4 * e),
       n.restore(),
       se(n, t[1], t[2], 5 * e),
       n.save(),
       n.translate(143 * e, 23 * e),
       n.rotate(0),
       Te(n, -14 * e, -14 * e, 28 * e, 28 * e, 4 * e),
       n.restore(),
       se(n, t[1], t[2], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(55 * e, 80 * e),
       n.bezierCurveTo(73 * e, 78 * e, 84 * e, 74 * e, 100 * e, 64 * e),
       n.bezierCurveTo(111 * e, 57 * e, 125 * e, 67 * e, 108 * e, 84 * e),
       n.bezierCurveTo(96 * e, 95 * e, 86 * e, 96 * e, 70 * e, 88 * e),
       n.bezierCurveTo(62.5 * e, 84 * e, 62.5 * e, 84 * e, 55 * e, 80 * e),
       n.closePath(),
       se(n, t[5]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(17 * e, 112 * e),
       n.bezierCurveTo(14 * e, 146 * e, 27 * e, 152 * e, 37 * e, 149 * e),
       n.bezierCurveTo(78 * e, 155 * e, 128 * e, 150 * e, 146 * e, 150 * e),
       n.bezierCurveTo(158 * e, 144 * e, 158 * e, 121 * e, 153 * e, 114 * e),
       n.closePath(),
       se(n, t[8], t[9], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(127 * e, 111 * e),
       n.bezierCurveTo(133 * e, 136 * e, 115 * e, 149 * e, 88 * e, 150 * e),
       n.bezierCurveTo(119.5 * e, 151 * e, 119.5 * e, 151 * e, 151 * e, 152 * e),
       n.bezierCurveTo(159 * e, 136 * e, 155 * e, 126 * e, 154 * e, 113 * e),
       n.closePath(),
       se(n, t[9]),
       n.globalAlpha = .5,
       n.translate(0, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(15 * e, 117 * e),
       n.bezierCurveTo(34 * e, 109 * e, 61 * e, 106 * e, 94 * e, 109 * e),
       n.bezierCurveTo(126 * e, 110 * e, 142 * e, 113 * e, 154 * e, 119 * e),
       n.bezierCurveTo(154 * e, 123 * e, 154 * e, 123 * e, 154 * e, 127 * e),
       n.bezierCurveTo(127 * e, 118 * e, 15 * e, 122 * e, 18 * e, 129 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(14 * e, 127 * e),
       n.bezierCurveTo(13 * e, 117 * e, 12 * e, 109 * e, 15 * e, 103 * e),
       n.bezierCurveTo(16 * e, 95 * e, 21 * e, 92 * e, 60 * e, 93 * e),
       n.bezierCurveTo(91 * e, 93 * e, 118 * e, 93 * e, 143 * e, 96 * e),
       n.bezierCurveTo(151 * e, 96 * e, 155 * e, 99 * e, 156 * e, 112 * e),
       n.bezierCurveTo(157 * e, 124 * e, 157 * e, 127 * e, 156 * e, 128 * e),
       n.bezierCurveTo(138 * e, 112 * e, 100 * e, 118 * e, 84 * e, 118 * e),
       n.bezierCurveTo(28 * e, 118 * e, 20 * e, 120 * e, 16 * e, 127 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.save(),
       n.translate(27.5 * e, 138.5 * e),
       Te(n, -13.5 * e, -14.5 * e, 27 * e, 29 * e, 4 * e),
       n.restore(),
       se(n, t[1], t[2], 5 * e),
       n.save(),
       n.translate(143.5 * e, 137 * e),
       Te(n, -13.5 * e, -14 * e, 27 * e, 28 * e, 4 * e),
       n.restore(),
       se(n, t[1], t[2], 5 * e),
       r
   }
   function bt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 175 * e,
       r.height = 169 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(17 * e, 112 * e),
       n.bezierCurveTo(14 * e, 146 * e, 27 * e, 152 * e, 37 * e, 149 * e),
       n.bezierCurveTo(78 * e, 155 * e, 128 * e, 150 * e, 146 * e, 150 * e),
       n.bezierCurveTo(158 * e, 144 * e, 158 * e, 121 * e, 153 * e, 114 * e),
       n.closePath(),
       se(n, t[8], t[9], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(127 * e, 111 * e),
       n.bezierCurveTo(133 * e, 136 * e, 115 * e, 149 * e, 88 * e, 150 * e),
       n.bezierCurveTo(119.5 * e, 151 * e, 119.5 * e, 151 * e, 151 * e, 152 * e),
       n.bezierCurveTo(159 * e, 136 * e, 155 * e, 126 * e, 154 * e, 113 * e),
       n.closePath(),
       se(n, t[9]),
       n.globalAlpha = .5,
       n.translate(0, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(15 * e, 117 * e),
       n.bezierCurveTo(34 * e, 109 * e, 61 * e, 106 * e, 94 * e, 109 * e),
       n.bezierCurveTo(126 * e, 110 * e, 142 * e, 113 * e, 154 * e, 119 * e),
       n.bezierCurveTo(154 * e, 123 * e, 154 * e, 123 * e, 154 * e, 127 * e),
       n.bezierCurveTo(127 * e, 118 * e, 15 * e, 122 * e, 18 * e, 129 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(14 * e, 127 * e),
       n.bezierCurveTo(13 * e, 117 * e, 12 * e, 109 * e, 15 * e, 103 * e),
       n.bezierCurveTo(16 * e, 95 * e, 21 * e, 92 * e, 60 * e, 93 * e),
       n.bezierCurveTo(91 * e, 93 * e, 118 * e, 93 * e, 143 * e, 96 * e),
       n.bezierCurveTo(151 * e, 96 * e, 155 * e, 99 * e, 156 * e, 112 * e),
       n.bezierCurveTo(157 * e, 124 * e, 157 * e, 127 * e, 156 * e, 128 * e),
       n.bezierCurveTo(138 * e, 112 * e, 100 * e, 118 * e, 84 * e, 118 * e),
       n.bezierCurveTo(28 * e, 118 * e, 20 * e, 120 * e, 16 * e, 127 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.save(),
       n.translate(27.5 * e, 138.5 * e),
       Te(n, -13.5 * e, -14.5 * e, 27 * e, 29 * e, 4 * e),
       n.restore(),
       se(n, t[1], t[2], 5 * e),
       n.save(),
       n.translate(143.5 * e, 137 * e),
       Te(n, -13.5 * e, -14 * e, 27 * e, 28 * e, 4 * e),
       n.restore(),
       se(n, t[1], t[2], 5 * e),
       r
   }
   function Ot(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 115 * e,
       r.height = 585 * e,
       n.scale(-1, 1),
       n.translate(-110 * e, 0),
       n.translate(10 * e, 10 * e),
       n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(51.5 * e, 342 * e),
       Te(n, -14.5 * e, -225 * e, 29 * e, 450 * e, 20 * e),
       n.restore(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(54 * e, 83 * e),
       n.bezierCurveTo(70 * e, 69 * e, 78 * e, 62 * e, 82 * e, 40 * e),
       n.bezierCurveTo(93 * e, 48 * e, 103 * e, 64 * e, 95 * e, 102 * e),
       n.bezierCurveTo(60 * e, 114 * e, 53 * e, 103 * e, 54 * e, 85 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(95 * e, 97 * e),
       n.bezierCurveTo(56 * e, 102 * e, 43 * e, 77 * e, 71 * e, 6 * e),
       n.bezierCurveTo(34 * e, 10 * e, 6 * e, 43 * e, 5 * e, 76 * e),
       n.bezierCurveTo(4 * e, 98 * e, 15 * e, 130 * e, 64 * e, 130 * e),
       n.bezierCurveTo(76 * e, 129 * e, 95 * e, 113 * e, 97 * e, 97 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(55 * e, 176 * e),
       n.bezierCurveTo(74 * e, 175 * e, 82 * e, 169 * e, 96 * e, 155 * e),
       n.bezierCurveTo(103 * e, 183 * e, 95 * e, 214 * e, 54 * e, 219 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(50 * e, 176 * e),
       n.bezierCurveTo(25 * e, 177 * e, 16 * e, 164 * e, 7 * e, 156 * e),
       n.bezierCurveTo(0 * e, 186 * e, 10 * e, 201 * e, 43 * e, 220 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35 * e, 403 * e),
       n.bezierCurveTo(47 * e, 412 * e, 58 * e, 412 * e, 67 * e, 403 * e),
       n.bezierCurveTo(66.5 * e, 434 * e, 66.5 * e, 434 * e, 66 * e, 465 * e),
       n.bezierCurveTo(56 * e, 480 * e, 40 * e, 472 * e, 36 * e, 465 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(59 * e, 67 * e),
       n.bezierCurveTo(47 * e, 97 * e, 18 * e, 117 * e, 11 * e, 110 * e),
       n.bezierCurveTo(11 * e, 115 * e, 15 * e, 122 * e, 23 * e, 124 * e),
       n.bezierCurveTo(46 * e, 118 * e, 52 * e, 113 * e, 62 * e, 86 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(30 * e, 125 * e),
       n.bezierCurveTo(47 * e, 136 * e, 57 * e, 134 * e, 77 * e, 127 * e),
       n.bezierCurveTo(71 * e, 158 * e, 71 * e, 159 * e, 66 * e, 159 * e),
       n.bezierCurveTo(50.5 * e, 156.5 * e, 50.5 * e, 156.5 * e, 35 * e, 154 * e),
       n.bezierCurveTo(31 * e, 145 * e, 31 * e, 136 * e, 31 * e, 125 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35 * e, 171 * e),
       n.bezierCurveTo(32 * e, 221 * e, 43 * e, 233 * e, 70 * e, 247 * e),
       n.bezierCurveTo(75 * e, 234 * e, 75 * e, 230 * e, 72 * e, 221 * e),
       n.bezierCurveTo(48 * e, 206 * e, 54 * e, 188 * e, 50 * e, 176 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(60 * e, 68 * e),
       n.bezierCurveTo(63 * e, 69 * e, 65 * e, 71 * e, 67 * e, 77 * e),
       n.bezierCurveTo(61 * e, 123 * e, 52 * e, 137 * e, 42 * e, 150 * e),
       n.bezierCurveTo(38 * e, 151 * e, 38 * e, 151 * e, 34 * e, 152 * e),
       n.bezierCurveTo(33 * e, 146.5 * e, 33 * e, 146.5 * e, 32 * e, 141 * e),
       n.bezierCurveTo(49 * e, 118 * e, 63 * e, 87 * e, 59 * e, 68 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(71 * e, 172 * e),
       n.bezierCurveTo(56 * e, 222 * e, 49 * e, 234 * e, 35 * e, 248 * e),
       n.bezierCurveTo(30 * e, 236 * e, 30 * e, 230 * e, 31 * e, 217 * e),
       n.bezierCurveTo(44 * e, 202 * e, 49 * e, 191 * e, 52 * e, 172 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35 * e, 151 * e),
       n.bezierCurveTo(27 * e, 165 * e, 31 * e, 173 * e, 36 * e, 178 * e),
       n.bezierCurveTo(56 * e, 185 * e, 73 * e, 184 * e, 71 * e, 170 * e),
       n.bezierCurveTo(72 * e, 154 * e, 71 * e, 154 * e, 63 * e, 155 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(-10 * e, -10 * e),
       n.globalAlpha = 1,
       n.save(),
       n.translate(51.5 * e, 342 * e),
       Te(n, -14.5 * e, -225 * e, 29 * e, 450 * e, 20 * e),
       n.restore(),
       se(n, t[1], t[2], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(54 * e, 83 * e),
       n.bezierCurveTo(70 * e, 69 * e, 78 * e, 62 * e, 82 * e, 40 * e),
       n.bezierCurveTo(93 * e, 48 * e, 103 * e, 64 * e, 95 * e, 102 * e),
       n.bezierCurveTo(60 * e, 114 * e, 53 * e, 103 * e, 54 * e, 85 * e),
       n.closePath(),
       se(n, t[3], t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(95 * e, 97 * e),
       n.bezierCurveTo(56 * e, 102 * e, 43 * e, 77 * e, 71 * e, 6 * e),
       n.bezierCurveTo(34 * e, 10 * e, 6 * e, 43 * e, 5 * e, 76 * e),
       n.bezierCurveTo(4 * e, 98 * e, 15 * e, 130 * e, 64 * e, 130 * e),
       n.bezierCurveTo(76 * e, 129 * e, 95 * e, 113 * e, 97 * e, 97 * e),
       n.closePath(),
       se(n, t[5], t[6], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35 * e, 403 * e),
       n.bezierCurveTo(47 * e, 412 * e, 58 * e, 412 * e, 67 * e, 403 * e),
       n.bezierCurveTo(66.5 * e, 434 * e, 66.5 * e, 434 * e, 66 * e, 465 * e),
       n.bezierCurveTo(56 * e, 480 * e, 40 * e, 472 * e, 36 * e, 465 * e),
       n.closePath(),
       se(n, t[7], t[8], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(37 * e, 427 * e),
       n.bezierCurveTo(47 * e, 435 * e, 55 * e, 435 * e, 67 * e, 427 * e),
       se(n, void 0, t[8], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(36 * e, 448 * e),
       n.bezierCurveTo(46 * e, 454 * e, 54 * e, 457 * e, 65 * e, 449 * e),
       se(n, void 0, t[8], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(55 * e, 176 * e),
       n.bezierCurveTo(74 * e, 175 * e, 82 * e, 169 * e, 96 * e, 155 * e),
       n.bezierCurveTo(103 * e, 183 * e, 95 * e, 214 * e, 54 * e, 219 * e),
       n.closePath(),
       se(n, t[3], t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(50 * e, 176 * e),
       n.bezierCurveTo(25 * e, 177 * e, 16 * e, 164 * e, 7 * e, 156 * e),
       n.bezierCurveTo(0 * e, 186 * e, 10 * e, 201 * e, 43 * e, 220 * e),
       n.closePath(),
       se(n, t[3], t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(59 * e, 67 * e),
       n.bezierCurveTo(47 * e, 97 * e, 18 * e, 117 * e, 11 * e, 110 * e),
       n.bezierCurveTo(11 * e, 115 * e, 15 * e, 122 * e, 23 * e, 124 * e),
       n.bezierCurveTo(46 * e, 118 * e, 52 * e, 113 * e, 62 * e, 86 * e),
       n.closePath(),
       se(n, t[7], t[8], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(30 * e, 125 * e),
       n.bezierCurveTo(47 * e, 136 * e, 57 * e, 134 * e, 77 * e, 127 * e),
       n.bezierCurveTo(71 * e, 158 * e, 71 * e, 159 * e, 66 * e, 159 * e),
       n.bezierCurveTo(50.5 * e, 156.5 * e, 50.5 * e, 156.5 * e, 35 * e, 154 * e),
       n.bezierCurveTo(31 * e, 145 * e, 31 * e, 136 * e, 31 * e, 125 * e),
       n.closePath(),
       se(n, t[7], t[8], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35 * e, 171 * e),
       n.bezierCurveTo(32 * e, 221 * e, 43 * e, 233 * e, 70 * e, 247 * e),
       n.bezierCurveTo(75 * e, 234 * e, 75 * e, 230 * e, 72 * e, 221 * e),
       n.bezierCurveTo(48 * e, 206 * e, 54 * e, 188 * e, 50 * e, 176 * e),
       n.closePath(),
       se(n, t[7], t[8], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(60 * e, 68 * e),
       n.bezierCurveTo(63 * e, 69 * e, 65 * e, 71 * e, 67 * e, 77 * e),
       n.bezierCurveTo(61 * e, 123 * e, 52 * e, 137 * e, 42 * e, 150 * e),
       n.bezierCurveTo(38 * e, 151 * e, 38 * e, 151 * e, 34 * e, 152 * e),
       n.bezierCurveTo(33 * e, 146.5 * e, 33 * e, 146.5 * e, 32 * e, 141 * e),
       n.bezierCurveTo(49 * e, 118 * e, 63 * e, 87 * e, 59 * e, 68 * e),
       n.closePath(),
       se(n, t[7], t[8], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(71 * e, 172 * e),
       n.bezierCurveTo(56 * e, 222 * e, 49 * e, 234 * e, 35 * e, 248 * e),
       n.bezierCurveTo(30 * e, 236 * e, 30 * e, 230 * e, 31 * e, 217 * e),
       n.bezierCurveTo(44 * e, 202 * e, 49 * e, 191 * e, 52 * e, 172 * e),
       n.closePath(),
       se(n, t[7], t[8], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35 * e, 151 * e),
       n.bezierCurveTo(27 * e, 165 * e, 31 * e, 173 * e, 36 * e, 178 * e),
       n.bezierCurveTo(56 * e, 185 * e, 73 * e, 184 * e, 71 * e, 170 * e),
       n.bezierCurveTo(72 * e, 154 * e, 71 * e, 154 * e, 63 * e, 155 * e),
       n.closePath(),
       se(n, t[7], t[8], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(53 * e, 113 * e),
       n.bezierCurveTo(65 * e, 140 * e, 75 * e, 166 * e, 52 * e, 169 * e),
       n.bezierCurveTo(29 * e, 168 * e, 41 * e, 143 * e, 53 * e, 112 * e),
       n.closePath(),
       se(n, t[3], t[4], 6 * e),
       r
   }
   function pt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 81 * e,
       r.height = 626 * e,
       n.translate(20 * e, 20 * e),
       n.globalAlpha = i ? .5 : 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(55 * e, 565 * e),
       n.bezierCurveTo(56 * e, 586 * e, 53 * e, 591 * e, 40 * e, 592 * e),
       n.bezierCurveTo(28 * e, 591 * e, 27 * e, 583 * e, 28 * e, 557 * e),
       n.bezierCurveTo(27.5 * e, 346 * e, 27.5 * e, 346 * e, 27 * e, 135 * e),
       n.bezierCurveTo(26 * e, 74 * e, 36 * e, 26 * e, 41 * e, 15 * e),
       n.bezierCurveTo(54 * e, 51 * e, 54 * e, 81 * e, 55 * e, 128 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(-20 * e, -20 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(55 * e, 565 * e),
       n.bezierCurveTo(56 * e, 586 * e, 53 * e, 591 * e, 40 * e, 592 * e),
       n.bezierCurveTo(28 * e, 591 * e, 27 * e, 583 * e, 28 * e, 557 * e),
       n.bezierCurveTo(27.5 * e, 346 * e, 27.5 * e, 346 * e, 27 * e, 135 * e),
       n.bezierCurveTo(26 * e, 74 * e, 36 * e, 26 * e, 41 * e, 15 * e),
       n.bezierCurveTo(54 * e, 51 * e, 54 * e, 81 * e, 55 * e, 128 * e),
       n.closePath(),
       se(n, t[1], t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(27 * e, 129 * e),
       n.bezierCurveTo(32 * e, 135 * e, 48 * e, 136 * e, 53 * e, 129 * e),
       n.bezierCurveTo(56 * e, 97 * e, 53 * e, 82 * e, 52 * e, 64 * e),
       n.bezierCurveTo(49 * e, 33 * e, 44 * e, 27 * e, 41 * e, 21 * e),
       n.bezierCurveTo(31 * e, 40 * e, 28 * e, 84 * e, 27 * e, 127 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(55 * e, 565 * e),
       n.bezierCurveTo(56 * e, 586 * e, 53 * e, 591 * e, 40 * e, 592 * e),
       n.bezierCurveTo(28 * e, 591 * e, 27 * e, 583 * e, 28 * e, 557 * e),
       n.bezierCurveTo(27.5 * e, 346 * e, 27.5 * e, 346 * e, 27 * e, 135 * e),
       n.bezierCurveTo(26 * e, 74 * e, 36 * e, 26 * e, 41 * e, 15 * e),
       n.bezierCurveTo(54 * e, 51 * e, 54 * e, 81 * e, 55 * e, 128 * e),
       n.closePath(),
       se(n, void 0, t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(28 * e, 475 * e),
       n.bezierCurveTo(38 * e, 482 * e, 48 * e, 480 * e, 54 * e, 474 * e),
       n.bezierCurveTo(54 * e, 509.5 * e, 54 * e, 509.5 * e, 54 * e, 545 * e),
       n.bezierCurveTo(46 * e, 554 * e, 36 * e, 552 * e, 28 * e, 545 * e),
       n.closePath(),
       se(n, t[4], t[5], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(28 * e, 496 * e),
       n.bezierCurveTo(39 * e, 506 * e, 49 * e, 503 * e, 54 * e, 496 * e),
       se(n, void 0, t[5], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(28 * e, 521 * e),
       n.bezierCurveTo(41 * e, 529 * e, 49 * e, 524 * e, 54 * e, 520 * e),
       se(n, void 0, t[5], 8 * e),
       r
   }
   function ct(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 100 * e,
       r.height = 648 * e,
       n.translate(20 * e, 20 * e),
       n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(50.5 * e, 349.5 * e),
       Te(n, -13.5 * e, -249.5 * e, 27 * e, 499 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(36 * e, 538 * e),
       n.bezierCurveTo(49.5 * e, 538 * e, 49.5 * e, 538 * e, 63 * e, 538 * e),
       n.bezierCurveTo(63.5 * e, 568 * e, 63.5 * e, 568 * e, 64 * e, 598 * e),
       n.bezierCurveTo(50 * e, 598 * e, 50 * e, 598 * e, 36 * e, 598 * e),
       n.bezierCurveTo(36 * e, 568.5 * e, 36 * e, 568.5 * e, 36 * e, 539 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(36 * e, 554 * e),
       n.bezierCurveTo(45 * e, 561 * e, 56 * e, 558 * e, 63 * e, 554 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(32 * e, 569 * e),
       n.bezierCurveTo(44 * e, 576 * e, 58 * e, 574 * e, 68 * e, 569 * e),
       n.bezierCurveTo(68 * e, 584 * e, 68 * e, 584 * e, 68 * e, 599 * e),
       n.bezierCurveTo(68 * e, 608 * e, 65 * e, 618 * e, 49 * e, 617 * e),
       n.bezierCurveTo(34 * e, 617 * e, 32 * e, 610 * e, 32 * e, 598 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(41 * e, 581 * e),
       n.bezierCurveTo(48 * e, 584 * e, 55 * e, 583 * e, 60 * e, 581 * e),
       n.bezierCurveTo(60 * e, 589.5 * e, 60 * e, 589.5 * e, 60 * e, 598 * e),
       n.bezierCurveTo(60 * e, 604 * e, 59 * e, 609 * e, 48 * e, 608 * e),
       n.bezierCurveTo(40 * e, 607 * e, 40 * e, 606 * e, 41 * e, 581 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(31 * e, 106 * e),
       n.bezierCurveTo(31 * e, 124.5 * e, 31 * e, 124.5 * e, 31 * e, 143 * e),
       n.bezierCurveTo(31 * e, 163 * e, 38 * e, 169 * e, 48 * e, 168 * e),
       n.bezierCurveTo(57 * e, 168 * e, 67 * e, 165 * e, 67 * e, 148 * e),
       n.bezierCurveTo(67 * e, 123.5 * e, 67 * e, 123.5 * e, 67 * e, 99 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(49 * e, 27 * e),
       n.bezierCurveTo(64 * e, 62.5 * e, 64 * e, 62.5 * e, 79 * e, 98 * e),
       n.bezierCurveTo(74 * e, 113 * e, 63 * e, 121 * e, 50 * e, 122 * e),
       n.bezierCurveTo(35 * e, 123 * e, 22 * e, 109 * e, 20 * e, 98 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(49 * e, 43 * e),
       n.bezierCurveTo(61 * e, 70 * e, 61 * e, 70 * e, 73 * e, 97 * e),
       n.bezierCurveTo(66 * e, 116 * e, 43 * e, 122 * e, 26 * e, 99 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(-20 * e, -20 * e),
       n.globalAlpha = 1,
       n.save(),
       n.translate(50.5 * e, 349.5 * e),
       Te(n, -13.5 * e, -249.5 * e, 27 * e, 499 * e, 10 * e),
       n.restore(),
       se(n, t[1], t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(36 * e, 538 * e),
       n.bezierCurveTo(49.5 * e, 538 * e, 49.5 * e, 538 * e, 63 * e, 538 * e),
       n.bezierCurveTo(63.5 * e, 568 * e, 63.5 * e, 568 * e, 64 * e, 598 * e),
       n.bezierCurveTo(50 * e, 598 * e, 50 * e, 598 * e, 36 * e, 598 * e),
       n.bezierCurveTo(36 * e, 568.5 * e, 36 * e, 568.5 * e, 36 * e, 539 * e),
       n.closePath(),
       se(n, t[3], t[4], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(36 * e, 554 * e),
       n.bezierCurveTo(45 * e, 561 * e, 56 * e, 558 * e, 63 * e, 554 * e),
       n.closePath(),
       se(n, void 0, t[4], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(32 * e, 569 * e),
       n.bezierCurveTo(44 * e, 576 * e, 58 * e, 574 * e, 68 * e, 569 * e),
       n.bezierCurveTo(68 * e, 584 * e, 68 * e, 584 * e, 68 * e, 599 * e),
       n.bezierCurveTo(68 * e, 608 * e, 65 * e, 618 * e, 49 * e, 617 * e),
       n.bezierCurveTo(34 * e, 617 * e, 32 * e, 610 * e, 32 * e, 598 * e),
       n.closePath(),
       se(n, t[5], t[6], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(41 * e, 581 * e),
       n.bezierCurveTo(48 * e, 584 * e, 55 * e, 583 * e, 60 * e, 581 * e),
       n.bezierCurveTo(60 * e, 589.5 * e, 60 * e, 589.5 * e, 60 * e, 598 * e),
       n.bezierCurveTo(60 * e, 604 * e, 59 * e, 609 * e, 48 * e, 608 * e),
       n.bezierCurveTo(40 * e, 607 * e, 40 * e, 606 * e, 41 * e, 581 * e),
       n.closePath(),
       se(n, t[7]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(31 * e, 106 * e),
       n.bezierCurveTo(31 * e, 124.5 * e, 31 * e, 124.5 * e, 31 * e, 143 * e),
       n.bezierCurveTo(31 * e, 163 * e, 38 * e, 169 * e, 48 * e, 168 * e),
       n.bezierCurveTo(57 * e, 168 * e, 67 * e, 165 * e, 67 * e, 148 * e),
       n.bezierCurveTo(67 * e, 123.5 * e, 67 * e, 123.5 * e, 67 * e, 99 * e),
       n.closePath(),
       se(n, t[5], t[6], 8 * e),
       n.save(),
       n.translate(-46 * e, -50 * e),
       n.scale(2, 2),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(51 * e, 80 * e),
       n.bezierCurveTo(51 * e, 89.5 * e, 51 * e, 89.5 * e, 51 * e, 99 * e),
       n.bezierCurveTo(49 * e, 103 * e, 46 * e, 105 * e, 44 * e, 99 * e),
       n.bezierCurveTo(44 * e, 88.5 * e, 44 * e, 88.5 * e, 44 * e, 78 * e),
       n.closePath(),
       se(n, t[8]),
       n.restore(),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(49 * e, 27 * e),
       n.bezierCurveTo(64 * e, 62.5 * e, 64 * e, 62.5 * e, 79 * e, 98 * e),
       n.bezierCurveTo(74 * e, 113 * e, 63 * e, 121 * e, 50 * e, 122 * e),
       n.bezierCurveTo(35 * e, 123 * e, 22 * e, 109 * e, 20 * e, 98 * e),
       n.closePath(),
       se(n, t[8], t[9], 8 * e),
       n.scale(2, 2),
       n.translate(-23 * e, -20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(57 * e, 69 * e),
       n.bezierCurveTo(50 * e, 76 * e, 43 * e, 75 * e, 38 * e, 69 * e),
       n.bezierCurveTo(43 * e, 57 * e, 43 * e, 57 * e, 48 * e, 45 * e),
       n.closePath(),
       se(n, t[10]),
       r
   }
   function vt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 88 * e,
       r.height = 647 * e,
       n.translate(20 * e, 20 * e),
       n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(45 * e, 384.5 * e),
       Te(n, -15 * e, -216.5 * e, 30 * e, 433 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(27 * e, 572 * e),
       n.bezierCurveTo(44 * e, 580 * e, 55 * e, 576 * e, 62 * e, 572 * e),
       n.bezierCurveTo(65 * e, 585.5 * e, 65 * e, 585.5 * e, 68 * e, 599 * e),
       n.bezierCurveTo(71 * e, 612 * e, 68 * e, 618 * e, 34 * e, 616 * e),
       n.bezierCurveTo(14 * e, 615 * e, 19 * e, 607 * e, 27 * e, 573 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(32 * e, 587 * e),
       n.bezierCurveTo(39 * e, 590 * e, 48 * e, 588 * e, 54 * e, 587 * e),
       n.bezierCurveTo(57 * e, 604 * e, 59 * e, 609 * e, 46 * e, 609 * e),
       n.bezierCurveTo(27 * e, 609 * e, 28 * e, 605 * e, 33 * e, 588 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(31 * e, 113 * e),
       n.bezierCurveTo(27 * e, 139 * e, 27 * e, 139 * e, 23 * e, 165 * e),
       n.bezierCurveTo(18 * e, 187 * e, 39 * e, 195 * e, 57 * e, 186 * e),
       n.bezierCurveTo(68 * e, 180 * e, 65 * e, 171 * e, 62 * e, 153 * e),
       n.bezierCurveTo(58.5 * e, 131 * e, 58.5 * e, 131 * e, 55 * e, 109 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(39 * e, 139 * e),
       n.bezierCurveTo(43 * e, 139 * e, 43 * e, 139 * e, 47 * e, 139 * e),
       n.bezierCurveTo(51 * e, 158 * e, 56 * e, 176 * e, 44 * e, 175 * e),
       n.bezierCurveTo(33 * e, 177 * e, 34 * e, 167 * e, 39 * e, 140 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(44 * e, 29 * e),
       n.bezierCurveTo(57 * e, 63 * e, 57 * e, 63 * e, 70 * e, 97 * e),
       n.bezierCurveTo(60 * e, 111 * e, 60 * e, 111 * e, 50 * e, 125 * e),
       n.bezierCurveTo(45 * e, 128 * e, 41 * e, 128 * e, 35 * e, 124 * e),
       n.bezierCurveTo(26.5 * e, 110 * e, 26.5 * e, 110 * e, 18 * e, 96 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(44 * e, 54 * e),
       n.bezierCurveTo(50 * e, 72 * e, 50 * e, 72 * e, 56 * e, 90 * e),
       n.bezierCurveTo(58 * e, 94 * e, 59 * e, 98 * e, 53 * e, 105 * e),
       n.bezierCurveTo(47 * e, 113 * e, 43 * e, 113 * e, 36 * e, 103 * e),
       n.bezierCurveTo(29 * e, 96 * e, 31 * e, 94 * e, 35 * e, 83 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(-20 * e, -20 * e),
       n.globalAlpha = 1,
       n.save(),
       n.translate(45 * e, 384.5 * e),
       Te(n, -15 * e, -216.5 * e, 30 * e, 433 * e, 10 * e),
       n.restore(),
       se(n, t[1], t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(27 * e, 572 * e),
       n.bezierCurveTo(44 * e, 580 * e, 55 * e, 576 * e, 62 * e, 572 * e),
       n.bezierCurveTo(65 * e, 585.5 * e, 65 * e, 585.5 * e, 68 * e, 599 * e),
       n.bezierCurveTo(71 * e, 612 * e, 68 * e, 618 * e, 34 * e, 616 * e),
       n.bezierCurveTo(14 * e, 615 * e, 19 * e, 607 * e, 27 * e, 573 * e),
       n.closePath(),
       se(n, t[3], t[4], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(32 * e, 587 * e),
       n.bezierCurveTo(39 * e, 590 * e, 48 * e, 588 * e, 54 * e, 587 * e),
       n.bezierCurveTo(57 * e, 604 * e, 59 * e, 609 * e, 46 * e, 609 * e),
       n.bezierCurveTo(27 * e, 609 * e, 28 * e, 605 * e, 33 * e, 588 * e),
       n.closePath(),
       se(n, t[5]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(31 * e, 113 * e),
       n.bezierCurveTo(27 * e, 139 * e, 27 * e, 139 * e, 23 * e, 165 * e),
       n.bezierCurveTo(18 * e, 187 * e, 39 * e, 195 * e, 57 * e, 186 * e),
       n.bezierCurveTo(68 * e, 180 * e, 65 * e, 171 * e, 62 * e, 153 * e),
       n.bezierCurveTo(58.5 * e, 131 * e, 58.5 * e, 131 * e, 55 * e, 109 * e),
       n.closePath(),
       se(n, t[3], t[4], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(39 * e, 139 * e),
       n.bezierCurveTo(43 * e, 139 * e, 43 * e, 139 * e, 47 * e, 139 * e),
       n.bezierCurveTo(51 * e, 158 * e, 56 * e, 176 * e, 44 * e, 175 * e),
       n.bezierCurveTo(33 * e, 177 * e, 34 * e, 167 * e, 39 * e, 140 * e),
       n.closePath(),
       se(n, t[5]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(44 * e, 29 * e),
       n.bezierCurveTo(57 * e, 63 * e, 57 * e, 63 * e, 70 * e, 97 * e),
       n.bezierCurveTo(60 * e, 111 * e, 60 * e, 111 * e, 50 * e, 125 * e),
       n.bezierCurveTo(45 * e, 128 * e, 41 * e, 128 * e, 35 * e, 124 * e),
       n.bezierCurveTo(26.5 * e, 110 * e, 26.5 * e, 110 * e, 18 * e, 96 * e),
       n.closePath(),
       se(n, t[6], t[7], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(44 * e, 54 * e),
       n.bezierCurveTo(50 * e, 72 * e, 50 * e, 72 * e, 56 * e, 90 * e),
       n.bezierCurveTo(58 * e, 94 * e, 59 * e, 98 * e, 53 * e, 105 * e),
       n.bezierCurveTo(47 * e, 113 * e, 43 * e, 113 * e, 36 * e, 103 * e),
       n.bezierCurveTo(29 * e, 96 * e, 31 * e, 94 * e, 35 * e, 83 * e),
       n.closePath(),
       se(n, t[8]),
       r
   }
   function Pt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 106 * e,
       r.height = 681 * e,
       n.translate(20 * e, 20 * e),
       n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(52.5 * e, 395 * e),
       n.rotate(0),
       Te(n, -11.5 * e, -226 * e, 23 * e, 452 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35 * e, 588 * e),
       n.bezierCurveTo(47 * e, 596 * e, 61 * e, 594 * e, 69 * e, 588 * e),
       n.bezierCurveTo(79 * e, 615 * e, 78 * e, 632 * e, 59 * e, 643 * e),
       n.bezierCurveTo(41 * e, 650 * e, 27 * e, 632 * e, 30 * e, 610 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(52 * e, 135 * e),
       n.bezierCurveTo(61.5 * e, 142 * e, 61.5 * e, 142 * e, 71 * e, 149 * e),
       n.bezierCurveTo(69.5 * e, 166 * e, 69.5 * e, 166 * e, 68 * e, 183 * e),
       n.bezierCurveTo(60.5 * e, 187.5 * e, 60.5 * e, 187.5 * e, 53 * e, 192 * e),
       n.bezierCurveTo(45 * e, 187.5 * e, 45 * e, 187.5 * e, 37 * e, 183 * e),
       n.bezierCurveTo(35.5 * e, 167 * e, 35.5 * e, 167 * e, 34 * e, 151 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(64 * e, 150 * e),
       n.bezierCurveTo(63 * e, 164 * e, 63 * e, 164 * e, 62 * e, 178 * e),
       n.bezierCurveTo(58 * e, 181 * e, 58 * e, 181 * e, 54 * e, 184 * e),
       n.bezierCurveTo(48.5 * e, 181.5 * e, 48.5 * e, 181.5 * e, 43 * e, 179 * e),
       n.bezierCurveTo(42 * e, 164.5 * e, 42 * e, 164.5 * e, 41 * e, 150 * e),
       n.bezierCurveTo(46 * e, 152.5 * e, 46 * e, 152.5 * e, 51 * e, 155 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(52 * e, 39 * e),
       n.bezierCurveTo(65.5 * e, 82 * e, 65.5 * e, 82 * e, 79 * e, 125 * e),
       n.bezierCurveTo(66 * e, 137.5 * e, 66 * e, 137.5 * e, 53 * e, 150 * e),
       n.bezierCurveTo(39 * e, 138 * e, 39 * e, 138 * e, 25 * e, 126 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(52 * e, 64 * e),
       n.bezierCurveTo(60 * e, 92.5 * e, 60 * e, 92.5 * e, 68 * e, 121 * e),
       n.bezierCurveTo(61 * e, 127.5 * e, 61 * e, 127.5 * e, 54 * e, 134 * e),
       n.bezierCurveTo(46.5 * e, 127.5 * e, 46.5 * e, 127.5 * e, 39 * e, 121 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(-20 * e, -20 * e),
       n.globalAlpha = 1,
       n.save(),
       n.translate(52.5 * e, 395 * e),
       n.rotate(0),
       Te(n, -11.5 * e, -226 * e, 23 * e, 452 * e, 10 * e),
       n.restore(),
       se(n, t[1], t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35 * e, 588 * e),
       n.bezierCurveTo(47 * e, 596 * e, 61 * e, 594 * e, 69 * e, 588 * e),
       n.bezierCurveTo(79 * e, 615 * e, 78 * e, 632 * e, 59 * e, 643 * e),
       n.bezierCurveTo(41 * e, 650 * e, 27 * e, 632 * e, 30 * e, 610 * e),
       n.closePath(),
       se(n, t[3], t[4], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(52 * e, 135 * e),
       n.bezierCurveTo(61.5 * e, 142 * e, 61.5 * e, 142 * e, 71 * e, 149 * e),
       n.bezierCurveTo(69.5 * e, 166 * e, 69.5 * e, 166 * e, 68 * e, 183 * e),
       n.bezierCurveTo(60.5 * e, 187.5 * e, 60.5 * e, 187.5 * e, 53 * e, 192 * e),
       n.bezierCurveTo(45 * e, 187.5 * e, 45 * e, 187.5 * e, 37 * e, 183 * e),
       n.bezierCurveTo(35.5 * e, 167 * e, 35.5 * e, 167 * e, 34 * e, 151 * e),
       n.closePath(),
       se(n, t[3], t[4], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(64 * e, 150 * e),
       n.bezierCurveTo(63 * e, 164 * e, 63 * e, 164 * e, 62 * e, 178 * e),
       n.bezierCurveTo(58 * e, 181 * e, 58 * e, 181 * e, 54 * e, 184 * e),
       n.bezierCurveTo(48.5 * e, 181.5 * e, 48.5 * e, 181.5 * e, 43 * e, 179 * e),
       n.bezierCurveTo(42 * e, 164.5 * e, 42 * e, 164.5 * e, 41 * e, 150 * e),
       n.bezierCurveTo(46 * e, 152.5 * e, 46 * e, 152.5 * e, 51 * e, 155 * e),
       n.closePath(),
       se(n, t[5]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(52 * e, 39 * e),
       n.bezierCurveTo(65.5 * e, 82 * e, 65.5 * e, 82 * e, 79 * e, 125 * e),
       n.bezierCurveTo(66 * e, 137.5 * e, 66 * e, 137.5 * e, 53 * e, 150 * e),
       n.bezierCurveTo(39 * e, 138 * e, 39 * e, 138 * e, 25 * e, 126 * e),
       n.closePath(),
       se(n, t[6], t[7], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(52 * e, 64 * e),
       n.bezierCurveTo(60 * e, 92.5 * e, 60 * e, 92.5 * e, 68 * e, 121 * e),
       n.bezierCurveTo(61 * e, 127.5 * e, 61 * e, 127.5 * e, 54 * e, 134 * e),
       n.bezierCurveTo(46.5 * e, 127.5 * e, 46.5 * e, 127.5 * e, 39 * e, 121 * e),
       n.closePath(),
       se(n, t[8]),
       r
   }
   function mt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 108 * e,
       r.height = 669 * e,
       n.translate(20 * e, 20 * e),
       n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(54 * e, 389.5 * e),
       Te(n, -15 * e, -228.5 * e, 30 * e, 457 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35 * e, 579 * e),
       n.bezierCurveTo(47 * e, 587 * e, 61 * e, 584 * e, 71 * e, 579 * e),
       n.bezierCurveTo(75 * e, 597.5 * e, 75 * e, 597.5 * e, 79 * e, 616 * e),
       n.bezierCurveTo(66.5 * e, 628 * e, 66.5 * e, 628 * e, 54 * e, 640 * e),
       n.bezierCurveTo(41 * e, 628.5 * e, 41 * e, 628.5 * e, 28 * e, 617 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(30 * e, 141 * e),
       n.bezierCurveTo(40 * e, 136 * e, 40 * e, 136 * e, 50 * e, 131 * e),
       n.bezierCurveTo(63 * e, 136 * e, 63 * e, 136 * e, 76 * e, 141 * e),
       n.bezierCurveTo(72.5 * e, 161.5 * e, 72.5 * e, 161.5 * e, 69 * e, 182 * e),
       n.bezierCurveTo(61.5 * e, 186.5 * e, 61.5 * e, 186.5 * e, 54 * e, 191 * e),
       n.bezierCurveTo(45 * e, 186.5 * e, 45 * e, 186.5 * e, 36 * e, 182 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(42 * e, 152 * e),
       n.bezierCurveTo(53 * e, 152 * e, 53 * e, 152 * e, 64 * e, 152 * e),
       n.bezierCurveTo(62 * e, 171 * e, 62 * e, 176 * e, 55 * e, 177 * e),
       n.bezierCurveTo(42 * e, 176 * e, 45 * e, 174 * e, 42 * e, 152 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(52 * e, 28 * e),
       n.bezierCurveTo(67.5 * e, 55 * e, 67.5 * e, 55 * e, 83 * e, 82 * e),
       n.bezierCurveTo(80 * e, 106.5 * e, 80 * e, 106.5 * e, 77 * e, 131 * e),
       n.bezierCurveTo(58 * e, 147 * e, 44 * e, 141 * e, 29 * e, 131 * e),
       n.bezierCurveTo(26.5 * e, 106.5 * e, 26.5 * e, 106.5 * e, 24 * e, 82 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(53 * e, 53 * e),
       n.bezierCurveTo(61 * e, 70 * e, 61 * e, 70 * e, 69 * e, 87 * e),
       n.bezierCurveTo(67 * e, 106 * e, 67 * e, 106 * e, 65 * e, 125 * e),
       n.bezierCurveTo(54 * e, 130 * e, 51 * e, 130 * e, 41 * e, 125 * e),
       n.bezierCurveTo(39 * e, 105 * e, 39 * e, 105 * e, 37 * e, 85 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(-20 * e, -20 * e),
       n.globalAlpha = 1,
       n.save(),
       n.translate(54 * e, 389.5 * e),
       n.rotate(0),
       Te(n, -15 * e, -228.5 * e, 30 * e, 457 * e, 10 * e),
       n.restore(),
       se(n, t[1], t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35 * e, 579 * e),
       n.bezierCurveTo(47 * e, 587 * e, 61 * e, 584 * e, 71 * e, 579 * e),
       n.bezierCurveTo(75 * e, 597.5 * e, 75 * e, 597.5 * e, 79 * e, 616 * e),
       n.bezierCurveTo(66.5 * e, 628 * e, 66.5 * e, 628 * e, 54 * e, 640 * e),
       n.bezierCurveTo(41 * e, 628.5 * e, 41 * e, 628.5 * e, 28 * e, 617 * e),
       n.closePath(),
       se(n, t[3], t[4], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(30 * e, 141 * e),
       n.bezierCurveTo(40 * e, 136 * e, 40 * e, 136 * e, 50 * e, 131 * e),
       n.bezierCurveTo(63 * e, 136 * e, 63 * e, 136 * e, 76 * e, 141 * e),
       n.bezierCurveTo(72.5 * e, 161.5 * e, 72.5 * e, 161.5 * e, 69 * e, 182 * e),
       n.bezierCurveTo(61.5 * e, 186.5 * e, 61.5 * e, 186.5 * e, 54 * e, 191 * e),
       n.bezierCurveTo(45 * e, 186.5 * e, 45 * e, 186.5 * e, 36 * e, 182 * e),
       n.closePath(),
       se(n, t[3], t[4], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(42 * e, 152 * e),
       n.bezierCurveTo(53 * e, 152 * e, 53 * e, 152 * e, 64 * e, 152 * e),
       n.bezierCurveTo(62 * e, 171 * e, 62 * e, 176 * e, 55 * e, 177 * e),
       n.bezierCurveTo(42 * e, 176 * e, 45 * e, 174 * e, 42 * e, 152 * e),
       n.closePath(),
       se(n, t[5]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(52 * e, 28 * e),
       n.bezierCurveTo(67.5 * e, 55 * e, 67.5 * e, 55 * e, 83 * e, 82 * e),
       n.bezierCurveTo(80 * e, 106.5 * e, 80 * e, 106.5 * e, 77 * e, 131 * e),
       n.bezierCurveTo(58 * e, 147 * e, 44 * e, 141 * e, 29 * e, 131 * e),
       n.bezierCurveTo(26.5 * e, 106.5 * e, 26.5 * e, 106.5 * e, 24 * e, 82 * e),
       n.closePath(),
       se(n, t[6], t[7], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(53 * e, 53 * e),
       n.bezierCurveTo(61 * e, 70 * e, 61 * e, 70 * e, 69 * e, 87 * e),
       n.bezierCurveTo(67 * e, 106 * e, 67 * e, 106 * e, 65 * e, 125 * e),
       n.bezierCurveTo(54 * e, 130 * e, 51 * e, 130 * e, 41 * e, 125 * e),
       n.bezierCurveTo(39 * e, 105 * e, 39 * e, 105 * e, 37 * e, 85 * e),
       n.closePath(),
       se(n, t[8]),
       r
   }
   function Dt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 81 * e,
       r.height = 350 * e,
       n.globalAlpha = i ? .6 : 1,
       n.translate(0, 5 * e),
       n.save(),
       n.translate(35 * e, 160 * e),
       n.rotate(0),
       Te(n, -6 * e, -100.5 * e, 12 * e, 240 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.save(),
       n.translate(-6 * e, 11 * e),
       n.moveTo(26.0714111328125 * e, 50.9 * e),
       n.bezierCurveTo(32.0714111328125 * e, 35.892852783203125 * e, 39.0714111328125 * e, 18.892852783203125 * e, 45.0714111328125 * e, 7.892852783203125 * e),
       n.bezierCurveTo(51.0714111328125 * e, 13.892852783203125 * e, 56.0714111328125 * e, 36.892852783203125 * e, 60.0714111328125 * e, 50.892852783203125 * e),
       n.bezierCurveTo(52.5714111328125 * e, 58.892852783203125 * e, 52.5714111328125 * e, 58.892852783203125 * e, 45.0714111328125 * e, 66.89285278320312 * e),
       n.bezierCurveTo(37.0714111328125 * e, 58.892852783203125 * e, 37.0714111328125 * e, 58.892852783203125 * e, 29.0714111328125 * e, 50.892852783203125 * e),
       n.closePath(),
       se(n, t[0]),
       n.restore(),
       n.globalAlpha = 1,
       n.save(),
       n.translate(0, -10 * e),
       n.translate(45.0714111328125 * e, 149.39285278320312 * e),
       n.rotate(0),
       Te(n, -6 * e, -94.5 * e, 12 * e, 250 * e, 10 * e),
       n.restore(),
       se(n, t[1], t[2], 6 * e),
       n.translate(0, 0 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(29.0714111328125 * e, 50.9 * e),
       n.bezierCurveTo(32.0714111328125 * e, 35.892852783203125 * e, 39.0714111328125 * e, 18.892852783203125 * e, 45.0714111328125 * e, 7.892852783203125 * e),
       n.bezierCurveTo(51.0714111328125 * e, 13.892852783203125 * e, 56.0714111328125 * e, 36.892852783203125 * e, 60.0714111328125 * e, 50.892852783203125 * e),
       n.bezierCurveTo(52.5714111328125 * e, 58.892852783203125 * e, 52.5714111328125 * e, 58.892852783203125 * e, 45.0714111328125 * e, 66.89285278320312 * e),
       n.bezierCurveTo(37.0714111328125 * e, 58.892852783203125 * e, 37.0714111328125 * e, 58.892852783203125 * e, 29.0714111328125 * e, 50.892852783203125 * e),
       n.closePath(),
       se(n, t[3], t[4], 6 * e),
       r
   }
   function Mt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 43 * e,
       r.height = 209 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 10 * e),
       n.translate(5 * e, 5 * e),
       n.save(),
       n.translate(21 * e, 102.5 * e),
       Te(n, -4 * e, -76.5 * e, 8 * e, 163 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.translate(0, 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(20 * e, 10 * e),
       n.bezierCurveTo(25 * e, 25.5 * e, 25 * e, 25.5 * e, 30 * e, 41 * e),
       n.bezierCurveTo(25.5 * e, 38.5 * e, 25.5 * e, 38.5 * e, 21 * e, 36 * e),
       n.bezierCurveTo(16 * e, 38.5 * e, 16 * e, 38.5 * e, 11 * e, 41 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(21 * e, 1 * e),
       n.bezierCurveTo(28 * e, 18 * e, 28 * e, 18 * e, 35 * e, 35 * e),
       n.bezierCurveTo(28.5 * e, 32 * e, 28.5 * e, 32 * e, 22 * e, 29 * e),
       n.bezierCurveTo(14.5 * e, 32.5 * e, 14.5 * e, 32.5 * e, 7 * e, 36 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(14 * e, 146 * e),
       n.bezierCurveTo(21 * e, 146 * e, 21 * e, 146 * e, 28 * e, 146 * e),
       n.bezierCurveTo(27.5 * e, 147.5 * e, 27.5 * e, 147.5 * e, 27 * e, 149 * e),
       n.bezierCurveTo(27 * e, 160 * e, 27 * e, 160 * e, 27 * e, 171 * e),
       n.bezierCurveTo(27.5 * e, 171.5 * e, 27.5 * e, 171.5 * e, 28 * e, 172 * e),
       n.bezierCurveTo(21 * e, 172 * e, 21 * e, 172 * e, 14 * e, 172 * e),
       n.bezierCurveTo(14 * e, 171.5 * e, 14 * e, 171.5 * e, 14 * e, 171 * e),
       n.bezierCurveTo(14.5 * e, 171.5 * e, 14.5 * e, 171.5 * e, 15 * e, 172 * e),
       n.bezierCurveTo(15 * e, 160.5 * e, 15 * e, 160.5 * e, 15 * e, 149 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(21 * e, 6 * e),
       n.bezierCurveTo(26.5 * e, 18.5 * e, 26.5 * e, 18.5 * e, 32 * e, 31 * e),
       n.bezierCurveTo(27 * e, 29 * e, 27 * e, 29 * e, 22 * e, 27 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(0, -20 * e),
       n.globalAlpha = 1,
       n.translate(0, 10 * e),
       n.translate(-5 * e, -5 * e),
       n.save(),
       n.translate(21 * e, 102.5 * e),
       Te(n, -4 * e, -76.5 * e, 8 * e, 163 * e, 10 * e),
       n.restore(),
       se(n, t[1], t[2], 4 * e),
       n.translate(0, 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(20 * e, 10 * e),
       n.bezierCurveTo(25 * e, 25.5 * e, 25 * e, 25.5 * e, 30 * e, 41 * e),
       n.bezierCurveTo(25.5 * e, 38.5 * e, 25.5 * e, 38.5 * e, 21 * e, 36 * e),
       n.bezierCurveTo(16 * e, 38.5 * e, 16 * e, 38.5 * e, 11 * e, 41 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(21 * e, 1 * e),
       n.bezierCurveTo(28 * e, 18 * e, 28 * e, 18 * e, 35 * e, 35 * e),
       n.bezierCurveTo(28.5 * e, 32 * e, 28.5 * e, 32 * e, 22 * e, 29 * e),
       n.bezierCurveTo(14.5 * e, 32.5 * e, 14.5 * e, 32.5 * e, 7 * e, 36 * e),
       n.closePath(),
       se(n, t[5], t[6], 4 * e),
       n.translate(0, 0 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(14 * e, 146 * e),
       n.bezierCurveTo(21 * e, 146 * e, 21 * e, 146 * e, 28 * e, 146 * e),
       n.bezierCurveTo(27.5 * e, 147.5 * e, 27.5 * e, 147.5 * e, 27 * e, 149 * e),
       n.bezierCurveTo(27 * e, 160 * e, 27 * e, 160 * e, 27 * e, 171 * e),
       n.bezierCurveTo(27.5 * e, 171.5 * e, 27.5 * e, 171.5 * e, 28 * e, 172 * e),
       n.bezierCurveTo(21 * e, 172 * e, 21 * e, 172 * e, 14 * e, 172 * e),
       n.bezierCurveTo(14 * e, 171.5 * e, 14 * e, 171.5 * e, 14 * e, 171 * e),
       n.bezierCurveTo(14.5 * e, 171.5 * e, 14.5 * e, 171.5 * e, 15 * e, 172 * e),
       n.bezierCurveTo(15 * e, 160.5 * e, 15 * e, 160.5 * e, 15 * e, 149 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(21 * e, 6 * e),
       n.bezierCurveTo(26.5 * e, 18.5 * e, 26.5 * e, 18.5 * e, 32 * e, 31 * e),
       n.bezierCurveTo(27 * e, 29 * e, 27 * e, 29 * e, 22 * e, 27 * e),
       n.closePath(),
       se(n, t[8]),
       r
   }
   function Gt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 200 * e,
       r.height = 200 * e,
       n.save(),
       n.translate(112 * e, 158 * e),
       Te(n, -86.5 * e, -86 * e, 150 * e, 35 * e, 20 * e),
       n.restore(),
       se(n, t[0]),
       n.save(),
       n.translate(170 * e, 100 * e),
       Te(n, -86.5 * e, -86 * e, 35 * e, 150 * e, 20 * e),
       n.restore(),
       se(n, t[0]),
       r
   }
   function Lt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 118 * e,
       r.height = 129 * e,
       n.save(),
       n.translate(90 * e, 90 * e),
       Te(n, -86.5 * e, -86 * e, 110 * e, 110 * e, 15 * e),
       n.restore(),
       se(n, t[0], t[1], 4),
       n.save(),
       Te(n, 30 * e, 115 * e, 60 * e, 5 * e, 15 * e),
       n.restore(),
       se(n, t[2], t[3], 4),
       n.save(),
       Te(n, 50 * e, 117 * e, 20 * e, 10 * e, 15 * e),
       n.restore(),
       se(n, t[2]),
       r
   }
   function ft(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 165 * e,
       r.height = 123 * e,
       n.save(),
       n.translate(81 * e, 65 * e),
       Te(n, -78 * e, -54.5 * e, 156 * e, 109 * e, 20 * e),
       n.restore(),
       se(n, t[0]),
       n.save(),
       n.translate(81 * e, 58 * e),
       Te(n, -78 * e, -54.5 * e, 156 * e, 109 * e, 20 * e),
       n.restore(),
       se(n, t[1], t[2], 4),
       n.save(),
       n.translate(81 * e, 58 * e),
       Te(n, -69 * e, -47 * e, 138 * e, 93 * e, 15 * e),
       n.restore(),
       se(n, t[3], t[4], 4),
       n.save(),
       n.translate(79 * e, 54 * e),
       Te(n, -34 * e, -40 * e, 68 * e, 88 * e, 13 * e),
       n.restore(),
       se(n, void 0, t[5], 4),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(44 * e, 13 * e),
       n.bezierCurveTo(43.5 * e, 55 * e, 43.5 * e, 55 * e, 43 * e, 101 * e),
       n.closePath(),
       se(n, void 0, t[6], 4),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(115 * e, 13 * e),
       n.bezierCurveTo(115 * e, 56 * e, 115 * e, 56 * e, 115 * e, 101 * e),
       n.closePath(),
       se(n, void 0, t[6], 4),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35 * e, 6 * e),
       n.bezierCurveTo(35 * e, 56 * e, 36 * e, 109 * e, 35 * e, 110 * e),
       n.closePath(),
       se(n, void 0, t[7], 4),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(123 * e, 6 * e),
       n.bezierCurveTo(123 * e, 56 * e, 123 * e, 56 * e, 123 * e, 110 * e),
       n.closePath(),
       se(n, void 0, t[7], 4),
       n.save(),
       n.translate(79 * e, 113 * e),
       Te(n, -18 * e, -2 * e, 36 * e, 4 * e, 20 * e),
       n.restore(),
       se(n, void 0, t[8], 4),
       n.save(),
       n.translate(75 * e, 118 * e),
       Te(n, -6 * e, -2.5 * e, 20 * e, 5 * e, 20 * e),
       n.restore(),
       se(n, t[8]),
       r
   }
   function Vt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 86 * e,
       r.height = 45 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(15 * e, 15 * e),
       n.bezierCurveTo(16 * e, 15 * e, 19.5 * e, 9 * e, 24 * e, 2 * e),
       n.bezierCurveTo(41 * e, 2 * e, 41 * e, 2 * e, 58 * e, 2 * e),
       n.bezierCurveTo(64 * e, 13 * e, 61 * e, 8 * e, 65 * e, 13 * e),
       n.closePath(),
       se(n, t[0], t[1], 4),
       n.save(),
       n.translate(43 * e, 27 * e),
       n.rotate(0),
       Te(n, -40 * e, -15 * e, 80 * e, 30 * e, 10 * e),
       n.restore(),
       se(n, t[0], t[1], 4),
       n.save(),
       n.translate(43 * e, 33 * e),
       n.rotate(0),
       Te(n, -17 * e, -4.5 * e, 34 * e, 9 * e, 10 * e),
       n.restore(),
       se(n, t[0], t[1], 4),
       r
   }
   function zt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 92 * e,
       r.height = 108 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(31 * e, 10 * e),
       n.bezierCurveTo(37 * e, 2 * e, 49 * e, 0 * e, 61 * e, 15 * e),
       n.bezierCurveTo(81 * e, 31 * e, 78 * e, 25 * e, 79 * e, 37 * e),
       n.bezierCurveTo(76 * e, 44 * e, 81 * e, 56 * e, 85 * e, 63 * e),
       n.bezierCurveTo(91 * e, 71 * e, 90 * e, 78 * e, 83 * e, 84 * e),
       n.bezierCurveTo(60 * e, 98 * e, 67 * e, 95 * e, 57 * e, 102 * e),
       n.bezierCurveTo(47 * e, 106 * e, 43 * e, 106 * e, 31 * e, 98 * e),
       n.bezierCurveTo(22 * e, 91 * e, 17 * e, 89 * e, 7 * e, 84 * e),
       n.bezierCurveTo(1 * e, 77 * e, 4 * e, 73 * e, 7 * e, 60 * e),
       n.bezierCurveTo(11 * e, 50 * e, 5 * e, 32 * e, 15 * e, 27 * e),
       n.bezierCurveTo(26 * e, 18 * e, 26 * e, 24 * e, 31 * e, 10 * e),
       n.closePath(),
       se(n, t[0], t[1], 4),
       r
   }
   function Ht(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 60 * e,
       t.height = 60 * e,
       r.translate(-25 * e, -25 * e),
       r.translate(0, 5 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(24 * e, 50 * e),
       r.bezierCurveTo(32.5 * e, 54.5 * e, 32.5 * e, 54.5 * e, 41 * e, 59 * e),
       r.bezierCurveTo(57 * e, 47 * e, 57 * e, 47 * e, 73 * e, 35 * e),
       r.bezierCurveTo(57 * e, 53 * e, 57 * e, 53 * e, 41 * e, 71 * e),
       r.closePath(),
       se(r, i[0]),
       r.translate(0, -5 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(24 * e, 50 * e),
       r.bezierCurveTo(32.5 * e, 54.5 * e, 32.5 * e, 54.5 * e, 41 * e, 59 * e),
       r.bezierCurveTo(57 * e, 47 * e, 57 * e, 47 * e, 73 * e, 35 * e),
       r.bezierCurveTo(57 * e, 53 * e, 57 * e, 53 * e, 41 * e, 71 * e),
       r.closePath(),
       se(r, i[1]),
       t
   }
   function yt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 151 * e,
       r.height = 80 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(133 * e, 54 * e),
       n.bezierCurveTo(136 * e, 18 * e, 129 * e, 18 * e, 114 * e, 13 * e),
       n.bezierCurveTo(51 * e, 0 * e, 36 * e, 16 * e, 34 * e, 16 * e),
       n.bezierCurveTo(8 * e, 28 * e, 22 * e, 56 * e, 21 * e, 57 * e),
       n.closePath(),
       se(n, t[2], t[3], 4),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(130 * e, 40 * e),
       n.bezierCurveTo(132 * e, 35 * e, 132 * e, 30 * e, 132 * e, 29 * e),
       n.bezierCurveTo(145 * e, 38 * e, 144 * e, 43 * e, 137 * e, 54 * e),
       n.closePath(),
       se(n, t[0], t[1], 4),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(20 * e, 33 * e),
       n.bezierCurveTo(24 * e, 44 * e, 215 * e, 39 * e, 23 * e, 44 * e),
       n.bezierCurveTo(19 * e, 49 * e, 19 * e, 49 * e, 15 * e, 54 * e),
       n.bezierCurveTo(4 * e, 43 * e, 10 * e, 35 * e, 20 * e, 32 * e),
       n.closePath(),
       se(n, t[0], t[1], 4),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(18 * e, 52 * e),
       n.bezierCurveTo(24 * e, 31 * e, 34 * e, 25 * e, 75 * e, 23 * e),
       n.bezierCurveTo(130 * e, 24 * e, 129 * e, 32 * e, 134 * e, 51 * e),
       n.bezierCurveTo(138 * e, 70 * e, 126 * e, 72 * e, 90 * e, 73 * e),
       n.bezierCurveTo(18 * e, 72 * e, 15 * e, 68 * e, 18 * e, 54 * e),
       n.closePath(),
       se(n, t[0], t[1], 4),
       r
   }
   function Bt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 138 * e,
       r.height = 133 * e,
       n.globalAlpha = i ? .3 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(26 * e, 79.640625 * e),
       n.bezierCurveTo(13 * e, 84.640625 * e, 9 * e, 86.640625 * e, 7 * e, 78.640625 * e),
       n.bezierCurveTo(6 * e, 69.640625 * e, 15 * e, 67.640625 * e, 31 * e, 62.640625 * e),
       n.bezierCurveTo(63 * e, 55.640625 * e, 85 * e, 57.640625 * e, 104 * e, 63.640625 * e),
       n.bezierCurveTo(131 * e, 69.640625 * e, 132 * e, 71.640625 * e, 131 * e, 78.640625 * e),
       n.bezierCurveTo(131 * e, 91.640625 * e, 112 * e, 80.640625 * e, 91 * e, 75.640625 * e),
       n.bezierCurveTo(51 * e, 70.640625 * e, 45 * e, 74.640625 * e, 28 * e, 78.640625 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(8 * e, 82.640625 * e),
       n.bezierCurveTo(40 * e, 107.640625 * e, 53 * e, 104.640625 * e, 67 * e, 106.640625 * e),
       n.bezierCurveTo(101 * e, 103.640625 * e, 117 * e, 93.640625 * e, 127 * e, 84.640625 * e),
       n.bezierCurveTo(135 * e, 95.640625 * e, 131 * e, 107.640625 * e, 110 * e, 118.640625 * e),
       n.bezierCurveTo(78 * e, 129.640625 * e, 67 * e, 130.640625 * e, 27 * e, 119.640625 * e),
       n.bezierCurveTo(0 * e, 105.640625 * e, 8 * e, 83.640625 * e, 10 * e, 84.640625 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(8 * e, 73.640625 * e),
       n.bezierCurveTo(7 * e, 23.640625 * e, 33 * e, 19.640625 * e, 71 * e, 17.640625 * e),
       n.bezierCurveTo(129 * e, 19.640625 * e, 130 * e, 45.640625 * e, 130 * e, 76.640625 * e),
       n.bezierCurveTo(90 * e, 63.640625 * e, 85 * e, 63.640625 * e, 73 * e, 63.640625 * e),
       n.bezierCurveTo(38 * e, 63.640625 * e, 33 * e, 66.640625 * e, 8 * e, 73.640625 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(72 * e, 28.640625 * e),
       n.bezierCurveTo(51 * e, 25.640625 * e, 56 * e, 7.640625 * e, 70 * e, 5.640625 * e),
       n.bezierCurveTo(94 * e, 7.640625 * e, 87 * e, 29.640625 * e, 72 * e, 28.640625 * e),
       n.closePath(),
       se(n, t[3], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(51 * e, 26.640625 * e),
       n.bezierCurveTo(42 * e, 29.640625 * e, 43 * e, 31.640625 * e, 42 * e, 37.640625 * e),
       se(n, void 0, t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(90 * e, 26.640625 * e),
       n.bezierCurveTo(100 * e, 28.640625 * e, 98 * e, 34.640625 * e, 99 * e, 38.640625 * e),
       se(n, void 0, t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(26 * e, 79.640625 * e),
       n.bezierCurveTo(13 * e, 84.640625 * e, 9 * e, 86.640625 * e, 7 * e, 78.640625 * e),
       n.bezierCurveTo(6 * e, 69.640625 * e, 15 * e, 67.640625 * e, 31 * e, 62.640625 * e),
       n.bezierCurveTo(63 * e, 55.640625 * e, 85 * e, 57.640625 * e, 104 * e, 63.640625 * e),
       n.bezierCurveTo(131 * e, 69.640625 * e, 132 * e, 71.640625 * e, 131 * e, 78.640625 * e),
       n.bezierCurveTo(131 * e, 91.640625 * e, 112 * e, 80.640625 * e, 91 * e, 75.640625 * e),
       n.bezierCurveTo(51 * e, 70.640625 * e, 45 * e, 74.640625 * e, 28 * e, 78.640625 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(8 * e, 82.640625 * e),
       n.bezierCurveTo(40 * e, 107.640625 * e, 53 * e, 104.640625 * e, 67 * e, 106.640625 * e),
       n.bezierCurveTo(101 * e, 103.640625 * e, 117 * e, 93.640625 * e, 127 * e, 84.640625 * e),
       n.bezierCurveTo(135 * e, 95.640625 * e, 131 * e, 107.640625 * e, 110 * e, 118.640625 * e),
       n.bezierCurveTo(78 * e, 129.640625 * e, 67 * e, 130.640625 * e, 27 * e, 119.640625 * e),
       n.bezierCurveTo(0 * e, 105.640625 * e, 8 * e, 83.640625 * e, 10 * e, 84.640625 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       r
   }
   function wt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d")
         , o = 170 * e
         , a = 172 * e
         , s = o / 2
         , T = a / 2;
       r.width = o,
       r.height = a,
       n.translate(s, T + 7 * e),
       n.globalAlpha = i ? .5 : 0,
       Ee(n, 0, 0, 60 * e),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -7 * e),
       n.save();
       for (var I = 0; I < 10; I++)
           n.rotate(Math.PI / 5),
           n.save(),
           n.translate(65 * e, 0),
           ue(n, 3, 20 * e, 4 * e),
           se(n, t[1], t[2], 4 * e),
           n.restore();
       return n.restore(),
       Ee(n, 0, 0, 60 * e, 0),
       se(n, t[3], t[4], 4 * e),
       Ee(n, 0, 0, 40 * e),
       se(n, t[5]),
       Ee(n, 0, 0, 25 * e),
       se(n, t[6], t[7], 8 * e),
       r
   }
   function Kt(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d")
         , n = 170 * e
         , o = 172 * e
         , a = n / 2
         , s = o / 2;
       t.width = n,
       t.height = o,
       r.translate(a, s),
       r.save();
       for (var T = 0; T < 10; T++)
           r.rotate(Math.PI / 5),
           r.save(),
           r.translate(65 * e, 0),
           ue(r, 3, 18 * e, 4 * e),
           se(r, i[0]),
           r.restore();
       return r.restore(),
       Ee(r, 0, 0, 40 * e, 0),
       se(r, void 0, i[0], 6 * e),
       Ee(r, 0, 0, 20 * e, 0),
       se(r, i[0]),
       t
   }
   function Wt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       r.width = 170 * e,
       r.height = 170 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.save(),
       n.translate(85 * e, 88 * e),
       n.rotate(1.4),
       ue(n, 7, 60 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(85 * e, 80 * e);
       for (var o = 0; o < 10; o++)
           n.rotate(Math.PI / 5),
           n.save(),
           n.translate(65 * e, 0),
           ue(n, 3, 21 * e, 4 * e),
           se(n, t[1], t[2], 4 * e),
           n.restore();
       return n.save(),
       n.translate(0 * e, 0 * e),
       n.rotate(1.4),
       ue(n, 7, 60 * e, 10 * e),
       se(n, t[3], t[4], 4 * e),
       n.rotate(.64),
       ue(n, 7, 40 * e, 10 * e),
       se(n, t[5], t[6], 4 * e),
       n.rotate(.12),
       ue(n, 7, 23 * e, 5 * e),
       n.restore(),
       se(n, t[7]),
       r
   }
   function Yt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       r.width = 170 * e,
       r.height = 170 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 3 * e),
       n.save(),
       n.translate(85 * e, 95 * e),
       n.rotate(1.4),
       ue(n, 7, 60 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(85 * e, 82 * e);
       for (var o = 0; o < 10; o++)
           n.rotate(Math.PI / 5),
           n.save(),
           n.translate(65 * e, 0),
           ue(n, 3, 21 * e, 4 * e),
           se(n, t[1], t[2], 4 * e),
           n.restore();
       return n.save(),
       n.translate(0 * e, 0 * e),
       n.rotate(1),
       ue(n, 8, 60 * e, 10 * e),
       se(n, t[3], t[4], 4 * e),
       n.rotate(.56),
       ue(n, 8, 40 * e, 10 * e),
       se(n, t[5], t[6], 4 * e),
       n.rotate(.28),
       ue(n, 8, 28 * e, 8 * e),
       se(n, t[7]),
       n.restore(),
       r
   }
   function Ut(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       r.width = 170 * e,
       r.height = 170 * e,
       n.translate(0, 3 * e),
       n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(85 * e, 95 * e),
       n.rotate(1.4),
       ue(n, 7, 60 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(85 * e, 82 * e);
       for (var o = 0; o < 10; o++)
           n.rotate(Math.PI / 5),
           n.save(),
           n.translate(65 * e, 0),
           ue(n, 3, 21 * e, 4 * e),
           se(n, t[1], t[2], 4 * e),
           n.restore();
       return n.save(),
       n.translate(0 * e, 0 * e),
       n.rotate(.2),
       ue(n, 9, 60 * e, 10 * e),
       se(n, t[3], t[4], 4 * e),
       n.rotate(-.32),
       ue(n, 9, 38 * e, 10 * e),
       se(n, t[5], t[6], 4 * e),
       n.rotate(.68),
       ue(n, 9, 20 * e, 8 * e),
       se(n, t[7], t[8], 6 * e),
       n.restore(),
       r
   }
   function kt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 69 * e,
       r.height = 120 * e,
       n.globalAlpha = i ? .5 : 1,
       n.save(),
       n.translate(30 * e, 84 * e),
       Te(n, -6 * e, -66.5 * e, 8 * e, 100 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.save(),
       n.translate(30 * e, 45 * e),
       Te(n, -9.5 * e, -6.5 * e, 16 * e, 13 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.save(),
       n.translate(30 * e, 17 * e),
       Te(n, -7.5 * e, -5.5 * e, 12 * e, 11 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.save(),
       n.translate(30 * e, 31 * e),
       Te(n, -26 * e, -14.5 * e, 52 * e, 29 * e, 5 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(36 * e, 79.140625 * e),
       Te(n, -6 * e, -66.5 * e, 8 * e, 100 * e, 10 * e),
       n.restore(),
       se(n, t[1], t[2], 3 * e),
       n.save(),
       n.translate(35 * e, 40.140625 * e),
       Te(n, -9.5 * e, -6.5 * e, 16 * e, 13 * e, 10 * e),
       n.restore(),
       se(n, t[3], t[4], 3 * e),
       n.save(),
       n.translate(35 * e, 12.140625 * e),
       Te(n, -7.5 * e, -5.5 * e, 12 * e, 11 * e, 10 * e),
       n.restore(),
       se(n, t[3], t[4], 3 * e),
       n.save(),
       n.translate(34.5 * e, 26.140625 * e),
       Te(n, -26 * e, -14.5 * e, 52 * e, 29 * e, 5 * e),
       n.restore(),
       se(n, t[3], t[4], 3 * e),
       r
   }
   function Ft(e) {
       var i = document.createElement("canvas")
         , t = i.getContext("2d");
       return i.width = 321 * e,
       i.height = 345 * e,
       t.translate(0, 5 * e),
       t.translate(0, 20 * e),
       Ee(t, 160.5 * e, 159.5 * e, 156.39595138242822 * e),
       se(t, "#322413", "#322413", 4 * e),
       t.translate(0, -20 * e),
       Ee(t, 160.5 * e, 159.5 * e, 156.39595138242822 * e),
       se(t, "#392C16", "#5E3E1A", 10 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(31.999969482421875 * e, 163.07290649414062 * e),
       t.bezierCurveTo(22.999969482421875 * e, 67.07290649414062 * e, 106 * e, 20.072906494140625 * e, 162 * e, 23.072906494140625 * e),
       t.bezierCurveTo(269.9999694824219 * e, 31.072906494140625 * e, 292.9999694824219 * e, 120.07290649414062 * e, 294.9999694824219 * e, 161.07290649414062 * e),
       t.bezierCurveTo(165.49996948242188 * e, 162.07290649414062 * e, 165.49996948242188 * e, 162.07290649414062 * e, 35.999969482421875 * e, 163.07290649414062 * e),
       t.closePath(),
       se(t, "#12432D"),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(32.999969482421875 * e, 165.07290649414062 * e),
       t.bezierCurveTo(16.999969482421875 * e, 221.07290649414062 * e, 85 * e, 289.0729064941406 * e, 156 * e, 294.0729064941406 * e),
       t.bezierCurveTo(263.9999694824219 * e, 293.0729064941406 * e, 295.9999694824219 * e, 199.07290649414062 * e, 294.9999694824219 * e, 159.07290649414062 * e),
       t.closePath(),
       se(t, "#3A2A0D"),
       Ee(t, 161 * e, 158.07290649414062 * e, 133.4053971921676 * e),
       se(t, void 0, "#5E3E1A", 10 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(31.999969482421875 * e, 161.62844848632812 * e),
       t.bezierCurveTo(162.49996948242188 * e, 161.62844848632812 * e, 162.49996948242188 * e, 161.62844848632812 * e, 292.9999694824219 * e, 161.62844848632812 * e),
       t.closePath(),
       se(t, void 0, "#5E3E1A", 12 * e),
       t.translate(0, 8 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(66 * e, 158.29513549804688 * e),
       t.bezierCurveTo(86 * e, 158.29513549804688 * e, 86 * e, 158.29513549804688 * e, 106 * e, 158.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#c7a726", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(57.999969482421875 * e, 117.29513549804688 * e),
       t.bezierCurveTo(85 * e, 128.29513549804688 * e, 85 * e, 128.29513549804688 * e, 113 * e, 139.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#c7a726", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(95 * e, 90.29513549804688 * e),
       t.bezierCurveTo(112 * e, 105.79513549804688 * e, 112 * e, 105.79513549804688 * e, 129 * e, 121.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#c7a726", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(116 * e, 52.850677490234375 * e),
       t.bezierCurveTo(130 * e, 83.85067749023438 * e, 130 * e, 83.85067749023438 * e, 144 * e, 114.85067749023438 * e),
       t.closePath(),
       se(t, void 0, "#c7a726", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(159 * e, 61.295135498046875 * e),
       t.bezierCurveTo(160.49996948242188 * e, 92.29513549804688 * e, 160.49996948242188 * e, 92.29513549804688 * e, 160 * e, 123.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#c7a726", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(203 * e, 51.295135498046875 * e),
       t.bezierCurveTo(190.49996948242188 * e, 83.29513549804688 * e, 190.49996948242188 * e, 83.29513549804688 * e, 176 * e, 115.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#c7a726", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(225 * e, 89.29513549804688 * e),
       t.bezierCurveTo(210.49996948242188 * e, 104.79513549804688 * e, 210.49996948242188 * e, 104.79513549804688 * e, 194 * e, 120.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#c7a726", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(266.9999694824219 * e, 112.29513549804688 * e),
       t.bezierCurveTo(233.49996948242188 * e, 127.29513549804688 * e, 233.49996948242188 * e, 127.29513549804688 * e, 199 * e, 142.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#c7a726", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(256.9999694824219 * e, 155.29513549804688 * e),
       t.bezierCurveTo(238.49996948242188 * e, 156.29513549804688 * e, 238.49996948242188 * e, 156.29513549804688 * e, 219 * e, 157.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#c7a726", 12 * e),
       t.translate(0, -8 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(66 * e, 158.29513549804688 * e),
       t.bezierCurveTo(86 * e, 158.29513549804688 * e, 86 * e, 158.29513549804688 * e, 106 * e, 158.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#EDCE4F", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(57.999969482421875 * e, 117.29513549804688 * e),
       t.bezierCurveTo(85 * e, 128.29513549804688 * e, 85 * e, 128.29513549804688 * e, 113 * e, 139.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#EDCE4F", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(95 * e, 90.29513549804688 * e),
       t.bezierCurveTo(112 * e, 105.79513549804688 * e, 112 * e, 105.79513549804688 * e, 129 * e, 121.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#EDCE4F", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(116 * e, 52.850677490234375 * e),
       t.bezierCurveTo(130 * e, 83.85067749023438 * e, 130 * e, 83.85067749023438 * e, 144 * e, 114.85067749023438 * e),
       t.closePath(),
       se(t, void 0, "#EDCE4F", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(159 * e, 61.295135498046875 * e),
       t.bezierCurveTo(160.49996948242188 * e, 92.29513549804688 * e, 160.49996948242188 * e, 92.29513549804688 * e, 160 * e, 123.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#EDCE4F", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(203 * e, 51.295135498046875 * e),
       t.bezierCurveTo(190.49996948242188 * e, 83.29513549804688 * e, 190.49996948242188 * e, 83.29513549804688 * e, 176 * e, 115.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#EDCE4F", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(225 * e, 89.29513549804688 * e),
       t.bezierCurveTo(210.49996948242188 * e, 104.79513549804688 * e, 210.49996948242188 * e, 104.79513549804688 * e, 194 * e, 120.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#EDCE4F", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(266.9999694824219 * e, 112.29513549804688 * e),
       t.bezierCurveTo(233.49996948242188 * e, 127.29513549804688 * e, 233.49996948242188 * e, 127.29513549804688 * e, 199 * e, 142.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#EDCE4F", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(256.9999694824219 * e, 155.29513549804688 * e),
       t.bezierCurveTo(238.49996948242188 * e, 156.29513549804688 * e, 238.49996948242188 * e, 156.29513549804688 * e, 219 * e, 157.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#EDCE4F", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(94.00003051757812 * e, 164.40341186523438 * e),
       t.bezierCurveTo(162.50003051757812 * e, 164.40341186523438 * e, 230.00003051757812 * e, 165.40341186523438 * e, 231.00003051757812 * e, 164.40341186523438 * e),
       t.bezierCurveTo(214.00003051757812 * e, 267.4034118652344 * e, 92.00003051757812 * e, 243.40341186523438 * e, 93.00003051757812 * e, 165.40341186523438 * e),
       t.closePath(),
       se(t, "#704618", "#5D3D1A", 8 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(96 * e, 166 * e),
       t.bezierCurveTo(88 * e, 117 * e, 129 * e, 92 * e, 161 * e, 91 * e),
       t.bezierCurveTo(201 * e, 90 * e, 223 * e, 121 * e, 230 * e, 161 * e),
       t.closePath(),
       se(t, "#ECBE35", "#EDCE4F", 8 * e),
       Ee(t, 160.00003051757812 * e, 166.49432373046875 * e, 28.30194339616981 * e),
       se(t, "#392C16", "#5E3E1A", 10 * e),
       i
   }
   function xt(e) {
       var i = document.createElement("canvas")
         , t = i.getContext("2d");
       return i.width = 321 * e,
       i.height = 345 * e,
       t.translate(0, 5 * e),
       t.translate(0, 20 * e),
       Ee(t, 160.5 * e, 159.5 * e, 156.39595138242822 * e),
       se(t, "#322413", "#322413", 4 * e),
       t.translate(0, -20 * e),
       Ee(t, 160.5 * e, 159.5 * e, 156.39595138242822 * e),
       se(t, "#392C16", "#5E3E1A", 10 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(31.999969482421875 * e, 163.07290649414062 * e),
       t.bezierCurveTo(22.999969482421875 * e, 67.07290649414062 * e, 106 * e, 20.072906494140625 * e, 162 * e, 23.072906494140625 * e),
       t.bezierCurveTo(269.9999694824219 * e, 31.072906494140625 * e, 292.9999694824219 * e, 120.07290649414062 * e, 294.9999694824219 * e, 161.07290649414062 * e),
       t.bezierCurveTo(165.49996948242188 * e, 162.07290649414062 * e, 165.49996948242188 * e, 162.07290649414062 * e, 35.999969482421875 * e, 163.07290649414062 * e),
       t.closePath(),
       se(t, "#3A2A0D"),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(32.999969482421875 * e, 165.07290649414062 * e),
       t.bezierCurveTo(16.999969482421875 * e, 221.07290649414062 * e, 85 * e, 289.0729064941406 * e, 156 * e, 294.0729064941406 * e),
       t.bezierCurveTo(263.9999694824219 * e, 293.0729064941406 * e, 295.9999694824219 * e, 199.07290649414062 * e, 294.9999694824219 * e, 159.07290649414062 * e),
       t.closePath(),
       se(t, "#071A1B"),
       Ee(t, 161 * e, 158.07290649414062 * e, 133.4053971921676 * e),
       se(t, void 0, "#5E3E1A", 10 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(31.999969482421875 * e, 161.62844848632812 * e),
       t.bezierCurveTo(162.49996948242188 * e, 161.62844848632812 * e, 162.49996948242188 * e, 161.62844848632812 * e, 292.9999694824219 * e, 161.62844848632812 * e),
       t.closePath(),
       se(t, void 0, "#5E3E1A", 12 * e),
       t.translate(0, 8 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(66 * e, 158.29513549804688 * e),
       t.bezierCurveTo(86 * e, 158.29513549804688 * e, 86 * e, 158.29513549804688 * e, 106 * e, 158.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#281C08", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(57.999969482421875 * e, 117.29513549804688 * e),
       t.bezierCurveTo(85 * e, 128.29513549804688 * e, 85 * e, 128.29513549804688 * e, 113 * e, 139.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#281C08", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(95 * e, 90.29513549804688 * e),
       t.bezierCurveTo(112 * e, 105.79513549804688 * e, 112 * e, 105.79513549804688 * e, 129 * e, 121.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#281C08", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(116 * e, 52.850677490234375 * e),
       t.bezierCurveTo(130 * e, 83.85067749023438 * e, 130 * e, 83.85067749023438 * e, 144 * e, 114.85067749023438 * e),
       t.closePath(),
       se(t, void 0, "#281C08", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(159 * e, 61.295135498046875 * e),
       t.bezierCurveTo(160.49996948242188 * e, 92.29513549804688 * e, 160.49996948242188 * e, 92.29513549804688 * e, 160 * e, 123.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#281C08", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(203 * e, 51.295135498046875 * e),
       t.bezierCurveTo(190.49996948242188 * e, 83.29513549804688 * e, 190.49996948242188 * e, 83.29513549804688 * e, 176 * e, 115.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#281C08", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(225 * e, 89.29513549804688 * e),
       t.bezierCurveTo(210.49996948242188 * e, 104.79513549804688 * e, 210.49996948242188 * e, 104.79513549804688 * e, 194 * e, 120.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#281C08", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(266.9999694824219 * e, 112.29513549804688 * e),
       t.bezierCurveTo(233.49996948242188 * e, 127.29513549804688 * e, 233.49996948242188 * e, 127.29513549804688 * e, 199 * e, 142.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#281C08", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(256.9999694824219 * e, 155.29513549804688 * e),
       t.bezierCurveTo(238.49996948242188 * e, 156.29513549804688 * e, 238.49996948242188 * e, 156.29513549804688 * e, 219 * e, 157.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#281C08", 12 * e),
       t.translate(0, -8 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(66 * e, 158.29513549804688 * e),
       t.bezierCurveTo(86 * e, 158.29513549804688 * e, 86 * e, 158.29513549804688 * e, 106 * e, 158.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#5E3C10", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(57.999969482421875 * e, 117.29513549804688 * e),
       t.bezierCurveTo(85 * e, 128.29513549804688 * e, 85 * e, 128.29513549804688 * e, 113 * e, 139.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#5E3C10", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(95 * e, 90.29513549804688 * e),
       t.bezierCurveTo(112 * e, 105.79513549804688 * e, 112 * e, 105.79513549804688 * e, 129 * e, 121.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#5E3C10", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(116 * e, 52.850677490234375 * e),
       t.bezierCurveTo(130 * e, 83.85067749023438 * e, 130 * e, 83.85067749023438 * e, 144 * e, 114.85067749023438 * e),
       t.closePath(),
       se(t, void 0, "#5E3C10", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(159 * e, 61.295135498046875 * e),
       t.bezierCurveTo(160.49996948242188 * e, 92.29513549804688 * e, 160.49996948242188 * e, 92.29513549804688 * e, 160 * e, 123.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#5E3C10", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(203 * e, 51.295135498046875 * e),
       t.bezierCurveTo(190.49996948242188 * e, 83.29513549804688 * e, 190.49996948242188 * e, 83.29513549804688 * e, 176 * e, 115.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#5E3C10", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(225 * e, 89.29513549804688 * e),
       t.bezierCurveTo(210.49996948242188 * e, 104.79513549804688 * e, 210.49996948242188 * e, 104.79513549804688 * e, 194 * e, 120.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#5E3C10", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(266.9999694824219 * e, 112.29513549804688 * e),
       t.bezierCurveTo(233.49996948242188 * e, 127.29513549804688 * e, 233.49996948242188 * e, 127.29513549804688 * e, 199 * e, 142.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#5E3C10", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(256.9999694824219 * e, 155.29513549804688 * e),
       t.bezierCurveTo(238.49996948242188 * e, 156.29513549804688 * e, 238.49996948242188 * e, 156.29513549804688 * e, 219 * e, 157.29513549804688 * e),
       t.closePath(),
       se(t, void 0, "#5E3C10", 12 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(96 * e, 166 * e),
       t.bezierCurveTo(88 * e, 117 * e, 129 * e, 92 * e, 161 * e, 91 * e),
       t.bezierCurveTo(201 * e, 90 * e, 223 * e, 121 * e, 230 * e, 161 * e),
       t.closePath(),
       se(t, "#704618", "#5D3D1A", 8 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(94.00003051757812 * e, 164.40341186523438 * e),
       t.bezierCurveTo(162.50003051757812 * e, 164.40341186523438 * e, 230.00003051757812 * e, 165.40341186523438 * e, 231.00003051757812 * e, 164.40341186523438 * e),
       t.bezierCurveTo(214.00003051757812 * e, 267.4034118652344 * e, 92.00003051757812 * e, 243.40341186523438 * e, 93.00003051757812 * e, 165.40341186523438 * e),
       t.closePath(),
       se(t, "#E1DDD5", "#EAE7E4", 8 * e),
       Ee(t, 160.00003051757812 * e, 166.49432373046875 * e, 28.30194339616981 * e),
       se(t, "#392C16", "#5E3E1A", 10 * e),
       i
   }
   function Jt(e) {
       var i = document.createElement("canvas")
         , t = i.getContext("2d");
       return i.width = 321 * e,
       i.height = 345 * e,
       t.translate(0, 5 * e),
       Ee(t, 161.00003051757812 * e, 165.40341186523438 * e, 20.808652046684813 * e),
       se(t, "#C09D6F", "#A37943", 10 * e),
       t.beginPath(),
       t.lineCap = "round",
       t.lineJoin = "round",
       t.moveTo(162.00003051757812 * e, 48.403411865234375 * e),
       t.bezierCurveTo(172.50003051757812 * e, 67.40341186523438 * e, 172.50003051757812 * e, 67.40341186523438 * e, 183.00003051757812 * e, 86.40341186523438 * e),
       t.bezierCurveTo(160.50003051757812 * e, 86.40341186523438 * e, 160.50003051757812 * e, 86.40341186523438 * e, 138.00003051757812 * e, 86.40341186523438 * e),
       t.closePath(),
       se(t, "#C09D6F", "#A37943", 10 * e),
       t.save(),
       t.translate(161.50003051757812 * e, 117.90341186523438 * e),
       Te(t, -5.5 * e, -37.5 * e, 11 * e, 75 * e, 10 * e),
       t.restore(),
       se(t, "#C09D6F", "#A37943", 10 * e),
       t.save(),
       t.translate(162.00003051757812 * e, 78.90341186523438 * e),
       Te(t, -10 * e, -5.5 * e, 20 * e, 11 * e, 1 * e),
       t.restore(),
       se(t, "#C09D6F"),
       Ee(t, 161.00003051757812 * e, 163.6761474609375 * e, 17.08800749063506 * e),
       se(t, "#C09D6F"),
       i
   }
   function Xt(e, i, t) {
       var r = (n = document.createElement("canvas")).getContext("2d");
       if (0 == t)
           n.width = 566 * e,
           n.height = 429 * e,
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(312.625 * e, 39.046875 * e),
           r.bezierCurveTo(456.625 * e, 60.046875 * e, 521.625 * e, 134.046875 * e, 528.625 * e, 199.046875 * e),
           r.bezierCurveTo(540.625 * e, 298.046875 * e, 491.625 * e, 364.046875 * e, 405.625 * e, 394.046875 * e),
           r.bezierCurveTo(270.625 * e, 429.046875 * e, 182.625 * e, 395.046875 * e, 100.625 * e, 344.046875 * e),
           r.bezierCurveTo(15.625 * e, 283.046875 * e, 20.625 * e, 195.046875 * e, 33.625 * e, 158.046875 * e),
           r.bezierCurveTo(56.625 * e, 80.046875 * e, 102.625 * e, 46.046875 * e, 183.625 * e, 33.046875 * e),
           r.bezierCurveTo(225.625 * e, 25.046875 * e, 270.625 * e, 30.046875 * e, 312.625 * e, 39.046875 * e),
           r.closePath(),
           se(r, i[0]);
       else if (1 == t) {
           r = (n = document.createElement("canvas")).getContext("2d");
           n.width = 511 * e,
           n.height = 408 * e,
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(141.625 * e, 49.296875 * e),
           r.bezierCurveTo(225.625 * e, 10.296875 * e, 320.625 * e, 16.296875 * e, 390.625 * e, 39.296875 * e),
           r.bezierCurveTo(476.625 * e, 71.296875 * e, 483.625 * e, 142.296875 * e, 486.625 * e, 197.296875 * e),
           r.bezierCurveTo(491.625 * e, 289.296875 * e, 462.625 * e, 317.296875 * e, 417.625 * e, 351.296875 * e),
           r.bezierCurveTo(367.625 * e, 385.296875 * e, 313.625 * e, 404.296875 * e, 218.625 * e, 395.296875 * e),
           r.bezierCurveTo(108.625 * e, 381.296875 * e, 81.625 * e, 350.296875 * e, 52.625 * e, 305.296875 * e),
           r.bezierCurveTo(16.625 * e, 244.296875 * e, 23.625 * e, 171.296875 * e, 37.625 * e, 145.296875 * e),
           r.bezierCurveTo(65.625 * e, 84.296875 * e, 97.625 * e, 74.296875 * e, 141.625 * e, 49.296875 * e),
           r.closePath(),
           se(r, i[0])
       } else if (2 == t) {
           var n;
           r = (n = document.createElement("canvas")).getContext("2d");
           n.width = 504 * e,
           n.height = 408 * e,
           r.beginPath(),
           r.lineCap = "round",
           r.lineJoin = "round",
           r.moveTo(153.625 * e, 46.296875 * e),
           r.bezierCurveTo(271.625 * e, 17.296875 * e, 345.625 * e, 35.296875 * e, 410.625 * e, 71.296875 * e),
           r.bezierCurveTo(473.625 * e, 109.296875 * e, 478.625 * e, 167.296875 * e, 473.625 * e, 205.296875 * e),
           r.bezierCurveTo(462.625 * e, 295.296875 * e, 438.625 * e, 316.296875 * e, 388.625 * e, 345.296875 * e),
           r.bezierCurveTo(331.625 * e, 374.296875 * e, 273.625 * e, 392.296875 * e, 180.625 * e, 387.296875 * e),
           r.bezierCurveTo(111.625 * e, 380.296875 * e, 86.625 * e, 360.296875 * e, 51.625 * e, 309.296875 * e),
           r.bezierCurveTo(23.625 * e, 267.296875 * e, 25.625 * e, 226.296875 * e, 27.625 * e, 175.296875 * e),
           r.bezierCurveTo(37.625 * e, 99.296875 * e, 88.625 * e, 57.296875 * e, 153.625 * e, 46.296875 * e),
           r.closePath(),
           se(r, i[0])
       }
       return n
   }
   function qt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 450 * e,
       r.height = 260 * e,
       n.translate(10 * e, 10 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(20 * e, 20 * e),
       Te(n, 0, 0, 400 * e, 220 * e, 30 * e),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-20 * e, -20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(9 * e, 5 * e),
       n.bezierCurveTo(381 * e, 2 * e, 197 * e, 4.5 * e, 385 * e, 4 * e),
       n.bezierCurveTo(397 * e, 4 * e, 401 * e, 4 * e, 399 * e, 23 * e),
       n.bezierCurveTo(367 * e, 27 * e, 367 * e, 27 * e, 335 * e, 31 * e),
       n.bezierCurveTo(366.5 * e, 33.5 * e, 366.5 * e, 33.5 * e, 398 * e, 36 * e),
       n.bezierCurveTo(398 * e, 41.5 * e, 398 * e, 41.5 * e, 398 * e, 47 * e),
       n.bezierCurveTo(398 * e, 56 * e, 399 * e, 56 * e, 386 * e, 56 * e),
       n.bezierCurveTo(200.5 * e, 56.5 * e, 200.5 * e, 56.5 * e, 15 * e, 57 * e),
       n.bezierCurveTo(2 * e, 55 * e, 4 * e, 52 * e, 4 * e, 43 * e),
       n.bezierCurveTo(4 * e, 30.5 * e, 4 * e, 30.5 * e, 4 * e, 18 * e),
       n.bezierCurveTo(16 * e, 18.5 * e, 16 * e, 18.5 * e, 28 * e, 19 * e),
       n.bezierCurveTo(18.5 * e, 12 * e, 18.5 * e, 12 * e, 9 * e, 5 * e),
       n.closePath(),
       se(n, t[2], t[1], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(5 * e, 70 * e),
       n.bezierCurveTo(5 * e, 58 * e, 5 * e, 55 * e, 17 * e, 57 * e),
       n.bezierCurveTo(203 * e, 57 * e, 203 * e, 57 * e, 389 * e, 57 * e),
       n.bezierCurveTo(400 * e, 57 * e, 400 * e, 59 * e, 400 * e, 69 * e),
       n.bezierCurveTo(400.5 * e, 83.5 * e, 400.5 * e, 83.5 * e, 401 * e, 98 * e),
       n.bezierCurveTo(402 * e, 108 * e, 401 * e, 108 * e, 388 * e, 108 * e),
       n.bezierCurveTo(201.5 * e, 108 * e, 201.5 * e, 108 * e, 15 * e, 108 * e),
       n.bezierCurveTo(1 * e, 106 * e, 5 * e, 106 * e, 5 * e, 87 * e),
       n.bezierCurveTo(33 * e, 84.5 * e, 33 * e, 84.5 * e, 61 * e, 82 * e),
       n.bezierCurveTo(33.5 * e, 76.5 * e, 33.5 * e, 76.5 * e, 6 * e, 71 * e),
       n.closePath(),
       se(n, t[3], t[1], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(19 * e, 158 * e),
       n.bezierCurveTo(2 * e, 159 * e, 4 * e, 156 * e, 5 * e, 118 * e),
       n.bezierCurveTo(4 * e, 110 * e, 6 * e, 107 * e, 26 * e, 109 * e),
       n.bezierCurveTo(206.5 * e, 109 * e, 206.5 * e, 109 * e, 387 * e, 109 * e),
       n.bezierCurveTo(400 * e, 108 * e, 400 * e, 108 * e, 398 * e, 127 * e),
       n.bezierCurveTo(384.5 * e, 130 * e, 384.5 * e, 130 * e, 371 * e, 133 * e),
       n.bezierCurveTo(385.5 * e, 138 * e, 385.5 * e, 138 * e, 400 * e, 143 * e),
       n.bezierCurveTo(402 * e, 156 * e, 402 * e, 162 * e, 385 * e, 160 * e),
       n.closePath(),
       se(n, t[2], t[1], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(4 * e, 183 * e),
       n.bezierCurveTo(1 * e, 163 * e, 4 * e, 158 * e, 28 * e, 161 * e),
       n.bezierCurveTo(207.5 * e, 161 * e, 207.5 * e, 161 * e, 387 * e, 161 * e),
       n.bezierCurveTo(401 * e, 159 * e, 400 * e, 164 * e, 400 * e, 177 * e),
       n.bezierCurveTo(364.5 * e, 184 * e, 364.5 * e, 184 * e, 329 * e, 191 * e),
       n.bezierCurveTo(364.5 * e, 192.5 * e, 364.5 * e, 192.5 * e, 400 * e, 194 * e),
       n.bezierCurveTo(403 * e, 209 * e, 401 * e, 214 * e, 385 * e, 213 * e),
       n.bezierCurveTo(201.5 * e, 213 * e, 201.5 * e, 213 * e, 18 * e, 213 * e),
       n.bezierCurveTo(3 * e, 213 * e, 2 * e, 213 * e, 4 * e, 198 * e),
       n.bezierCurveTo(12.5 * e, 193 * e, 12.5 * e, 193 * e, 21 * e, 188 * e),
       n.closePath(),
       se(n, t[3], t[1], 12 * e),
       Ee(n, 41 * e, 30 * e, 14.7648230602334 * e),
       se(n, t[3], t[1], 12 * e),
       Ee(n, 369 * e, 30 * e, 15.556349186104045 * e),
       se(n, t[3], t[1], 12 * e),
       Ee(n, 364 * e, 190 * e, 15.620499351813308 * e),
       se(n, t[3], t[1], 12 * e),
       Ee(n, 41 * e, 186 * e, 15.556349186104045 * e),
       se(n, t[3], t[1], 12 * e),
       r
   }
   function jt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 450 * e,
       r.height = 260 * e,
       n.translate(10 * e, 10 * e),
       (1 == t || 2 == t) && (n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(9 * e, 5 * e),
       n.bezierCurveTo(381 * e, 2 * e, 197 * e, 4.5 * e, 385 * e, 4 * e),
       n.bezierCurveTo(397 * e, 4 * e, 401 * e, 4 * e, 399 * e, 23 * e),
       n.bezierCurveTo(367 * e, 27 * e, 367 * e, 27 * e, 335 * e, 31 * e),
       n.bezierCurveTo(366.5 * e, 33.5 * e, 366.5 * e, 33.5 * e, 398 * e, 36 * e),
       n.bezierCurveTo(398 * e, 41.5 * e, 398 * e, 41.5 * e, 398 * e, 47 * e),
       n.bezierCurveTo(398 * e, 56 * e, 399 * e, 56 * e, 386 * e, 56 * e),
       n.bezierCurveTo(200.5 * e, 56.5 * e, 200.5 * e, 56.5 * e, 15 * e, 57 * e),
       n.bezierCurveTo(2 * e, 55 * e, 4 * e, 52 * e, 4 * e, 43 * e),
       n.bezierCurveTo(4 * e, 30.5 * e, 4 * e, 30.5 * e, 4 * e, 18 * e),
       n.bezierCurveTo(16 * e, 18.5 * e, 16 * e, 18.5 * e, 28 * e, 19 * e),
       n.bezierCurveTo(18.5 * e, 12 * e, 18.5 * e, 12 * e, 9 * e, 5 * e),
       n.closePath(),
       se(n, i[3], i[3], 32 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(5 * e, 70 * e),
       n.bezierCurveTo(5 * e, 58 * e, 5 * e, 55 * e, 17 * e, 57 * e),
       n.bezierCurveTo(203 * e, 57 * e, 203 * e, 57 * e, 389 * e, 57 * e),
       n.bezierCurveTo(400 * e, 57 * e, 400 * e, 59 * e, 400 * e, 69 * e),
       n.bezierCurveTo(400.5 * e, 83.5 * e, 400.5 * e, 83.5 * e, 401 * e, 98 * e),
       n.bezierCurveTo(402 * e, 108 * e, 401 * e, 108 * e, 388 * e, 108 * e),
       n.bezierCurveTo(201.5 * e, 108 * e, 201.5 * e, 108 * e, 15 * e, 108 * e),
       n.bezierCurveTo(1 * e, 106 * e, 5 * e, 106 * e, 5 * e, 87 * e),
       n.bezierCurveTo(33 * e, 84.5 * e, 33 * e, 84.5 * e, 61 * e, 82 * e),
       n.bezierCurveTo(33.5 * e, 76.5 * e, 33.5 * e, 76.5 * e, 6 * e, 71 * e),
       n.closePath(),
       se(n, i[3], i[3], 32 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(19 * e, 158 * e),
       n.bezierCurveTo(2 * e, 159 * e, 4 * e, 156 * e, 5 * e, 118 * e),
       n.bezierCurveTo(4 * e, 110 * e, 6 * e, 107 * e, 26 * e, 109 * e),
       n.bezierCurveTo(206.5 * e, 109 * e, 206.5 * e, 109 * e, 387 * e, 109 * e),
       n.bezierCurveTo(400 * e, 108 * e, 400 * e, 108 * e, 398 * e, 127 * e),
       n.bezierCurveTo(384.5 * e, 130 * e, 384.5 * e, 130 * e, 371 * e, 133 * e),
       n.bezierCurveTo(385.5 * e, 138 * e, 385.5 * e, 138 * e, 400 * e, 143 * e),
       n.bezierCurveTo(402 * e, 156 * e, 402 * e, 162 * e, 385 * e, 160 * e),
       n.closePath(),
       se(n, i[3], i[3], 32 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(4 * e, 183 * e),
       n.bezierCurveTo(1 * e, 163 * e, 4 * e, 158 * e, 28 * e, 161 * e),
       n.bezierCurveTo(207.5 * e, 161 * e, 207.5 * e, 161 * e, 387 * e, 161 * e),
       n.bezierCurveTo(401 * e, 159 * e, 400 * e, 164 * e, 400 * e, 177 * e),
       n.bezierCurveTo(364.5 * e, 184 * e, 364.5 * e, 184 * e, 329 * e, 191 * e),
       n.bezierCurveTo(364.5 * e, 192.5 * e, 364.5 * e, 192.5 * e, 400 * e, 194 * e),
       n.bezierCurveTo(403 * e, 209 * e, 401 * e, 214 * e, 385 * e, 213 * e),
       n.bezierCurveTo(201.5 * e, 213 * e, 201.5 * e, 213 * e, 18 * e, 213 * e),
       n.bezierCurveTo(3 * e, 213 * e, 2 * e, 213 * e, 4 * e, 198 * e),
       n.bezierCurveTo(12.5 * e, 193 * e, 12.5 * e, 193 * e, 21 * e, 188 * e),
       n.closePath(),
       se(n, i[3], i[3], 32 * e),
       Ee(n, 41 * e, 30 * e, 14.7648230602334 * e),
       se(n, i[3], i[3], 32 * e),
       Ee(n, 369 * e, 30 * e, 15.556349186104045 * e),
       se(n, i[3], i[3], 32 * e),
       Ee(n, 364 * e, 190 * e, 15.620499351813308 * e),
       se(n, i[3], i[3], 32 * e),
       Ee(n, 41 * e, 186 * e, 15.556349186104045 * e),
       se(n, i[3], i[3], 32 * e)),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(9 * e, 5 * e),
       n.bezierCurveTo(381 * e, 2 * e, 197 * e, 4.5 * e, 385 * e, 4 * e),
       n.bezierCurveTo(397 * e, 4 * e, 401 * e, 4 * e, 399 * e, 23 * e),
       n.bezierCurveTo(367 * e, 27 * e, 367 * e, 27 * e, 335 * e, 31 * e),
       n.bezierCurveTo(366.5 * e, 33.5 * e, 366.5 * e, 33.5 * e, 398 * e, 36 * e),
       n.bezierCurveTo(398 * e, 41.5 * e, 398 * e, 41.5 * e, 398 * e, 47 * e),
       n.bezierCurveTo(398 * e, 56 * e, 399 * e, 56 * e, 386 * e, 56 * e),
       n.bezierCurveTo(200.5 * e, 56.5 * e, 200.5 * e, 56.5 * e, 15 * e, 57 * e),
       n.bezierCurveTo(2 * e, 55 * e, 4 * e, 52 * e, 4 * e, 43 * e),
       n.bezierCurveTo(4 * e, 30.5 * e, 4 * e, 30.5 * e, 4 * e, 18 * e),
       n.bezierCurveTo(16 * e, 18.5 * e, 16 * e, 18.5 * e, 28 * e, 19 * e),
       n.bezierCurveTo(18.5 * e, 12 * e, 18.5 * e, 12 * e, 9 * e, 5 * e),
       n.closePath(),
       se(n, i[1], i[0], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(5 * e, 70 * e),
       n.bezierCurveTo(5 * e, 58 * e, 5 * e, 55 * e, 17 * e, 57 * e),
       n.bezierCurveTo(203 * e, 57 * e, 203 * e, 57 * e, 389 * e, 57 * e),
       n.bezierCurveTo(400 * e, 57 * e, 400 * e, 59 * e, 400 * e, 69 * e),
       n.bezierCurveTo(400.5 * e, 83.5 * e, 400.5 * e, 83.5 * e, 401 * e, 98 * e),
       n.bezierCurveTo(402 * e, 108 * e, 401 * e, 108 * e, 388 * e, 108 * e),
       n.bezierCurveTo(201.5 * e, 108 * e, 201.5 * e, 108 * e, 15 * e, 108 * e),
       n.bezierCurveTo(1 * e, 106 * e, 5 * e, 106 * e, 5 * e, 87 * e),
       n.bezierCurveTo(33 * e, 84.5 * e, 33 * e, 84.5 * e, 61 * e, 82 * e),
       n.bezierCurveTo(33.5 * e, 76.5 * e, 33.5 * e, 76.5 * e, 6 * e, 71 * e),
       n.closePath(),
       se(n, i[2], i[0], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(19 * e, 158 * e),
       n.bezierCurveTo(2 * e, 159 * e, 4 * e, 156 * e, 5 * e, 118 * e),
       n.bezierCurveTo(4 * e, 110 * e, 6 * e, 107 * e, 26 * e, 109 * e),
       n.bezierCurveTo(206.5 * e, 109 * e, 206.5 * e, 109 * e, 387 * e, 109 * e),
       n.bezierCurveTo(400 * e, 108 * e, 400 * e, 108 * e, 398 * e, 127 * e),
       n.bezierCurveTo(384.5 * e, 130 * e, 384.5 * e, 130 * e, 371 * e, 133 * e),
       n.bezierCurveTo(385.5 * e, 138 * e, 385.5 * e, 138 * e, 400 * e, 143 * e),
       n.bezierCurveTo(402 * e, 156 * e, 402 * e, 162 * e, 385 * e, 160 * e),
       n.closePath(),
       se(n, i[1], i[0], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(4 * e, 183 * e),
       n.bezierCurveTo(1 * e, 163 * e, 4 * e, 158 * e, 28 * e, 161 * e),
       n.bezierCurveTo(207.5 * e, 161 * e, 207.5 * e, 161 * e, 387 * e, 161 * e),
       n.bezierCurveTo(401 * e, 159 * e, 400 * e, 164 * e, 400 * e, 177 * e),
       n.bezierCurveTo(364.5 * e, 184 * e, 364.5 * e, 184 * e, 329 * e, 191 * e),
       n.bezierCurveTo(364.5 * e, 192.5 * e, 364.5 * e, 192.5 * e, 400 * e, 194 * e),
       n.bezierCurveTo(403 * e, 209 * e, 401 * e, 214 * e, 385 * e, 213 * e),
       n.bezierCurveTo(201.5 * e, 213 * e, 201.5 * e, 213 * e, 18 * e, 213 * e),
       n.bezierCurveTo(3 * e, 213 * e, 2 * e, 213 * e, 4 * e, 198 * e),
       n.bezierCurveTo(12.5 * e, 193 * e, 12.5 * e, 193 * e, 21 * e, 188 * e),
       n.closePath(),
       se(n, i[2], i[0], 12 * e),
       Ee(n, 41 * e, 30 * e, 14.7648230602334 * e),
       se(n, i[2], i[0], 12 * e),
       Ee(n, 369 * e, 30 * e, 15.556349186104045 * e),
       se(n, i[2], i[0], 12 * e),
       Ee(n, 364 * e, 190 * e, 15.620499351813308 * e),
       se(n, i[2], i[0], 12 * e),
       Ee(n, 41 * e, 186 * e, 15.556349186104045 * e),
       se(n, i[2], i[0], 12 * e),
       r
   }
   function Zt(e, i, t, r) {
       var n = document.createElement("canvas")
         , o = n.getContext("2d");
       n.width = 450 * e,
       n.height = 260 * e;
       var a = qt(1 * e, !0, t);
       if (o.drawImage(a, 0 * e, 0 * e),
       1 == r) {
           o.translate(100 * e, 0 * e),
           Ee(o, 113 * e, 120 * e, 66 * e),
           se(o, void 0, t[4], 13 * e);
           a = ci(.65 * e, !0, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
           o.rotate(.7),
           o.drawImage(a, 133 * e, -64 * e),
           o.rotate(-.7),
           o.beginPath(),
           o.lineCap = "round",
           o.lineJoin = "round",
           o.moveTo(70 * e, 70 * e),
           o.bezierCurveTo(113 * e, 120.5 * e, 113 * e, 120.5 * e, 156 * e, 171 * e),
           o.closePath(),
           se(o, void 0, t[4], 13 * e)
       } else if (2 == r) {
           o.translate(100 * e, 0 * e),
           Ee(o, 113 * e, 120 * e, 66 * e),
           se(o, void 0, t[4], 13 * e),
           o.translate(30 * e, 40 * e),
           o.save(),
           o.translate(83.5 * e, 66.5 * e),
           Te(o, -40.5 * e, -29.5 * e, 81 * e, 59 * e, 15 * e),
           o.restore(),
           se(o, "#dff2f7", "#187484", 7 * e),
           Ee(o, 22 * e, 82 * e, 12 * e),
           se(o, "#dff2f7", "#187484", 7 * e),
           Ee(o, 145 * e, 82 * e, 12 * e),
           se(o, "#dff2f7", "#187484", 7 * e);
           a = Ji(.5 * e, !0, ["#80500b", "#7c4908"]);
           o.drawImage(a, 10 * e, 85 * e);
           a = Ji(.5 * e, !0, ["#80500b", "#7c4908"]);
           o.drawImage(a, 50 * e, 85 * e);
           a = Ji(.5 * e, !0, ["#80500b", "#7c4908"]);
           o.drawImage(a, 90 * e, 85 * e);
           a = Xi(1 * e, !0, ["#3d2a6e", "#8255b5"]);
           o.drawImage(a, 90 * e, 105 * e);
           a = Xi(1 * e, !0, ["#3d2a6e", "#8255b5"]);
           o.drawImage(a, 90 * e, 105 * e);
           a = Xi(1 * e, !0, ["#3d2a6e", "#8255b5"]);
           o.drawImage(a, 30 * e, 125 * e);
           a = Xi(1 * e, !0, ["#3d2a6e", "#8255b5"]);
           o.drawImage(a, 50 * e, 115 * e);
           a = Xi(1 * e, !0, ["#3d2a6e", "#8255b5"]);
           o.drawImage(a, 30 * e, 100 * e);
           a = Xi(1 * e, !0, ["#3d2a6e", "#8255b5"]);
           o.drawImage(a, 80 * e, 120 * e);
           a = Xi(1 * e, !0, ["#3d2a6e", "#8255b5"]);
           o.drawImage(a, 110 * e, 125 * e);
           a = Xi(1 * e, !0, ["#3d2a6e", "#8255b5"]);
           o.drawImage(a, 120 * e, 105 * e)
       } else
           3 == r ? (o.translate(100 * e, 0 * e),
           Ee(o, 113 * e, 120 * e, 66 * e),
           se(o, void 0, t[4], 13 * e),
           o.translate(40 * e, 50 * e),
           o.save(),
           o.translate(71 * e, 69 * e),
           Te(o, -30 * e, -42 * e, 60 * e, 84 * e, 10 * e),
           o.restore(),
           se(o, void 0, t[5], 4 * e),
           o.beginPath(),
           o.lineCap = "round",
           o.lineJoin = "round",
           o.moveTo(42 * e, 28 * e),
           o.bezierCurveTo(60 * e, 31 * e, 60 * e, 31 * e, 78 * e, 34 * e),
           o.bezierCurveTo(82 * e, 34 * e, 84 * e, 37 * e, 83 * e, 45 * e),
           o.bezierCurveTo(83 * e, 80 * e, 83 * e, 80 * e, 83 * e, 115 * e),
           o.bezierCurveTo(83 * e, 120 * e, 80 * e, 122 * e, 73 * e, 120 * e),
           o.bezierCurveTo(42 * e, 111 * e, 43 * e, 109 * e, 41 * e, 102 * e),
           o.bezierCurveTo(41 * e, 71 * e, 41 * e, 71 * e, 41 * e, 40 * e),
           o.closePath(),
           se(o, t[5], t[5], 4 * e),
           o.translate(-40 * e, -50 * e),
           o.beginPath(),
           o.lineCap = "round",
           o.lineJoin = "round",
           o.moveTo(70 * e, 70 * e),
           o.bezierCurveTo(113 * e, 120.5 * e, 113 * e, 120.5 * e, 156 * e, 171 * e),
           o.closePath(),
           se(o, void 0, t[4], 13 * e)) : 4 == r && (o.scale(1, 1),
           o.translate(70 * e, 50 * e),
           o.beginPath(),
           o.lineCap = "round",
           o.lineJoin = "round",
           o.moveTo(23 * e, 6 * e),
           o.bezierCurveTo(25.5 * e, 56 * e, 25.5 * e, 56 * e, 28 * e, 106 * e),
           se(o, void 0, t[5], 14 * e),
           o.beginPath(),
           o.lineCap = "round",
           o.lineJoin = "round",
           o.moveTo(59 * e, 10 * e),
           o.bezierCurveTo(61 * e, 51.5 * e, 61 * e, 51.5 * e, 63 * e, 93 * e),
           se(o, void 0, t[5], 14 * e),
           o.beginPath(),
           o.lineCap = "round",
           o.lineJoin = "round",
           o.moveTo(7 * e, 55 * e),
           o.bezierCurveTo(33.5 * e, 55 * e, 33.5 * e, 55 * e, 60 * e, 55 * e),
           se(o, void 0, t[5], 14 * e),
           o.translate(10 * e, 0 * e),
           o.beginPath(),
           o.lineCap = "round",
           o.lineJoin = "round",
           o.moveTo(123 * e, 16 * e),
           o.bezierCurveTo(103 * e, 16.5 * e, 103 * e, 16.5 * e, 83 * e, 17 * e),
           o.bezierCurveTo(83.5 * e, 61 * e, 83.5 * e, 61 * e, 84 * e, 105 * e),
           o.bezierCurveTo(106 * e, 105 * e, 106 * e, 105 * e, 128 * e, 105 * e),
           se(o, void 0, t[5], 14 * e),
           o.beginPath(),
           o.lineCap = "round",
           o.lineJoin = "round",
           o.moveTo(72 * e, 63 * e),
           o.bezierCurveTo(88.5 * e, 62.5 * e, 88.5 * e, 62.5 * e, 105 * e, 62 * e),
           se(o, void 0, t[5], 14 * e),
           o.translate(10 * e, 10 * e),
           o.beginPath(),
           o.lineCap = "round",
           o.lineJoin = "round",
           o.moveTo(141 * e, 8 * e),
           o.bezierCurveTo(143 * e, 50 * e, 143 * e, 50 * e, 145 * e, 92 * e),
           o.bezierCurveTo(169 * e, 88.5 * e, 169 * e, 88.5 * e, 193 * e, 85 * e),
           se(o, void 0, t[5], 14 * e),
           o.translate(10 * e, -10 * e),
           o.beginPath(),
           o.lineCap = "round",
           o.lineJoin = "round",
           o.moveTo(205 * e, 124 * e),
           o.bezierCurveTo(205 * e, 69 * e, 205 * e, 69 * e, 205 * e, 14 * e),
           o.bezierCurveTo(239 * e, 15 * e, 250 * e, 37 * e, 249 * e, 49 * e),
           o.bezierCurveTo(251 * e, 65 * e, 242 * e, 76 * e, 206 * e, 75 * e),
           se(o, void 0, t[5], 14 * e));
       return n
   }
   function Qt(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 345 * e,
       r.height = 250 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(105 * e, 58 * e),
       n.bezierCurveTo(100.5 * e, 43 * e, 100.5 * e, 43 * e, 96 * e, 28 * e),
       n.bezierCurveTo(119.5 * e, 33.5 * e, 119.5 * e, 33.5 * e, 143 * e, 39 * e),
       n.bezierCurveTo(170 * e, 37 * e, 177 * e, 37 * e, 188 * e, 40 * e),
       n.bezierCurveTo(213 * e, 33.5 * e, 213 * e, 33.5 * e, 238 * e, 27 * e),
       n.bezierCurveTo(231 * e, 52 * e, 234 * e, 42.5 * e, 230 * e, 58 * e),
       n.closePath(),
       se(n, t[1], t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(108 * e, 51 * e),
       n.bezierCurveTo(91 * e, 55 * e, 85 * e, 44 * e, 86 * e, 29 * e),
       n.bezierCurveTo(62 * e, 50 * e, 78 * e, 69 * e, 92 * e, 75 * e),
       n.closePath(),
       se(n, t[3], t[4], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(249 * e, 27 * e),
       n.bezierCurveTo(273 * e, 49 * e, 262 * e, 68 * e, 246 * e, 77 * e),
       n.bezierCurveTo(231 * e, 59 * e, 236 * e, 66.5 * e, 226 * e, 56 * e),
       n.bezierCurveTo(243 * e, 53 * e, 252 * e, 43 * e, 249 * e, 28 * e),
       n.closePath(),
       se(n, t[3], t[4], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(87 * e, 78 * e),
       n.bezierCurveTo(87 * e, 59 * e, 98 * e, 46 * e, 127 * e, 48 * e),
       n.bezierCurveTo(176 * e, 48.5 * e, 176 * e, 48.5 * e, 225 * e, 49 * e),
       n.bezierCurveTo(243 * e, 49 * e, 253 * e, 59 * e, 253 * e, 76 * e),
       n.bezierCurveTo(211 * e, 85.5 * e, 211 * e, 85.5 * e, 169 * e, 95 * e),
       n.closePath(),
       se(n, t[5], t[6], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(56 * e, 105 * e),
       n.bezierCurveTo(56 * e, 92 * e, 59 * e, 86 * e, 65 * e, 73 * e),
       n.bezierCurveTo(62.5 * e, 61.5 * e, 62.5 * e, 61.5 * e, 60 * e, 50 * e),
       n.bezierCurveTo(99.5 * e, 64.5 * e, 99.5 * e, 64.5 * e, 139 * e, 79 * e),
       n.bezierCurveTo(164 * e, 77 * e, 177 * e, 76 * e, 203 * e, 78 * e),
       n.bezierCurveTo(242 * e, 63.5 * e, 242 * e, 63.5 * e, 281 * e, 49 * e),
       n.bezierCurveTo(279 * e, 60.5 * e, 279 * e, 60.5 * e, 277 * e, 72 * e),
       n.bezierCurveTo(286 * e, 88 * e, 286 * e, 96 * e, 287 * e, 104 * e),
       n.bezierCurveTo(228.5 * e, 127 * e, 228.5 * e, 127 * e, 170 * e, 150 * e),
       n.closePath(),
       se(n, t[1], t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(48 * e, 130 * e),
       n.bezierCurveTo(61 * e, 155 * e, 63 * e, 165 * e, 56 * e, 171 * e),
       n.bezierCurveTo(48 * e, 177 * e, 40 * e, 171 * e, 38 * e, 178 * e),
       n.bezierCurveTo(33 * e, 180 * e, 37 * e, 188 * e, 47 * e, 208 * e),
       n.bezierCurveTo(52 * e, 221 * e, 55 * e, 222 * e, 75 * e, 229 * e),
       n.bezierCurveTo(91 * e, 213 * e, 98 * e, 212 * e, 112 * e, 219 * e),
       n.bezierCurveTo(167 * e, 225 * e, 187 * e, 224 * e, 222 * e, 220 * e),
       n.bezierCurveTo(244 * e, 214 * e, 247 * e, 213 * e, 263 * e, 229 * e),
       n.bezierCurveTo(295 * e, 220 * e, 291 * e, 215 * e, 301 * e, 194 * e),
       n.bezierCurveTo(308 * e, 178 * e, 309 * e, 176 * e, 302 * e, 173 * e),
       n.bezierCurveTo(290 * e, 177 * e, 289 * e, 177 * e, 283 * e, 169 * e),
       n.bezierCurveTo(279 * e, 163 * e, 279 * e, 161 * e, 290 * e, 130 * e),
       n.bezierCurveTo(270 * e, 127 * e, 270 * e, 127 * e, 250 * e, 124 * e),
       n.bezierCurveTo(209 * e, 137.5 * e, 209 * e, 137.5 * e, 168 * e, 151 * e),
       n.bezierCurveTo(121 * e, 135 * e, 121 * e, 135 * e, 74 * e, 119 * e),
       n.closePath(),
       se(n, t[1], t[2], 8 * e),
       n.globalCompositeOperation = "destination-out",
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(133 * e, 158 * e),
       n.bezierCurveTo(152 * e, 193 * e, 158 * e, 205 * e, 140 * e, 203 * e),
       n.bezierCurveTo(99 * e, 195 * e, 96 * e, 189 * e, 86 * e, 173 * e),
       n.bezierCurveTo(80 * e, 159 * e, 88 * e, 145 * e, 104 * e, 141 * e),
       n.closePath(),
       se(n, t[7], t[8], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(215 * e, 146 * e),
       n.bezierCurveTo(204 * e, 167 * e, 204 * e, 167 * e, 193 * e, 188 * e),
       n.bezierCurveTo(187 * e, 201 * e, 191 * e, 209 * e, 213 * e, 201 * e),
       n.bezierCurveTo(247 * e, 192 * e, 253 * e, 181 * e, 257 * e, 169 * e),
       n.bezierCurveTo(260 * e, 157 * e, 254 * e, 149 * e, 243 * e, 141 * e),
       n.closePath(),
       se(n, t[7], t[8], 8 * e),
       n.globalCompositeOperation = "source-over",
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(133 * e, 158 * e),
       n.bezierCurveTo(152 * e, 193 * e, 158 * e, 205 * e, 140 * e, 203 * e),
       n.bezierCurveTo(99 * e, 195 * e, 96 * e, 189 * e, 86 * e, 173 * e),
       n.bezierCurveTo(80 * e, 159 * e, 88 * e, 145 * e, 104 * e, 141 * e),
       n.closePath(),
       se(n, void 0, t[8], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(215 * e, 146 * e),
       n.bezierCurveTo(204 * e, 167 * e, 204 * e, 167 * e, 193 * e, 188 * e),
       n.bezierCurveTo(187 * e, 201 * e, 191 * e, 209 * e, 213 * e, 201 * e),
       n.bezierCurveTo(247 * e, 192 * e, 253 * e, 181 * e, 257 * e, 169 * e),
       n.bezierCurveTo(260 * e, 157 * e, 254 * e, 149 * e, 243 * e, 141 * e),
       n.closePath(),
       se(n, void 0, t[8], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(39 * e, 66 * e),
       n.bezierCurveTo(57 * e, 107 * e, 63 * e, 96 * e, 120 * e, 106 * e),
       n.bezierCurveTo(154 * e, 112 * e, 163 * e, 116 * e, 174 * e, 135 * e),
       n.bezierCurveTo(180 * e, 109 * e, 191 * e, 113 * e, 237 * e, 103 * e),
       n.bezierCurveTo(276 * e, 100 * e, 289 * e, 94 * e, 301 * e, 67 * e),
       n.bezierCurveTo(317 * e, 112 * e, 301 * e, 141 * e, 274 * e, 139 * e),
       n.bezierCurveTo(204 * e, 166 * e, 197 * e, 169 * e, 173 * e, 183 * e),
       n.bezierCurveTo(170 * e, 183 * e, 170 * e, 183 * e, 167 * e, 183 * e),
       n.bezierCurveTo(132 * e, 160 * e, 112 * e, 156 * e, 73 * e, 141 * e),
       n.bezierCurveTo(43 * e, 146 * e, 27 * e, 120 * e, 39 * e, 66 * e),
       n.closePath(),
       se(n, t[7], t[8], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(115 * e, 185 * e),
       n.bezierCurveTo(115 * e, 200 * e, 118 * e, 206 * e, 124 * e, 212 * e),
       n.bezierCurveTo(133 * e, 223 * e, 132 * e, 231 * e, 121 * e, 230 * e),
       n.bezierCurveTo(108 * e, 226 * e, 108 * e, 215 * e, 107 * e, 209 * e),
       n.bezierCurveTo(106 * e, 201 * e, 110 * e, 196 * e, 114 * e, 185 * e),
       n.closePath(),
       se(n, t[3], t[4], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(226 * e, 186 * e),
       n.bezierCurveTo(234 * e, 201 * e, 238 * e, 209 * e, 228 * e, 225 * e),
       n.bezierCurveTo(223 * e, 233 * e, 213 * e, 233 * e, 211 * e, 226 * e),
       n.bezierCurveTo(206 * e, 219 * e, 217 * e, 216 * e, 221 * e, 207 * e),
       n.bezierCurveTo(225 * e, 196 * e, 225 * e, 191 * e, 226 * e, 186 * e),
       n.closePath(),
       se(n, t[3], t[4], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(172 * e, 110 * e),
       n.bezierCurveTo(189 * e, 153 * e, 192 * e, 160 * e, 188 * e, 175 * e),
       n.bezierCurveTo(183 * e, 190 * e, 176 * e, 197 * e, 165 * e, 191 * e),
       n.bezierCurveTo(153 * e, 181 * e, 152 * e, 166 * e, 157 * e, 151 * e),
       n.bezierCurveTo(164.5 * e, 131 * e, 164.5 * e, 131 * e, 172 * e, 111 * e),
       n.closePath(),
       se(n, t[3], t[4], 8 * e),
       r
   }
   function $t(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 149 * e,
       t.height = 153 * e,
       r.globalAlpha = .5,
       Ee(r, 74.5 * e, 85 * e, 66 * e),
       se(r, i[0]),
       r.globalAlpha = 1,
       Ee(r, 75.5 * e, 72.5 * e, 67 * e),
       se(r, i[1], i[2], 4 * e),
       Ee(r, 75.5 * e, 73.5 * e, 54 * e),
       se(r, i[3]),
       r.globalAlpha = .5,
       Ee(r, 74.5 * e, 80.5 * e, 39 * e),
       se(r, i[4]),
       r.globalAlpha = 1,
       Ee(r, 74.5 * e, 74.5 * e, 37 * e),
       se(r, i[5]),
       t
   }
   function er(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 173 * e,
       t.height = 178 * e,
       r.globalAlpha = .5,
       Ee(r, 86.5 * e, 98 * e, 80 * e),
       se(r, i[0]),
       r.globalAlpha = 1,
       Ee(r, 86.5 * e, 89 * e, 81 * e),
       se(r, i[1], i[2], 4 * e),
       Ee(r, 86.5 * e, 86 * e, 59 * e),
       se(r, i[3], i[4], 4 * e),
       r.globalAlpha = .5,
       Ee(r, 86.5 * e, 95 * e, 34 * e),
       se(r, i[0]),
       r.globalAlpha = 1,
       Ee(r, 86.5 * e, 89 * e, 34 * e),
       se(r, i[5]),
       t
   }
   function ir(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 253 * e,
       t.height = 260 * e,
       r.globalAlpha = .5,
       Ee(r, 126.5 * e, 134 * e, 119 * e),
       se(r, i[0]),
       r.globalAlpha = 1,
       Ee(r, 126.5 * e, 124 * e, 119 * e),
       se(r, i[1], i[2], 4 * e),
       Ee(r, 126.5 * e, 127 * e, 100 * e),
       se(r, i[3]),
       r.globalAlpha = .5,
       Ee(r, 126.5 * e, 135 * e, 81 * e),
       se(r, i[0]),
       r.globalAlpha = 1,
       Ee(r, 126.5 * e, 125 * e, 84 * e),
       se(r, i[4], i[5], 4 * e),
       Ee(r, 126.5 * e, 125 * e, 61 * e),
       se(r, i[6], i[7], 4 * e),
       r.globalAlpha = .5,
       Ee(r, 126.5 * e, 134 * e, 40 * e),
       se(r, i[8]),
       r.globalAlpha = 1,
       Ee(r, 126.5 * e, 125 * e, 40 * e),
       se(r, i[9]),
       t
   }
   function tr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 139 * e,
       r.height = 135 * e,
       n.translate(0, 10 * e),
       n.globalAlpha = i ? .5 : 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(32 * e, 77 * e),
       n.bezierCurveTo(6 * e, 41 * e, 6 * e, 33 * e, 12 * e, 27 * e),
       n.bezierCurveTo(27 * e, 6 * e, 28 * e, 6 * e, 37 * e, 6 * e),
       n.bezierCurveTo(62 * e, 3 * e, 64 * e, 5 * e, 67 * e, 13 * e),
       n.bezierCurveTo(80 * e, 36 * e, 73.5 * e, 25 * e, 80 * e, 37 * e),
       n.bezierCurveTo(73.5 * e, 54 * e, 65 * e, 74 * e, 67 * e, 71 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(65 * e, 37 * e),
       n.bezierCurveTo(105 * e, 40 * e, 113 * e, 39 * e, 117 * e, 48 * e),
       n.bezierCurveTo(126 * e, 70 * e, 128 * e, 72 * e, 124 * e, 80 * e),
       n.bezierCurveTo(112 * e, 101 * e, 110 * e, 104 * e, 99 * e, 104 * e),
       n.bezierCurveTo(59 * e, 100 * e, 55 * e, 99 * e, 56 * e, 99 * e),
       n.bezierCurveTo(47.5 * e, 79 * e, 45 * e, 66 * e, 39 * e, 59 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(30 * e, 63 * e),
       n.bezierCurveTo(5 * e, 99 * e, 5 * e, 101 * e, 8 * e, 103 * e),
       n.bezierCurveTo(19 * e, 123 * e, 22 * e, 125 * e, 28 * e, 126 * e),
       n.bezierCurveTo(57 * e, 127 * e, 55 * e, 127 * e, 58 * e, 120 * e),
       n.bezierCurveTo(82 * e, 86 * e, 83 * e, 78 * e, 82 * e, 87 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(0, -10 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(32 * e, 77 * e),
       n.bezierCurveTo(6 * e, 41 * e, 6 * e, 33 * e, 12 * e, 27 * e),
       n.bezierCurveTo(27 * e, 6 * e, 28 * e, 6 * e, 37 * e, 6 * e),
       n.bezierCurveTo(62 * e, 3 * e, 64 * e, 5 * e, 67 * e, 13 * e),
       n.bezierCurveTo(80 * e, 36 * e, 73.5 * e, 25 * e, 80 * e, 37 * e),
       n.bezierCurveTo(73.5 * e, 54 * e, 65 * e, 74 * e, 67 * e, 71 * e),
       n.closePath(),
       se(n, t[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(65 * e, 37 * e),
       n.bezierCurveTo(105 * e, 40 * e, 113 * e, 39 * e, 117 * e, 48 * e),
       n.bezierCurveTo(126 * e, 70 * e, 128 * e, 72 * e, 124 * e, 80 * e),
       n.bezierCurveTo(112 * e, 101 * e, 110 * e, 104 * e, 99 * e, 104 * e),
       n.bezierCurveTo(59 * e, 100 * e, 55 * e, 99 * e, 56 * e, 99 * e),
       n.bezierCurveTo(47.5 * e, 79 * e, 45 * e, 66 * e, 39 * e, 59 * e),
       n.closePath(),
       se(n, t[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(30 * e, 63 * e),
       n.bezierCurveTo(5 * e, 99 * e, 5 * e, 101 * e, 8 * e, 103 * e),
       n.bezierCurveTo(19 * e, 123 * e, 22 * e, 125 * e, 28 * e, 126 * e),
       n.bezierCurveTo(57 * e, 127 * e, 55 * e, 127 * e, 58 * e, 120 * e),
       n.bezierCurveTo(82 * e, 86 * e, 83 * e, 78 * e, 82 * e, 87 * e),
       n.closePath(),
       se(n, t[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(80 * e, 38 * e),
       n.bezierCurveTo(72.5 * e, 52 * e, 72.5 * e, 52 * e, 65 * e, 66 * e),
       n.bezierCurveTo(47.5 * e, 37 * e, 47.5 * e, 37 * e, 30 * e, 7 * e),
       n.bezierCurveTo(48 * e, 4 * e, 57 * e, 4 * e, 64 * e, 10 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(65 * e, 65 * e),
       n.bezierCurveTo(125 * e, 73 * e, 95.5 * e, 69 * e, 126 * e, 73 * e),
       n.bezierCurveTo(119 * e, 98 * e, 106 * e, 104 * e, 98 * e, 103 * e),
       n.bezierCurveTo(84.5 * e, 102 * e, 84.5 * e, 102 * e, 71 * e, 101 * e),
       n.bezierCurveTo(64 * e, 86 * e, 64 * e, 86 * e, 57 * e, 70 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(27 * e, 69 * e),
       n.bezierCurveTo(64 * e, 65 * e, 46 * e, 67 * e, 65 * e, 65 * e),
       n.bezierCurveTo(43.5 * e, 94 * e, 43.5 * e, 94 * e, 22 * e, 123 * e),
       n.bezierCurveTo(8 * e, 103 * e, 8 * e, 103 * e, 9 * e, 103 * e),
       n.bezierCurveTo(5 * e, 98 * e, 11 * e, 89 * e, 26 * e, 70 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(26 * e, 69 * e),
       n.bezierCurveTo(65 * e, 60 * e, 45 * e, 65 * e, 64 * e, 60 * e),
       n.bezierCurveTo(63 * e, 65 * e, 63 * e, 65 * e, 62 * e, 70 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(80 * e, 38 * e),
       n.bezierCurveTo(68 * e, 70 * e, 75 * e, 53 * e, 70 * e, 68 * e),
       n.bezierCurveTo(65 * e, 67 * e, 65 * e, 67 * e, 60 * e, 65 * e),
       n.closePath(),
       se(n, t[2]),
       r
   }
   function rr(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 100 * e,
       t.height = 100 * e,
       r.globalAlpha = .5,
       r.fillStyle = i[0],
       r.fillRect(0, 0, t.width, t.height),
       t
   }
   function nr(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 120 * e,
       t.height = 300 * e,
       r.translate(-80 * e, -20),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(200.5 * e, 14.953125 * e),
       r.bezierCurveTo(203 * e, 171.953125 * e, 203 * e, 171.953125 * e, 205.5 * e, 328.953125 * e),
       r.bezierCurveTo(188.5 * e, 257.953125 * e, 164.5 * e, 216.953125 * e, 166.5 * e, 176.953125 * e),
       r.bezierCurveTo(168.5 * e, 133.953125 * e, 198.5 * e, 98.953125 * e, 200.5 * e, 14.953125 * e),
       r.closePath(),
       se(r, i[0]),
       t
   }
   function or(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 120 * e,
       t.height = 300 * e,
       r.translate(-200 * e, -40 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(344 * e, 18.40625 * e),
       r.bezierCurveTo(345 * e, 361.40625 * e, 344 * e, 191.40625 * e, 344 * e, 364.40625 * e),
       r.bezierCurveTo(261 * e, 275.40625 * e, 274 * e, 259.40625 * e, 229 * e, 213.40625 * e),
       r.bezierCurveTo(199 * e, 187.40625 * e, 222 * e, 133.40625 * e, 273 * e, 100.40625 * e),
       r.bezierCurveTo(321 * e, 71.40625 * e, 327 * e, 34.40625 * e, 344 * e, 18.40625 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(335 * e, 38.072906494140625 * e),
       r.bezierCurveTo(307 * e, 62.072906494140625 * e, 291 * e, 60.072906494140625 * e, 262 * e, 68.07290649414062 * e),
       r.bezierCurveTo(223 * e, 80.07290649414062 * e, 225 * e, 111.07290649414062 * e, 264 * e, 139.07290649414062 * e),
       r.closePath(),
       se(r, i[0]),
       t
   }
   function ar(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 120 * e,
       t.height = 320 * e,
       r.translate(-60 * e, -15 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(188.5 * e, 3.953125 * e),
       r.bezierCurveTo(188.5 * e, 171.453125 * e, 188.5 * e, 171.453125 * e, 188.5 * e, 338.953125 * e),
       r.bezierCurveTo(162.5 * e, 268.953125 * e, 145.5 * e, 265.953125 * e, 116.5 * e, 244.953125 * e),
       r.bezierCurveTo(67.5 * e, 204.953125 * e, 87.5 * e, 160.953125 * e, 113.5 * e, 125.953125 * e),
       r.bezierCurveTo(141.5 * e, 90.953125 * e, 176.5 * e, 56.953125 * e, 188.5 * e, 3.953125 * e),
       r.closePath(),
       se(r, i[0]),
       t
   }
   function sr(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 120 * e,
       t.height = 330 * e,
       r.translate(-60 * e, -10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(188.5 * e, 7.953125 * e),
       r.bezierCurveTo(188.5 * e, 334.953125 * e, 188.5 * e, 332.953125 * e, 188.5 * e, 339.953125 * e),
       r.bezierCurveTo(166.5 * e, 295.953125 * e, 145.5 * e, 295.953125 * e, 139.5 * e, 282.953125 * e),
       r.bezierCurveTo(124.5 * e, 244.953125 * e, 139.5 * e, 243.953125 * e, 131.5 * e, 212.953125 * e),
       r.bezierCurveTo(118.5 * e, 161.953125 * e, 69.5 * e, 156.953125 * e, 74.5 * e, 92.953125 * e),
       r.bezierCurveTo(85.5 * e, 41.953125 * e, 158.5 * e, 49.953125 * e, 188.5 * e, 7.953125 * e),
       r.closePath(),
       se(r, i[0]),
       t
   }
   function Tr(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 48 * e,
       t.height = 47 * e,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(7.1875 * e, 25.434661865234375 * e),
       r.bezierCurveTo(11.1875 * e, 13.434661865234375 * e, 18.1875 * e, 8.434661865234375 * e, 32.1875 * e, 10.434661865234375 * e),
       r.bezierCurveTo(45.1875 * e, 14.434661865234375 * e, 41.1875 * e, 24.434661865234375 * e, 36.1875 * e, 30.434661865234375 * e),
       r.bezierCurveTo(22.1875 * e, 42.434661865234375 * e, 2.1875 * e, 41.434661865234375 * e, 7.1875 * e, 25.434661865234375 * e),
       r.closePath(),
       se(r, i[0]),
       t
   }
   function Ir(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 120 * e,
       t.height = 280 * e,
       r.translate(-100 * e, -20 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(228.5 * e, 331.953125 * e),
       r.bezierCurveTo(228.5 * e, 12.953125 * e, 228.5 * e, 171.453125 * e, 228.5 * e, 10.953125 * e),
       r.bezierCurveTo(196.5 * e, 76.953125 * e, 206.5 * e, 78.953125 * e, 191.5 * e, 114.953125 * e),
       r.bezierCurveTo(162.5 * e, 170.953125 * e, 206.5 * e, 220.953125 * e, 210.5 * e, 251.953125 * e),
       r.bezierCurveTo(218.5 * e, 287.953125 * e, 220.5 * e, 291.953125 * e, 228.5 * e, 331.953125 * e),
       r.closePath(),
       se(r, i[0]),
       t
   }
   function Er(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 33 * e,
       t.height = 35 * e,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(12.75 * e, 7.1328125 * e),
       r.bezierCurveTo(26.75 * e, 8.1328125 * e, 27.75 * e, 14.1328125 * e, 24.75 * e, 23.1328125 * e),
       r.bezierCurveTo(19.75 * e, 31.1328125 * e, 15.75 * e, 33.1328125 * e, 6.75 * e, 26.1328125 * e),
       r.bezierCurveTo(.75 * e, 19.1328125 * e, 4.75 * e, 8.1328125 * e, 12.75 * e, 7.1328125 * e),
       r.closePath(),
       se(r, i[0]),
       t
   }
   function _r(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 20 * e,
       t.height = 35 * e,
       Te(r, 0, 0, 20, 35, 7),
       se(r, i[0]),
       t
   }
   function ur(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 161 * e,
       t.height = 190 * e,
       r.globalAlpha = .5,
       r.translate(0, 8),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(9 * e, 93 * e),
       r.bezierCurveTo(17 * e, 95 * e, 19 * e, 95 * e, 21 * e, 95 * e),
       r.bezierCurveTo(9 * e, 83 * e, 17 * e, 93 * e, 4 * e, 76 * e),
       r.bezierCurveTo(11 * e, 75 * e, 11 * e, 75 * e, 18 * e, 75 * e),
       r.bezierCurveTo(13 * e, 67 * e, 13 * e, 67 * e, 7 * e, 59 * e),
       r.bezierCurveTo(14 * e, 59 * e, 14 * e, 59 * e, 21 * e, 59 * e),
       r.bezierCurveTo(46 * e, 35 * e, 35 * e, 45 * e, 49 * e, 31 * e),
       r.bezierCurveTo(53 * e, 24 * e, 51 * e, 21 * e, 51 * e, 16 * e),
       r.bezierCurveTo(63 * e, 23 * e, 63 * e, 24 * e, 69 * e, 29 * e),
       r.bezierCurveTo(76 * e, 7 * e, 75 * e, 11 * e, 76 * e, 6 * e),
       r.bezierCurveTo(81 * e, 12 * e, 84 * e, 18 * e, 89 * e, 27 * e),
       r.bezierCurveTo(95 * e, 25 * e, 100 * e, 16 * e, 105 * e, 14 * e),
       r.bezierCurveTo(103 * e, 25 * e, 111 * e, 33 * e, 110 * e, 34 * e),
       r.bezierCurveTo(123 * e, 48 * e, 123 * e, 48 * e, 136 * e, 62 * e),
       r.bezierCurveTo(142 * e, 60 * e, 147 * e, 59 * e, 155 * e, 58 * e),
       r.bezierCurveTo(147 * e, 65 * e, 147 * e, 65 * e, 139 * e, 73 * e),
       r.bezierCurveTo(145 * e, 73 * e, 145 * e, 73 * e, 151 * e, 73 * e),
       r.bezierCurveTo(145 * e, 80 * e, 145 * e, 80 * e, 138 * e, 87 * e),
       r.bezierCurveTo(144 * e, 88 * e, 144 * e, 88 * e, 150 * e, 89 * e),
       r.bezierCurveTo(125 * e, 103 * e, 125 * e, 125 * e, 113 * e, 141 * e),
       r.bezierCurveTo(92 * e, 178 * e, 85 * e, 177 * e, 76 * e, 178 * e),
       r.bezierCurveTo(64 * e, 179 * e, 51 * e, 164 * e, 35 * e, 131 * e),
       r.bezierCurveTo(18 * e, 95 * e, 13 * e, 99 * e, 8 * e, 93 * e),
       r.closePath(),
       se(r, i[0]),
       r.globalAlpha = 1,
       r.translate(0, -8),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(9 * e, 93 * e),
       r.bezierCurveTo(17 * e, 95 * e, 19 * e, 95 * e, 21 * e, 95 * e),
       r.bezierCurveTo(9 * e, 83 * e, 17 * e, 93 * e, 4 * e, 76 * e),
       r.bezierCurveTo(11 * e, 75 * e, 11 * e, 75 * e, 18 * e, 75 * e),
       r.bezierCurveTo(13 * e, 67 * e, 13 * e, 67 * e, 7 * e, 59 * e),
       r.bezierCurveTo(14 * e, 59 * e, 14 * e, 59 * e, 21 * e, 59 * e),
       r.bezierCurveTo(46 * e, 35 * e, 35 * e, 45 * e, 49 * e, 31 * e),
       r.bezierCurveTo(53 * e, 24 * e, 51 * e, 21 * e, 51 * e, 16 * e),
       r.bezierCurveTo(63 * e, 23 * e, 63 * e, 24 * e, 69 * e, 29 * e),
       r.bezierCurveTo(76 * e, 7 * e, 75 * e, 11 * e, 76 * e, 6 * e),
       r.bezierCurveTo(81 * e, 12 * e, 84 * e, 18 * e, 89 * e, 27 * e),
       r.bezierCurveTo(95 * e, 25 * e, 100 * e, 16 * e, 105 * e, 14 * e),
       r.bezierCurveTo(103 * e, 25 * e, 111 * e, 33 * e, 110 * e, 34 * e),
       r.bezierCurveTo(123 * e, 48 * e, 123 * e, 48 * e, 136 * e, 62 * e),
       r.bezierCurveTo(142 * e, 60 * e, 147 * e, 59 * e, 155 * e, 58 * e),
       r.bezierCurveTo(147 * e, 65 * e, 147 * e, 65 * e, 139 * e, 73 * e),
       r.bezierCurveTo(145 * e, 73 * e, 145 * e, 73 * e, 151 * e, 73 * e),
       r.bezierCurveTo(145 * e, 80 * e, 145 * e, 80 * e, 138 * e, 87 * e),
       r.bezierCurveTo(144 * e, 88 * e, 144 * e, 88 * e, 150 * e, 89 * e),
       r.bezierCurveTo(125 * e, 103 * e, 125 * e, 125 * e, 113 * e, 141 * e),
       r.bezierCurveTo(92 * e, 178 * e, 85 * e, 177 * e, 76 * e, 178 * e),
       r.bezierCurveTo(64 * e, 179 * e, 51 * e, 164 * e, 35 * e, 131 * e),
       r.bezierCurveTo(18 * e, 95 * e, 13 * e, 99 * e, 8 * e, 93 * e),
       r.closePath(),
       se(r, i[1]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(28 * e, 63 * e),
       r.bezierCurveTo(23 * e, 54 * e, 24 * e, 47 * e, 26 * e, 37 * e),
       r.bezierCurveTo(28 * e, 29 * e, 31 * e, 31 * e, 41 * e, 35 * e),
       r.bezierCurveTo(52 * e, 45 * e, 55 * e, 51 * e, 57 * e, 53 * e),
       r.bezierCurveTo(50 * e, 50 * e, 44 * e, 47 * e, 43 * e, 48 * e),
       r.bezierCurveTo(43 * e, 52 * e, 43 * e, 52 * e, 42 * e, 57 * e),
       r.bezierCurveTo(38 * e, 54 * e, 38 * e, 54 * e, 33 * e, 51 * e),
       r.bezierCurveTo(34 * e, 56 * e, 34 * e, 56 * e, 34 * e, 61 * e),
       r.closePath(),
       se(r, i[3]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(99 * e, 55 * e),
       r.bezierCurveTo(107 * e, 43 * e, 113 * e, 39 * e, 121 * e, 34 * e),
       r.bezierCurveTo(130 * e, 29 * e, 130 * e, 34 * e, 130 * e, 42 * e),
       r.bezierCurveTo(131 * e, 57 * e, 128 * e, 61 * e, 129 * e, 63 * e),
       r.bezierCurveTo(124 * e, 62 * e, 124 * e, 62 * e, 119 * e, 61 * e),
       r.bezierCurveTo(119 * e, 56 * e, 120 * e, 61 * e, 118 * e, 52 * e),
       r.bezierCurveTo(115 * e, 55 * e, 111 * e, 59 * e, 111 * e, 58 * e),
       r.bezierCurveTo(110 * e, 54 * e, 109 * e, 57 * e, 109 * e, 51 * e),
       r.closePath(),
       se(r, i[3]),
       Ee(r, 103 * e, 110 * e, 11 * e),
       se(r, i[4]),
       Ee(r, 55 * e, 111 * e, 11 * e),
       se(r, i[4]),
       Ee(r, 99 * e, 107 * e, 5 * e),
       se(r, i[1]),
       Ee(r, 51 * e, 108 * e, 5 * e),
       se(r, i[1]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(31 * e, 121 * e),
       r.bezierCurveTo(45 * e, 128 * e, 51 * e, 133 * e, 53 * e, 141 * e),
       r.bezierCurveTo(59 * e, 161 * e, 70 * e, 173 * e, 80 * e, 169 * e),
       r.bezierCurveTo(89 * e, 172 * e, 99 * e, 149 * e, 107 * e, 133 * e),
       r.bezierCurveTo(114 * e, 122 * e, 119 * e, 123 * e, 124 * e, 119 * e),
       r.bezierCurveTo(109 * e, 148 * e, 117 * e, 133 * e, 109 * e, 147 * e),
       r.bezierCurveTo(87 * e, 180 * e, 84 * e, 179 * e, 76 * e, 178 * e),
       r.bezierCurveTo(49 * e, 173 * e, 44 * e, 149 * e, 31 * e, 121 * e),
       r.closePath(),
       se(r, i[5]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.translate(-2, 0),
       r.moveTo(71 * e, 162 * e),
       r.bezierCurveTo(80 * e, 155 * e, 85 * e, 159 * e, 89 * e, 164 * e),
       r.bezierCurveTo(90 * e, 171 * e, 86 * e, 173 * e, 79 * e, 173 * e),
       r.bezierCurveTo(67 * e, 172 * e, 67 * e, 168 * e, 71 * e, 162 * e),
       r.closePath(),
       se(r, i[3]),
       r.translate(2, 0),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(9 * e, 93 * e),
       r.bezierCurveTo(17 * e, 95 * e, 19 * e, 95 * e, 21 * e, 95 * e),
       r.bezierCurveTo(9 * e, 83 * e, 17 * e, 93 * e, 4 * e, 76 * e),
       r.bezierCurveTo(11 * e, 75 * e, 11 * e, 75 * e, 18 * e, 75 * e),
       r.bezierCurveTo(13 * e, 67 * e, 13 * e, 67 * e, 7 * e, 59 * e),
       r.bezierCurveTo(14 * e, 59 * e, 14 * e, 59 * e, 21 * e, 59 * e),
       r.bezierCurveTo(46 * e, 35 * e, 35 * e, 45 * e, 49 * e, 31 * e),
       r.bezierCurveTo(53 * e, 24 * e, 51 * e, 21 * e, 51 * e, 16 * e),
       r.bezierCurveTo(63 * e, 23 * e, 63 * e, 24 * e, 69 * e, 29 * e),
       r.bezierCurveTo(76 * e, 7 * e, 75 * e, 11 * e, 76 * e, 6 * e),
       r.bezierCurveTo(81 * e, 12 * e, 84 * e, 18 * e, 89 * e, 27 * e),
       r.bezierCurveTo(95 * e, 25 * e, 100 * e, 16 * e, 105 * e, 14 * e),
       r.bezierCurveTo(103 * e, 25 * e, 111 * e, 33 * e, 110 * e, 34 * e),
       r.bezierCurveTo(123 * e, 48 * e, 123 * e, 48 * e, 136 * e, 62 * e),
       r.bezierCurveTo(142 * e, 60 * e, 147 * e, 59 * e, 155 * e, 58 * e),
       r.bezierCurveTo(147 * e, 65 * e, 147 * e, 65 * e, 139 * e, 73 * e),
       r.bezierCurveTo(145 * e, 73 * e, 145 * e, 73 * e, 151 * e, 73 * e),
       r.bezierCurveTo(145 * e, 80 * e, 145 * e, 80 * e, 138 * e, 87 * e),
       r.bezierCurveTo(144 * e, 88 * e, 144 * e, 88 * e, 150 * e, 89 * e),
       r.bezierCurveTo(125 * e, 103 * e, 125 * e, 125 * e, 113 * e, 141 * e),
       r.bezierCurveTo(92 * e, 178 * e, 85 * e, 177 * e, 76 * e, 178 * e),
       r.bezierCurveTo(64 * e, 179 * e, 51 * e, 164 * e, 35 * e, 131 * e),
       r.bezierCurveTo(18 * e, 95 * e, 13 * e, 99 * e, 8 * e, 93 * e),
       r.closePath(),
       se(r, void 0, i[2], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(25 * e, 63 * e),
       r.bezierCurveTo(16 * e, 58 * e, 17 * e, 51 * e, 17 * e, 33 * e),
       r.bezierCurveTo(19 * e, 12 * e, 21 * e, 12 * e, 32 * e, 17 * e),
       r.bezierCurveTo(63 * e, 31 * e, 66 * e, 45 * e, 66 * e, 54 * e),
       se(r, i[1], i[2], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(91 * e, 53 * e),
       r.bezierCurveTo(91 * e, 40 * e, 98 * e, 33 * e, 121 * e, 20 * e),
       r.bezierCurveTo(137 * e, 12 * e, 137 * e, 16 * e, 139 * e, 27 * e),
       r.bezierCurveTo(141 * e, 49 * e, 140 * e, 57 * e, 134 * e, 64 * e),
       se(r, i[1], i[2], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(31 * e, 63 * e),
       r.bezierCurveTo(23 * e, 54 * e, 24 * e, 47 * e, 26 * e, 37 * e),
       r.bezierCurveTo(28 * e, 29 * e, 31 * e, 31 * e, 41 * e, 35 * e),
       r.bezierCurveTo(52 * e, 45 * e, 55 * e, 51 * e, 57 * e, 53 * e),
       r.bezierCurveTo(50 * e, 50 * e, 44 * e, 47 * e, 43 * e, 48 * e),
       r.bezierCurveTo(43 * e, 52 * e, 43 * e, 52 * e, 42 * e, 57 * e),
       r.bezierCurveTo(38 * e, 54 * e, 38 * e, 54 * e, 33 * e, 51 * e),
       r.bezierCurveTo(34 * e, 56 * e, 34 * e, 56 * e, 34 * e, 61 * e),
       r.closePath(),
       se(r, i[3]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(99 * e, 55 * e),
       r.bezierCurveTo(107 * e, 43 * e, 113 * e, 39 * e, 121 * e, 34 * e),
       r.bezierCurveTo(130 * e, 29 * e, 130 * e, 34 * e, 130 * e, 42 * e),
       r.bezierCurveTo(131 * e, 57 * e, 128 * e, 61 * e, 129 * e, 63 * e),
       r.bezierCurveTo(124 * e, 62 * e, 124 * e, 62 * e, 119 * e, 61 * e),
       r.bezierCurveTo(119 * e, 56 * e, 120 * e, 61 * e, 118 * e, 52 * e),
       r.bezierCurveTo(115 * e, 55 * e, 111 * e, 59 * e, 111 * e, 58 * e),
       r.bezierCurveTo(110 * e, 54 * e, 109 * e, 57 * e, 109 * e, 51 * e),
       r.closePath(),
       se(r, i[3]),
       t
   }
   function hr(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 161 * e,
       t.height = 190 * e,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(9 * e, 93 * e),
       r.bezierCurveTo(17 * e, 95 * e, 19 * e, 95 * e, 21 * e, 95 * e),
       r.bezierCurveTo(9 * e, 83 * e, 17 * e, 93 * e, 4 * e, 76 * e),
       r.bezierCurveTo(11 * e, 75 * e, 11 * e, 75 * e, 18 * e, 75 * e),
       r.bezierCurveTo(13 * e, 67 * e, 13 * e, 67 * e, 7 * e, 59 * e),
       r.bezierCurveTo(14 * e, 59 * e, 14 * e, 59 * e, 21 * e, 59 * e),
       r.bezierCurveTo(46 * e, 35 * e, 35 * e, 45 * e, 49 * e, 31 * e),
       r.bezierCurveTo(53 * e, 24 * e, 51 * e, 21 * e, 51 * e, 16 * e),
       r.bezierCurveTo(63 * e, 23 * e, 63 * e, 24 * e, 69 * e, 29 * e),
       r.bezierCurveTo(76 * e, 7 * e, 75 * e, 11 * e, 76 * e, 6 * e),
       r.bezierCurveTo(81 * e, 12 * e, 84 * e, 18 * e, 89 * e, 27 * e),
       r.bezierCurveTo(95 * e, 25 * e, 100 * e, 16 * e, 105 * e, 14 * e),
       r.bezierCurveTo(103 * e, 25 * e, 111 * e, 33 * e, 110 * e, 34 * e),
       r.bezierCurveTo(123 * e, 48 * e, 123 * e, 48 * e, 136 * e, 62 * e),
       r.bezierCurveTo(142 * e, 60 * e, 147 * e, 59 * e, 155 * e, 58 * e),
       r.bezierCurveTo(147 * e, 65 * e, 147 * e, 65 * e, 139 * e, 73 * e),
       r.bezierCurveTo(145 * e, 73 * e, 145 * e, 73 * e, 151 * e, 73 * e),
       r.bezierCurveTo(145 * e, 80 * e, 145 * e, 80 * e, 138 * e, 87 * e),
       r.bezierCurveTo(144 * e, 88 * e, 144 * e, 88 * e, 150 * e, 89 * e),
       r.bezierCurveTo(125 * e, 103 * e, 125 * e, 125 * e, 113 * e, 141 * e),
       r.bezierCurveTo(92 * e, 178 * e, 85 * e, 177 * e, 76 * e, 178 * e),
       r.bezierCurveTo(64 * e, 179 * e, 51 * e, 164 * e, 35 * e, 131 * e),
       r.bezierCurveTo(18 * e, 95 * e, 13 * e, 99 * e, 8 * e, 93 * e),
       r.closePath(),
       se(r, i, i, 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(25 * e, 63 * e),
       r.bezierCurveTo(16 * e, 58 * e, 17 * e, 51 * e, 17 * e, 33 * e),
       r.bezierCurveTo(19 * e, 12 * e, 21 * e, 12 * e, 32 * e, 17 * e),
       r.bezierCurveTo(63 * e, 31 * e, 66 * e, 45 * e, 66 * e, 54 * e),
       se(r, i, i, 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(91 * e, 53 * e),
       r.bezierCurveTo(91 * e, 40 * e, 98 * e, 33 * e, 121 * e, 20 * e),
       r.bezierCurveTo(137 * e, 12 * e, 137 * e, 16 * e, 139 * e, 27 * e),
       r.bezierCurveTo(141 * e, 49 * e, 140 * e, 57 * e, 134 * e, 64 * e),
       se(r, i, i, 4 * e),
       t
   }
   function Rr(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 147 * e,
       t.height = 172 * e,
       r.globalAlpha = .5,
       r.translate(0, 8 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(8 * e, 50 * e),
       r.bezierCurveTo(15 * e, 16 * e, 49 * e, 6 * e, 67 * e, 6 * e),
       r.bezierCurveTo(121 * e, 3 * e, 128 * e, 32 * e, 135 * e, 48 * e),
       r.bezierCurveTo(146 * e, 96 * e, 124 * e, 131 * e, 96 * e, 135 * e),
       r.bezierCurveTo(96 * e, 158 * e, 79 * e, 156 * e, 75 * e, 156 * e),
       r.bezierCurveTo(50 * e, 154 * e, 53 * e, 150 * e, 52 * e, 135 * e),
       r.bezierCurveTo(2 * e, 127 * e, 3 * e, 87 * e, 8 * e, 50 * e),
       r.closePath(),
       se(r, i[0]),
       r.translate(0, -8 * e),
       r.globalAlpha = 1,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(8 * e, 50 * e),
       r.bezierCurveTo(15 * e, 16 * e, 49 * e, 6 * e, 67 * e, 6 * e),
       r.bezierCurveTo(121 * e, 3 * e, 128 * e, 32 * e, 135 * e, 48 * e),
       r.bezierCurveTo(146 * e, 96 * e, 124 * e, 131 * e, 96 * e, 135 * e),
       r.bezierCurveTo(96 * e, 158 * e, 79 * e, 156 * e, 75 * e, 156 * e),
       r.bezierCurveTo(50 * e, 154 * e, 53 * e, 150 * e, 52 * e, 135 * e),
       r.bezierCurveTo(2 * e, 127 * e, 3 * e, 87 * e, 8 * e, 50 * e),
       r.closePath(),
       se(r, i[1], i[2], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(14 * e, 57 * e),
       r.bezierCurveTo(2 * e, 50 * e, 5 * e, 22 * e, 24 * e, 22 * e),
       r.bezierCurveTo(41 * e, 21 * e, 54 * e, 32 * e, 55 * e, 48 * e),
       se(r, i[1], i[2], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(93 * e, 47 * e),
       r.bezierCurveTo(94 * e, 24 * e, 116 * e, 21 * e, 120 * e, 20 * e),
       r.bezierCurveTo(144 * e, 17 * e, 146 * e, 52 * e, 133 * e, 58 * e),
       se(r, i[1], i[2], 4 * e),
       Ee(r, 51 * e, 91 * e, 9 * e),
       se(r, i[3]),
       Ee(r, 95 * e, 91 * e, 9 * e),
       se(r, i[3]),
       Ee(r, 91 * e, 89 * e, 4 * e),
       se(r, i[4]),
       Ee(r, 47 * e, 89 * e, 4 * e),
       se(r, i[4]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(54 * e, 133 * e),
       r.bezierCurveTo(56 * e, 108 * e, 64 * e, 99 * e, 73 * e, 98 * e),
       r.bezierCurveTo(86 * e, 97 * e, 91 * e, 119 * e, 93 * e, 133 * e),
       r.bezierCurveTo(94 * e, 155 * e, 90 * e, 150 * e, 74 * e, 155 * e),
       r.bezierCurveTo(50 * e, 152 * e, 55 * e, 145 * e, 54 * e, 134 * e),
       r.closePath(),
       se(r, i[5]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(65.25 * e, 135 * e),
       r.bezierCurveTo(75.25 * e, 128 * e, 83.25 * e, 133 * e, 83.25 * e, 138 * e),
       r.bezierCurveTo(88.25 * e, 148 * e, 61.25 * e, 149 * e, 64.25 * e, 137 * e),
       r.closePath(),
       se(r, i[6]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(74 * e, 145 * e),
       r.bezierCurveTo(74 * e, 148 * e, 74 * e, 148 * e, 74 * e, 151 * e),
       r.closePath(),
       se(r, void 0, i[6], 2 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(19 * e, 58 * e),
       r.bezierCurveTo(10 * e, 38 * e, 18 * e, 33 * e, 28 * e, 34 * e),
       r.bezierCurveTo(41 * e, 39 * e, 45 * e, 45 * e, 50 * e, 51 * e),
       r.closePath(),
       se(r, i[6]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(100 * e, 51 * e),
       r.bezierCurveTo(106 * e, 36 * e, 119 * e, 31 * e, 128 * e, 36 * e),
       r.bezierCurveTo(137 * e, 49 * e, 128 * e, 58 * e, 128 * e, 60 * e),
       r.closePath(),
       se(r, i[6]),
       t
   }
   function Ar(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 147 * e,
       t.height = 172 * e,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(8 * e, 50 * e),
       r.bezierCurveTo(15 * e, 16 * e, 49 * e, 6 * e, 67 * e, 6 * e),
       r.bezierCurveTo(121 * e, 3 * e, 128 * e, 32 * e, 135 * e, 48 * e),
       r.bezierCurveTo(146 * e, 96 * e, 124 * e, 131 * e, 96 * e, 135 * e),
       r.bezierCurveTo(96 * e, 158 * e, 79 * e, 156 * e, 75 * e, 156 * e),
       r.bezierCurveTo(50 * e, 154 * e, 53 * e, 150 * e, 52 * e, 135 * e),
       r.bezierCurveTo(2 * e, 127 * e, 3 * e, 87 * e, 8 * e, 50 * e),
       r.closePath(),
       se(r, i, i, 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(14 * e, 57 * e),
       r.bezierCurveTo(2 * e, 50 * e, 5 * e, 22 * e, 24 * e, 22 * e),
       r.bezierCurveTo(41 * e, 21 * e, 54 * e, 32 * e, 55 * e, 48 * e),
       se(r, i, i, 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(93 * e, 47 * e),
       r.bezierCurveTo(94 * e, 24 * e, 116 * e, 21 * e, 120 * e, 20 * e),
       r.bezierCurveTo(144 * e, 17 * e, 146 * e, 52 * e, 133 * e, 58 * e),
       se(r, i, i, 4 * e),
       t
   }
   function dr(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 271 * e,
       t.height = 366 * e,
       r.globalAlpha = .5,
       r.translate(0, 10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(133 * e, 99 * e),
       r.bezierCurveTo(186 * e, 123 * e, 199 * e, 152 * e, 209 * e, 169 * e),
       r.bezierCurveTo(228 * e, 205 * e, 224 * e, 245 * e, 190 * e, 276 * e),
       r.bezierCurveTo(161 * e, 296 * e, 99 * e, 292 * e, 79 * e, 274 * e),
       r.bezierCurveTo(49 * e, 253 * e, 47 * e, 214 * e, 50 * e, 197 * e),
       r.bezierCurveTo(61 * e, 143 * e, 102 * e, 113 * e, 131 * e, 99 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(73 * e, 270 * e),
       r.bezierCurveTo(79 * e, 280 * e, 77 * e, 280 * e, 78 * e, 287 * e),
       r.bezierCurveTo(78 * e, 290 * e, 83 * e, 291 * e, 82 * e, 299 * e),
       r.bezierCurveTo(81 * e, 301 * e, 87 * e, 301 * e, 92 * e, 314 * e),
       r.bezierCurveTo(94 * e, 319 * e, 100 * e, 321 * e, 107 * e, 320 * e),
       r.bezierCurveTo(111 * e, 323 * e, 114 * e, 324 * e, 119 * e, 320 * e),
       r.bezierCurveTo(137 * e, 321 * e, 146 * e, 323 * e, 139 * e, 320 * e),
       r.bezierCurveTo(141 * e, 324 * e, 150 * e, 324 * e, 153 * e, 320 * e),
       r.bezierCurveTo(168 * e, 319 * e, 171 * e, 316 * e, 173 * e, 307 * e),
       r.bezierCurveTo(180 * e, 305 * e, 180 * e, 301 * e, 178 * e, 296 * e),
       r.bezierCurveTo(183 * e, 296 * e, 185 * e, 289 * e, 188 * e, 279 * e),
       r.bezierCurveTo(171 * e, 286 * e, 149 * e, 290 * e, 132 * e, 289 * e),
       r.bezierCurveTo(101 * e, 290 * e, 86 * e, 280 * e, 74 * e, 271 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(76 * e, 252 * e),
       r.bezierCurveTo(85 * e, 294 * e, 96 * e, 314 * e, 103 * e, 314 * e),
       r.bezierCurveTo(106 * e, 316 * e, 151 * e, 314 * e, 156 * e, 314 * e),
       r.bezierCurveTo(169 * e, 317 * e, 182 * e, 285 * e, 191 * e, 256 * e),
       r.bezierCurveTo(134.5 * e, 254 * e, 134.5 * e, 254 * e, 78 * e, 252 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(84 * e, 257 * e),
       r.bezierCurveTo(122 * e, 273 * e, 146 * e, 268 * e, 179 * e, 261 * e),
       r.bezierCurveTo(190 * e, 258 * e, 187 * e, 266 * e, 178 * e, 272 * e),
       r.bezierCurveTo(160 * e, 284 * e, 123 * e, 282 * e, 100 * e, 277 * e),
       r.bezierCurveTo(73 * e, 260 * e, 79 * e, 257 * e, 84 * e, 257 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(125 * e, 65 * e),
       r.bezierCurveTo(133 * e, 45 * e, 136 * e, 42 * e, 141 * e, 55 * e),
       r.bezierCurveTo(151 * e, 96 * e, 164 * e, 117 * e, 175 * e, 134 * e),
       r.bezierCurveTo(203 * e, 181 * e, 207 * e, 182 * e, 208 * e, 215 * e),
       r.bezierCurveTo(206 * e, 240 * e, 205 * e, 246 * e, 184 * e, 258 * e),
       r.bezierCurveTo(161 * e, 267 * e, 131 * e, 272 * e, 86 * e, 258 * e),
       r.bezierCurveTo(67 * e, 252 * e, 68 * e, 239 * e, 64 * e, 216 * e),
       r.bezierCurveTo(62 * e, 194 * e, 72 * e, 169 * e, 92 * e, 142 * e),
       r.bezierCurveTo(106 * e, 121 * e, 114 * e, 101 * e, 125 * e, 65 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(115 * e, 37 * e),
       r.bezierCurveTo(116 * e, 28 * e, 119 * e, 27 * e, 126 * e, 37 * e),
       r.bezierCurveTo(134 * e, 48 * e, 134 * e, 49 * e, 132 * e, 59 * e),
       r.bezierCurveTo(131 * e, 67 * e, 127 * e, 65 * e, 120 * e, 56 * e),
       r.bezierCurveTo(114 * e, 49 * e, 113 * e, 43 * e, 115 * e, 38 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(146 * e, 34 * e),
       r.bezierCurveTo(152 * e, 28 * e, 155 * e, 27 * e, 157 * e, 39 * e),
       r.bezierCurveTo(157 * e, 45 * e, 157 * e, 49 * e, 150 * e, 56 * e),
       r.bezierCurveTo(141 * e, 66 * e, 138 * e, 66 * e, 138 * e, 57 * e),
       r.bezierCurveTo(137 * e, 50 * e, 137 * e, 47 * e, 141 * e, 42 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(143 * e, 69 * e),
       r.bezierCurveTo(148 * e, 56 * e, 156 * e, 50 * e, 158 * e, 58 * e),
       r.bezierCurveTo(159 * e, 64 * e, 160 * e, 67 * e, 153 * e, 77 * e),
       r.bezierCurveTo(148 * e, 83 * e, 145 * e, 84 * e, 143 * e, 77 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(149 * e, 92 * e),
       r.bezierCurveTo(149 * e, 89 * e, 151 * e, 84 * e, 156 * e, 79 * e),
       r.bezierCurveTo(161 * e, 73 * e, 163 * e, 78 * e, 162 * e, 86 * e),
       r.bezierCurveTo(161 * e, 91 * e, 155 * e, 99 * e, 152 * e, 98 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(111 * e, 61 * e),
       r.bezierCurveTo(114 * e, 51 * e, 117 * e, 51 * e, 124 * e, 64 * e),
       r.bezierCurveTo(128 * e, 68 * e, 128 * e, 76 * e, 126 * e, 79 * e),
       r.bezierCurveTo(123 * e, 84 * e, 122 * e, 82 * e, 115 * e, 74 * e),
       r.bezierCurveTo(112 * e, 67 * e, 115 * e, 74 * e, 115 * e, 74 * e),
       r.bezierCurveTo(111 * e, 68 * e, 111 * e, 66 * e, 111 * e, 62 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(107 * e, 81 * e),
       r.bezierCurveTo(108 * e, 74 * e, 112 * e, 73 * e, 118 * e, 84 * e),
       r.bezierCurveTo(122 * e, 88 * e, 122 * e, 93 * e, 121 * e, 98 * e),
       r.bezierCurveTo(114 * e, 98 * e, 113 * e, 98 * e, 109 * e, 90 * e),
       r.bezierCurveTo(107 * e, 87 * e, 106 * e, 85 * e, 107 * e, 82 * e),
       r.closePath(),
       se(r, i[0]),
       r.globalAlpha = 1,
       r.translate(0, -10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(133 * e, 99 * e),
       r.bezierCurveTo(186 * e, 123 * e, 199 * e, 152 * e, 209 * e, 169 * e),
       r.bezierCurveTo(228 * e, 205 * e, 224 * e, 245 * e, 190 * e, 276 * e),
       r.bezierCurveTo(161 * e, 296 * e, 99 * e, 292 * e, 79 * e, 274 * e),
       r.bezierCurveTo(49 * e, 253 * e, 47 * e, 214 * e, 50 * e, 197 * e),
       r.bezierCurveTo(61 * e, 143 * e, 102 * e, 113 * e, 131 * e, 99 * e),
       r.closePath(),
       se(r, i[3], i[3], 8 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(73 * e, 270 * e),
       r.bezierCurveTo(79 * e, 280 * e, 77 * e, 280 * e, 78 * e, 287 * e),
       r.bezierCurveTo(78 * e, 290 * e, 83 * e, 291 * e, 82 * e, 299 * e),
       r.bezierCurveTo(81 * e, 301 * e, 87 * e, 301 * e, 92 * e, 314 * e),
       r.bezierCurveTo(94 * e, 319 * e, 100 * e, 321 * e, 107 * e, 320 * e),
       r.bezierCurveTo(111 * e, 323 * e, 114 * e, 324 * e, 119 * e, 320 * e),
       r.bezierCurveTo(137 * e, 321 * e, 146 * e, 323 * e, 139 * e, 320 * e),
       r.bezierCurveTo(141 * e, 324 * e, 150 * e, 324 * e, 153 * e, 320 * e),
       r.bezierCurveTo(168 * e, 319 * e, 171 * e, 316 * e, 173 * e, 307 * e),
       r.bezierCurveTo(180 * e, 305 * e, 180 * e, 301 * e, 178 * e, 296 * e),
       r.bezierCurveTo(183 * e, 296 * e, 185 * e, 289 * e, 188 * e, 279 * e),
       r.bezierCurveTo(171 * e, 286 * e, 149 * e, 290 * e, 132 * e, 289 * e),
       r.bezierCurveTo(101 * e, 290 * e, 86 * e, 280 * e, 74 * e, 271 * e),
       r.closePath(),
       se(r, i[3], i[3], 8 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(76 * e, 252 * e),
       r.bezierCurveTo(85 * e, 294 * e, 96 * e, 314 * e, 103 * e, 314 * e),
       r.bezierCurveTo(106 * e, 316 * e, 151 * e, 314 * e, 156 * e, 314 * e),
       r.bezierCurveTo(169 * e, 317 * e, 182 * e, 285 * e, 191 * e, 256 * e),
       r.bezierCurveTo(134.5 * e, 254 * e, 134.5 * e, 254 * e, 78 * e, 252 * e),
       r.closePath(),
       se(r, i[3], i[3], 8 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(84 * e, 257 * e),
       r.bezierCurveTo(122 * e, 273 * e, 146 * e, 268 * e, 179 * e, 261 * e),
       r.bezierCurveTo(190 * e, 258 * e, 187 * e, 266 * e, 178 * e, 272 * e),
       r.bezierCurveTo(160 * e, 284 * e, 123 * e, 282 * e, 100 * e, 277 * e),
       r.bezierCurveTo(73 * e, 260 * e, 79 * e, 257 * e, 84 * e, 257 * e),
       r.closePath(),
       se(r, i[3], i[3], 8 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(125 * e, 65 * e),
       r.bezierCurveTo(133 * e, 45 * e, 136 * e, 42 * e, 141 * e, 55 * e),
       r.bezierCurveTo(151 * e, 96 * e, 164 * e, 117 * e, 175 * e, 134 * e),
       r.bezierCurveTo(203 * e, 181 * e, 207 * e, 182 * e, 208 * e, 215 * e),
       r.bezierCurveTo(206 * e, 240 * e, 205 * e, 246 * e, 184 * e, 258 * e),
       r.bezierCurveTo(161 * e, 267 * e, 131 * e, 272 * e, 86 * e, 258 * e),
       r.bezierCurveTo(67 * e, 252 * e, 68 * e, 239 * e, 64 * e, 216 * e),
       r.bezierCurveTo(62 * e, 194 * e, 72 * e, 169 * e, 92 * e, 142 * e),
       r.bezierCurveTo(106 * e, 121 * e, 114 * e, 101 * e, 125 * e, 65 * e),
       r.closePath(),
       se(r, i[3], i[3], 8 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(115 * e, 37 * e),
       r.bezierCurveTo(116 * e, 28 * e, 119 * e, 27 * e, 126 * e, 37 * e),
       r.bezierCurveTo(134 * e, 48 * e, 134 * e, 49 * e, 132 * e, 59 * e),
       r.bezierCurveTo(131 * e, 67 * e, 127 * e, 65 * e, 120 * e, 56 * e),
       r.bezierCurveTo(114 * e, 49 * e, 113 * e, 43 * e, 115 * e, 38 * e),
       r.closePath(),
       se(r, i[3], i[3], 8 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(146 * e, 34 * e),
       r.bezierCurveTo(152 * e, 28 * e, 155 * e, 27 * e, 157 * e, 39 * e),
       r.bezierCurveTo(157 * e, 45 * e, 157 * e, 49 * e, 150 * e, 56 * e),
       r.bezierCurveTo(141 * e, 66 * e, 138 * e, 66 * e, 138 * e, 57 * e),
       r.bezierCurveTo(137 * e, 50 * e, 137 * e, 47 * e, 141 * e, 42 * e),
       r.closePath(),
       se(r, i[3], i[3], 8 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(143 * e, 69 * e),
       r.bezierCurveTo(148 * e, 56 * e, 156 * e, 50 * e, 158 * e, 58 * e),
       r.bezierCurveTo(159 * e, 64 * e, 160 * e, 67 * e, 153 * e, 77 * e),
       r.bezierCurveTo(148 * e, 83 * e, 145 * e, 84 * e, 143 * e, 77 * e),
       r.closePath(),
       se(r, i[3], i[3], 8 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(149 * e, 92 * e),
       r.bezierCurveTo(149 * e, 89 * e, 151 * e, 84 * e, 156 * e, 79 * e),
       r.bezierCurveTo(161 * e, 73 * e, 163 * e, 78 * e, 162 * e, 86 * e),
       r.bezierCurveTo(161 * e, 91 * e, 155 * e, 99 * e, 152 * e, 98 * e),
       r.closePath(),
       se(r, i[3], i[3], 8 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(111 * e, 61 * e),
       r.bezierCurveTo(114 * e, 51 * e, 117 * e, 51 * e, 124 * e, 64 * e),
       r.bezierCurveTo(128 * e, 68 * e, 128 * e, 76 * e, 126 * e, 79 * e),
       r.bezierCurveTo(123 * e, 84 * e, 122 * e, 82 * e, 115 * e, 74 * e),
       r.bezierCurveTo(112 * e, 67 * e, 115 * e, 74 * e, 115 * e, 74 * e),
       r.bezierCurveTo(111 * e, 68 * e, 111 * e, 66 * e, 111 * e, 62 * e),
       r.closePath(),
       se(r, i[3], i[3], 8 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(107 * e, 81 * e),
       r.bezierCurveTo(108 * e, 74 * e, 112 * e, 73 * e, 118 * e, 84 * e),
       r.bezierCurveTo(122 * e, 88 * e, 122 * e, 93 * e, 121 * e, 98 * e),
       r.bezierCurveTo(114 * e, 98 * e, 113 * e, 98 * e, 109 * e, 90 * e),
       r.bezierCurveTo(107 * e, 87 * e, 106 * e, 85 * e, 107 * e, 82 * e),
       r.closePath(),
       se(r, i[3], i[3], 8 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(133 * e, 99 * e),
       r.bezierCurveTo(186 * e, 123 * e, 199 * e, 152 * e, 209 * e, 169 * e),
       r.bezierCurveTo(228 * e, 205 * e, 224 * e, 245 * e, 190 * e, 276 * e),
       r.bezierCurveTo(161 * e, 296 * e, 99 * e, 292 * e, 79 * e, 274 * e),
       r.bezierCurveTo(49 * e, 253 * e, 47 * e, 214 * e, 50 * e, 197 * e),
       r.bezierCurveTo(61 * e, 143 * e, 102 * e, 113 * e, 131 * e, 99 * e),
       r.closePath(),
       se(r, i[1]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(73 * e, 270 * e),
       r.bezierCurveTo(79 * e, 280 * e, 77 * e, 280 * e, 78 * e, 287 * e),
       r.bezierCurveTo(78 * e, 290 * e, 83 * e, 291 * e, 82 * e, 299 * e),
       r.bezierCurveTo(81 * e, 301 * e, 87 * e, 301 * e, 92 * e, 314 * e),
       r.bezierCurveTo(94 * e, 319 * e, 100 * e, 321 * e, 107 * e, 320 * e),
       r.bezierCurveTo(111 * e, 323 * e, 114 * e, 324 * e, 119 * e, 320 * e),
       r.bezierCurveTo(137 * e, 321 * e, 146 * e, 323 * e, 139 * e, 320 * e),
       r.bezierCurveTo(141 * e, 324 * e, 150 * e, 324 * e, 153 * e, 320 * e),
       r.bezierCurveTo(168 * e, 319 * e, 171 * e, 316 * e, 173 * e, 307 * e),
       r.bezierCurveTo(180 * e, 305 * e, 180 * e, 301 * e, 178 * e, 296 * e),
       r.bezierCurveTo(183 * e, 296 * e, 185 * e, 289 * e, 188 * e, 279 * e),
       r.bezierCurveTo(171 * e, 286 * e, 149 * e, 290 * e, 132 * e, 289 * e),
       r.bezierCurveTo(101 * e, 290 * e, 86 * e, 280 * e, 74 * e, 271 * e),
       r.closePath(),
       se(r, i[5]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(76 * e, 252 * e),
       r.bezierCurveTo(85 * e, 294 * e, 96 * e, 314 * e, 103 * e, 314 * e),
       r.bezierCurveTo(106 * e, 316 * e, 151 * e, 314 * e, 156 * e, 314 * e),
       r.bezierCurveTo(169 * e, 317 * e, 182 * e, 285 * e, 191 * e, 256 * e),
       r.bezierCurveTo(134.5 * e, 254 * e, 134.5 * e, 254 * e, 78 * e, 252 * e),
       r.closePath(),
       se(r, i[2]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(84 * e, 257 * e),
       r.bezierCurveTo(122 * e, 273 * e, 146 * e, 268 * e, 179 * e, 261 * e),
       r.bezierCurveTo(190 * e, 258 * e, 187 * e, 266 * e, 178 * e, 272 * e),
       r.bezierCurveTo(160 * e, 284 * e, 123 * e, 282 * e, 100 * e, 277 * e),
       r.bezierCurveTo(73 * e, 260 * e, 79 * e, 257 * e, 84 * e, 257 * e),
       r.closePath(),
       se(r, i[1]),
       Ee(r, 102 * e, 269 * e, 11 * e),
       se(r, i[3]),
       Ee(r, 98 * e, 266 * e, 5 * e),
       se(r, i[6]),
       Ee(r, 168 * e, 269 * e, 11 * e),
       se(r, i[3]),
       Ee(r, 164 * e, 266 * e, 5 * e),
       se(r, i[6]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(125 * e, 65 * e),
       r.bezierCurveTo(133 * e, 45 * e, 136 * e, 42 * e, 141 * e, 55 * e),
       r.bezierCurveTo(151 * e, 96 * e, 164 * e, 117 * e, 175 * e, 134 * e),
       r.bezierCurveTo(203 * e, 181 * e, 207 * e, 182 * e, 208 * e, 215 * e),
       r.bezierCurveTo(206 * e, 240 * e, 205 * e, 246 * e, 184 * e, 258 * e),
       r.bezierCurveTo(161 * e, 267 * e, 131 * e, 272 * e, 86 * e, 258 * e),
       r.bezierCurveTo(67 * e, 252 * e, 68 * e, 239 * e, 64 * e, 216 * e),
       r.bezierCurveTo(62 * e, 194 * e, 72 * e, 169 * e, 92 * e, 142 * e),
       r.bezierCurveTo(106 * e, 121 * e, 114 * e, 101 * e, 125 * e, 65 * e),
       r.closePath(),
       se(r, i[2]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(115 * e, 235 * e),
       r.bezierCurveTo(118 * e, 258 * e, 137 * e, 268 * e, 148 * e, 246 * e),
       r.bezierCurveTo(156 * e, 228 * e, 152 * e, 169 * e, 150 * e, 140 * e),
       r.bezierCurveTo(147 * e, 87 * e, 143 * e, 69 * e, 142 * e, 60 * e),
       r.bezierCurveTo(136 * e, 44 * e, 132 * e, 43 * e, 127 * e, 62 * e),
       r.bezierCurveTo(119 * e, 116 * e, 119 * e, 140 * e, 116 * e, 166 * e),
       r.bezierCurveTo(113 * e, 202 * e, 113 * e, 223 * e, 115 * e, 233 * e),
       r.closePath(),
       se(r, i[4]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(132 * e, 219 * e),
       r.bezierCurveTo(140 * e, 229 * e, 142 * e, 231 * e, 145 * e, 237 * e),
       r.bezierCurveTo(145 * e, 245 * e, 139 * e, 249 * e, 133 * e, 249 * e),
       r.bezierCurveTo(123 * e, 248 * e, 123 * e, 243 * e, 121 * e, 239 * e),
       r.bezierCurveTo(126 * e, 227 * e, 129 * e, 223 * e, 132 * e, 219 * e),
       r.closePath(),
       se(r, i[8]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(133 * e, 179 * e),
       r.bezierCurveTo(140 * e, 188.5 * e, 140 * e, 188.5 * e, 147 * e, 198 * e),
       r.bezierCurveTo(148 * e, 209 * e, 142 * e, 214 * e, 133 * e, 214 * e),
       r.bezierCurveTo(121 * e, 211 * e, 121 * e, 207 * e, 120 * e, 200 * e),
       r.bezierCurveTo(126.5 * e, 189.5 * e, 126.5 * e, 189.5 * e, 133 * e, 179 * e),
       r.closePath(),
       se(r, i[8]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(133 * e, 143 * e),
       r.bezierCurveTo(139 * e, 151.5 * e, 139 * e, 151.5 * e, 145 * e, 160 * e),
       r.bezierCurveTo(143 * e, 167 * e, 140 * e, 170 * e, 134 * e, 170 * e),
       r.bezierCurveTo(128 * e, 169 * e, 124 * e, 167 * e, 123 * e, 161 * e),
       r.bezierCurveTo(128 * e, 152 * e, 128 * e, 152 * e, 133 * e, 143 * e),
       r.closePath(),
       se(r, i[8]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(133 * e, 115 * e),
       r.bezierCurveTo(137.5 * e, 121.5 * e, 137.5 * e, 121.5 * e, 142 * e, 128 * e),
       r.bezierCurveTo(141 * e, 133 * e, 138 * e, 135 * e, 133 * e, 135 * e),
       r.bezierCurveTo(129 * e, 135 * e, 125 * e, 132 * e, 125 * e, 129 * e),
       r.bezierCurveTo(129 * e, 122 * e, 129 * e, 122 * e, 133 * e, 115 * e),
       r.closePath(),
       se(r, i[8]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(133 * e, 94 * e),
       r.bezierCurveTo(136.5 * e, 98.5 * e, 136.5 * e, 98.5 * e, 140 * e, 103 * e),
       r.bezierCurveTo(139 * e, 109 * e, 137 * e, 109 * e, 133 * e, 110 * e),
       r.bezierCurveTo(127 * e, 108 * e, 129 * e, 107 * e, 127 * e, 105 * e),
       r.bezierCurveTo(130 * e, 99.5 * e, 130 * e, 99.5 * e, 133 * e, 94 * e),
       r.closePath(),
       se(r, i[8]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(130 * e, 279 * e),
       r.bezierCurveTo(136.5 * e, 287.5 * e, 136.5 * e, 287.5 * e, 143 * e, 296 * e),
       r.bezierCurveTo(143 * e, 302 * e, 139 * e, 309 * e, 131 * e, 308 * e),
       r.bezierCurveTo(123 * e, 306 * e, 121 * e, 303 * e, 120 * e, 297 * e),
       r.bezierCurveTo(125.5 * e, 288.5 * e, 125.5 * e, 288.5 * e, 131 * e, 280 * e),
       r.closePath(),
       se(r, i[8]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(147 * e, 303 * e),
       r.bezierCurveTo(151 * e, 311 * e, 151 * e, 319 * e, 147 * e, 321 * e),
       r.bezierCurveTo(138 * e, 320 * e, 145 * e, 308 * e, 147 * e, 303 * e),
       r.closePath(),
       se(r, i[8]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(115 * e, 303 * e),
       r.bezierCurveTo(115 * e, 312 * e, 118 * e, 319 * e, 115 * e, 319 * e),
       r.bezierCurveTo(112 * e, 324 * e, 109 * e, 318 * e, 109 * e, 314 * e),
       r.bezierCurveTo(109 * e, 308 * e, 112 * e, 303 * e, 115 * e, 303 * e),
       r.closePath(),
       se(r, i[8]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(89 * e, 280 * e),
       r.bezierCurveTo(83 * e, 279 * e, 80 * e, 281 * e, 81 * e, 286 * e),
       r.bezierCurveTo(83 * e, 290 * e, 84 * e, 290 * e, 87 * e, 286 * e),
       r.closePath(),
       se(r, i[8]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(94 * e, 290 * e),
       r.bezierCurveTo(93 * e, 294 * e, 90 * e, 303 * e, 86 * e, 298 * e),
       r.bezierCurveTo(84 * e, 295 * e, 84 * e, 291 * e, 89 * e, 291 * e),
       r.closePath(),
       se(r, i[8]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(163 * e, 295 * e),
       r.bezierCurveTo(175 * e, 294 * e, 176 * e, 296 * e, 175 * e, 301 * e),
       r.bezierCurveTo(174 * e, 305 * e, 171 * e, 305 * e, 166 * e, 300 * e),
       r.closePath(),
       se(r, i[8]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(172 * e, 286 * e),
       r.bezierCurveTo(180 * e, 285 * e, 181 * e, 285 * e, 180 * e, 291 * e),
       r.bezierCurveTo(176 * e, 295 * e, 174 * e, 294 * e, 172 * e, 286 * e),
       r.closePath(),
       se(r, i[8]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(115 * e, 37 * e),
       r.bezierCurveTo(116 * e, 28 * e, 119 * e, 27 * e, 126 * e, 37 * e),
       r.bezierCurveTo(134 * e, 48 * e, 134 * e, 49 * e, 132 * e, 59 * e),
       r.bezierCurveTo(131 * e, 67 * e, 127 * e, 65 * e, 120 * e, 56 * e),
       r.bezierCurveTo(114 * e, 49 * e, 113 * e, 43 * e, 115 * e, 38 * e),
       r.closePath(),
       se(r, i[7]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(146 * e, 34 * e),
       r.bezierCurveTo(152 * e, 28 * e, 155 * e, 27 * e, 157 * e, 39 * e),
       r.bezierCurveTo(157 * e, 45 * e, 157 * e, 49 * e, 150 * e, 56 * e),
       r.bezierCurveTo(141 * e, 66 * e, 138 * e, 66 * e, 138 * e, 57 * e),
       r.bezierCurveTo(137 * e, 50 * e, 137 * e, 47 * e, 141 * e, 42 * e),
       r.closePath(),
       se(r, i[7]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(143 * e, 69 * e),
       r.bezierCurveTo(148 * e, 56 * e, 156 * e, 50 * e, 158 * e, 58 * e),
       r.bezierCurveTo(159 * e, 64 * e, 160 * e, 67 * e, 153 * e, 77 * e),
       r.bezierCurveTo(148 * e, 83 * e, 145 * e, 84 * e, 143 * e, 77 * e),
       r.closePath(),
       se(r, i[7]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(149 * e, 92 * e),
       r.bezierCurveTo(149 * e, 89 * e, 151 * e, 84 * e, 156 * e, 79 * e),
       r.bezierCurveTo(161 * e, 73 * e, 163 * e, 78 * e, 162 * e, 86 * e),
       r.bezierCurveTo(161 * e, 91 * e, 155 * e, 99 * e, 152 * e, 98 * e),
       r.closePath(),
       se(r, i[7]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(111 * e, 61 * e),
       r.bezierCurveTo(114 * e, 51 * e, 117 * e, 51 * e, 124 * e, 64 * e),
       r.bezierCurveTo(128 * e, 68 * e, 128 * e, 76 * e, 126 * e, 79 * e),
       r.bezierCurveTo(123 * e, 84 * e, 122 * e, 82 * e, 115 * e, 74 * e),
       r.bezierCurveTo(112 * e, 67 * e, 115 * e, 74 * e, 115 * e, 74 * e),
       r.bezierCurveTo(111 * e, 68 * e, 111 * e, 66 * e, 111 * e, 62 * e),
       r.closePath(),
       se(r, i[7]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(107 * e, 81 * e),
       r.bezierCurveTo(108 * e, 74 * e, 112 * e, 73 * e, 118 * e, 84 * e),
       r.bezierCurveTo(122 * e, 88 * e, 122 * e, 93 * e, 121 * e, 98 * e),
       r.bezierCurveTo(114 * e, 98 * e, 113 * e, 98 * e, 109 * e, 90 * e),
       r.bezierCurveTo(107 * e, 87 * e, 106 * e, 85 * e, 107 * e, 82 * e),
       r.closePath(),
       se(r, i[7]),
       t
   }
   function Sr(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 271 * e,
       t.height = 366 * e,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(133 * e, 99 * e),
       r.bezierCurveTo(186 * e, 123 * e, 199 * e, 152 * e, 209 * e, 169 * e),
       r.bezierCurveTo(228 * e, 205 * e, 224 * e, 245 * e, 190 * e, 276 * e),
       r.bezierCurveTo(161 * e, 296 * e, 99 * e, 292 * e, 79 * e, 274 * e),
       r.bezierCurveTo(49 * e, 253 * e, 47 * e, 214 * e, 50 * e, 197 * e),
       r.bezierCurveTo(61 * e, 143 * e, 102 * e, 113 * e, 131 * e, 99 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(73 * e, 270 * e),
       r.bezierCurveTo(79 * e, 280 * e, 77 * e, 280 * e, 78 * e, 287 * e),
       r.bezierCurveTo(78 * e, 290 * e, 83 * e, 291 * e, 82 * e, 299 * e),
       r.bezierCurveTo(81 * e, 301 * e, 87 * e, 301 * e, 92 * e, 314 * e),
       r.bezierCurveTo(94 * e, 319 * e, 100 * e, 321 * e, 107 * e, 320 * e),
       r.bezierCurveTo(111 * e, 323 * e, 114 * e, 324 * e, 119 * e, 320 * e),
       r.bezierCurveTo(137 * e, 321 * e, 146 * e, 323 * e, 139 * e, 320 * e),
       r.bezierCurveTo(141 * e, 324 * e, 150 * e, 324 * e, 153 * e, 320 * e),
       r.bezierCurveTo(168 * e, 319 * e, 171 * e, 316 * e, 173 * e, 307 * e),
       r.bezierCurveTo(180 * e, 305 * e, 180 * e, 301 * e, 178 * e, 296 * e),
       r.bezierCurveTo(183 * e, 296 * e, 185 * e, 289 * e, 188 * e, 279 * e),
       r.bezierCurveTo(171 * e, 286 * e, 149 * e, 290 * e, 132 * e, 289 * e),
       r.bezierCurveTo(101 * e, 290 * e, 86 * e, 280 * e, 74 * e, 271 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(76 * e, 252 * e),
       r.bezierCurveTo(85 * e, 294 * e, 96 * e, 314 * e, 103 * e, 314 * e),
       r.bezierCurveTo(106 * e, 316 * e, 151 * e, 314 * e, 156 * e, 314 * e),
       r.bezierCurveTo(169 * e, 317 * e, 182 * e, 285 * e, 191 * e, 256 * e),
       r.bezierCurveTo(134.5 * e, 254 * e, 134.5 * e, 254 * e, 78 * e, 252 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(84 * e, 257 * e),
       r.bezierCurveTo(122 * e, 273 * e, 146 * e, 268 * e, 179 * e, 261 * e),
       r.bezierCurveTo(190 * e, 258 * e, 187 * e, 266 * e, 178 * e, 272 * e),
       r.bezierCurveTo(160 * e, 284 * e, 123 * e, 282 * e, 100 * e, 277 * e),
       r.bezierCurveTo(73 * e, 260 * e, 79 * e, 257 * e, 84 * e, 257 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(125 * e, 65 * e),
       r.bezierCurveTo(133 * e, 45 * e, 136 * e, 42 * e, 141 * e, 55 * e),
       r.bezierCurveTo(151 * e, 96 * e, 164 * e, 117 * e, 175 * e, 134 * e),
       r.bezierCurveTo(203 * e, 181 * e, 207 * e, 182 * e, 208 * e, 215 * e),
       r.bezierCurveTo(206 * e, 240 * e, 205 * e, 246 * e, 184 * e, 258 * e),
       r.bezierCurveTo(161 * e, 267 * e, 131 * e, 272 * e, 86 * e, 258 * e),
       r.bezierCurveTo(67 * e, 252 * e, 68 * e, 239 * e, 64 * e, 216 * e),
       r.bezierCurveTo(62 * e, 194 * e, 72 * e, 169 * e, 92 * e, 142 * e),
       r.bezierCurveTo(106 * e, 121 * e, 114 * e, 101 * e, 125 * e, 65 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(115 * e, 37 * e),
       r.bezierCurveTo(116 * e, 28 * e, 119 * e, 27 * e, 126 * e, 37 * e),
       r.bezierCurveTo(134 * e, 48 * e, 134 * e, 49 * e, 132 * e, 59 * e),
       r.bezierCurveTo(131 * e, 67 * e, 127 * e, 65 * e, 120 * e, 56 * e),
       r.bezierCurveTo(114 * e, 49 * e, 113 * e, 43 * e, 115 * e, 38 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(146 * e, 34 * e),
       r.bezierCurveTo(152 * e, 28 * e, 155 * e, 27 * e, 157 * e, 39 * e),
       r.bezierCurveTo(157 * e, 45 * e, 157 * e, 49 * e, 150 * e, 56 * e),
       r.bezierCurveTo(141 * e, 66 * e, 138 * e, 66 * e, 138 * e, 57 * e),
       r.bezierCurveTo(137 * e, 50 * e, 137 * e, 47 * e, 141 * e, 42 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(143 * e, 69 * e),
       r.bezierCurveTo(148 * e, 56 * e, 156 * e, 50 * e, 158 * e, 58 * e),
       r.bezierCurveTo(159 * e, 64 * e, 160 * e, 67 * e, 153 * e, 77 * e),
       r.bezierCurveTo(148 * e, 83 * e, 145 * e, 84 * e, 143 * e, 77 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(149 * e, 92 * e),
       r.bezierCurveTo(149 * e, 89 * e, 151 * e, 84 * e, 156 * e, 79 * e),
       r.bezierCurveTo(161 * e, 73 * e, 163 * e, 78 * e, 162 * e, 86 * e),
       r.bezierCurveTo(161 * e, 91 * e, 155 * e, 99 * e, 152 * e, 98 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(111 * e, 61 * e),
       r.bezierCurveTo(114 * e, 51 * e, 117 * e, 51 * e, 124 * e, 64 * e),
       r.bezierCurveTo(128 * e, 68 * e, 128 * e, 76 * e, 126 * e, 79 * e),
       r.bezierCurveTo(123 * e, 84 * e, 122 * e, 82 * e, 115 * e, 74 * e),
       r.bezierCurveTo(112 * e, 67 * e, 115 * e, 74 * e, 115 * e, 74 * e),
       r.bezierCurveTo(111 * e, 68 * e, 111 * e, 66 * e, 111 * e, 62 * e),
       r.closePath(),
       se(r, i[0]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(107 * e, 81 * e),
       r.bezierCurveTo(108 * e, 74 * e, 112 * e, 73 * e, 118 * e, 84 * e),
       r.bezierCurveTo(122 * e, 88 * e, 122 * e, 93 * e, 121 * e, 98 * e),
       r.bezierCurveTo(114 * e, 98 * e, 113 * e, 98 * e, 109 * e, 90 * e),
       r.bezierCurveTo(107 * e, 87 * e, 106 * e, 85 * e, 107 * e, 82 * e),
       r.closePath(),
       se(r, i[0]),
       t
   }
   function lr(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 85 * e,
       t.height = 145 * e,
       r.translate(-20 * e, -95 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(50 * e, 105 * e),
       r.bezierCurveTo(52 * e, 119 * e, 64 * e, 137 * e, 71 * e, 146 * e),
       r.bezierCurveTo(71 * e, 161 * e, 74 * e, 169 * e, 79 * e, 179 * e),
       r.bezierCurveTo(68 * e, 192 * e, 70 * e, 204 * e, 69 * e, 216 * e),
       r.bezierCurveTo(50 * e, 189.5 * e, 50 * e, 189.5 * e, 31 * e, 163 * e),
       r.closePath(),
       se(r, i[1]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(44 * e, 106 * e),
       r.bezierCurveTo(49 * e, 90 * e, 58 * e, 104 * e, 51 * e, 121 * e),
       r.bezierCurveTo(45 * e, 143 * e, 41 * e, 151 * e, 37 * e, 162 * e),
       r.bezierCurveTo(48 * e, 180 * e, 58 * e, 188 * e, 76 * e, 205 * e),
       r.bezierCurveTo(104 * e, 209 * e, 105 * e, 229 * e, 92 * e, 235 * e),
       r.bezierCurveTo(76 * e, 239 * e, 75 * e, 232 * e, 56 * e, 213 * e),
       r.bezierCurveTo(31 * e, 187 * e, 28 * e, 176 * e, 23 * e, 162 * e),
       r.bezierCurveTo(38 * e, 131 * e, 40 * e, 120 * e, 44 * e, 106 * e),
       r.closePath(),
       se(r, i[2], i[3], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(30 * e, 159 * e),
       r.bezierCurveTo(46 * e, 157 * e, 59 * e, 152 * e, 68 * e, 148 * e),
       r.bezierCurveTo(63 * e, 155 * e, 52 * e, 160 * e, 44 * e, 164 * e),
       r.bezierCurveTo(59 * e, 169 * e, 66 * e, 174 * e, 75 * e, 178 * e),
       r.bezierCurveTo(58 * e, 178 * e, 49 * e, 175 * e, 37 * e, 174 * e),
       r.closePath(),
       se(r, i[2]),
       t
   }
   function Nr(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 85 * e,
       t.height = 145 * e,
       r.translate(-20 * e, -95 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(50 * e, 105 * e),
       r.bezierCurveTo(52 * e, 119 * e, 64 * e, 137 * e, 71 * e, 146 * e),
       r.bezierCurveTo(71 * e, 161 * e, 74 * e, 169 * e, 79 * e, 179 * e),
       r.bezierCurveTo(68 * e, 192 * e, 70 * e, 204 * e, 69 * e, 216 * e),
       r.bezierCurveTo(50 * e, 189.5 * e, 50 * e, 189.5 * e, 31 * e, 163 * e),
       r.closePath(),
       se(r, i),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(44 * e, 106 * e),
       r.bezierCurveTo(49 * e, 90 * e, 58 * e, 104 * e, 51 * e, 121 * e),
       r.bezierCurveTo(45 * e, 143 * e, 41 * e, 151 * e, 37 * e, 162 * e),
       r.bezierCurveTo(48 * e, 180 * e, 58 * e, 188 * e, 76 * e, 205 * e),
       r.bezierCurveTo(104 * e, 209 * e, 105 * e, 229 * e, 92 * e, 235 * e),
       r.bezierCurveTo(76 * e, 239 * e, 75 * e, 232 * e, 56 * e, 213 * e),
       r.bezierCurveTo(31 * e, 187 * e, 28 * e, 176 * e, 23 * e, 162 * e),
       r.bezierCurveTo(38 * e, 131 * e, 40 * e, 120 * e, 44 * e, 106 * e),
       r.closePath(),
       se(r, i, i, 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(30 * e, 159 * e),
       r.bezierCurveTo(46 * e, 157 * e, 59 * e, 152 * e, 68 * e, 148 * e),
       r.bezierCurveTo(63 * e, 155 * e, 52 * e, 160 * e, 44 * e, 164 * e),
       r.bezierCurveTo(59 * e, 169 * e, 66 * e, 174 * e, 75 * e, 178 * e),
       r.bezierCurveTo(58 * e, 178 * e, 49 * e, 175 * e, 37 * e, 174 * e),
       r.closePath(),
       se(r, i),
       t
   }
   function Cr(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 85 * e,
       t.height = 145 * e,
       r.translate(-165 * e, -95 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(217 * e, 103 * e),
       r.bezierCurveTo(209 * e, 129 * e, 203 * e, 137 * e, 195 * e, 146 * e),
       r.bezierCurveTo(195 * e, 159 * e, 194 * e, 167 * e, 189 * e, 178 * e),
       r.bezierCurveTo(193 * e, 186 * e, 196 * e, 195 * e, 198 * e, 216 * e),
       r.bezierCurveTo(217.5 * e, 189.5 * e, 217.5 * e, 189.5 * e, 237 * e, 163 * e),
       r.closePath(),
       se(r, i[1]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(231 * e, 163 * e),
       r.bezierCurveTo(221 * e, 139 * e, 218 * e, 128 * e, 215 * e, 114 * e),
       r.bezierCurveTo(213 * e, 102 * e, 220 * e, 92 * e, 222 * e, 107 * e),
       r.bezierCurveTo(224 * e, 118 * e, 233 * e, 138 * e, 244 * e, 161 * e),
       r.bezierCurveTo(235 * e, 188 * e, 224 * e, 198 * e, 204 * e, 221 * e),
       r.bezierCurveTo(190 * e, 233 * e, 190 * e, 235 * e, 180 * e, 235 * e),
       r.bezierCurveTo(167 * e, 235 * e, 164 * e, 216 * e, 175 * e, 211 * e),
       r.bezierCurveTo(176 * e, 208 * e, 181 * e, 207 * e, 191 * e, 205 * e),
       r.bezierCurveTo(213 * e, 186 * e, 218 * e, 180 * e, 230 * e, 163 * e),
       r.closePath(),
       se(r, i[2], i[3], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(234 * e, 154 * e),
       r.bezierCurveTo(227 * e, 156 * e, 222 * e, 156 * e, 199 * e, 148 * e),
       r.bezierCurveTo(201 * e, 151 * e, 216 * e, 159 * e, 224 * e, 162 * e),
       r.bezierCurveTo(209 * e, 169.5 * e, 209 * e, 169.5 * e, 194 * e, 177 * e),
       r.bezierCurveTo(213.5 * e, 175 * e, 213.5 * e, 175 * e, 233 * e, 173 * e),
       r.closePath(),
       se(r, i[2]),
       t
   }
   function gr(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 85 * e,
       t.height = 145 * e,
       r.translate(-165 * e, -95 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(217 * e, 103 * e),
       r.bezierCurveTo(209 * e, 129 * e, 203 * e, 137 * e, 195 * e, 146 * e),
       r.bezierCurveTo(195 * e, 159 * e, 194 * e, 167 * e, 189 * e, 178 * e),
       r.bezierCurveTo(193 * e, 186 * e, 196 * e, 195 * e, 198 * e, 216 * e),
       r.bezierCurveTo(217.5 * e, 189.5 * e, 217.5 * e, 189.5 * e, 237 * e, 163 * e),
       r.closePath(),
       se(r, i),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(231 * e, 163 * e),
       r.bezierCurveTo(221 * e, 139 * e, 218 * e, 128 * e, 215 * e, 114 * e),
       r.bezierCurveTo(213 * e, 102 * e, 220 * e, 92 * e, 222 * e, 107 * e),
       r.bezierCurveTo(224 * e, 118 * e, 233 * e, 138 * e, 244 * e, 161 * e),
       r.bezierCurveTo(235 * e, 188 * e, 224 * e, 198 * e, 204 * e, 221 * e),
       r.bezierCurveTo(190 * e, 233 * e, 190 * e, 235 * e, 180 * e, 235 * e),
       r.bezierCurveTo(167 * e, 235 * e, 164 * e, 216 * e, 175 * e, 211 * e),
       r.bezierCurveTo(176 * e, 208 * e, 181 * e, 207 * e, 191 * e, 205 * e),
       r.bezierCurveTo(213 * e, 186 * e, 218 * e, 180 * e, 230 * e, 163 * e),
       r.closePath(),
       se(r, i, i, 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(234 * e, 154 * e),
       r.bezierCurveTo(227 * e, 156 * e, 222 * e, 156 * e, 199 * e, 148 * e),
       r.bezierCurveTo(201 * e, 151 * e, 216 * e, 159 * e, 224 * e, 162 * e),
       r.bezierCurveTo(209 * e, 169.5 * e, 209 * e, 169.5 * e, 194 * e, 177 * e),
       r.bezierCurveTo(213.5 * e, 175 * e, 213.5 * e, 175 * e, 233 * e, 173 * e),
       r.closePath(),
       se(r, i),
       t
   }
   function br(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 187 * e,
       r.height = 119 * e,
       n.globalAlpha = i ? .5 : 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.translate(0, 3),
       n.moveTo(53 * e, 45 * e),
       n.bezierCurveTo(3 * e, 60 * e, 11 * e, 72 * e, 19 * e, 81 * e),
       n.bezierCurveTo(28 * e, 82 * e, 24 * e, 81 * e, 29 * e, 82 * e),
       n.bezierCurveTo(26 * e, 87 * e, 28 * e, 84 * e, 28 * e, 87 * e),
       n.bezierCurveTo(63 * e, 101 * e, 92 * e, 100 * e, 138 * e, 93 * e),
       n.bezierCurveTo(172 * e, 87 * e, 180 * e, 72 * e, 168 * e, 62 * e),
       n.bezierCurveTo(154 * e, 51 * e, 150 * e, 50 * e, 148 * e, 49 * e),
       n.bezierCurveTo(132 * e, 42 * e, 90 * e, 40 * e, 55 * e, 45 * e),
       n.closePath(),
       se(n, t[5]),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.translate(0, -3),
       n.moveTo(53 * e, 45 * e),
       n.bezierCurveTo(3 * e, 60 * e, 11 * e, 72 * e, 19 * e, 81 * e),
       n.bezierCurveTo(28 * e, 82 * e, 24 * e, 81 * e, 29 * e, 82 * e),
       n.bezierCurveTo(26 * e, 87 * e, 28 * e, 84 * e, 28 * e, 87 * e),
       n.bezierCurveTo(63 * e, 101 * e, 92 * e, 100 * e, 138 * e, 93 * e),
       n.bezierCurveTo(172 * e, 87 * e, 180 * e, 72 * e, 168 * e, 62 * e),
       n.bezierCurveTo(154 * e, 51 * e, 150 * e, 50 * e, 148 * e, 49 * e),
       n.bezierCurveTo(132 * e, 42 * e, 90 * e, 40 * e, 55 * e, 45 * e),
       n.closePath(),
       se(n, t[0], t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(151 * e, 60 * e),
       n.bezierCurveTo(140 * e, 36 * e, 137 * e, 32 * e, 124 * e, 29 * e),
       n.bezierCurveTo(98 * e, 22 * e, 80 * e, 24 * e, 62 * e, 28 * e),
       n.bezierCurveTo(42 * e, 35 * e, 38 * e, 46 * e, 34 * e, 58 * e),
       n.bezierCurveTo(53 * e, 74 * e, 76 * e, 76 * e, 91 * e, 78 * e),
       n.closePath(),
       se(n, t[0], t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(37 * e, 53 * e),
       n.bezierCurveTo(30 * e, 56 * e, 29 * e, 67 * e, 30 * e, 68 * e),
       n.bezierCurveTo(94 * e, 108 * e, 150 * e, 76 * e, 155 * e, 70 * e),
       n.bezierCurveTo(154 * e, 60 * e, 151 * e, 54 * e, 149 * e, 53 * e),
       n.bezierCurveTo(101 * e, 74 * e, 66 * e, 66 * e, 37 * e, 53 * e),
       n.closePath(),
       se(n, t[2], t[3], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(100 * e, 36 * e),
       n.bezierCurveTo(92 * e, 25 * e, 86 * e, 28 * e, 82 * e, 34 * e),
       n.bezierCurveTo(88 * e, 40 * e, 93 * e, 40 * e, 98 * e, 36 * e),
       n.closePath(),
       se(n, t[0], t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(80 * e, 43 * e),
       n.bezierCurveTo(69 * e, 46 * e, 67 * e, 52 * e, 69 * e, 58 * e),
       se(n, void 0, t[1], 4 * e),
       Ee(n, 58 * e, 50 * e, 5 * e),
       se(n, t[4]),
       Ee(n, 43 * e, 65 * e, 5 * e),
       se(n, t[4]),
       Ee(n, 58 * e, 73 * e, 5 * e),
       se(n, t[4]),
       Ee(n, 58 * e, 50 * e, 2 * e),
       se(n, t[5]),
       Ee(n, 43 * e, 65 * e, 2 * e),
       se(n, t[5]),
       Ee(n, 58 * e, 73 * e, 2 * e),
       se(n, t[5]),
       r
   }
   function Or(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 180 * e,
       r.height = 120 * e,
       n.translate(-65 * e, -35 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 10 * e),
       n.save(),
       n.translate(150.5 * e, 63.84375 * e),
       Te(n, -67 * e, -16.5 * e, 134 * e, 33 * e, 5 * e),
       n.restore(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(80.5 * e, 75.34375 * e),
       n.bezierCurveTo(83 * e, 106.34375 * e, 83 * e, 106.34375 * e, 85.5 * e, 137.34375 * e),
       n.bezierCurveTo(93 * e, 135.84375 * e, 93 * e, 135.84375 * e, 100.5 * e, 134.34375 * e),
       n.bezierCurveTo(99.5 * e, 100.84375 * e, 99.5 * e, 100.84375 * e, 98.5 * e, 67.34375 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(206.5 * e, 71.34375 * e),
       n.bezierCurveTo(203.5 * e, 104.34375 * e, 203.5 * e, 104.34375 * e, 200.5 * e, 137.34375 * e),
       n.bezierCurveTo(208.5 * e, 137.34375 * e, 208.5 * e, 137.34375 * e, 216.5 * e, 137.34375 * e),
       n.bezierCurveTo(219 * e, 102.84375 * e, 219 * e, 102.84375 * e, 221.5 * e, 68.34375 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(136.5 * e, 75.34375 * e),
       n.bezierCurveTo(139 * e, 94.34375 * e, 139 * e, 94.34375 * e, 141.5 * e, 113.34375 * e),
       n.bezierCurveTo(149.5 * e, 115.34375 * e, 149.5 * e, 115.34375 * e, 157.5 * e, 117.34375 * e),
       n.bezierCurveTo(162 * e, 97.34375 * e, 162 * e, 97.34375 * e, 166.5 * e, 77.34375 * e),
       n.closePath(),
       se(n, t[0]),
       n.save(),
       n.translate(152.5 * e, 80.84375 * e),
       n.rotate(3.12),
       Te(n, -73 * e, -20.5 * e, 146 * e, 41 * e, 5 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -10 * e),
       n.save(),
       n.translate(150.5 * e, 63.84375 * e),
       Te(n, -67 * e, -16.5 * e, 134 * e, 33 * e, 5 * e),
       n.restore(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(80.5 * e, 75.34375 * e),
       n.bezierCurveTo(83 * e, 106.34375 * e, 83 * e, 106.34375 * e, 85.5 * e, 137.34375 * e),
       n.bezierCurveTo(93 * e, 135.84375 * e, 93 * e, 135.84375 * e, 100.5 * e, 134.34375 * e),
       n.bezierCurveTo(99.5 * e, 100.84375 * e, 99.5 * e, 100.84375 * e, 98.5 * e, 67.34375 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(206.5 * e, 71.34375 * e),
       n.bezierCurveTo(203.5 * e, 104.34375 * e, 203.5 * e, 104.34375 * e, 200.5 * e, 137.34375 * e),
       n.bezierCurveTo(208.5 * e, 137.34375 * e, 208.5 * e, 137.34375 * e, 216.5 * e, 137.34375 * e),
       n.bezierCurveTo(219 * e, 102.84375 * e, 219 * e, 102.84375 * e, 221.5 * e, 68.34375 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(136.5 * e, 75.34375 * e),
       n.bezierCurveTo(139 * e, 94.34375 * e, 139 * e, 94.34375 * e, 141.5 * e, 113.34375 * e),
       n.bezierCurveTo(149.5 * e, 115.34375 * e, 149.5 * e, 115.34375 * e, 157.5 * e, 117.34375 * e),
       n.bezierCurveTo(162 * e, 97.34375 * e, 162 * e, 97.34375 * e, 166.5 * e, 77.34375 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.save(),
       n.translate(152.5 * e, 80.84375 * e),
       n.rotate(3.12),
       Te(n, -73 * e, -20.5 * e, 146 * e, 41 * e, 5 * e),
       n.restore(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(83.5 * e, 73.34375 * e),
       n.bezierCurveTo(93.5 * e, 70.34375 * e, 105.5 * e, 70.34375 * e, 124.5 * e, 72.34375 * e),
       n.bezierCurveTo(132.5 * e, 78.34375 * e, 162.5 * e, 80.34375 * e, 176.5 * e, 76.34375 * e),
       n.bezierCurveTo(194.5 * e, 69.34375 * e, 192.5 * e, 68.34375 * e, 199.5 * e, 63.34375 * e),
       n.bezierCurveTo(204.5 * e, 63.34375 * e, 204.5 * e, 63.34375 * e, 209.5 * e, 63.34375 * e),
       n.bezierCurveTo(153.5 * e, 82.34375 * e, 157.5 * e, 85.34375 * e, 209.5 * e, 63.34375 * e),
       n.bezierCurveTo(194.5 * e, 88.34375 * e, 162.5 * e, 87.34375 * e, 149.5 * e, 88.34375 * e),
       n.bezierCurveTo(129.5 * e, 81.34375 * e, 103.5 * e, 75.34375 * e, 83.5 * e, 82.34375 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(137.5 * e, 65.34375 * e),
       n.bezierCurveTo(150.5 * e, 76.34375 * e, 170.5 * e, 71.34375 * e, 174.5 * e, 65.34375 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(221.5 * e, 85.34375 * e),
       n.bezierCurveTo(211.5 * e, 79.34375 * e, 191.5 * e, 88.34375 * e, 181.5 * e, 96.34375 * e),
       n.bezierCurveTo(201.5 * e, 96.34375 * e, 201.5 * e, 96.34375 * e, 221.5 * e, 96.34375 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(84.5 * e, 89.34375 * e),
       n.bezierCurveTo(102.5 * e, 87.34375 * e, 112.5 * e, 88.34375 * e, 119.5 * e, 97.34375 * e),
       n.bezierCurveTo(102 * e, 98.34375 * e, 102 * e, 98.34375 * e, 84.5 * e, 99.34375 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(208.5 * e, 104.34375 * e),
       n.bezierCurveTo(208.5 * e, 110.34375 * e, 208.5 * e, 110.34375 * e, 208.5 * e, 116.34375 * e),
       n.bezierCurveTo(211.5 * e, 110.34375 * e, 211.5 * e, 110.34375 * e, 214.5 * e, 104.34375 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(87.5 * e, 117.34375 * e),
       n.bezierCurveTo(92 * e, 118.84375 * e, 92 * e, 118.84375 * e, 96.5 * e, 120.34375 * e),
       n.bezierCurveTo(93 * e, 123.84375 * e, 93 * e, 123.84375 * e, 89.5 * e, 127.34375 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(107.5 * e, 51.34375 * e),
       n.bezierCurveTo(122.5 * e, 54.34375 * e, 122.5 * e, 54.34375 * e, 137.5 * e, 57.34375 * e),
       n.bezierCurveTo(118 * e, 57.34375 * e, 118 * e, 57.34375 * e, 98.5 * e, 57.34375 * e),
       n.bezierCurveTo(94.5 * e, 54.84375 * e, 94.5 * e, 54.84375 * e, 90.5 * e, 52.34375 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(170.5 * e, 52.34375 * e),
       n.bezierCurveTo(179.5 * e, 51.84375 * e, 179.5 * e, 51.84375 * e, 188.5 * e, 51.34375 * e),
       n.bezierCurveTo(187.5 * e, 53.84375 * e, 187.5 * e, 53.84375 * e, 186.5 * e, 56.34375 * e),
       n.bezierCurveTo(177 * e, 56.34375 * e, 177 * e, 56.34375 * e, 167.5 * e, 56.34375 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(80.5 * e, 69.34375 * e),
       n.bezierCurveTo(86.5 * e, 70.34375 * e, 86.5 * e, 70.34375 * e, 92.5 * e, 71.34375 * e),
       n.bezierCurveTo(86 * e, 73.34375 * e, 86 * e, 73.34375 * e, 79.5 * e, 75.34375 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(222.5 * e, 75.34375 * e),
       n.bezierCurveTo(214.5 * e, 76.34375 * e, 214.5 * e, 76.34375 * e, 206.5 * e, 77.34375 * e),
       n.bezierCurveTo(216.5 * e, 79.34375 * e, 216.5 * e, 79.34375 * e, 226.5 * e, 81.34375 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(116.5 * e, 100.34375 * e),
       n.bezierCurveTo(128 * e, 97.34375 * e, 128 * e, 97.34375 * e, 139.5 * e, 94.34375 * e),
       n.bezierCurveTo(140 * e, 96.84375 * e, 140 * e, 96.84375 * e, 140.5 * e, 99.34375 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(112.5 * e, 48.34375 * e),
       n.bezierCurveTo(115.5 * e, 50.84375 * e, 115.5 * e, 50.84375 * e, 118.5 * e, 53.34375 * e),
       n.bezierCurveTo(131 * e, 50.84375 * e, 131 * e, 50.84375 * e, 143.5 * e, 48.34375 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(216.5 * e, 109.34375 * e),
       n.bezierCurveTo(213 * e, 114.84375 * e, 213 * e, 114.84375 * e, 209.5 * e, 120.34375 * e),
       n.bezierCurveTo(212 * e, 118.84375 * e, 212 * e, 118.84375 * e, 214.5 * e, 117.34375 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(86.5 * e, 133.34375 * e),
       n.bezierCurveTo(89 * e, 127.34375 * e, 89 * e, 127.34375 * e, 91.5 * e, 121.34375 * e),
       n.bezierCurveTo(92.5 * e, 127.34375 * e, 92.5 * e, 127.34375 * e, 93.5 * e, 133.34375 * e),
       n.closePath(),
       se(n, t[2]),
       r
   }
   function pr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 175 * e,
       r.height = 106 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(28 * e, 67 * e),
       n.bezierCurveTo(55 * e, 80 * e, 126 * e, 74 * e, 144 * e, 68 * e),
       n.bezierCurveTo(144.5 * e, 75 * e, 144.5 * e, 75 * e, 145 * e, 82 * e),
       n.bezierCurveTo(114 * e, 94 * e, 47 * e, 91 * e, 28 * e, 82 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(145 * e, 75 * e),
       n.bezierCurveTo(143 * e, 51 * e, 133 * e, 29 * e, 100 * e, 27 * e),
       n.bezierCurveTo(52 * e, 21 * e, 37 * e, 37 * e, 31 * e, 54 * e),
       n.bezierCurveTo(23 * e, 78 * e, 28 * e, 77 * e, 36 * e, 79 * e),
       n.bezierCurveTo(80 * e, 87 * e, 120 * e, 81 * e, 145 * e, 76 * e),
       n.closePath(),
       se(n, t[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(38 * e, 46 * e),
       n.bezierCurveTo(52 * e, 37 * e, 69 * e, 36 * e, 85 * e, 36 * e),
       n.bezierCurveTo(118 * e, 38 * e, 129 * e, 42 * e, 137 * e, 48 * e),
       n.bezierCurveTo(135 * e, 45 * e, 135 * e, 45 * e, 133 * e, 42 * e),
       n.bezierCurveTo(124 * e, 32 * e, 116 * e, 28 * e, 88 * e, 25 * e),
       n.bezierCurveTo(47 * e, 28 * e, 40 * e, 32 * e, 36 * e, 44 * e),
       n.closePath(),
       se(n, t[5]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(145 * e, 75 * e),
       n.bezierCurveTo(143 * e, 51 * e, 133 * e, 29 * e, 100 * e, 27 * e),
       n.bezierCurveTo(52 * e, 21 * e, 37 * e, 37 * e, 31 * e, 54 * e),
       n.bezierCurveTo(23 * e, 78 * e, 28 * e, 77 * e, 36 * e, 79 * e),
       n.bezierCurveTo(80 * e, 87 * e, 120 * e, 81 * e, 145 * e, 76 * e),
       n.closePath(),
       se(n, void 0, t[2], 4 * e),
       n.translate(0, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(28 * e, 67 * e),
       n.bezierCurveTo(55 * e, 80 * e, 126 * e, 74 * e, 144 * e, 68 * e),
       n.bezierCurveTo(144.5 * e, 75 * e, 144.5 * e, 75 * e, 145 * e, 82 * e),
       n.bezierCurveTo(114 * e, 94 * e, 47 * e, 91 * e, 28 * e, 82 * e),
       n.closePath(),
       se(n, t[10], t[10], 4 * e),
       n.translate(0, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(131 * e, 43 * e),
       n.bezierCurveTo(145 * e, 40 * e, 148 * e, 32 * e, 147 * e, 17 * e),
       n.bezierCurveTo(166 * e, 39 * e, 155 * e, 62 * e, 140 * e, 67 * e),
       n.bezierCurveTo(128 * e, 65 * e, 128 * e, 52 * e, 131 * e, 45 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(41 * e, 43 * e),
       n.bezierCurveTo(30 * e, 42 * e, 24 * e, 33 * e, 25 * e, 17 * e),
       n.bezierCurveTo(7 * e, 34 * e, 17 * e, 63 * e, 33 * e, 66 * e),
       n.bezierCurveTo(45 * e, 59 * e, 44 * e, 53 * e, 42 * e, 44 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(24 * e, 19 * e),
       n.bezierCurveTo(24 * e, 35 * e, 35 * e, 42 * e, 42 * e, 44 * e),
       n.bezierCurveTo(43 * e, 51 * e, 43 * e, 48 * e, 43 * e, 56 * e),
       n.bezierCurveTo(25 * e, 47 * e, 17 * e, 36 * e, 23 * e, 20 * e),
       n.closePath(),
       se(n, t[6]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(148 * e, 18 * e),
       n.bezierCurveTo(159 * e, 44 * e, 139 * e, 52 * e, 130 * e, 55 * e),
       n.bezierCurveTo(129 * e, 48 * e, 129 * e, 46 * e, 131 * e, 43 * e),
       n.bezierCurveTo(144 * e, 37 * e, 148 * e, 35 * e, 147 * e, 18 * e),
       n.closePath(),
       se(n, t[6]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(131 * e, 43 * e),
       n.bezierCurveTo(145 * e, 40 * e, 148 * e, 32 * e, 147 * e, 17 * e),
       n.bezierCurveTo(166 * e, 39 * e, 155 * e, 62 * e, 140 * e, 67 * e),
       n.bezierCurveTo(128 * e, 65 * e, 128 * e, 52 * e, 131 * e, 45 * e),
       n.closePath(),
       se(n, void 0, t[4], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(41 * e, 43 * e),
       n.bezierCurveTo(30 * e, 42 * e, 24 * e, 33 * e, 25 * e, 17 * e),
       n.bezierCurveTo(7 * e, 34 * e, 17 * e, 63 * e, 33 * e, 66 * e),
       n.bezierCurveTo(45 * e, 59 * e, 44 * e, 53 * e, 42 * e, 44 * e),
       n.closePath(),
       se(n, void 0, t[4], 4 * e),
       n.save(),
       n.translate(87 * e, 34.5 * e),
       n.rotate(0),
       Te(n, -8 * e, -10.5 * e, 16 * e, 21 * e, 10 * e),
       n.restore(),
       se(n, t[7], t[2], 4 * e),
       n.save(),
       n.translate(87 * e, 57 * e),
       n.rotate(0),
       Te(n, -8 * e, -23 * e, 16 * e, 46 * e, 10 * e),
       n.restore(),
       se(n, t[8], t[2], 4 * e),
       Ee(n, 87 * e, 39 * e, 4.123105625617661 * e),
       se(n, t[9], t[2], 4 * e),
       Ee(n, 87 * e, 60 * e, 4.242640687119285 * e),
       se(n, t[9], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(28 * e, 67 * e),
       n.bezierCurveTo(55 * e, 80 * e, 126 * e, 74 * e, 144 * e, 68 * e),
       n.bezierCurveTo(144.5 * e, 75 * e, 144.5 * e, 75 * e, 145 * e, 82 * e),
       n.bezierCurveTo(114 * e, 94 * e, 47 * e, 91 * e, 28 * e, 82 * e),
       n.closePath(),
       se(n, t[8], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(27 * e, 69 * e),
       n.bezierCurveTo(13 * e, 77 * e, 16 * e, 74 * e, 27 * e, 80 * e),
       n.closePath(),
       se(n, t[9], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(145 * e, 70 * e),
       n.bezierCurveTo(149.5 * e, 72 * e, 149.5 * e, 72 * e, 154 * e, 74 * e),
       n.bezierCurveTo(150 * e, 77 * e, 150 * e, 77 * e, 146 * e, 80 * e),
       n.closePath(),
       se(n, t[9], t[2], 4 * e),
       Ee(n, 50 * e, 80 * e, 5 * e),
       se(n, t[9], t[2], 4 * e),
       Ee(n, 86.01141357421875 * e, 81.76705932617188 * e, 5 * e),
       se(n, t[9], t[2], 4 * e),
       Ee(n, 119.01141357421875 * e, 80.13069152832031 * e, 5 * e),
       se(n, t[9], t[2], 4 * e),
       r
   }
   function cr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 142 * e,
       r.height = 118 * e,
       n.save(),
       n.translate(70.16665649414062 * e, 38.20831298828125 * e),
       Te(n, -58.5 * e, -27.5 * e, 117 * e, 55 * e, 20 * e),
       n.restore(),
       se(n, t[0], t[1], 4 * e),
       n.save(),
       n.translate(70 * e, 42.70831298828125 * e),
       Te(n, -61 * e, -20 * e, 122 * e, 40 * e, 20 * e),
       n.restore(),
       se(n, t[2], t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(123 * e, 70.375 * e),
       n.bezierCurveTo(115 * e, 99.375 * e, 119 * e, 85.375 * e, 115 * e, 100.375 * e),
       n.bezierCurveTo(112 * e, 116.375 * e, 117 * e, 109.375 * e, 131 * e, 100.375 * e),
       n.bezierCurveTo(131 * e, 83.375 * e, 131 * e, 83.375 * e, 131 * e, 66.375 * e),
       n.closePath(),
       se(n, t[2], t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(11 * e, 68.375 * e),
       n.bezierCurveTo(11.166656494140625 * e, 84.375 * e, 9 * e, 99.375 * e, 10 * e, 100.375 * e),
       n.bezierCurveTo(35 * e, 113.375 * e, 27 * e, 110.375 * e, 25 * e, 95.375 * e),
       n.bezierCurveTo(16 * e, 68.375 * e, 17 * e, 69.375 * e, 17 * e, 68.375 * e),
       n.closePath(),
       se(n, t[2], t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(46 * e, 32.375 * e),
       n.bezierCurveTo(43 * e, 8.375 * e, 45 * e, 7.375 * e, 56 * e, 6.375 * e),
       n.bezierCurveTo(105 * e, 4.375 * e, 102 * e, 6.375 * e, 97 * e, 32.375 * e),
       n.bezierCurveTo(138 * e, 43.375 * e, 133 * e, 45.375 * e, 133 * e, 58.375 * e),
       n.bezierCurveTo(133 * e, 85.375 * e, 125 * e, 74.375 * e, 111 * e, 70.375 * e),
       n.bezierCurveTo(70 * e, 69.875 * e, 29 * e, 69.375 * e, 29 * e, 69.375 * e),
       n.bezierCurveTo(7 * e, 84.375 * e, 7 * e, 70.375 * e, 7 * e, 59.375 * e),
       n.bezierCurveTo(6 * e, 28.375 * e, 32 * e, 39.375 * e, 44 * e, 32.375 * e),
       n.closePath(),
       se(n, t[2], t[1], 4 * e),
       Ee(n, 71 * e, 44.375 * e, 16.55294535724685 * e),
       se(n, t[2], t[1], 4 * e),
       Ee(n, 71 * e, 43.70831298828125 * e, 8.94427190999916 * e),
       se(n, t[2], t[1], 4 * e),
       r
   }
   function vr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 142 * e,
       r.height = 118 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(111 * e, 27.3671875 * e),
       n.bezierCurveTo(128 * e, 9.3671875 * e, 125 * e, 13.3671875 * e, 126 * e, 21.3671875 * e),
       n.bezierCurveTo(126 * e, 33.3671875 * e, 119 * e, 43.3671875 * e, 118 * e, 42.3671875 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(31 * e, 23.3671875 * e),
       n.bezierCurveTo(17 * e, 15.3671875 * e, 16 * e, 14.3671875 * e, 17 * e, 20.3671875 * e),
       n.bezierCurveTo(22 * e, 33.3671875 * e, 20 * e, 27.3671875 * e, 24 * e, 34.3671875 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       n.save(),
       n.translate(70.5 * e, 34.8671875 * e),
       n.rotate(0),
       Te(n, -49.5 * e, -21.5 * e, 99 * e, 43 * e, 15 * e),
       n.restore(),
       se(n, t[0], t[1], 4 * e),
       n.save(),
       n.translate(71 * e, 40.8671875 * e),
       n.rotate(0),
       Te(n, -49 * e, -12.5 * e, 98 * e, 25 * e, 15 * e),
       n.restore(),
       se(n, t[2], t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(19.800003051757812 * e, 75.95625305175781 * e),
       n.bezierCurveTo(19.300003051757812 * e, 82.95625305175781 * e, 19.300003051757812 * e, 82.95625305175781 * e, 18.800003051757812 * e, 89.95625305175781 * e),
       n.bezierCurveTo(38.80000305175781 * e, 115.95625305175781 * e, 37.80000305175781 * e, 104.95625305175781 * e, 31.800003051757812 * e, 91.95625305175781 * e),
       n.closePath(),
       se(n, t[2], t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(119.80000305175781 * e, 75.95625305175781 * e),
       n.bezierCurveTo(120.80000305175781 * e, 82.95625305175781 * e, 120.80000305175781 * e, 82.95625305175781 * e, 121.80000305175781 * e, 89.95625305175781 * e),
       n.bezierCurveTo(101.80000305175781 * e, 111.95625305175781 * e, 99.80000305175781 * e, 111.95625305175781 * e, 112.80000305175781 * e, 81.95625305175781 * e),
       n.closePath(),
       se(n, t[2], t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(17.800003051757812 * e, 49.15625 * e),
       n.bezierCurveTo(17.800003051757812 * e, 64.15625 * e, 17.800003051757812 * e, 64.15625 * e, 17.800003051757812 * e, 79.15625 * e),
       n.bezierCurveTo(23.300003051757812 * e, 85.15625 * e, 23.300003051757812 * e, 85.15625 * e, 28.800003051757812 * e, 91.15625 * e),
       n.bezierCurveTo(36.80000305175781 * e, 96.15625 * e, 32.80000305175781 * e, 91.15625 * e, 28.800003051757812 * e, 77.15625 * e),
       n.bezierCurveTo(33.80000305175781 * e, 65.15625 * e, 33.80000305175781 * e, 65.15625 * e, 38.80000305175781 * e, 53.15625 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(123.80000305175781 * e, 53.95625305175781 * e),
       n.bezierCurveTo(121.80000305175781 * e, 77.95625305175781 * e, 121.80000305175781 * e, 74.95625305175781 * e, 121.80000305175781 * e, 78.95625305175781 * e),
       n.bezierCurveTo(115.80000305175781 * e, 84.95625305175781 * e, 115.80000305175781 * e, 84.95625305175781 * e, 109.80000305175781 * e, 90.95625305175781 * e),
       n.bezierCurveTo(102.80000305175781 * e, 93.95625305175781 * e, 105.80000305175781 * e, 86.95625305175781 * e, 110.80000305175781 * e, 76.95625305175781 * e),
       n.bezierCurveTo(107.30000305175781 * e, 65.45625305175781 * e, 103.80000305175781 * e, 53.95625305175781 * e, 103.80000305175781 * e, 53.95625305175781 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(18 * e, 56.3671875 * e),
       n.bezierCurveTo(70 * e, 56.8671875 * e, 70 * e, 56.8671875 * e, 122 * e, 57.3671875 * e),
       n.bezierCurveTo(137 * e, 20.3671875 * e, 137 * e, 16.3671875 * e, 126 * e, 22.3671875 * e),
       n.bezierCurveTo(115.5 * e, 34.3671875 * e, 115.5 * e, 34.3671875 * e, 105 * e, 46.3671875 * e),
       n.bezierCurveTo(70.5 * e, 46.3671875 * e, 70.5 * e, 46.3671875 * e, 36 * e, 46.3671875 * e),
       n.bezierCurveTo(4 * e, 14.3671875 * e, 7 * e, 18.3671875 * e, 8 * e, 27.3671875 * e),
       n.bezierCurveTo(12.5 * e, 41.8671875 * e, 12.5 * e, 41.8671875 * e, 17 * e, 56.3671875 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       n.save(),
       n.translate(68.30000305175781 * e, 41.45625305175781 * e),
       n.rotate(.76),
       Te(n, -20.5 * e, -20.5 * e, 41 * e, 41 * e, 10 * e),
       n.restore(),
       se(n, void 0, t[5], 4 * e),
       n.save(),
       n.translate(68.80000305175781 * e, 44.45625305175781 * e),
       n.rotate(.76),
       Te(n, -21 * e, -20.5 * e, 42 * e, 41 * e, 10 * e),
       n.restore(),
       se(n, t[3], t[4], 4 * e),
       n.save(),
       n.translate(69.80000305175781 * e, 44.556243896484375 * e),
       n.rotate(.76),
       Te(n, -10 * e, -10 * e, 20 * e, 20 * e, 5 * e),
       n.restore(),
       se(n, t[6], t[7], 4 * e),
       r
   }
   function Pr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 145 * e,
       r.height = 120 * e,
       n.beginPath(),
       n.scale(.6, .6),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.translate(18 * e, -8 * e),
       n.moveTo(101 * e, 72 * e),
       n.bezierCurveTo(144 * e, 69 * e, 149 * e, 58 * e, 162 * e, 49 * e),
       n.bezierCurveTo(174 * e, 31 * e, 173 * e, 38 * e, 172 * e, 45 * e),
       n.bezierCurveTo(168 * e, 73 * e, 158 * e, 75 * e, 152 * e, 78 * e),
       n.bezierCurveTo(106 * e, 89 * e, 107 * e, 91 * e, 107 * e, 94 * e),
       n.bezierCurveTo(107 * e, 100 * e, 107 * e, 107 * e, 107 * e, 107 * e),
       n.bezierCurveTo(99 * e, 112 * e, 98 * e, 110 * e, 93 * e, 107 * e),
       n.bezierCurveTo(94 * e, 107 * e, 93 * e, 107 * e, 93 * e, 107 * e),
       n.bezierCurveTo(93 * e, 100 * e, 93 * e, 100 * e, 92 * e, 94 * e),
       n.bezierCurveTo(92 * e, 89 * e, 90 * e, 90 * e, 73 * e, 86 * e),
       n.bezierCurveTo(45 * e, 81 * e, 40 * e, 77 * e, 35 * e, 68 * e),
       n.bezierCurveTo(23 * e, 36 * e, 28 * e, 34 * e, 36 * e, 46 * e),
       n.bezierCurveTo(45 * e, 58 * e, 83 * e, 72 * e, 98 * e, 72 * e),
       n.closePath(),
       se(n, t[4], t[5], 4 * e),
       n.beginPath(),
       n.scale(1.1, 1.1),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.translate(-9 * e, 4 * e),
       n.moveTo(101 * e, 72 * e),
       n.bezierCurveTo(144 * e, 69 * e, 149 * e, 58 * e, 162 * e, 49 * e),
       n.bezierCurveTo(174 * e, 31 * e, 173 * e, 38 * e, 172 * e, 45 * e),
       n.bezierCurveTo(168 * e, 73 * e, 158 * e, 75 * e, 152 * e, 78 * e),
       n.bezierCurveTo(106 * e, 89 * e, 107 * e, 91 * e, 107 * e, 94 * e),
       n.bezierCurveTo(107 * e, 100 * e, 107 * e, 107 * e, 107 * e, 107 * e),
       n.bezierCurveTo(99 * e, 112 * e, 98 * e, 110 * e, 93 * e, 107 * e),
       n.bezierCurveTo(94 * e, 107 * e, 93 * e, 107 * e, 93 * e, 107 * e),
       n.bezierCurveTo(93 * e, 100 * e, 93 * e, 100 * e, 92 * e, 94 * e),
       n.bezierCurveTo(92 * e, 89 * e, 90 * e, 90 * e, 73 * e, 86 * e),
       n.bezierCurveTo(45 * e, 81 * e, 40 * e, 77 * e, 35 * e, 68 * e),
       n.bezierCurveTo(23 * e, 36 * e, 28 * e, 34 * e, 36 * e, 46 * e),
       n.bezierCurveTo(45 * e, 58 * e, 83 * e, 72 * e, 98 * e, 72 * e),
       n.closePath(),
       se(n, t[4], t[5], 4 * e),
       n.scale(1.1, 1.1),
       n.translate(-9 * e, 4 * e),
       n.save(),
       n.translate(100 * e, 73.06874084472656 * e),
       n.rotate(0),
       Te(n, -61 * e, -38.5 * e, 122 * e, 40 * e, 20 * e),
       n.restore(),
       se(n, t[1], t[2], 4 * e),
       n.save(),
       n.translate(100 * e, 71.36874389648438 * e),
       n.rotate(0),
       Te(n, -60.5 * e, -18 * e, 121 * e, 30 * e, 20 * e),
       n.restore(),
       se(n, t[3], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(144 * e, 80 * e),
       n.bezierCurveTo(152 * e, 100 * e, 152 * e, 101 * e, 153 * e, 102 * e),
       n.bezierCurveTo(159 * e, 100 * e, 159 * e, 100 * e, 160 * e, 100 * e),
       n.bezierCurveTo(161 * e, 84 * e, 161 * e, 84 * e, 162 * e, 68 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(57 * e, 75 * e),
       n.bezierCurveTo(48 * e, 101 * e, 53 * e, 89 * e, 48 * e, 102 * e),
       n.bezierCurveTo(44 * e, 100 * e, 44 * e, 100 * e, 39 * e, 97 * e),
       n.bezierCurveTo(39 * e, 83 * e, 39 * e, 83 * e, 39 * e, 69 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(101 * e, 72 * e),
       n.bezierCurveTo(144 * e, 69 * e, 149 * e, 58 * e, 162 * e, 49 * e),
       n.bezierCurveTo(174 * e, 31 * e, 173 * e, 38 * e, 172 * e, 45 * e),
       n.bezierCurveTo(168 * e, 73 * e, 158 * e, 75 * e, 152 * e, 78 * e),
       n.bezierCurveTo(106 * e, 89 * e, 107 * e, 91 * e, 107 * e, 94 * e),
       n.bezierCurveTo(107 * e, 100 * e, 107 * e, 107 * e, 107 * e, 107 * e),
       n.bezierCurveTo(99 * e, 112 * e, 98 * e, 110 * e, 93 * e, 107 * e),
       n.bezierCurveTo(94 * e, 107 * e, 93 * e, 107 * e, 93 * e, 107 * e),
       n.bezierCurveTo(93 * e, 100 * e, 93 * e, 100 * e, 92 * e, 94 * e),
       n.bezierCurveTo(92 * e, 89 * e, 90 * e, 90 * e, 73 * e, 86 * e),
       n.bezierCurveTo(45 * e, 81 * e, 40 * e, 77 * e, 35 * e, 68 * e),
       n.bezierCurveTo(23 * e, 36 * e, 28 * e, 34 * e, 36 * e, 46 * e),
       n.bezierCurveTo(45 * e, 58 * e, 83 * e, 72 * e, 98 * e, 72 * e),
       n.closePath(),
       se(n, t[4], t[5], 4 * e),
       n.translate(0, 0),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(115.5 * e, 116.07290649414062 * e),
       n.bezierCurveTo(159.5 * e, 99.07290649414062 * e, 159.5 * e, 98.07290649414062 * e, 159.5 * e, 98.07290649414062 * e),
       n.bezierCurveTo(155.5 * e, 116.07290649414062 * e, 159.5 * e, 116.07290649414062 * e, 159.5 * e, 118.07290649414062 * e),
       n.bezierCurveTo(147.5 * e, 130.07290649414062 * e, 136.5 * e, 132.07290649414062 * e, 115.5 * e, 138.07290649414062 * e),
       n.closePath(),
       se(n, t[3], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(39.5 * e, 96.07290649414062 * e),
       n.bezierCurveTo(85.5 * e, 114.07290649414062 * e, 62.5 * e, 105.57290649414062 * e, 85.5 * e, 115.07290649414062 * e),
       n.bezierCurveTo(85.5 * e, 125.57290649414062 * e, 85.5 * e, 125.57290649414062 * e, 85.5 * e, 136.07290649414062 * e),
       n.bezierCurveTo(51.5 * e, 129.07290649414062 * e, 51.5 * e, 125.07290649414062 * e, 41.5 * e, 118.07290649414062 * e),
       n.bezierCurveTo(44.5 * e, 106.07290649414062 * e, 42.5 * e, 103.07290649414062 * e, 40.5 * e, 96.07290649414062 * e),
       n.closePath(),
       se(n, t[3], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(86 * e, 80 * e),
       n.bezierCurveTo(97 * e, 88 * e, 106 * e, 84 * e, 112 * e, 80 * e),
       n.bezierCurveTo(112 * e, 62 * e, 106 * e, 59 * e, 99 * e, 54 * e),
       n.bezierCurveTo(86 * e, 62 * e, 86 * e, 73 * e, 86 * e, 80 * e),
       n.closePath(),
       se(n, t[3], t[2], 4 * e),
       n.scale(.5, .5),
       n.translate(100 * e, 71 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(86 * e, 80 * e),
       n.bezierCurveTo(97 * e, 88 * e, 106 * e, 84 * e, 112 * e, 80 * e),
       n.bezierCurveTo(112 * e, 62 * e, 106 * e, 59 * e, 99 * e, 54 * e),
       n.bezierCurveTo(86 * e, 62 * e, 86 * e, 73 * e, 86 * e, 80 * e),
       n.closePath(),
       se(n, t[6], t[2], 4 * e),
       r
   }
   function mr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 400 * e,
       r.height = 400 * e,
       n.save(),
       n.translate(204 * e, 195.0833282470703 * e),
       n.rotate(10.16),
       Te(n, -97.5 * e, -134.5 * e, 195 * e, 269 * e, 10 * e),
       n.restore(),
       se(n, t[0], t[1], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(58.5 * e, 226.5833282470703 * e),
       n.bezierCurveTo(120.5 * e, 281.5833282470703 * e, 120.5 * e, 281.5833282470703 * e, 182.5 * e, 336.5833282470703 * e),
       n.bezierCurveTo(263 * e, 248.5833282470703 * e, 263 * e, 248.5833282470703 * e, 343.5 * e, 160.5833282470703 * e),
       n.bezierCurveTo(280.5 * e, 104.58332824707031 * e, 280.5 * e, 104.58332824707031 * e, 217.5 * e, 48.58332824707031 * e),
       n.closePath(),
       se(n, t[2], t[3], 4 * e),
       n.save(),
       n.translate(197 * e, 169.0833282470703 * e),
       n.rotate(10.16),
       Te(n, -93.5 * e, -126.5 * e, 187 * e, 253 * e, 10 * e),
       n.restore(),
       se(n, t[4], t[1], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(226.5 * e, 24.583328247070312 * e),
       n.bezierCurveTo(58.5 * e, 207.5833282470703 * e, 143 * e, 116.58332824707031 * e, 59.5 * e, 208.5833282470703 * e),
       n.closePath(),
       se(n, void 0, t[1], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(46.133331298828125 * e, 202.64999389648438 * e),
       n.bezierCurveTo(46.133331298828125 * e, 215.64999389648438 * e, 46.133331298828125 * e, 215.64999389648438 * e, 46.133331298828125 * e, 228.64999389648438 * e),
       n.closePath(),
       se(n, t[4], t[1], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(55.133331298828125 * e, 211.64999389648438 * e),
       n.bezierCurveTo(55.133331298828125 * e, 225.14999389648438 * e, 55.133331298828125 * e, 225.14999389648438 * e, 55.133331298828125 * e, 238.64999389648438 * e),
       n.bezierCurveTo(50.133331298828125 * e, 235.64999389648438 * e, 50.133331298828125 * e, 235.64999389648438 * e, 45.133331298828125 * e, 232.64999389648438 * e),
       n.bezierCurveTo(45.133331298828125 * e, 216.64999389648438 * e, 45.133331298828125 * e, 216.64999389648438 * e, 45.133331298828125 * e, 200.64999389648438 * e),
       n.closePath(),
       se(n, t[4], t[1], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(46.133331298828125 * e, 198.39999389648438 * e),
       n.bezierCurveTo(46.133331298828125 * e, 199.89999389648438 * e, 46.133331298828125 * e, 199.89999389648438 * e, 46.133331298828125 * e, 201.39999389648438 * e),
       n.closePath(),
       se(n, t[4], t[1], 8 * e),
       n.save(),
       n.translate(249.63333129882812 * e, 120.89999389648438 * e),
       n.rotate(7.04),
       Te(n, -58.5 * e, -32 * e, 117 * e, 64 * e, 10 * e),
       n.restore(),
       se(n, t[5]),
       r
   }
   function Dr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 170 * e,
       r.height = 170 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(-10 * e, 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(72.5 * e, 4.109375 * e),
       n.bezierCurveTo(117 * e, 9.609375 * e, 117 * e, 9.609375 * e, 161.5 * e, 15.109375 * e),
       n.bezierCurveTo(134.5 * e, 106.109375 * e, 110.5 * e, 130.109375 * e, 63.5 * e, 145.109375 * e),
       n.bezierCurveTo(33.5 * e, 120.609375 * e, 33.5 * e, 120.609375 * e, 3.5 * e, 96.109375 * e),
       n.bezierCurveTo(82.5 * e, 75.109375 * e, 69.5 * e, 29.109375 * e, 71.5 * e, 6.109375 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(10 * e, -10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(72.5 * e, 4.109375 * e),
       n.bezierCurveTo(117 * e, 9.609375 * e, 117 * e, 9.609375 * e, 161.5 * e, 15.109375 * e),
       n.bezierCurveTo(134.5 * e, 106.109375 * e, 110.5 * e, 130.109375 * e, 63.5 * e, 145.109375 * e),
       n.bezierCurveTo(33.5 * e, 120.609375 * e, 33.5 * e, 120.609375 * e, 3.5 * e, 96.109375 * e),
       n.bezierCurveTo(82.5 * e, 75.109375 * e, 69.5 * e, 29.109375 * e, 71.5 * e, 6.109375 * e),
       n.closePath(),
       se(n, t[1], t[2], 10 * e),
       r
   }
   function Mr(e, i, t) {
       var r = (n = document.createElement("canvas")).getContext("2d");
       n.width = 47 * e,
       n.height = 60 * e;
       var n;
       r = (n = document.createElement("canvas")).getContext("2d");
       return n.width = 47 * e,
       n.height = 60 * e,
       Ee(r, 23.5 * e, 20.734375 * e, 15.132745950421556 * e),
       se(r, void 0, t[2], 4 * e),
       Ee(r, 23.5 * e, 20.734375 * e, 18.601075237738275 * e),
       se(r, void 0, t[1], 4 * e),
       Ee(r, 23.5 * e, 20.734375 * e, 11.40175425099138 * e),
       se(r, void 0, t[1], 4 * e),
       r.save(),
       r.translate(23 * e, 38.734375 * e),
       r.rotate(0),
       Te(r, -21.5 * e, -19 * e, 43 * e, 38 * e, 10 * e),
       r.restore(),
       se(r, t[2], t[1], 4 * e),
       r.save(),
       r.translate(23.5 * e, 43.734375 * e),
       r.rotate(.5235987755982988),
       ue(r, 3, 8.06225774829855 * e, 0 * e),
       r.restore(),
       se(r, t[3]),
       Ee(r, 23.5 * e, 35.734375 * e, 7.0710678118654755 * e),
       se(r, t[3]),
       n
   }
   function Gr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 201 * e,
       r.height = 164 * e,
       n.translate(0, 5 * e),
       n.globalAlpha = i ? .5 : 1,
       Ee(n, 100.5 * e, 82 * e, 74.92746655359852 * e),
       se(n, t[0], t[0], 4 * e),
       Ee(n, 100.5 * e, 82 * e, 65.9417374971317 * e),
       se(n, t[0], t[0], 4 * e),
       n.translate(0, -5),
       n.globalAlpha = 1,
       Ee(n, 100.5 * e, 82 * e, 74.92746655359852 * e),
       se(n, t[1], t[3], 4 * e),
       Ee(n, 100.5 * e, 82 * e, 65.9417374971317 * e),
       se(n, t[1], t[2], 4 * e),
       Ee(n, 100.5 * e, 82 * e, 35.9417374971317 * e),
       se(n, t[1], t[2], 20 * e),
       Ee(n, 100.5 * e, 82 * e, 15.9417374971317 * e),
       se(n, t[1], t[2], 6 * e),
       r
   }
   function Lr(e, i, t, r) {
       var n = document.createElement("canvas")
         , o = n.getContext("2d");
       return n.width = 501 * e,
       n.height = 564 * e,
       o.scale(.5, .5),
       o.translate(240 * e, 255 * e),
       o.rotate(r),
       o.globalAlpha = i ? .5 : .2,
       Ee(o, 174 * e, 87.984375 * e, 20.8806130178211 * e),
       se(o, t[0], t[0], 8 * e),
       Ee(o, 174 * e, 87.984375 * e, 12.165525060596439 * e),
       se(o, t[0], t[0], 8 * e),
       Ee(o, 174 * e, 87.484375 * e, 6 * e),
       se(o, t[0]),
       Ee(o, 30 * e, 87.984375 * e, 20.8806130178211 * e),
       se(o, t[0], t[0], 4 * e),
       Ee(o, 30 * e, 87.984375 * e, 12.165525060596439 * e),
       se(o, t[0], t[0], 4 * e),
       Ee(o, 30 * e, 87.484375 * e, 6 * e),
       se(o, t[0]),
       Ee(o, 100 * e, 30 * e, 20.8806130178211 * e),
       se(o, t[0], t[0], 4 * e),
       Ee(o, 100 * e, 30 * e, 12.165525060596439 * e),
       se(o, t[0], t[0], 4 * e),
       Ee(o, 100 * e, 30 * e, 6 * e),
       se(o, t[0]),
       Ee(o, 100 * e, 130 * e, 20.8806130178211 * e),
       se(o, t[0], t[0], 4 * e),
       Ee(o, 100 * e, 130 * e, 12.165525060596439 * e),
       se(o, t[0], t[0], 4 * e),
       Ee(o, 100 * e, 130 * e, 6 * e),
       se(o, t[0]),
       o.save(),
       o.translate(102 * e, 81.984375 * e),
       o.rotate(0),
       Te(o, -74 * e, -57 * e, 148 * e, 114 * e, 23 * e),
       o.restore(),
       se(o, t[0], t[0], 4 * e),
       o.save(),
       o.translate(101 * e, 64.984375 * e),
       o.rotate(0),
       Te(o, -33 * e, -10 * e, 66 * e, 20 * e, 15 * e),
       o.restore(),
       se(o, t[0], t[0], 4 * e),
       o.save(),
       o.translate(102 * e, 63.484375 * e),
       o.rotate(0),
       Te(o, -9 * e, -27.5 * e, 18 * e, 55 * e, 15 * e),
       o.restore(),
       o.translate(5, -5),
       o.globalAlpha = 1,
       Ee(o, 174 * e, 87.984375 * e, 20.8806130178211 * e),
       se(o, t[1], t[3], 8 * e),
       Ee(o, 174 * e, 87.984375 * e, 12.165525060596439 * e),
       se(o, t[1], t[3], 8 * e),
       Ee(o, 174 * e, 87.484375 * e, 6 * e),
       se(o, t[2]),
       Ee(o, 30 * e, 87.984375 * e, 20.8806130178211 * e),
       se(o, t[1], t[3], 8 * e),
       Ee(o, 30 * e, 87.984375 * e, 12.165525060596439 * e),
       se(o, t[1], t[3], 8 * e),
       Ee(o, 30 * e, 87.484375 * e, 6 * e),
       se(o, t[2]),
       Ee(o, 102 * e, 30 * e, 20.8806130178211 * e),
       se(o, t[1], t[3], 8 * e),
       Ee(o, 102 * e, 30 * e, 12.165525060596439 * e),
       se(o, t[1], t[3], 8 * e),
       Ee(o, 102 * e, 30 * e, 6 * e),
       se(o, t[1]),
       Ee(o, 102 * e, 130 * e, 20.8806130178211 * e),
       se(o, t[1], t[3], 8 * e),
       Ee(o, 102 * e, 130 * e, 12.165525060596439 * e),
       se(o, t[1], t[3], 8 * e),
       Ee(o, 102 * e, 130 * e, 6 * e),
       se(o, t[1]),
       o.save(),
       o.translate(102 * e, 81.984375 * e),
       Te(o, -74 * e, -57 * e, 148 * e, 114 * e, 23 * e),
       o.restore(),
       se(o, t[1], t[3], 8 * e),
       o.save(),
       o.translate(101 * e, 64.984375 * e),
       Te(o, -33 * e, -10 * e, 66 * e, 20 * e, 15 * e),
       o.restore(),
       se(o, t[2], t[1], 8 * e),
       o.save(),
       o.translate(102 * e, 63.484375 * e),
       Te(o, -9 * e, -27.5 * e, 18 * e, 55 * e, 15 * e),
       o.restore(),
       se(o, t[2], t[1], 8 * e),
       Ee(o, 135 * e, 107.36605834960938 * e, 21.095023109728988 * e),
       se(o, t[1], t[3], 8 * e),
       Ee(o, 135 * e, 107.36605834960938 * e, 13 * e),
       se(o, t[1], t[3], 8 * e),
       Ee(o, 135 * e, 107.36605834960938 * e, 6.082762530298219 * e),
       se(o, t[2]),
       Ee(o, 70 * e, 107.36605834960938 * e, 21.095023109728988 * e),
       se(o, t[1], t[3], 8 * e),
       Ee(o, 70 * e, 107.36605834960938 * e, 13 * e),
       se(o, t[1], t[3], 8 * e),
       Ee(o, 70 * e, 107.36605834960938 * e, 6.082762530298219 * e),
       se(o, t[2]),
       n
   }
   function fr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 95 * e,
       r.height = 85 * e,
       0 == t ? (n.translate(7 * e, 15 * e),
       n.scale(.9, .9),
       n.save(),
       Te(n, 0 * e, 5 * e, 90 * e, 60 * e, 10),
       se(n, i[0]),
       n.globalCompositeOperation = "destination-out",
       Ee(n, 25 * e, 40 * e, 10 * e),
       n.fill(),
       Ee(n, 65 * e, 40 * e, 10 * e),
       n.fill(),
       n.restore(),
       n.save(),
       Te(n, 0, 0, 90 * e, 60 * e, 10 * e),
       se(n, i[1]),
       n.globalCompositeOperation = "destination-out",
       Ee(n, 25 * e, 40 * e, 10 * e),
       n.fill(),
       Ee(n, 65 * e, 40 * e, 10 * e),
       n.fill(),
       n.restore()) : 1 == t && (n.scale(.8, .8),
       n.translate(15 * e, 33 * e),
       n.save(),
       n.scale(.56, .56),
       n.translate(-39 * e, -60 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(32.5 * e, 50.642852783203125 * e),
       n.bezierCurveTo(83 * e, 69.64285278320312 * e, 83 * e, 69.64285278320312 * e, 133.5 * e, 88.64285278320312 * e),
       n.bezierCurveTo(93 * e, 92.64285278320312 * e, 93 * e, 92.64285278320312 * e, 52.5 * e, 96.64285278320312 * e),
       n.bezierCurveTo(30.5 * e, 100.64285278320312 * e, 36.5 * e, 94.64285278320312 * e, 32.5 * e, 84.64285278320312 * e),
       n.bezierCurveTo(21.5 * e, 45.642852783203125 * e, 24.5 * e, 48.642852783203125 * e, 31.5 * e, 50.642852783203125 * e),
       n.closePath(),
       se(n, i[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(116.5 * e, 85.64285278320312 * e),
       n.bezierCurveTo(160.5 * e, 67.14285278320312 * e, 160.5 * e, 67.14285278320312 * e, 204.5 * e, 48.642852783203125 * e),
       n.bezierCurveTo(220.5 * e, 42.642852783203125 * e, 208.5 * e, 68.64285278320312 * e, 205.5 * e, 85.64285278320312 * e),
       n.bezierCurveTo(202.5 * e, 98.64285278320312 * e, 199.5 * e, 98.64285278320312 * e, 188.5 * e, 100.64285278320312 * e),
       n.closePath(),
       se(n, i[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(166.5 * e, 68.64285278320312 * e),
       n.bezierCurveTo(147.5 * e, 72.64285278320312 * e, 145.5 * e, 73.64285278320312 * e, 142.5 * e, 62.642852783203125 * e),
       n.bezierCurveTo(121.5 * e, 12.642852783203125 * e, 122.5 * e, 5.642852783203125 * e, 117.5 * e, 15.642852783203125 * e),
       n.bezierCurveTo(105.5 * e, 40.642852783203125 * e, 105.5 * e, 40.642852783203125 * e, 93.5 * e, 65.64285278320312 * e),
       n.bezierCurveTo(89.5 * e, 74.64285278320312 * e, 84.5 * e, 72.64285278320312 * e, 73.5 * e, 74.64285278320312 * e),
       n.bezierCurveTo(98 * e, 87.64285278320312 * e, 98 * e, 87.64285278320312 * e, 122.5 * e, 100.64285278320312 * e),
       n.closePath(),
       se(n, i[1]),
       n.restore(),
       n.save(),
       Te(n, 0, 15 * e, 90 * e, 50 * e, 10 * e),
       se(n, i[0]),
       Te(n, 0, 10 * e, 90 * e, 50 * e, 10 * e),
       se(n, i[1]),
       n.globalCompositeOperation = "destination-out",
       Ee(n, 25 * e, 40 * e, 10 * e),
       n.fill(),
       Ee(n, 65 * e, 40 * e, 10 * e),
       n.fill(),
       n.restore()),
       r
   }
   function Vr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       if (r.width = 120 * e,
       r.height = 100 * e,
       Te(n, 10 * e, 10 * e, 95 * e, 80 * e, 10 * e),
       se(n, i[2]),
       Te(n, 10 * e, 5 * e, 95 * e, 80 * e, 10 * e),
       se(n, i[3], i[4], 4 * e),
       0 == t) {
           var o = fr(.75 * e, i, 0);
           n.drawImage(o, 22 * e, 18 * e)
       } else if (1 == t) {
           o = fr(.75 * e, i, 1);
           n.drawImage(o, 22 * e, 18 * e)
       }
       return r
   }
   function zr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       r.width = 185 * e,
       r.height = 164 * e,
       n.translate(0, 0);
       var o = Gr(e, i, t);
       n.drawImage(o, -10 * e, 0 * e);
       o = Lr(e, i, t, 0);
       n.drawImage(o, -83 * e, -40 * e);
       o = Lr(e, i, t, Math.PI / 1.4);
       n.drawImage(o, -15 * e, -88 * e);
       o = Lr(e, i, t, Math.PI / -1.4);
       return n.drawImage(o, 15 * e, -8 * e),
       r
   }
   function Hr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 450 * e,
       r.height = 790 * e,
       n.translate(5 * e, 5 * e),
       n.globalAlpha = 0,
       Ee(n, 178.5 * e, 172.828125 * e, 150 * e),
       se(n, void 0, t[0], 65 * e),
       Ee(n, 178.5 * e, 172.828125 * e, 150 * e),
       se(n, void 0, t[0], 55 * e),
       n.closePath(),
       n.save(),
       n.translate(177 * e, 512.328125 * e),
       Te(n, -25 * e, -202.5 * e, 65 * e, 405 * e, 25 * e),
       n.restore(),
       se(n, t[0]),
       n.save(),
       n.translate(136 * e, 581.828125 * e),
       Te(n, -39 * e, -23 * e, 78 * e, 46 * e, 25 * e),
       n.restore(),
       se(n, t[0]),
       n.save(),
       n.translate(135.5 * e, 663.828125 * e),
       Te(n, -39.5 * e, -22 * e, 79 * e, 44 * e, 25 * e),
       n.restore(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(114 * e, 594.828125 * e),
       n.bezierCurveTo(175 * e, 596.828125 * e, 163 * e, 596.828125 * e, 172 * e, 594.828125 * e),
       n.bezierCurveTo(171.5 * e, 633.828125 * e, 171.5 * e, 633.828125 * e, 171 * e, 672.828125 * e),
       n.bezierCurveTo(110 * e, 673.828125 * e, 140.5 * e, 673.328125 * e, 110 * e, 673.828125 * e),
       n.bezierCurveTo(110.5 * e, 661.828125 * e, 110.5 * e, 661.828125 * e, 111 * e, 649.828125 * e),
       n.bezierCurveTo(157 * e, 633.828125 * e, 134 * e, 607.828125 * e, 114 * e, 594.828125 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.translate(0, 5 * e),
       n.moveTo(140 * e, 294.828125 * e),
       n.bezierCurveTo(212 * e, 295.828125 * e, 176.5 * e, 295.328125 * e, 213 * e, 295.828125 * e),
       n.bezierCurveTo(201.5 * e, 325.328125 * e, 201.5 * e, 325.328125 * e, 190 * e, 354.828125 * e),
       n.bezierCurveTo(175.5 * e, 355.828125 * e, 175.5 * e, 355.828125 * e, 161 * e, 356.828125 * e),
       n.bezierCurveTo(154.5 * e, 328.828125 * e, 154.5 * e, 328.828125 * e, 148 * e, 300.828125 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(3, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(159 * e, 679.828125 * e),
       n.bezierCurveTo(180 * e, 665.828125 * e, 155 * e, 675.828125 * e, 151 * e, 671.828125 * e),
       n.bezierCurveTo(154.5 * e, 685.328125 * e, 154.5 * e, 685.328125 * e, 158 * e, 698.828125 * e),
       n.bezierCurveTo(171 * e, 699.828125 * e, 171 * e, 699.828125 * e, 184 * e, 700.828125 * e),
       n.closePath(),
       se(n, t[0]),
       n.save(),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(157 * e, 548.828125 * e),
       n.bezierCurveTo(157 * e, 561.828125 * e, 157 * e, 561.828125 * e, 157 * e, 574.828125 * e),
       n.bezierCurveTo(132.5 * e, 580.828125 * e, 132.5 * e, 580.828125 * e, 108 * e, 586.828125 * e),
       n.bezierCurveTo(112 * e, 599.828125 * e, 111 * e, 593.828125 * e, 112 * e, 599.828125 * e),
       n.bezierCurveTo(159 * e, 603.828125 * e, 126.5 * e, 601.328125 * e, 141 * e, 602.828125 * e),
       n.bezierCurveTo(145 * e, 641.828125 * e, 143.5 * e, 623.828125 * e, 146 * e, 644.828125 * e),
       n.bezierCurveTo(129.5 * e, 645.328125 * e, 129.5 * e, 645.328125 * e, 113 * e, 645.828125 * e),
       n.bezierCurveTo(107.5 * e, 652.828125 * e, 107.5 * e, 652.828125 * e, 102 * e, 659.828125 * e),
       n.bezierCurveTo(104 * e, 669.328125 * e, 104 * e, 669.328125 * e, 106 * e, 678.828125 * e),
       n.bezierCurveTo(145 * e, 679.328125 * e, 145 * e, 679.328125 * e, 184 * e, 679.828125 * e),
       n.bezierCurveTo(185 * e, 615.828125 * e, 185 * e, 615.828125 * e, 186 * e, 551.828125 * e),
       n.bezierCurveTo(172.5 * e, 551.328125 * e, 172.5 * e, 551.328125 * e, 159 * e, 550.828125 * e),
       n.closePath(),
       se(n, t[0], t[0], 7 * e),
       n.restore(),
       n.globalAlpha = 1,
       n.translate(15 * e, 35 * e),
       Ee(n, 178.5 * e, 172.828125 * e, 150 * e),
       se(n, void 0, t[2], 95 * e),
       Ee(n, 178.5 * e, 172.828125 * e, 150 * e),
       se(n, void 0, t[1], 55 * e),
       n.closePath(),
       n.save(),
       n.translate(177 * e, 512.328125 * e),
       Te(n, -25 * e, -202.5 * e, 65 * e, 405 * e, 25 * e),
       n.restore(),
       se(n, t[1], t[2], 20 * e),
       n.save(),
       n.translate(136 * e, 581.828125 * e),
       Te(n, -39 * e, -23 * e, 78 * e, 46 * e, 25 * e),
       n.restore(),
       se(n, t[1], t[2], 20 * e),
       n.save(),
       n.translate(135.5 * e, 663.828125 * e),
       Te(n, -39.5 * e, -22 * e, 79 * e, 44 * e, 25 * e),
       n.restore(),
       se(n, t[1], t[2], 20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(114 * e, 594.828125 * e),
       n.bezierCurveTo(175 * e, 596.828125 * e, 163 * e, 596.828125 * e, 172 * e, 594.828125 * e),
       n.bezierCurveTo(171.5 * e, 633.828125 * e, 171.5 * e, 633.828125 * e, 171 * e, 672.828125 * e),
       n.bezierCurveTo(110 * e, 673.828125 * e, 140.5 * e, 673.328125 * e, 110 * e, 673.828125 * e),
       n.bezierCurveTo(110.5 * e, 661.828125 * e, 110.5 * e, 661.828125 * e, 111 * e, 649.828125 * e),
       n.bezierCurveTo(157 * e, 633.828125 * e, 134 * e, 607.828125 * e, 114 * e, 594.828125 * e),
       n.closePath(),
       se(n, t[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.translate(0, 5 * e),
       n.moveTo(123 * e, 294.828125 * e),
       n.bezierCurveTo(212 * e, 295.828125 * e, 190.5 * e, 295.328125 * e, 250 * e, 295.828125 * e),
       n.bezierCurveTo(231.5 * e, 325.328125 * e, 231.5 * e, 325.328125 * e, 220 * e, 354.828125 * e),
       n.bezierCurveTo(175.5 * e, 355.828125 * e, 175.5 * e, 355.828125 * e, 140 * e, 356.828125 * e),
       n.bezierCurveTo(123.5 * e, 328.828125 * e, 123.5 * e, 328.828125 * e, 123 * e, 294.828125 * e),
       n.closePath(),
       se(n, t[1]),
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(159 * e, 679.828125 * e),
       n.bezierCurveTo(180 * e, 665.828125 * e, 155 * e, 675.828125 * e, 151 * e, 671.828125 * e),
       n.bezierCurveTo(154.5 * e, 685.328125 * e, 154.5 * e, 685.328125 * e, 158 * e, 698.828125 * e),
       n.bezierCurveTo(171 * e, 699.828125 * e, 171 * e, 699.828125 * e, 184 * e, 700.828125 * e),
       n.closePath(),
       se(n, t[1]),
       n.save(),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(157 * e, 548.828125 * e),
       n.bezierCurveTo(157 * e, 561.828125 * e, 157 * e, 561.828125 * e, 157 * e, 574.828125 * e),
       n.bezierCurveTo(132.5 * e, 580.828125 * e, 132.5 * e, 580.828125 * e, 108 * e, 586.828125 * e),
       n.bezierCurveTo(112 * e, 599.828125 * e, 111 * e, 593.828125 * e, 112 * e, 599.828125 * e),
       n.bezierCurveTo(159 * e, 603.828125 * e, 126.5 * e, 601.328125 * e, 141 * e, 602.828125 * e),
       n.bezierCurveTo(145 * e, 641.828125 * e, 143.5 * e, 623.828125 * e, 146 * e, 644.828125 * e),
       n.bezierCurveTo(129.5 * e, 645.328125 * e, 129.5 * e, 645.328125 * e, 113 * e, 645.828125 * e),
       n.bezierCurveTo(107.5 * e, 652.828125 * e, 107.5 * e, 652.828125 * e, 102 * e, 659.828125 * e),
       n.bezierCurveTo(104 * e, 669.328125 * e, 104 * e, 669.328125 * e, 106 * e, 678.828125 * e),
       n.bezierCurveTo(145 * e, 679.328125 * e, 145 * e, 679.328125 * e, 184 * e, 679.828125 * e),
       n.bezierCurveTo(185 * e, 615.828125 * e, 185 * e, 615.828125 * e, 186 * e, 551.828125 * e),
       n.bezierCurveTo(172.5 * e, 551.328125 * e, 172.5 * e, 551.328125 * e, 159 * e, 550.828125 * e),
       n.closePath(),
       se(n, t[1], t[1], 7 * e),
       n.restore(),
       r
   }
   function yr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 202 * e,
       r.height = 202 * e,
       n.translate(2 * e, 1 * e),
       n.globalAlpha = .3,
       Ee(n, 98 * e, 99 * e, 100 * e),
       se(n, t[0]),
       n.globalAlpha = .5,
       Ee(n, 98 * e, 99 * e, 90 * e),
       se(n, t[1]),
       r
   }
   function Br(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 89 * e,
       r.height = 89 * e,
       n.save(),
       n.translate(44.5 * e, 44.5 * e),
       ue(n, 6, 40 * e, 10 * e),
       n.restore(),
       se(n, t[0], t[1], 5 * e),
       n.save(),
       n.translate(44.5 * e, 44.5 * e),
       ue(n, 6, 25.11521001172521 * e, 10 * e),
       n.restore(),
       se(n, t[2], t[3], 5 * e),
       r
   }
   function wr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 88 * e,
       r.height = 88 * e,
       n.save(),
       n.translate(44 * e, 44 * e),
       n.rotate(.52),
       ue(n, 6, 43 * e, 10 * e),
       n.restore(),
       se(n, t[0], t[1], 3 * e),
       r
   }
   function Kr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 202 * e,
       r.height = 202 * e,
       n.translate(2 * e, 1 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 10 * e),
       n.save(),
       n.translate(98 * e, 41.15177917480469 * e),
       n.rotate(.8),
       Te(n, -16 * e, -16.5 * e, 32 * e, 33 * e, 7 * e),
       n.restore(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(98 * e, 22.5089111328125 * e),
       n.bezierCurveTo(97.5 * e, 41.5089111328125 * e, 97.5 * e, 41.5089111328125 * e, 97 * e, 60.5089111328125 * e),
       se(n, t[2]),
       n.save(),
       n.translate(147.5 * e, 69.5089111328125 * e),
       n.rotate(.2),
       Te(n, -15.5 * e, -16 * e, 31 * e, 32 * e, 7 * e),
       n.restore(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(163 * e, 59.50892639160156 * e),
       n.bezierCurveTo(147 * e, 69.50892639160156 * e, 127 * e, 82.50892639160156 * e, 131 * e, 79.50892639160156 * e),
       se(n, t[2]),
       n.save(),
       n.translate(143.5 * e, 128.2946319580078 * e),
       n.rotate(1.24),
       Te(n, -16.5 * e, -17.5 * e, 33 * e, 35 * e, 7 * e),
       n.restore(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(162 * e, 135.93748474121094 * e),
       n.bezierCurveTo(143.5 * e, 128.43748474121094 * e, 129 * e, 120.93748474121094 * e, 125 * e, 120.93748474121094 * e),
       se(n, t[2]),
       n.save(),
       n.translate(99 * e, 156.08035278320312 * e),
       n.rotate(.84),
       Te(n, -18 * e, -18 * e, 36 * e, 36 * e, 7 * e),
       n.restore(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(98 * e, 136.08035278320312 * e),
       n.bezierCurveTo(98 * e, 156.08035278320312 * e, 98 * e, 156.08035278320312 * e, 98 * e, 176.08035278320312 * e),
       se(n, t[2]),
       n.save(),
       n.translate(54 * e, 72.22320556640625 * e),
       n.rotate(1.32),
       Te(n, -18 * e, -19 * e, 36 * e, 38 * e, 7 * e),
       n.restore(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(34 * e, 60.79463195800781 * e),
       n.bezierCurveTo(53.5 * e, 72.29463195800781 * e, 69 * e, 79.79463195800781 * e, 73 * e, 83.79463195800781 * e),
       se(n, t[2]),
       n.save(),
       n.translate(49 * e, 127.29463195800781 * e),
       n.rotate(1.76),
       Te(n, -20 * e, -17.5 * e, 40 * e, 35 * e, 7 * e),
       n.restore(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(30 * e, 141.7946319580078 * e),
       n.bezierCurveTo(47 * e, 130.2946319580078 * e, 64 * e, 119.79463195800781 * e, 64 * e, 118.79463195800781 * e),
       se(n, t[2]),
       n.globalAlpha = 1,
       n.translate(0, -10 * e),
       n.save(),
       n.translate(98 * e, 41.15177917480469 * e),
       n.rotate(.8),
       Te(n, -16 * e, -16.5 * e, 32 * e, 33 * e, 7 * e),
       n.restore(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(98 * e, 22.5089111328125 * e),
       n.bezierCurveTo(97.5 * e, 41.5089111328125 * e, 97.5 * e, 41.5089111328125 * e, 97 * e, 60.5089111328125 * e),
       se(n, void 0, t[4], 5 * e),
       n.save(),
       n.translate(147.5 * e, 69.5089111328125 * e),
       n.rotate(.2),
       Te(n, -15.5 * e, -16 * e, 31 * e, 32 * e, 7 * e),
       n.restore(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(163 * e, 59.50892639160156 * e),
       n.bezierCurveTo(147 * e, 69.50892639160156 * e, 127 * e, 82.50892639160156 * e, 131 * e, 79.50892639160156 * e),
       se(n, void 0, t[4], 5 * e),
       n.save(),
       n.translate(143.5 * e, 128.2946319580078 * e),
       n.rotate(1.24),
       Te(n, -16.5 * e, -17.5 * e, 33 * e, 35 * e, 7 * e),
       n.restore(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(162 * e, 135.93748474121094 * e),
       n.bezierCurveTo(143.5 * e, 128.43748474121094 * e, 129 * e, 120.93748474121094 * e, 125 * e, 120.93748474121094 * e),
       se(n, void 0, t[4], 5 * e),
       n.save(),
       n.translate(99 * e, 156.08035278320312 * e),
       n.rotate(.84),
       Te(n, -18 * e, -18 * e, 36 * e, 36 * e, 7 * e),
       n.restore(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(98 * e, 136.08035278320312 * e),
       n.bezierCurveTo(98 * e, 156.08035278320312 * e, 98 * e, 156.08035278320312 * e, 98 * e, 176.08035278320312 * e),
       se(n, void 0, t[4], 5 * e),
       n.save(),
       n.translate(54 * e, 72.22320556640625 * e),
       n.rotate(1.32),
       Te(n, -18 * e, -19 * e, 36 * e, 38 * e, 7 * e),
       n.restore(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(34 * e, 60.79463195800781 * e),
       n.bezierCurveTo(53.5 * e, 72.29463195800781 * e, 69 * e, 79.79463195800781 * e, 73 * e, 83.79463195800781 * e),
       se(n, void 0, t[4], 5 * e),
       n.save(),
       n.translate(49 * e, 127.29463195800781 * e),
       n.rotate(1.76),
       Te(n, -20 * e, -17.5 * e, 40 * e, 35 * e, 7 * e),
       n.restore(),
       se(n, t[3], t[4], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(30 * e, 141.7946319580078 * e),
       n.bezierCurveTo(47 * e, 130.2946319580078 * e, 64 * e, 119.79463195800781 * e, 64 * e, 118.79463195800781 * e),
       se(n, void 0, t[4], 5 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 10 * e),
       n.save(),
       n.translate(98 * e, 99 * e),
       ue(n, 6, 70.28669492273468 * e, 10 * e),
       n.restore(),
       se(n, t[2]),
       n.save(),
       n.translate(98 * e, 99 * e),
       ue(n, 6, 56.455940020351264 * e, 10 * e),
       n.restore(),
       se(n, t[2]),
       n.globalAlpha = 1,
       n.translate(0, -10 * e),
       n.save(),
       n.translate(98 * e, 99 * e),
       ue(n, 6, 70.28669492273468 * e, 10 * e),
       n.restore(),
       se(n, t[5], t[6], 5 * e),
       n.save(),
       n.translate(98 * e, 99 * e),
       ue(n, 6, 56.455940020351264 * e, 10 * e),
       n.restore(),
       se(n, t[7], t[8], 7 * e),
       r
   }
   function Wr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 161 * e,
       r.height = 184 * e,
       n.translate(0, 10 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(105.5 * e, 34.609375 * e),
       n.bezierCurveTo(48.5 * e, 7.609375 * e, 11.5 * e, 58.609375 * e, 20.5 * e, 97.609375 * e),
       n.bezierCurveTo(44.5 * e, 161.609375 * e, 70.5 * e, 171.609375 * e, 88.5 * e, 156.609375 * e),
       n.bezierCurveTo(120.5 * e, 129.609375 * e, 123.5 * e, 105.609375 * e, 128.5 * e, 83.609375 * e),
       n.bezierCurveTo(137.5 * e, 79.609375 * e, 141.5 * e, 79.609375 * e, 146.5 * e, 81.609375 * e),
       n.bezierCurveTo(153.5 * e, 70.609375 * e, 151.5 * e, 65.609375 * e, 148.5 * e, 61.609375 * e),
       n.bezierCurveTo(134.5 * e, 60.609375 * e, 131.5 * e, 63.609375 * e, 127.5 * e, 66.609375 * e),
       n.bezierCurveTo(127.5 * e, 55.609375 * e, 125.5 * e, 54.609375 * e, 120.5 * e, 51.609375 * e),
       n.bezierCurveTo(128.5 * e, 42.609375 * e, 136.5 * e, 38.609375 * e, 147.5 * e, 39.609375 * e),
       n.bezierCurveTo(152.5 * e, 23.609375 * e, 147.5 * e, 21.609375 * e, 140.5 * e, 17.609375 * e),
       n.bezierCurveTo(120.5 * e, 17.609375 * e, 114.5 * e, 27.609375 * e, 106.5 * e, 35.609375 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(45.5 * e, 144.609375 * e),
       n.bezierCurveTo(35.5 * e, 155.609375 * e, 37 * e, 152.109375 * e, 28.5 * e, 159.609375 * e),
       n.bezierCurveTo(16.5 * e, 154.609375 * e, 16.5 * e, 151.609375 * e, 17.5 * e, 141.609375 * e),
       n.bezierCurveTo(25.5 * e, 134.109375 * e, 25.5 * e, 134.109375 * e, 33.5 * e, 126.609375 * e),
       se(n, t[0]),
       n.translate(0, -10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(45.5 * e, 144.609375 * e),
       n.bezierCurveTo(35.5 * e, 155.609375 * e, 37 * e, 152.109375 * e, 28.5 * e, 159.609375 * e),
       n.bezierCurveTo(16.5 * e, 154.609375 * e, 16.5 * e, 151.609375 * e, 17.5 * e, 141.609375 * e),
       n.bezierCurveTo(25.5 * e, 134.109375 * e, 25.5 * e, 134.109375 * e, 33.5 * e, 126.609375 * e),
       se(n, t[1], t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(105.5 * e, 34.609375 * e),
       n.bezierCurveTo(48.5 * e, 7.609375 * e, 11.5 * e, 58.609375 * e, 20.5 * e, 97.609375 * e),
       n.bezierCurveTo(44.5 * e, 161.609375 * e, 70.5 * e, 171.609375 * e, 88.5 * e, 156.609375 * e),
       n.bezierCurveTo(120.5 * e, 129.609375 * e, 123.5 * e, 105.609375 * e, 128.5 * e, 83.609375 * e),
       n.bezierCurveTo(137.5 * e, 79.609375 * e, 141.5 * e, 79.609375 * e, 146.5 * e, 81.609375 * e),
       n.bezierCurveTo(153.5 * e, 70.609375 * e, 151.5 * e, 65.609375 * e, 148.5 * e, 61.609375 * e),
       n.bezierCurveTo(134.5 * e, 60.609375 * e, 131.5 * e, 63.609375 * e, 127.5 * e, 66.609375 * e),
       n.bezierCurveTo(127.5 * e, 55.609375 * e, 125.5 * e, 54.609375 * e, 120.5 * e, 51.609375 * e),
       n.bezierCurveTo(128.5 * e, 42.609375 * e, 136.5 * e, 38.609375 * e, 147.5 * e, 39.609375 * e),
       n.bezierCurveTo(152.5 * e, 23.609375 * e, 147.5 * e, 21.609375 * e, 140.5 * e, 17.609375 * e),
       n.bezierCurveTo(120.5 * e, 17.609375 * e, 114.5 * e, 27.609375 * e, 106.5 * e, 35.609375 * e),
       n.closePath(),
       se(n, t[1], t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(104.5 * e, 35.609375 * e),
       n.bezierCurveTo(71.5 * e, 36.609375 * e, 57.5 * e, 52.609375 * e, 58.5 * e, 81.609375 * e),
       n.bezierCurveTo(59.5 * e, 103.609375 * e, 66.5 * e, 107.609375 * e, 66.5 * e, 116.609375 * e),
       n.bezierCurveTo(67.5 * e, 128.609375 * e, 65.5 * e, 131.609375 * e, 63.5 * e, 137.609375 * e),
       se(n, void 0, t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(59.5 * e, 72.609375 * e),
       n.bezierCurveTo(38.5 * e, 80.609375 * e, 43.5 * e, 81.609375 * e, 37.5 * e, 89.609375 * e),
       se(n, void 0, t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(60.5 * e, 85.609375 * e),
       n.bezierCurveTo(75.5 * e, 91.609375 * e, 76.5 * e, 96.609375 * e, 81.5 * e, 104.609375 * e),
       se(n, void 0, t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(68.5 * e, 122.609375 * e),
       n.bezierCurveTo(79.5 * e, 130.609375 * e, 74.5 * e, 128.609375 * e, 80.5 * e, 134.609375 * e),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(142.5 * e, 18.609375 * e),
       n.bezierCurveTo(151.5 * e, 28.609375 * e, 151.5 * e, 32.609375 * e, 146.5 * e, 40.609375 * e),
       n.bezierCurveTo(137.5 * e, 26.609375 * e, 138.5 * e, 24.609375 * e, 142.5 * e, 19.609375 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(146.5 * e, 61.50892639160156 * e),
       n.bezierCurveTo(157.5 * e, 69.50892639160156 * e, 150.5 * e, 79.50892639160156 * e, 145.5 * e, 81.50892639160156 * e),
       n.bezierCurveTo(140.5 * e, 65.50892639160156 * e, 144.5 * e, 64.50892639160156 * e, 146.5 * e, 62.50892639160156 * e),
       n.closePath(),
       se(n, t[3]),
       r
   }
   function Yr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 254 * e,
       r.height = 288 * e,
       n.translate(0, 5),
       n.globalAlpha = .5,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(218 * e, 84.640625 * e),
       n.bezierCurveTo(150 * e, 13.640625 * e, 186 * e, 92.640625 * e, 168 * e, 103.640625 * e),
       n.bezierCurveTo(151 * e, 107.640625 * e, 150 * e, 61.640625 * e, 144 * e, 39.640625 * e),
       n.bezierCurveTo(135 * e, 1.640625 * e, 113 * e, 2.640625 * e, 110 * e, 40.640625 * e),
       n.bezierCurveTo(106 * e, 97.640625 * e, 98 * e, 102.640625 * e, 83 * e, 100.640625 * e),
       n.bezierCurveTo(68 * e, 98.640625 * e, 67 * e, 77.640625 * e, 70 * e, 55.640625 * e),
       n.bezierCurveTo(75 * e, 16.640625 * e, 47 * e, 52.640625 * e, 38 * e, 67.640625 * e),
       n.bezierCurveTo(10 * e, 113.640625 * e, 10 * e, 181.640625 * e, 23 * e, 213.640625 * e),
       n.bezierCurveTo(45 * e, 266.640625 * e, 97 * e, 277.640625 * e, 147 * e, 269.640625 * e),
       n.bezierCurveTo(217 * e, 259.640625 * e, 236 * e, 221.640625 * e, 239 * e, 166.640625 * e),
       n.bezierCurveTo(239 * e, 113.640625 * e, 223 * e, 90.640625 * e, 219 * e, 86.640625 * e),
       n.closePath(),
       se(n, t[0], t[0], 4 * e),
       Ee(n, 175 * e, 220.640625 * e, 29.546573405388315 * e),
       se(n, t[0]),
       Ee(n, 79 * e, 222.640625 * e, 28.178005607210743 * e),
       se(n, t[0]),
       Ee(n, 175 * e, 214.640625 * e, 27.892651361962706 * e),
       se(n, t[0], t[0], 4 * e),
       Ee(n, 79 * e, 215.640625 * e, 26.570660511172846 * e),
       se(n, t[0], t[0], 4 * e),
       n.translate(0, -5),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(218 * e, 84.640625 * e),
       n.bezierCurveTo(150 * e, 13.640625 * e, 186 * e, 92.640625 * e, 168 * e, 103.640625 * e),
       n.bezierCurveTo(151 * e, 107.640625 * e, 150 * e, 61.640625 * e, 144 * e, 39.640625 * e),
       n.bezierCurveTo(135 * e, 1.640625 * e, 113 * e, 2.640625 * e, 110 * e, 40.640625 * e),
       n.bezierCurveTo(106 * e, 97.640625 * e, 98 * e, 102.640625 * e, 83 * e, 100.640625 * e),
       n.bezierCurveTo(68 * e, 98.640625 * e, 67 * e, 77.640625 * e, 70 * e, 55.640625 * e),
       n.bezierCurveTo(75 * e, 16.640625 * e, 47 * e, 52.640625 * e, 38 * e, 67.640625 * e),
       n.bezierCurveTo(10 * e, 113.640625 * e, 10 * e, 181.640625 * e, 23 * e, 213.640625 * e),
       n.bezierCurveTo(45 * e, 266.640625 * e, 97 * e, 277.640625 * e, 147 * e, 269.640625 * e),
       n.bezierCurveTo(217 * e, 259.640625 * e, 236 * e, 221.640625 * e, 239 * e, 166.640625 * e),
       n.bezierCurveTo(239 * e, 113.640625 * e, 223 * e, 90.640625 * e, 219 * e, 86.640625 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       Ee(n, 175 * e, 222.640625 * e, 26.546573405388315 * e),
       se(n, t[3]),
       Ee(n, 79 * e, 222.640625 * e, 26.178005607210743 * e),
       se(n, t[3]),
       Ee(n, 175 * e, 210.640625 * e, 26.892651361962706 * e),
       se(n, t[4], t[5], 8 * e),
       Ee(n, 79 * e, 210.640625 * e, 26.570660511172846 * e),
       se(n, t[4], t[5], 8 * e),
       r
   }
   function Ur(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 104 * e,
       r.height = 117 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(4 * e, 90 * e),
       n.bezierCurveTo(20 * e, 99.5 * e, 20 * e, 99.5 * e, 36 * e, 109 * e),
       n.bezierCurveTo(67 * e, 92 * e, 67 * e, 92 * e, 98 * e, 75 * e),
       n.bezierCurveTo(91 * e, 27 * e, 91 * e, 27 * e, 91 * e, 28 * e),
       n.bezierCurveTo(72.5 * e, 16 * e, 72.5 * e, 16 * e, 54 * e, 4 * e),
       n.bezierCurveTo(33.5 * e, 10 * e, 33.5 * e, 10 * e, 13 * e, 16 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(6 * e, 76 * e),
       n.bezierCurveTo(13.5 * e, 51.5 * e, 13.5 * e, 51.5 * e, 21 * e, 27 * e),
       n.bezierCurveTo(37.5 * e, 17 * e, 37.5 * e, 17 * e, 54 * e, 7 * e),
       n.bezierCurveTo(33.5 * e, 12.5 * e, 33.5 * e, 12.5 * e, 13 * e, 18 * e),
       n.closePath(),
       se(n, t[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(24 * e, 62 * e),
       n.bezierCurveTo(28.5 * e, 53 * e, 28.5 * e, 53 * e, 33 * e, 44 * e),
       n.bezierCurveTo(41.5 * e, 41 * e, 41.5 * e, 41 * e, 50 * e, 38 * e),
       n.bezierCurveTo(52.5 * e, 35 * e, 52.5 * e, 35 * e, 55 * e, 32 * e),
       n.bezierCurveTo(52 * e, 30 * e, 52 * e, 30 * e, 49 * e, 28 * e),
       n.bezierCurveTo(38 * e, 31.5 * e, 38 * e, 31.5 * e, 27 * e, 35 * e),
       n.closePath(),
       se(n, t[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(36 * e, 107 * e),
       n.bezierCurveTo(66 * e, 90.5 * e, 66 * e, 90.5 * e, 96 * e, 74 * e),
       n.bezierCurveTo(93 * e, 52.5 * e, 93 * e, 52.5 * e, 90 * e, 31 * e),
       n.bezierCurveTo(87 * e, 48 * e, 87 * e, 48 * e, 84 * e, 65 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(1 * e, 89 * e),
       n.bezierCurveTo(18 * e, 100 * e, 34 * e, 110 * e, 35 * e, 111 * e),
       n.bezierCurveTo(67 * e, 93 * e, 67 * e, 93 * e, 99 * e, 75 * e),
       n.bezierCurveTo(100 * e, 78.5 * e, 100 * e, 78.5 * e, 101 * e, 82 * e),
       n.bezierCurveTo(68 * e, 99 * e, 68 * e, 99 * e, 35 * e, 116 * e),
       n.bezierCurveTo(18 * e, 106.5 * e, 18 * e, 106.5 * e, 1 * e, 97 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(36 * e, 107 * e),
       n.bezierCurveTo(66.5 * e, 91.5 * e, 66.5 * e, 91.5 * e, 97 * e, 76 * e),
       n.bezierCurveTo(94.5 * e, 52 * e, 94.5 * e, 52 * e, 92 * e, 28 * e),
       n.bezierCurveTo(73 * e, 15.5 * e, 73 * e, 15.5 * e, 54 * e, 3 * e),
       n.bezierCurveTo(33 * e, 9.5 * e, 33 * e, 9.5 * e, 12 * e, 16 * e),
       n.bezierCurveTo(8 * e, 53 * e, 8 * e, 53 * e, 4 * e, 90 * e),
       n.bezierCurveTo(18.5 * e, 99 * e, 18.5 * e, 99 * e, 33 * e, 108 * e),
       n.closePath(),
       se(n, void 0, t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(22 * e, 71 * e),
       n.bezierCurveTo(30 * e, 76.5 * e, 30 * e, 76.5 * e, 38 * e, 82 * e),
       n.bezierCurveTo(53 * e, 72 * e, 53 * e, 72 * e, 68 * e, 62 * e),
       n.bezierCurveTo(68 * e, 52 * e, 68 * e, 52 * e, 68 * e, 42 * e),
       n.bezierCurveTo(59.5 * e, 35.5 * e, 59.5 * e, 35.5 * e, 51 * e, 29 * e),
       n.bezierCurveTo(39.5 * e, 32 * e, 39.5 * e, 32 * e, 28 * e, 35 * e),
       n.bezierCurveTo(25 * e, 52 * e, 25 * e, 52 * e, 22 * e, 69 * e),
       n.closePath(),
       se(n, void 0, t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(5 * e, 89 * e),
       n.bezierCurveTo(20 * e, 73 * e, 12.5 * e, 80.5 * e, 20 * e, 72 * e),
       n.closePath(),
       se(n, void 0, t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35 * e, 102 * e),
       n.bezierCurveTo(36 * e, 92.5 * e, 36 * e, 92.5 * e, 37 * e, 83 * e),
       n.closePath(),
       se(n, void 0, t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(68 * e, 62 * e),
       n.bezierCurveTo(81 * e, 67.5 * e, 81 * e, 67.5 * e, 94 * e, 73 * e),
       n.closePath(),
       se(n, void 0, t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(70 * e, 41 * e),
       n.bezierCurveTo(80 * e, 35.5 * e, 80 * e, 35.5 * e, 90 * e, 30 * e),
       n.closePath(),
       se(n, void 0, t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(28 * e, 33 * e),
       n.bezierCurveTo(21.5 * e, 26.5 * e, 21.5 * e, 26.5 * e, 15 * e, 20 * e),
       n.closePath(),
       se(n, void 0, t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(51 * e, 28 * e),
       n.bezierCurveTo(53 * e, 17 * e, 53 * e, 17 * e, 55 * e, 6 * e),
       n.closePath(),
       se(n, void 0, t[4], 6 * e),
       r
   }
   function kr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 105 * e,
       r.height = 144 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(-5 * e, 0 * e),
       n.save(),
       n.translate(52.5 * e, 91.5 * e),
       Te(n, -4.5 * e, -39 * e, 9 * e, 78 * e, 5 * e),
       n.restore(),
       se(n, t[0], t[0], 3 * e),
       n.save(),
       n.translate(53 * e, 36 * e),
       Te(n, -29 * e, -17.5 * e, 58 * e, 35 * e, 5 * e),
       n.restore(),
       se(n, t[0], t[0], 4 * e),
       n.save(),
       n.translate(53.5 * e, 35.5 * e),
       Te(n, -26.5 * e, -15 * e, 53 * e, 30 * e, 5 * e),
       n.restore(),
       se(n, t[0], t[0], 4 * e),
       n.translate(5 * e, 0 * e),
       n.globalAlpha = 1,
       n.save(),
       n.translate(52.5 * e, 91.5 * e),
       Te(n, -4.5 * e, -39 * e, 9 * e, 78 * e, 5 * e),
       n.restore(),
       se(n, t[1], t[2], 3 * e),
       n.save(),
       n.translate(53 * e, 36 * e),
       Te(n, -29 * e, -17.5 * e, 58 * e, 35 * e, 5 * e),
       n.restore(),
       se(n, t[3], t[4], 4 * e),
       n.save(),
       n.translate(53.5 * e, 35.5 * e),
       Te(n, -26.5 * e, -15 * e, 53 * e, 30 * e, 5 * e),
       n.restore(),
       se(n, t[5], t[6], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(49 * e, 60.5 * e),
       n.bezierCurveTo(44 * e, 56.5 * e, 44 * e, 56.5 * e, 39 * e, 52.5 * e),
       n.bezierCurveTo(39 * e, 46.5 * e, 39 * e, 46.5 * e, 39 * e, 40.5 * e),
       n.bezierCurveTo(44 * e, 44 * e, 44 * e, 44 * e, 49 * e, 47.5 * e),
       n.bezierCurveTo(49 * e, 54 * e, 49 * e, 54 * e, 49 * e, 60.5 * e),
       n.closePath(),
       se(n, t[7], t[6], 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(66 * e, 40.5 * e),
       n.bezierCurveTo(66 * e, 46.5 * e, 66 * e, 46.5 * e, 66 * e, 52.5 * e),
       n.bezierCurveTo(60.5 * e, 56.5 * e, 60.5 * e, 56.5 * e, 55 * e, 60.5 * e),
       n.bezierCurveTo(56 * e, 53 * e, 56 * e, 53 * e, 57 * e, 45.5 * e),
       n.bezierCurveTo(61.5 * e, 43 * e, 61.5 * e, 43 * e, 66 * e, 40.5 * e),
       n.closePath(),
       se(n, t[7], t[6], 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(52 * e, 33.5 * e),
       n.bezierCurveTo(55.5 * e, 41 * e, 55.5 * e, 41 * e, 59 * e, 48.5 * e),
       n.bezierCurveTo(56 * e, 58 * e, 56 * e, 58 * e, 53 * e, 67.5 * e),
       n.bezierCurveTo(49 * e, 58 * e, 49 * e, 58 * e, 45 * e, 48.5 * e),
       n.bezierCurveTo(48.5 * e, 41 * e, 48.5 * e, 41 * e, 52 * e, 33.5 * e),
       n.closePath(),
       se(n, t[9], t[8], 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(52 * e, 47.5 * e),
       n.bezierCurveTo(54.5 * e, 50.5 * e, 54.5 * e, 50.5 * e, 57 * e, 53.5 * e),
       n.bezierCurveTo(55 * e, 60 * e, 55 * e, 60 * e, 53 * e, 66.5 * e),
       n.bezierCurveTo(50.5 * e, 61 * e, 50.5 * e, 61 * e, 48 * e, 55.5 * e),
       n.bezierCurveTo(50 * e, 52 * e, 50 * e, 52 * e, 52 * e, 48.5 * e),
       n.closePath(),
       se(n, t[11], t[10], 3 * e),
       r
   }
   function Fr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 46 * e,
       r.height = 140 * e,
       n.scale(-1 * e, 1 * e),
       n.translate(-50 * e, 40 * e),
       n.translate(-20 * e, 0),
       n.globalAlpha = i ? .5 : 1,
       n.translate(10 * e, 0),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(22.599990844726562 * e, 85.94999694824219 * e),
       n.bezierCurveTo(17.599990844726562 * e, 83.94999694824219 * e, 17.599990844726562 * e, 83.94999694824219 * e, 12.599990844726562 * e, 81.94999694824219 * e),
       n.bezierCurveTo(19.599990844726562 * e, 73.94999694824219 * e, 2.5999908447265625 * e, 22.949996948242188 * e, 33.59999084472656 * e, 7.9499969482421875 * e),
       n.bezierCurveTo(27.599990844726562 * e, 28.949996948242188 * e, 33.59999084472656 * e, 26.949996948242188 * e, 35.59999084472656 * e, 32.94999694824219 * e),
       n.bezierCurveTo(25.599990844726562 * e, 59.94999694824219 * e, 26.599990844726562 * e, 69.94999694824219 * e, 29.599990844726562 * e, 82.94999694824219 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.translate(-1 * e, 0),
       n.moveTo(17.599990844726562 * e, 89.75 * e),
       n.bezierCurveTo(24.599990844726562 * e, 99.75 * e, 24.599990844726562 * e, 101.75 * e, 20.599990844726562 * e, 111.75 * e),
       n.bezierCurveTo(28.599990844726562 * e, 110.75 * e, 26.599990844726562 * e, 112.75 * e, 28.599990844726562 * e, 111.75 * e),
       n.bezierCurveTo(30.599990844726562 * e, 96.75 * e, 32.59999084472656 * e, 96.75 * e, 30.599990844726562 * e, 87.75 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.translate(1 * e, 0),
       n.moveTo(7.5999908447265625 * e, 86.34999084472656 * e),
       n.bezierCurveTo(12.599990844726562 * e, 85.34999084472656 * e, 14.599990844726562 * e, 84.34999084472656 * e, 13.599990844726562 * e, 84.34999084472656 * e),
       n.bezierCurveTo(21.599990844726562 * e, 83.34999084472656 * e, 21.599990844726562 * e, 83.34999084472656 * e, 29.599990844726562 * e, 82.34999084472656 * e),
       n.bezierCurveTo(33.59999084472656 * e, 85.84999084472656 * e, 33.59999084472656 * e, 85.84999084472656 * e, 37.59999084472656 * e, 89.34999084472656 * e),
       n.bezierCurveTo(34.09999084472656 * e, 91.84999084472656 * e, 34.09999084472656 * e, 91.84999084472656 * e, 30.599990844726562 * e, 94.34999084472656 * e),
       n.bezierCurveTo(21.099990844726562 * e, 93.34999084472656 * e, 21.099990844726562 * e, 93.34999084472656 * e, 11.599990844726562 * e, 92.34999084472656 * e),
       n.closePath(),
       se(n, t[0]),
       n.save(),
       n.translate(23.599990844726562 * e, 110.94999694824219 * e),
       n.rotate(0),
       Te(n, -7 * e, -4 * e, 14 * e, 8 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.translate(0 * e, 0),
       n.globalAlpha = 1,
       n.translate(10 * e, 0),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(22.599990844726562 * e, 85.94999694824219 * e),
       n.bezierCurveTo(17.599990844726562 * e, 83.94999694824219 * e, 17.599990844726562 * e, 83.94999694824219 * e, 12.599990844726562 * e, 81.94999694824219 * e),
       n.bezierCurveTo(19.599990844726562 * e, 73.94999694824219 * e, 2.5999908447265625 * e, 22.949996948242188 * e, 33.59999084472656 * e, 7.9499969482421875 * e),
       n.bezierCurveTo(27.599990844726562 * e, 28.949996948242188 * e, 33.59999084472656 * e, 26.949996948242188 * e, 35.59999084472656 * e, 32.94999694824219 * e),
       n.bezierCurveTo(25.599990844726562 * e, 59.94999694824219 * e, 26.599990844726562 * e, 69.94999694824219 * e, 29.599990844726562 * e, 82.94999694824219 * e),
       n.closePath(),
       se(n, t[3], t[4], 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.translate(-1 * e, 0),
       n.moveTo(17.599990844726562 * e, 89.75 * e),
       n.bezierCurveTo(24.599990844726562 * e, 99.75 * e, 24.599990844726562 * e, 101.75 * e, 20.599990844726562 * e, 111.75 * e),
       n.bezierCurveTo(28.599990844726562 * e, 110.75 * e, 26.599990844726562 * e, 112.75 * e, 28.599990844726562 * e, 111.75 * e),
       n.bezierCurveTo(30.599990844726562 * e, 96.75 * e, 32.59999084472656 * e, 96.75 * e, 30.599990844726562 * e, 87.75 * e),
       n.closePath(),
       se(n, t[1], t[2], 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.translate(1 * e, 0),
       n.moveTo(7.5999908447265625 * e, 86.34999084472656 * e),
       n.bezierCurveTo(12.599990844726562 * e, 85.34999084472656 * e, 14.599990844726562 * e, 84.34999084472656 * e, 13.599990844726562 * e, 84.34999084472656 * e),
       n.bezierCurveTo(21.599990844726562 * e, 83.34999084472656 * e, 21.599990844726562 * e, 83.34999084472656 * e, 29.599990844726562 * e, 82.34999084472656 * e),
       n.bezierCurveTo(33.59999084472656 * e, 85.84999084472656 * e, 33.59999084472656 * e, 85.84999084472656 * e, 37.59999084472656 * e, 89.34999084472656 * e),
       n.bezierCurveTo(34.09999084472656 * e, 91.84999084472656 * e, 34.09999084472656 * e, 91.84999084472656 * e, 30.599990844726562 * e, 94.34999084472656 * e),
       n.bezierCurveTo(21.099990844726562 * e, 93.34999084472656 * e, 21.099990844726562 * e, 93.34999084472656 * e, 11.599990844726562 * e, 92.34999084472656 * e),
       n.closePath(),
       se(n, t[1], t[2], 3 * e),
       n.save(),
       n.translate(23.599990844726562 * e, 110.94999694824219 * e),
       n.rotate(0),
       Te(n, -7 * e, -4 * e, 14 * e, 8 * e, 10 * e),
       n.restore(),
       se(n, t[1], t[2], 3 * e),
       r
   }
   function xr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 65 * e,
       r.height = 131 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(3, 0),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(21.25 * e, 88.9375 * e),
       n.bezierCurveTo(19.25 * e, 57.9375 * e, 19.25 * e, 57.9375 * e, 17.25 * e, 26.9375 * e),
       n.bezierCurveTo(24.25 * e, 20.9375 * e, 24.25 * e, 20.9375 * e, 31.25 * e, 14.9375 * e),
       n.bezierCurveTo(32.75 * e, 54.4375 * e, 32.75 * e, 54.4375 * e, 34.25 * e, 93.9375 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(30.25 * e, 5.9375 * e),
       n.bezierCurveTo(39.25 * e, 14.9375 * e, 39.25 * e, 14.9375 * e, 48.25 * e, 23.9375 * e),
       n.bezierCurveTo(44.75 * e, 56.4375 * e, 44.75 * e, 56.4375 * e, 41.25 * e, 88.9375 * e),
       n.bezierCurveTo(36.25 * e, 88.9375 * e, 36.25 * e, 88.9375 * e, 31.25 * e, 88.9375 * e),
       n.bezierCurveTo(30.75 * e, 47.9375 * e, 30.75 * e, 47.9375 * e, 30.25 * e, 6.9375 * e),
       n.closePath(),
       se(n, t[0], t[0], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(7.25 * e, 85.4375 * e),
       n.bezierCurveTo(31.75 * e, 85.4375 * e, 31.75 * e, 85.4375 * e, 56.25 * e, 85.4375 * e),
       n.bezierCurveTo(51.25 * e, 91.9375 * e, 51.25 * e, 91.9375 * e, 46.25 * e, 98.4375 * e),
       n.bezierCurveTo(30.25 * e, 98.4375 * e, 30.25 * e, 98.4375 * e, 14.25 * e, 98.4375 * e),
       n.closePath(),
       se(n, t[0], t[0], 4 * e),
       n.save(),
       n.translate(31.25 * e, 108.9375 * e),
       Te(n, -6 * e, -14.5 * e, 12 * e, 29 * e, 10 * e),
       n.restore(),
       n.globalAlpha = 1,
       n.translate(-3, 0),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(21.25 * e, 88.9375 * e),
       n.bezierCurveTo(19.25 * e, 57.9375 * e, 19.25 * e, 57.9375 * e, 17.25 * e, 26.9375 * e),
       n.bezierCurveTo(24.25 * e, 20.9375 * e, 24.25 * e, 20.9375 * e, 31.25 * e, 14.9375 * e),
       n.bezierCurveTo(32.75 * e, 54.4375 * e, 32.75 * e, 54.4375 * e, 34.25 * e, 93.9375 * e),
       n.closePath(),
       se(n, t[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(30.25 * e, 5.9375 * e),
       n.bezierCurveTo(39.25 * e, 14.9375 * e, 39.25 * e, 14.9375 * e, 48.25 * e, 23.9375 * e),
       n.bezierCurveTo(44.75 * e, 56.4375 * e, 44.75 * e, 56.4375 * e, 41.25 * e, 88.9375 * e),
       n.bezierCurveTo(36.25 * e, 88.9375 * e, 36.25 * e, 88.9375 * e, 31.25 * e, 88.9375 * e),
       n.bezierCurveTo(30.75 * e, 47.9375 * e, 30.75 * e, 47.9375 * e, 30.25 * e, 6.9375 * e),
       n.closePath(),
       se(n, t[2], t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(7.25 * e, 85.4375 * e),
       n.bezierCurveTo(31.75 * e, 85.4375 * e, 31.75 * e, 85.4375 * e, 56.25 * e, 85.4375 * e),
       n.bezierCurveTo(51.25 * e, 91.9375 * e, 51.25 * e, 91.9375 * e, 46.25 * e, 98.4375 * e),
       n.bezierCurveTo(30.25 * e, 98.4375 * e, 30.25 * e, 98.4375 * e, 14.25 * e, 98.4375 * e),
       n.closePath(),
       se(n, t[4], t[5], 4 * e),
       n.save(),
       n.translate(31.25 * e, 108.9375 * e),
       Te(n, -6 * e, -14.5 * e, 12 * e, 29 * e, 10 * e),
       n.restore(),
       se(n, t[4], t[5], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(31.25 * e, 73.4375 * e),
       n.bezierCurveTo(33.25 * e, 77.9375 * e, 33.25 * e, 77.9375 * e, 35.25 * e, 82.4375 * e),
       n.bezierCurveTo(33.25 * e, 87.4375 * e, 33.25 * e, 87.4375 * e, 31.25 * e, 92.4375 * e),
       n.bezierCurveTo(29.25 * e, 87.9375 * e, 29.25 * e, 87.9375 * e, 27.25 * e, 83.4375 * e),
       n.closePath(),
       se(n, t[3], t[1], 2 * e),
       r
   }
   function Jr(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d")
         , n = 120 * e
         , o = 140 * e;
       t.width = n,
       t.height = o,
       t.width = 130 * e,
       t.height = 120 * e,
       Te(r, 10 * e, 12 * e, 110 * e, 90 * e, 10 * e),
       se(r, i[0]),
       Te(r, 10 * e, 5 * e, 110 * e, 90 * e, 10 * e),
       se(r, i[1], i[2], 4 * e);
       var a = he(-Math.PI / 5, bi(.5 * e, !0, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
       r.drawImage(a, 12 * e, 18 * e);
       a = he(Math.PI / 4, kt(.55 * e, !0, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
       return r.drawImage(a, 36 * e, 16 * e),
       t
   }
   function Xr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 137 * e,
       r.height = 129 * e,
       n.globalAlpha = .5,
       Ee(n, 69 * e, 64 * e, 48.16637831516918 * e),
       se(n, t[1]),
       n.globalAlpha = .7,
       Ee(n, 69 * e, 64 * e, 38.23105625617661 * e),
       se(n, t[2]),
       n.globalAlpha = .7,
       Ee(n, 69 * e, 64 * e, 32.01562118716424 * e),
       se(n, t[2], t[3], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(72 * e, 41 * e),
       n.bezierCurveTo(52 * e, 41 * e, 48 * e, 50 * e, 45 * e, 58 * e),
       n.bezierCurveTo(43 * e, 67 * e, 45 * e, 68 * e, 46 * e, 72 * e),
       n.bezierCurveTo(52 * e, 53 * e, 60 * e, 48 * e, 72 * e, 42 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(93 * e, 62 * e),
       n.bezierCurveTo(95 * e, 72 * e, 90 * e, 81 * e, 81 * e, 87 * e),
       n.bezierCurveTo(74 * e, 91 * e, 69 * e, 89 * e, 64 * e, 88 * e),
       n.bezierCurveTo(77 * e, 83 * e, 84 * e, 82 * e, 92 * e, 62 * e),
       n.closePath(),
       se(n, t[3]),
       r
   }
   function qr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 137 * e,
       r.height = 129 * e,
       n.globalAlpha = .4,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(42.000030517578125 * e, 41.17047119140625 * e),
       n.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e),
       n.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e),
       n.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e),
       n.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e),
       n.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e),
       n.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e),
       n.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e),
       n.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e),
       n.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e),
       n.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e),
       n.closePath(),
       se(n, void 0, t[2], 40 * e),
       n.globalAlpha = .4,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(42.000030517578125 * e, 41.17047119140625 * e),
       n.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e),
       n.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e),
       n.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e),
       n.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e),
       n.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e),
       n.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e),
       n.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e),
       n.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e),
       n.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e),
       n.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e),
       n.closePath(),
       se(n, void 0, t[1], 20 * e),
       n.globalAlpha = .8,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(42.000030517578125 * e, 41.17047119140625 * e),
       n.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e),
       n.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e),
       n.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e),
       n.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e),
       n.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e),
       n.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e),
       n.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e),
       n.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e),
       n.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e),
       n.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e),
       n.closePath(),
       se(n, t[0], t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(51.000030517578125 * e, 37.9886474609375 * e),
       n.bezierCurveTo(51.000030517578125 * e, 61.9886474609375 * e, 51.000030517578125 * e, 61.9886474609375 * e, 51.000030517578125 * e, 85.9886474609375 * e),
       n.bezierCurveTo(75.50003051757812 * e, 85.9886474609375 * e, 75.50003051757812 * e, 85.9886474609375 * e, 100.00003051757812 * e, 85.9886474609375 * e),
       n.bezierCurveTo(100.00003051757812 * e, 61.9886474609375 * e, 100.00003051757812 * e, 61.9886474609375 * e, 100.00003051757812 * e, 37.9886474609375 * e),
       n.bezierCurveTo(76.00003051757812 * e, 37.9886474609375 * e, 76.00003051757812 * e, 37.9886474609375 * e, 52.000030517578125 * e, 37.9886474609375 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(99.00003051757812 * e, 38.9886474609375 * e),
       n.bezierCurveTo(93.50003051757812 * e, 44.9886474609375 * e, 93.50003051757812 * e, 44.9886474609375 * e, 88.00003051757812 * e, 50.9886474609375 * e),
       n.bezierCurveTo(88.00003051757812 * e, 72.4886474609375 * e, 88.00003051757812 * e, 72.4886474609375 * e, 88.00003051757812 * e, 93.9886474609375 * e),
       n.bezierCurveTo(94.00003051757812 * e, 90.4886474609375 * e, 94.00003051757812 * e, 90.4886474609375 * e, 100.00003051757812 * e, 86.9886474609375 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(87.00003051757812 * e, 49.625 * e),
       n.bezierCurveTo(61.000030517578125 * e, 49.625 * e, 61.000030517578125 * e, 49.625 * e, 35.000030517578125 * e, 49.625 * e),
       n.bezierCurveTo(35.000030517578125 * e, 70.625 * e, 35.000030517578125 * e, 70.625 * e, 35.000030517578125 * e, 91.625 * e),
       n.bezierCurveTo(60.500030517578125 * e, 91.625 * e, 60.500030517578125 * e, 91.625 * e, 86.00003051757812 * e, 91.625 * e),
       n.bezierCurveTo(86.50003051757812 * e, 70.625 * e, 86.50003051757812 * e, 70.625 * e, 87.00003051757812 * e, 49.625 * e),
       n.closePath(),
       se(n, t[1], t[3], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(47.000030517578125 * e, 36.625 * e),
       n.bezierCurveTo(73.00003051757812 * e, 37.125 * e, 73.00003051757812 * e, 37.125 * e, 99.00003051757812 * e, 37.625 * e),
       n.bezierCurveTo(93.50003051757812 * e, 44.125 * e, 93.50003051757812 * e, 44.125 * e, 88.00003051757812 * e, 50.625 * e),
       n.bezierCurveTo(60.500030517578125 * e, 50.125 * e, 60.500030517578125 * e, 50.125 * e, 33.000030517578125 * e, 49.625 * e),
       n.closePath(),
       se(n, t[1], t[3], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(53.000030517578125 * e, 52.625 * e),
       n.bezierCurveTo(40.000030517578125 * e, 54.625 * e, 39.000030517578125 * e, 59.625 * e, 40.000030517578125 * e, 67.625 * e),
       n.bezierCurveTo(45.000030517578125 * e, 59.625 * e, 48.000030517578125 * e, 58.625 * e, 54.000030517578125 * e, 53.625 * e),
       n.closePath(),
       se(n, t[3]),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(42.000030517578125 * e, 41.17047119140625 * e),
       n.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e),
       n.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e),
       n.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e),
       n.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e),
       n.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e),
       n.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e),
       n.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e),
       n.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e),
       n.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e),
       n.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e),
       n.closePath(),
       se(n, void 0, t[3], 4 * e),
       r
   }
   function jr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return 0 == t ? (r.width = 543 * e,
       r.height = 393 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(164.23297119140625 * e, 72.80398559570312 * e),
       n.bezierCurveTo(289.23297119140625 * e, 41.803985595703125 * e, 413.23297119140625 * e, 86.80398559570312 * e, 441.23297119140625 * e, 105.80398559570312 * e),
       n.bezierCurveTo(513.2329711914062 * e, 149.80398559570312 * e, 475.23297119140625 * e, 224.80398559570312 * e, 451.23297119140625 * e, 258.8039855957031 * e),
       n.bezierCurveTo(410.23297119140625 * e, 315.8039855957031 * e, 380.23297119140625 * e, 314.8039855957031 * e, 289.23297119140625 * e, 320.8039855957031 * e),
       n.bezierCurveTo(160.23297119140625 * e, 329.8039855957031 * e, 102.23297119140625 * e, 312.8039855957031 * e, 72.23297119140625 * e, 258.8039855957031 * e),
       n.bezierCurveTo(32.23297119140625 * e, 156.80398559570312 * e, 93.23297119140625 * e, 92.80398559570312 * e, 164.23297119140625 * e, 72.80398559570312 * e),
       n.closePath(),
       se(n, i[0])) : 1 == t ? (r.width = 543 * e,
       r.height = 470 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(238.23297119140625 * e, 34.622161865234375 * e),
       n.bezierCurveTo(423.23297119140625 * e, 21.622161865234375 * e, 474.23297119140625 * e, 96.62216186523438 * e, 499.23297119140625 * e, 167.62216186523438 * e),
       n.bezierCurveTo(536.2329711914062 * e, 288.6221618652344 * e, 487.23297119140625 * e, 367.6221618652344 * e, 403.23297119140625 * e, 412.6221618652344 * e),
       n.bezierCurveTo(287.23297119140625 * e, 466.6221618652344 * e, 127.23297119140625 * e, 424.6221618652344 * e, 50.23297119140625 * e, 318.6221618652344 * e),
       n.bezierCurveTo(-.76702880859375 * e, 239.62216186523438 * e, 30.23297119140625 * e, 110.62216186523438 * e, 73.23297119140625 * e, 77.62216186523438 * e),
       n.bezierCurveTo(128.23297119140625 * e, 29.622161865234375 * e, 202.23297119140625 * e, 40.622161865234375 * e, 238.23297119140625 * e, 34.622161865234375 * e),
       n.closePath(),
       se(n, i[0])) : (r.width = 543 * e,
       r.height = 470 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(268.23297119140625 * e, 23.349441528320312 * e),
       n.bezierCurveTo(424.23297119140625 * e, -.6505584716796875 * e, 524.2329711914062 * e, 44.34944152832031 * e, 519.2329711914062 * e, 186.3494415283203 * e),
       n.bezierCurveTo(515.2329711914062 * e, 341.3494415283203 * e, 431.23297119140625 * e, 409.3494415283203 * e, 357.23297119140625 * e, 442.3494415283203 * e),
       n.bezierCurveTo(278.23297119140625 * e, 469.3494415283203 * e, 144.23297119140625 * e, 460.3494415283203 * e, 51.23297119140625 * e, 348.3494415283203 * e),
       n.bezierCurveTo(3.23297119140625 * e, 274.3494415283203 * e, 45.23297119140625 * e, 87.34944152832031 * e, 268.23297119140625 * e, 23.349441528320312 * e),
       n.closePath(),
       se(n, i[0])),
       r
   }
   function Zr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return 0 == t ? (r.width = 543 * e,
       r.height = 393 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(109.5 * e, 154.046875 * e),
       n.bezierCurveTo(143.5 * e, 96.046875 * e, 208.5 * e, 92.046875 * e, 288.5 * e, 97.046875 * e),
       n.bezierCurveTo(357.5 * e, 104.046875 * e, 414.5 * e, 132.046875 * e, 422.5 * e, 166.046875 * e),
       n.bezierCurveTo(431.5 * e, 192.046875 * e, 400.5 * e, 261.046875 * e, 332.5 * e, 271.046875 * e),
       n.bezierCurveTo(272.5 * e, 279.046875 * e, 159.5 * e, 285.046875 * e, 126.5 * e, 260.046875 * e),
       n.bezierCurveTo(99.5 * e, 238.046875 * e, 95.5 * e, 183.046875 * e, 109.5 * e, 154.046875 * e),
       n.closePath(),
       se(n, i[0])) : 1 == t ? (r.width = 543 * e,
       r.height = 470 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(216.23297119140625 * e, 100.34944152832031 * e),
       n.bezierCurveTo(349.23297119140625 * e, 110.34944152832031 * e, 422.23297119140625 * e, 142.3494415283203 * e, 434.23297119140625 * e, 194.3494415283203 * e),
       n.bezierCurveTo(451.23297119140625 * e, 268.3494415283203 * e, 397.23297119140625 * e, 367.3494415283203 * e, 313.23297119140625 * e, 351.3494415283203 * e),
       n.bezierCurveTo(148.23297119140625 * e, 330.3494415283203 * e, 106.23297119140625 * e, 319.3494415283203 * e, 87.23297119140625 * e, 248.3494415283203 * e),
       n.bezierCurveTo(63.23297119140625 * e, 164.3494415283203 * e, 102.23297119140625 * e, 90.34944152832031 * e, 216.23297119140625 * e, 100.34944152832031 * e),
       n.closePath(),
       se(n, i[0])) : (r.width = 543 * e,
       r.height = 470 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(155.23297119140625 * e, 126.71307373046875 * e),
       n.bezierCurveTo(232.23297119140625 * e, 76.71307373046875 * e, 340.23297119140625 * e, 67.71307373046875 * e, 411.23297119140625 * e, 106.71307373046875 * e),
       n.bezierCurveTo(458.23297119140625 * e, 131.71307373046875 * e, 465.23297119140625 * e, 280.71307373046875 * e, 353.23297119140625 * e, 363.71307373046875 * e),
       n.bezierCurveTo(299.23297119140625 * e, 404.71307373046875 * e, 143.23297119140625 * e, 415.71307373046875 * e, 88.23297119140625 * e, 327.71307373046875 * e),
       n.bezierCurveTo(48.23297119140625 * e, 256.71307373046875 * e, 93.23297119140625 * e, 171.71307373046875 * e, 155.23297119140625 * e, 126.71307373046875 * e),
       n.closePath(),
       se(n, i[0])),
       r
   }
   function Qr(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return 0 == t ? (r.width = 543 * e,
       r.height = 393 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(196.23297119140625 * e, 77.8948974609375 * e),
       n.bezierCurveTo(276.23297119140625 * e, 69.8948974609375 * e, 360.23297119140625 * e, 87.8948974609375 * e, 431.23297119140625 * e, 121.8948974609375 * e),
       n.bezierCurveTo(474.23297119140625 * e, 146.8948974609375 * e, 463.23297119140625 * e, 184.8948974609375 * e, 437.23297119140625 * e, 235.8948974609375 * e),
       n.bezierCurveTo(413.23297119140625 * e, 277.8948974609375 * e, 383.23297119140625 * e, 289.8948974609375 * e, 303.23297119140625 * e, 289.8948974609375 * e),
       n.bezierCurveTo(178.23297119140625 * e, 292.8948974609375 * e, 127.23297119140625 * e, 301.8948974609375 * e, 92.23297119140625 * e, 268.8948974609375 * e),
       n.bezierCurveTo(55.23297119140625 * e, 234.8948974609375 * e, 59.23297119140625 * e, 147.8948974609375 * e, 100.23297119140625 * e, 112.8948974609375 * e),
       n.bezierCurveTo(133.23297119140625 * e, 83.8948974609375 * e, 167.23297119140625 * e, 82.8948974609375 * e, 196.23297119140625 * e, 77.8948974609375 * e),
       n.closePath(),
       se(n, i[0])) : 1 == t ? (r.width = 543 * e,
       r.height = 470 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(285.23297119140625 * e, 51.803985595703125 * e),
       n.bezierCurveTo(408.23297119140625 * e, 57.803985595703125 * e, 463.23297119140625 * e, 107.80398559570312 * e, 480.23297119140625 * e, 183.80398559570312 * e),
       n.bezierCurveTo(500.23297119140625 * e, 282.8039855957031 * e, 473.23297119140625 * e, 351.8039855957031 * e, 373.23297119140625 * e, 390.8039855957031 * e),
       n.bezierCurveTo(286.23297119140625 * e, 420.8039855957031 * e, 173.23297119140625 * e, 396.8039855957031 * e, 86.23297119140625 * e, 331.8039855957031 * e),
       n.bezierCurveTo(13.23297119140625 * e, 267.8039855957031 * e, 19.23297119140625 * e, 79.80398559570312 * e, 143.23297119140625 * e, 50.803985595703125 * e),
       n.bezierCurveTo(175.23297119140625 * e, 41.803985595703125 * e, 263.23297119140625 * e, 51.803985595703125 * e, 285.23297119140625 * e, 51.803985595703125 * e),
       n.closePath(),
       se(n, i[0])) : (r.width = 543 * e,
       r.height = 470 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(492.23297119140625 * e, 170.0767059326172 * e),
       n.bezierCurveTo(493.23297119140625 * e, 300.16761779785156 * e, 411.23297119140625 * e, 382.16761779785156 * e, 321.23297119140625 * e, 419.16761779785156 * e),
       n.bezierCurveTo(251.23297119140625 * e, 444.16761779785156 * e, 125.23297119140625 * e, 422.16761779785156 * e, 63.23297119140625 * e, 347.16761779785156 * e),
       n.bezierCurveTo(22.23297119140625 * e, 282.16761779785156 * e, 53.23297119140625 * e, 152.16761779785156 * e, 179.23297119140625 * e, 79.16761779785156 * e),
       n.bezierCurveTo(237.23297119140625 * e, 46.16761779785156 * e, 326.23297119140625 * e, 27.167617797851562 * e, 409.23297119140625 * e, 50.16761779785156 * e),
       n.bezierCurveTo(470.23297119140625 * e, 66.16761779785156 * e, 493.23297119140625 * e, 104.16761779785156 * e, 492.23297119140625 * e, 170.0767059326172 * e),
       n.closePath(),
       se(n, i[0])),
       r
   }
   function $r(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return 0 == t ? (r.width = 543 * e,
       r.height = 393 * e,
       n.translate(40 * e, 60 * e),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(176 * e, 10.25 * e),
       n.bezierCurveTo(188 * e, 16.25 * e, 187 * e, 25.25 * e, 183 * e, 26.25 * e),
       n.bezierCurveTo(177 * e, 26.25 * e, 175 * e, 21.25 * e, 173 * e, 19.25 * e),
       n.bezierCurveTo(170 * e, 14.25 * e, 170 * e, 10.25 * e, 176 * e, 10.25 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(176 * e, 10.25 * e),
       n.bezierCurveTo(188 * e, 16.25 * e, 187 * e, 25.25 * e, 183 * e, 26.25 * e),
       n.bezierCurveTo(177 * e, 26.25 * e, 175 * e, 21.25 * e, 173 * e, 19.25 * e),
       n.bezierCurveTo(170 * e, 14.25 * e, 170 * e, 10.25 * e, 176 * e, 10.25 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(274 * e, 8 * e),
       n.bezierCurveTo(276 * e, 12 * e, 271 * e, 23 * e, 266 * e, 20 * e),
       n.bezierCurveTo(264 * e, 19 * e, 262 * e, 15 * e, 267 * e, 9 * e),
       n.bezierCurveTo(271 * e, 5 * e, 274 * e, 5 * e, 274 * e, 8 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(274 * e, 8 * e),
       n.bezierCurveTo(276 * e, 12 * e, 271 * e, 23 * e, 266 * e, 20 * e),
       n.bezierCurveTo(264 * e, 19 * e, 262 * e, 15 * e, 267 * e, 9 * e),
       n.bezierCurveTo(271 * e, 5 * e, 274 * e, 5 * e, 274 * e, 8 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(282 * e, 23.25 * e),
       n.bezierCurveTo(275 * e, 25.25 * e, 272 * e, 29.25 * e, 274 * e, 36.25 * e),
       n.bezierCurveTo(277 * e, 40.25 * e, 280 * e, 37.25 * e, 283 * e, 32.25 * e),
       n.bezierCurveTo(286 * e, 26.25 * e, 286 * e, 25.25 * e, 282 * e, 23.25 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(282 * e, 23.25 * e),
       n.bezierCurveTo(275 * e, 25.25 * e, 272 * e, 29.25 * e, 274 * e, 36.25 * e),
       n.bezierCurveTo(277 * e, 40.25 * e, 280 * e, 37.25 * e, 283 * e, 32.25 * e),
       n.bezierCurveTo(286 * e, 26.25 * e, 286 * e, 25.25 * e, 282 * e, 23.25 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(343.75 * e, 18.25 * e),
       n.bezierCurveTo(346.75 * e, 27.25 * e, 346.75 * e, 32.25 * e, 339.75 * e, 31.25 * e),
       n.bezierCurveTo(336.75 * e, 29.25 * e, 335.75 * e, 27.25 * e, 336.75 * e, 22.25 * e),
       n.bezierCurveTo(336.75 * e, 16.25 * e, 338.75 * e, 15.25 * e, 343.75 * e, 18.25 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(343.75 * e, 18.25 * e),
       n.bezierCurveTo(346.75 * e, 27.25 * e, 346.75 * e, 32.25 * e, 339.75 * e, 31.25 * e),
       n.bezierCurveTo(336.75 * e, 29.25 * e, 335.75 * e, 27.25 * e, 336.75 * e, 22.25 * e),
       n.bezierCurveTo(336.75 * e, 16.25 * e, 338.75 * e, 15.25 * e, 343.75 * e, 18.25 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(364.75 * e, 22.25 * e),
       n.bezierCurveTo(368.75 * e, 27.25 * e, 362.75 * e, 36.25 * e, 356.75 * e, 39.25 * e),
       n.bezierCurveTo(346.75 * e, 43.25 * e, 346.75 * e, 34.25 * e, 348.75 * e, 31.25 * e),
       n.bezierCurveTo(352.75 * e, 23.25 * e, 360.75 * e, 20.25 * e, 363.75 * e, 22.25 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(364.75 * e, 22.25 * e),
       n.bezierCurveTo(368.75 * e, 27.25 * e, 362.75 * e, 36.25 * e, 356.75 * e, 39.25 * e),
       n.bezierCurveTo(346.75 * e, 43.25 * e, 346.75 * e, 34.25 * e, 348.75 * e, 31.25 * e),
       n.bezierCurveTo(352.75 * e, 23.25 * e, 360.75 * e, 20.25 * e, 363.75 * e, 22.25 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(350.75 * e, 52.25 * e),
       n.bezierCurveTo(352.75 * e, 45.25 * e, 360.75 * e, 43.25 * e, 368.75 * e, 52.25 * e),
       n.bezierCurveTo(369.75 * e, 58.25 * e, 366.75 * e, 59.25 * e, 357.75 * e, 57.25 * e),
       n.bezierCurveTo(350.75 * e, 56.25 * e, 352.75 * e, 55.25 * e, 350.75 * e, 52.25 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(350.75 * e, 52.25 * e),
       n.bezierCurveTo(352.75 * e, 45.25 * e, 360.75 * e, 43.25 * e, 368.75 * e, 52.25 * e),
       n.bezierCurveTo(369.75 * e, 58.25 * e, 366.75 * e, 59.25 * e, 357.75 * e, 57.25 * e),
       n.bezierCurveTo(350.75 * e, 56.25 * e, 352.75 * e, 55.25 * e, 350.75 * e, 52.25 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(421.75 * e, 81.25 * e),
       n.bezierCurveTo(432.75 * e, 85.25 * e, 431.75 * e, 89.25 * e, 426.75 * e, 93.25 * e),
       n.bezierCurveTo(418.75 * e, 95.25 * e, 414.75 * e, 93.25 * e, 412.75 * e, 89.25 * e),
       n.bezierCurveTo(411.75 * e, 84.25 * e, 413.75 * e, 81.25 * e, 421.75 * e, 81.25 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(421.75 * e, 81.25 * e),
       n.bezierCurveTo(432.75 * e, 85.25 * e, 431.75 * e, 89.25 * e, 426.75 * e, 93.25 * e),
       n.bezierCurveTo(418.75 * e, 95.25 * e, 414.75 * e, 93.25 * e, 412.75 * e, 89.25 * e),
       n.bezierCurveTo(411.75 * e, 84.25 * e, 413.75 * e, 81.25 * e, 421.75 * e, 81.25 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(432.75 * e, 105.25 * e),
       n.bezierCurveTo(430.75 * e, 115.25 * e, 411.75 * e, 130.25 * e, 408.75 * e, 117.25 * e),
       n.bezierCurveTo(407.75 * e, 106.25 * e, 414.75 * e, 103.25 * e, 421.75 * e, 101.25 * e),
       n.bezierCurveTo(430.75 * e, 100.25 * e, 432.75 * e, 101.25 * e, 432.75 * e, 105.25 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(432.75 * e, 105.25 * e),
       n.bezierCurveTo(430.75 * e, 115.25 * e, 411.75 * e, 130.25 * e, 408.75 * e, 117.25 * e),
       n.bezierCurveTo(407.75 * e, 106.25 * e, 414.75 * e, 103.25 * e, 421.75 * e, 101.25 * e),
       n.bezierCurveTo(430.75 * e, 100.25 * e, 432.75 * e, 101.25 * e, 432.75 * e, 105.25 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(422.75 * e, 153.25 * e),
       n.bezierCurveTo(437.75 * e, 155.25 * e, 442.75 * e, 158.25 * e, 436.75 * e, 165.25 * e),
       n.bezierCurveTo(431.75 * e, 170.25 * e, 424.75 * e, 167.25 * e, 419.75 * e, 163.25 * e),
       n.bezierCurveTo(413.75 * e, 157.25 * e, 415.75 * e, 153.25 * e, 422.75 * e, 153.25 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(422.75 * e, 153.25 * e),
       n.bezierCurveTo(437.75 * e, 155.25 * e, 442.75 * e, 158.25 * e, 436.75 * e, 165.25 * e),
       n.bezierCurveTo(431.75 * e, 170.25 * e, 424.75 * e, 167.25 * e, 419.75 * e, 163.25 * e),
       n.bezierCurveTo(413.75 * e, 157.25 * e, 415.75 * e, 153.25 * e, 422.75 * e, 153.25 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(409.75 * e, 158.25 * e),
       n.bezierCurveTo(409.75 * e, 168.25 * e, 401.75 * e, 172.25 * e, 397.75 * e, 167.25 * e),
       n.bezierCurveTo(394.75 * e, 159.25 * e, 407.75 * e, 150.25 * e, 408.75 * e, 158.25 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(409.75 * e, 158.25 * e),
       n.bezierCurveTo(409.75 * e, 168.25 * e, 401.75 * e, 172.25 * e, 397.75 * e, 167.25 * e),
       n.bezierCurveTo(394.75 * e, 159.25 * e, 407.75 * e, 150.25 * e, 408.75 * e, 158.25 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(204 * e, 238.25 * e),
       n.bezierCurveTo(204 * e, 248.25 * e, 184 * e, 255.25 * e, 180 * e, 247.25 * e),
       n.bezierCurveTo(177 * e, 241.25 * e, 187 * e, 236.25 * e, 192 * e, 235.25 * e),
       n.bezierCurveTo(201 * e, 233.25 * e, 204 * e, 233.25 * e, 204 * e, 238.25 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(204 * e, 238.25 * e),
       n.bezierCurveTo(204 * e, 248.25 * e, 184 * e, 255.25 * e, 180 * e, 247.25 * e),
       n.bezierCurveTo(177 * e, 241.25 * e, 187 * e, 236.25 * e, 192 * e, 235.25 * e),
       n.bezierCurveTo(201 * e, 233.25 * e, 204 * e, 233.25 * e, 204 * e, 238.25 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(208 * e, 246.25 * e),
       n.bezierCurveTo(202 * e, 255.25 * e, 204 * e, 258.25 * e, 212 * e, 255.25 * e),
       n.bezierCurveTo(217 * e, 250.25 * e, 217 * e, 248.25 * e, 216 * e, 244.25 * e),
       n.bezierCurveTo(210 * e, 241.25 * e, 209 * e, 245.25 * e, 208 * e, 246.25 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(208 * e, 246.25 * e),
       n.bezierCurveTo(202 * e, 255.25 * e, 204 * e, 258.25 * e, 212 * e, 255.25 * e),
       n.bezierCurveTo(217 * e, 250.25 * e, 217 * e, 248.25 * e, 216 * e, 244.25 * e),
       n.bezierCurveTo(210 * e, 241.25 * e, 209 * e, 245.25 * e, 208 * e, 246.25 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(197 * e, 258.25 * e),
       n.bezierCurveTo(194 * e, 265.25 * e, 186 * e, 270.25 * e, 185 * e, 262.25 * e),
       n.bezierCurveTo(187 * e, 255.25 * e, 191 * e, 252.25 * e, 195 * e, 253.25 * e),
       n.bezierCurveTo(198 * e, 256.25 * e, 197 * e, 257.25 * e, 197 * e, 258.25 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(197 * e, 258.25 * e),
       n.bezierCurveTo(194 * e, 265.25 * e, 186 * e, 270.25 * e, 185 * e, 262.25 * e),
       n.bezierCurveTo(187 * e, 255.25 * e, 191 * e, 252.25 * e, 195 * e, 253.25 * e),
       n.bezierCurveTo(198 * e, 256.25 * e, 197 * e, 257.25 * e, 197 * e, 258.25 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(24 * e, 111.25 * e),
       n.bezierCurveTo(32 * e, 115.25 * e, 29 * e, 123.25 * e, 22 * e, 133.25 * e),
       n.bezierCurveTo(15 * e, 140.25 * e, 7 * e, 137.25 * e, 9 * e, 125.25 * e),
       n.bezierCurveTo(12 * e, 114.25 * e, 20 * e, 110.25 * e, 24 * e, 111.25 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(24 * e, 111.25 * e),
       n.bezierCurveTo(32 * e, 115.25 * e, 29 * e, 123.25 * e, 22 * e, 133.25 * e),
       n.bezierCurveTo(15 * e, 140.25 * e, 7 * e, 137.25 * e, 9 * e, 125.25 * e),
       n.bezierCurveTo(12 * e, 114.25 * e, 20 * e, 110.25 * e, 24 * e, 111.25 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(33 * e, 137.25 * e),
       n.bezierCurveTo(41 * e, 142.25 * e, 40 * e, 145.25 * e, 35 * e, 147.25 * e),
       n.bezierCurveTo(22 * e, 147.25 * e, 18 * e, 144.25 * e, 22 * e, 138.25 * e),
       n.bezierCurveTo(26 * e, 133.25 * e, 31 * e, 136.25 * e, 33 * e, 137.25 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(33 * e, 137.25 * e),
       n.bezierCurveTo(41 * e, 142.25 * e, 40 * e, 145.25 * e, 35 * e, 147.25 * e),
       n.bezierCurveTo(22 * e, 147.25 * e, 18 * e, 144.25 * e, 22 * e, 138.25 * e),
       n.bezierCurveTo(26 * e, 133.25 * e, 31 * e, 136.25 * e, 33 * e, 137.25 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(36 * e, 187.25 * e),
       n.bezierCurveTo(25 * e, 198.25 * e, 19 * e, 193.25 * e, 23 * e, 187.25 * e),
       n.bezierCurveTo(26 * e, 178.25 * e, 32 * e, 173.25 * e, 38 * e, 175.25 * e),
       n.bezierCurveTo(44 * e, 180.25 * e, 39 * e, 186.25 * e, 36 * e, 187.25 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(36 * e, 187.25 * e),
       n.bezierCurveTo(25 * e, 198.25 * e, 19 * e, 193.25 * e, 23 * e, 187.25 * e),
       n.bezierCurveTo(26 * e, 178.25 * e, 32 * e, 173.25 * e, 38 * e, 175.25 * e),
       n.bezierCurveTo(44 * e, 180.25 * e, 39 * e, 186.25 * e, 36 * e, 187.25 * e),
       n.closePath(),
       se(n, i[1])) : 1 == t ? (r.width = 543 * e,
       r.height = 470 * e,
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(377.1428527832031 * e, 56.87498474121094 * e),
       n.bezierCurveTo(384.1428527832031 * e, 44.87498474121094 * e, 403.1428527832031 * e, 39.87498474121094 * e, 403.1428527832031 * e, 51.87498474121094 * e),
       n.bezierCurveTo(402.1428527832031 * e, 59.87498474121094 * e, 396.1428527832031 * e, 61.87498474121094 * e, 389.1428527832031 * e, 64.87498474121094 * e),
       n.bezierCurveTo(376.1428527832031 * e, 67.87498474121094 * e, 375.1428527832031 * e, 62.87498474121094 * e, 377.1428527832031 * e, 56.87498474121094 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(377.1428527832031 * e, 56.87498474121094 * e),
       n.bezierCurveTo(384.1428527832031 * e, 44.87498474121094 * e, 403.1428527832031 * e, 39.87498474121094 * e, 403.1428527832031 * e, 51.87498474121094 * e),
       n.bezierCurveTo(402.1428527832031 * e, 59.87498474121094 * e, 396.1428527832031 * e, 61.87498474121094 * e, 389.1428527832031 * e, 64.87498474121094 * e),
       n.bezierCurveTo(376.1428527832031 * e, 67.87498474121094 * e, 375.1428527832031 * e, 62.87498474121094 * e, 377.1428527832031 * e, 56.87498474121094 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(349.1428527832031 * e, 44.303558349609375 * e),
       n.bezierCurveTo(358.1428527832031 * e, 37.303558349609375 * e, 370.1428527832031 * e, 47.303558349609375 * e, 364.1428527832031 * e, 51.303558349609375 * e),
       n.bezierCurveTo(356.1428527832031 * e, 55.303558349609375 * e, 345.1428527832031 * e, 48.303558349609375 * e, 349.1428527832031 * e, 45.303558349609375 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(349.1428527832031 * e, 44.303558349609375 * e),
       n.bezierCurveTo(358.1428527832031 * e, 37.303558349609375 * e, 370.1428527832031 * e, 47.303558349609375 * e, 364.1428527832031 * e, 51.303558349609375 * e),
       n.bezierCurveTo(356.1428527832031 * e, 55.303558349609375 * e, 345.1428527832031 * e, 48.303558349609375 * e, 349.1428527832031 * e, 45.303558349609375 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(480.1428527832031 * e, 152.30355834960938 * e),
       n.bezierCurveTo(477.1428527832031 * e, 145.30355834960938 * e, 480.1428527832031 * e, 140.30355834960938 * e, 489.1428527832031 * e, 135.30355834960938 * e),
       n.bezierCurveTo(497.1428527832031 * e, 133.30355834960938 * e, 498.1428527832031 * e, 140.30355834960938 * e, 491.1428527832031 * e, 147.30355834960938 * e),
       n.bezierCurveTo(485.1428527832031 * e, 155.30355834960938 * e, 482.1428527832031 * e, 156.30355834960938 * e, 480.1428527832031 * e, 152.30355834960938 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(480.1428527832031 * e, 152.30355834960938 * e),
       n.bezierCurveTo(477.1428527832031 * e, 145.30355834960938 * e, 480.1428527832031 * e, 140.30355834960938 * e, 489.1428527832031 * e, 135.30355834960938 * e),
       n.bezierCurveTo(497.1428527832031 * e, 133.30355834960938 * e, 498.1428527832031 * e, 140.30355834960938 * e, 491.1428527832031 * e, 147.30355834960938 * e),
       n.bezierCurveTo(485.1428527832031 * e, 155.30355834960938 * e, 482.1428527832031 * e, 156.30355834960938 * e, 480.1428527832031 * e, 152.30355834960938 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(211.14285278320312 * e, 27.303558349609375 * e),
       n.bezierCurveTo(223.14285278320312 * e, 21.303558349609375 * e, 234.14285278320312 * e, 34.303558349609375 * e, 232.14285278320312 * e, 42.303558349609375 * e),
       n.bezierCurveTo(228.14285278320312 * e, 49.303558349609375 * e, 223.14285278320312 * e, 45.303558349609375 * e, 213.14285278320312 * e, 38.303558349609375 * e),
       n.bezierCurveTo(205.14285278320312 * e, 31.303558349609375 * e, 208.14285278320312 * e, 29.303558349609375 * e, 211.14285278320312 * e, 27.303558349609375 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(211.14285278320312 * e, 27.303558349609375 * e),
       n.bezierCurveTo(223.14285278320312 * e, 21.303558349609375 * e, 234.14285278320312 * e, 34.303558349609375 * e, 232.14285278320312 * e, 42.303558349609375 * e),
       n.bezierCurveTo(228.14285278320312 * e, 49.303558349609375 * e, 223.14285278320312 * e, 45.303558349609375 * e, 213.14285278320312 * e, 38.303558349609375 * e),
       n.bezierCurveTo(205.14285278320312 * e, 31.303558349609375 * e, 208.14285278320312 * e, 29.303558349609375 * e, 211.14285278320312 * e, 27.303558349609375 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(364.1428527832031 * e, 73.30355834960938 * e),
       n.bezierCurveTo(354.1428527832031 * e, 72.30355834960938 * e, 356.1428527832031 * e, 64.30355834960938 * e, 359.1428527832031 * e, 59.303558349609375 * e),
       n.bezierCurveTo(365.1428527832031 * e, 55.303558349609375 * e, 366.1428527832031 * e, 61.303558349609375 * e, 366.1428527832031 * e, 69.30355834960938 * e),
       n.bezierCurveTo(365.1428527832031 * e, 73.30355834960938 * e, 365.1428527832031 * e, 73.30355834960938 * e, 364.1428527832031 * e, 73.30355834960938 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(364.1428527832031 * e, 73.30355834960938 * e),
       n.bezierCurveTo(354.1428527832031 * e, 72.30355834960938 * e, 356.1428527832031 * e, 64.30355834960938 * e, 359.1428527832031 * e, 59.303558349609375 * e),
       n.bezierCurveTo(365.1428527832031 * e, 55.303558349609375 * e, 366.1428527832031 * e, 61.303558349609375 * e, 366.1428527832031 * e, 69.30355834960938 * e),
       n.bezierCurveTo(365.1428527832031 * e, 73.30355834960938 * e, 365.1428527832031 * e, 73.30355834960938 * e, 364.1428527832031 * e, 73.30355834960938 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(182.14285278320312 * e, 57.303558349609375 * e),
       n.bezierCurveTo(173.14285278320312 * e, 52.303558349609375 * e, 177.14285278320312 * e, 39.303558349609375 * e, 198.14285278320312 * e, 36.303558349609375 * e),
       n.bezierCurveTo(209.14285278320312 * e, 37.303558349609375 * e, 206.14285278320312 * e, 49.303558349609375 * e, 193.14285278320312 * e, 53.303558349609375 * e),
       n.bezierCurveTo(187.14285278320312 * e, 56.303558349609375 * e, 185.14285278320312 * e, 57.303558349609375 * e, 182.14285278320312 * e, 57.303558349609375 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(182.14285278320312 * e, 57.303558349609375 * e),
       n.bezierCurveTo(173.14285278320312 * e, 52.303558349609375 * e, 177.14285278320312 * e, 39.303558349609375 * e, 198.14285278320312 * e, 36.303558349609375 * e),
       n.bezierCurveTo(209.14285278320312 * e, 37.303558349609375 * e, 206.14285278320312 * e, 49.303558349609375 * e, 193.14285278320312 * e, 53.303558349609375 * e),
       n.bezierCurveTo(187.14285278320312 * e, 56.303558349609375 * e, 185.14285278320312 * e, 57.303558349609375 * e, 182.14285278320312 * e, 57.303558349609375 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(489.1428527832031 * e, 267.0178527832031 * e),
       n.bezierCurveTo(500.1428527832031 * e, 257.0178527832031 * e, 511.1428527832031 * e, 269.0178527832031 * e, 514.1428527832031 * e, 275.0178527832031 * e),
       n.bezierCurveTo(519.1428527832031 * e, 285.0178527832031 * e, 509.1428527832031 * e, 288.0178527832031 * e, 501.1428527832031 * e, 282.0178527832031 * e),
       n.bezierCurveTo(488.1428527832031 * e, 277.0178527832031 * e, 485.1428527832031 * e, 271.0178527832031 * e, 489.1428527832031 * e, 267.0178527832031 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(489.1428527832031 * e, 267.0178527832031 * e),
       n.bezierCurveTo(500.1428527832031 * e, 257.0178527832031 * e, 511.1428527832031 * e, 269.0178527832031 * e, 514.1428527832031 * e, 275.0178527832031 * e),
       n.bezierCurveTo(519.1428527832031 * e, 285.0178527832031 * e, 509.1428527832031 * e, 288.0178527832031 * e, 501.1428527832031 * e, 282.0178527832031 * e),
       n.bezierCurveTo(488.1428527832031 * e, 277.0178527832031 * e, 485.1428527832031 * e, 271.0178527832031 * e, 489.1428527832031 * e, 267.0178527832031 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(480.1428527832031 * e, 122.73213958740234 * e),
       n.bezierCurveTo(469.1428527832031 * e, 119.73213958740234 * e, 473.1428527832031 * e, 108.73213958740234 * e, 476.1428527832031 * e, 107.73213958740234 * e),
       n.bezierCurveTo(483.1428527832031 * e, 102.73213958740234 * e, 485.1428527832031 * e, 118.73213958740234 * e, 480.1428527832031 * e, 122.73213958740234 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(480.1428527832031 * e, 122.73213958740234 * e),
       n.bezierCurveTo(469.1428527832031 * e, 119.73213958740234 * e, 473.1428527832031 * e, 108.73213958740234 * e, 476.1428527832031 * e, 107.73213958740234 * e),
       n.bezierCurveTo(483.1428527832031 * e, 102.73213958740234 * e, 485.1428527832031 * e, 118.73213958740234 * e, 480.1428527832031 * e, 122.73213958740234 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(470.1428527832031 * e, 286.3035697937012 * e),
       n.bezierCurveTo(472.1428527832031 * e, 277.3035697937012 * e, 480.1428527832031 * e, 277.3035697937012 * e, 489.1428527832031 * e, 286.3035697937012 * e),
       n.bezierCurveTo(490.1428527832031 * e, 292.3035697937012 * e, 482.1428527832031 * e, 294.3035697937012 * e, 470.1428527832031 * e, 286.3035697937012 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(470.1428527832031 * e, 286.3035697937012 * e),
       n.bezierCurveTo(472.1428527832031 * e, 277.3035697937012 * e, 480.1428527832031 * e, 277.3035697937012 * e, 489.1428527832031 * e, 286.3035697937012 * e),
       n.bezierCurveTo(490.1428527832031 * e, 292.3035697937012 * e, 482.1428527832031 * e, 294.3035697937012 * e, 470.1428527832031 * e, 286.3035697937012 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(518.1428527832031 * e, 265.0178565979004 * e),
       n.bezierCurveTo(524.1428527832031 * e, 262.0178565979004 * e, 521.1428527832031 * e, 247.0178565979004 * e, 514.1428527832031 * e, 250.0178565979004 * e),
       n.bezierCurveTo(510.1428527832031 * e, 252.0178565979004 * e, 509.1428527832031 * e, 266.0178565979004 * e, 518.1428527832031 * e, 266.0178565979004 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(518.1428527832031 * e, 265.0178565979004 * e),
       n.bezierCurveTo(524.1428527832031 * e, 262.0178565979004 * e, 521.1428527832031 * e, 247.0178565979004 * e, 514.1428527832031 * e, 250.0178565979004 * e),
       n.bezierCurveTo(510.1428527832031 * e, 252.0178565979004 * e, 509.1428527832031 * e, 266.0178565979004 * e, 518.1428527832031 * e, 266.0178565979004 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(179.14285278320312 * e, 399.5892858505249 * e),
       n.bezierCurveTo(174.14285278320312 * e, 385.5892858505249 * e, 186.14285278320312 * e, 379.5892858505249 * e, 198.14285278320312 * e, 379.5892858505249 * e),
       n.bezierCurveTo(208.14285278320312 * e, 379.5892858505249 * e, 206.14285278320312 * e, 391.5892858505249 * e, 194.14285278320312 * e, 396.5892858505249 * e),
       n.bezierCurveTo(184.14285278320312 * e, 401.5892858505249 * e, 182.14285278320312 * e, 402.5892858505249 * e, 179.14285278320312 * e, 399.5892858505249 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(179.14285278320312 * e, 399.5892858505249 * e),
       n.bezierCurveTo(174.14285278320312 * e, 385.5892858505249 * e, 186.14285278320312 * e, 379.5892858505249 * e, 198.14285278320312 * e, 379.5892858505249 * e),
       n.bezierCurveTo(208.14285278320312 * e, 379.5892858505249 * e, 206.14285278320312 * e, 391.5892858505249 * e, 194.14285278320312 * e, 396.5892858505249 * e),
       n.bezierCurveTo(184.14285278320312 * e, 401.5892858505249 * e, 182.14285278320312 * e, 402.5892858505249 * e, 179.14285278320312 * e, 399.5892858505249 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(163.14285278320312 * e, 407.875 * e),
       n.bezierCurveTo(152.14285278320312 * e, 405.875 * e, 156.14285278320312 * e, 391.875 * e, 163.14285278320312 * e, 385.875 * e),
       n.bezierCurveTo(170.14285278320312 * e, 381.875 * e, 173.14285278320312 * e, 385.875 * e, 170.14285278320312 * e, 398.875 * e),
       n.bezierCurveTo(169.14285278320312 * e, 403.875 * e, 165.14285278320312 * e, 408.875 * e, 164.14285278320312 * e, 407.875 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(163.14285278320312 * e, 407.875 * e),
       n.bezierCurveTo(152.14285278320312 * e, 405.875 * e, 156.14285278320312 * e, 391.875 * e, 163.14285278320312 * e, 385.875 * e),
       n.bezierCurveTo(170.14285278320312 * e, 381.875 * e, 173.14285278320312 * e, 385.875 * e, 170.14285278320312 * e, 398.875 * e),
       n.bezierCurveTo(169.14285278320312 * e, 403.875 * e, 165.14285278320312 * e, 408.875 * e, 164.14285278320312 * e, 407.875 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(78.14285278320312 * e, 71.73211669921875 * e),
       n.bezierCurveTo(82.14285278320312 * e, 62.73211669921875 * e, 88.14285278320312 * e, 69.73211669921875 * e, 91.14285278320312 * e, 79.73211669921875 * e),
       n.bezierCurveTo(90.14285278320312 * e, 86.73211669921875 * e, 79.14285278320312 * e, 83.73211669921875 * e, 78.14285278320312 * e, 71.73211669921875 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(78.14285278320312 * e, 71.73211669921875 * e),
       n.bezierCurveTo(82.14285278320312 * e, 62.73211669921875 * e, 88.14285278320312 * e, 69.73211669921875 * e, 91.14285278320312 * e, 79.73211669921875 * e),
       n.bezierCurveTo(90.14285278320312 * e, 86.73211669921875 * e, 79.14285278320312 * e, 83.73211669921875 * e, 78.14285278320312 * e, 71.73211669921875 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(385.1428527832031 * e, 405.017858505249 * e),
       n.bezierCurveTo(392.1428527832031 * e, 397.017858505249 * e, 406.1428527832031 * e, 401.017858505249 * e, 409.1428527832031 * e, 418.017858505249 * e),
       n.bezierCurveTo(410.1428527832031 * e, 426.017858505249 * e, 401.1428527832031 * e, 425.017858505249 * e, 388.1428527832031 * e, 418.017858505249 * e),
       n.bezierCurveTo(381.1428527832031 * e, 411.017858505249 * e, 383.1428527832031 * e, 407.017858505249 * e, 385.1428527832031 * e, 405.017858505249 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(385.1428527832031 * e, 405.017858505249 * e),
       n.bezierCurveTo(392.1428527832031 * e, 397.017858505249 * e, 406.1428527832031 * e, 401.017858505249 * e, 409.1428527832031 * e, 418.017858505249 * e),
       n.bezierCurveTo(410.1428527832031 * e, 426.017858505249 * e, 401.1428527832031 * e, 425.017858505249 * e, 388.1428527832031 * e, 418.017858505249 * e),
       n.bezierCurveTo(381.1428527832031 * e, 411.017858505249 * e, 383.1428527832031 * e, 407.017858505249 * e, 385.1428527832031 * e, 405.017858505249 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(414.1428527832031 * e, 361.4464282989502 * e),
       n.bezierCurveTo(418.1428527832031 * e, 352.4464282989502 * e, 426.1428527832031 * e, 353.4464282989502 * e, 437.1428527832031 * e, 362.4464282989502 * e),
       n.bezierCurveTo(441.1428527832031 * e, 366.4464282989502 * e, 439.1428527832031 * e, 373.4464282989502 * e, 428.1428527832031 * e, 372.4464282989502 * e),
       n.bezierCurveTo(416.1428527832031 * e, 370.4464282989502 * e, 412.1428527832031 * e, 367.4464282989502 * e, 415.1428527832031 * e, 361.4464282989502 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(414.1428527832031 * e, 361.4464282989502 * e),
       n.bezierCurveTo(418.1428527832031 * e, 352.4464282989502 * e, 426.1428527832031 * e, 353.4464282989502 * e, 437.1428527832031 * e, 362.4464282989502 * e),
       n.bezierCurveTo(441.1428527832031 * e, 366.4464282989502 * e, 439.1428527832031 * e, 373.4464282989502 * e, 428.1428527832031 * e, 372.4464282989502 * e),
       n.bezierCurveTo(416.1428527832031 * e, 370.4464282989502 * e, 412.1428527832031 * e, 367.4464282989502 * e, 415.1428527832031 * e, 361.4464282989502 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(453.1428527832031 * e, 356.875 * e),
       n.bezierCurveTo(458.1428527832031 * e, 363.875 * e, 447.1428527832031 * e, 373.875 * e, 444.1428527832031 * e, 369.875 * e),
       n.bezierCurveTo(441.1428527832031 * e, 361.875 * e, 448.1428527832031 * e, 352.875 * e, 453.1428527832031 * e, 356.875 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(453.1428527832031 * e, 356.875 * e),
       n.bezierCurveTo(458.1428527832031 * e, 363.875 * e, 447.1428527832031 * e, 373.875 * e, 444.1428527832031 * e, 369.875 * e),
       n.bezierCurveTo(441.1428527832031 * e, 361.875 * e, 448.1428527832031 * e, 352.875 * e, 453.1428527832031 * e, 356.875 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(40.142852783203125 * e, 225.1607151031494 * e),
       n.bezierCurveTo(52.142852783203125 * e, 224.1607151031494 * e, 44.142852783203125 * e, 251.1607151031494 * e, 36.142852783203125 * e, 248.1607151031494 * e),
       n.bezierCurveTo(25.142852783203125 * e, 245.1607151031494 * e, 34.142852783203125 * e, 225.1607151031494 * e, 41.142852783203125 * e, 225.1607151031494 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(40.142852783203125 * e, 225.1607151031494 * e),
       n.bezierCurveTo(52.142852783203125 * e, 224.1607151031494 * e, 44.142852783203125 * e, 251.1607151031494 * e, 36.142852783203125 * e, 248.1607151031494 * e),
       n.bezierCurveTo(25.142852783203125 * e, 245.1607151031494 * e, 34.142852783203125 * e, 225.1607151031494 * e, 41.142852783203125 * e, 225.1607151031494 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(114.14285278320312 * e, 52.4464111328125 * e),
       n.bezierCurveTo(123.14285278320312 * e, 57.4464111328125 * e, 111.14285278320312 * e, 71.4464111328125 * e, 106.14285278320312 * e, 65.4464111328125 * e),
       n.bezierCurveTo(101.14285278320312 * e, 58.4464111328125 * e, 111.14285278320312 * e, 51.4464111328125 * e, 114.14285278320312 * e, 52.4464111328125 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(114.14285278320312 * e, 52.4464111328125 * e),
       n.bezierCurveTo(123.14285278320312 * e, 57.4464111328125 * e, 111.14285278320312 * e, 71.4464111328125 * e, 106.14285278320312 * e, 65.4464111328125 * e),
       n.bezierCurveTo(101.14285278320312 * e, 58.4464111328125 * e, 111.14285278320312 * e, 51.4464111328125 * e, 114.14285278320312 * e, 52.4464111328125 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35.142852783203125 * e, 256.3035707473755 * e),
       n.bezierCurveTo(41.142852783203125 * e, 263.3035707473755 * e, 32.142852783203125 * e, 270.3035707473755 * e, 27.142852783203125 * e, 270.3035707473755 * e),
       n.bezierCurveTo(20.142852783203125 * e, 267.3035707473755 * e, 29.142852783203125 * e, 252.3035707473755 * e, 35.142852783203125 * e, 255.3035707473755 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35.142852783203125 * e, 256.3035707473755 * e),
       n.bezierCurveTo(41.142852783203125 * e, 263.3035707473755 * e, 32.142852783203125 * e, 270.3035707473755 * e, 27.142852783203125 * e, 270.3035707473755 * e),
       n.bezierCurveTo(20.142852783203125 * e, 267.3035707473755 * e, 29.142852783203125 * e, 252.3035707473755 * e, 35.142852783203125 * e, 255.3035707473755 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(48.142852783203125 * e, 266.4464282989502 * e),
       n.bezierCurveTo(59.142852783203125 * e, 273.4464282989502 * e, 41.142852783203125 * e, 290.4464282989502 * e, 33.142852783203125 * e, 285.4464282989502 * e),
       n.bezierCurveTo(25.142852783203125 * e, 277.4464282989502 * e, 44.142852783203125 * e, 261.4464282989502 * e, 48.142852783203125 * e, 266.4464282989502 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(48.142852783203125 * e, 266.4464282989502 * e),
       n.bezierCurveTo(59.142852783203125 * e, 273.4464282989502 * e, 41.142852783203125 * e, 290.4464282989502 * e, 33.142852783203125 * e, 285.4464282989502 * e),
       n.bezierCurveTo(25.142852783203125 * e, 277.4464282989502 * e, 44.142852783203125 * e, 261.4464282989502 * e, 48.142852783203125 * e, 266.4464282989502 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(138.14285278320312 * e, 385.5892868041992 * e),
       n.bezierCurveTo(150.14285278320312 * e, 387.5892868041992 * e, 140.14285278320312 * e, 405.5892868041992 * e, 131.14285278320312 * e, 402.5892868041992 * e),
       n.bezierCurveTo(125.14285278320312 * e, 397.5892868041992 * e, 134.14285278320312 * e, 385.5892868041992 * e, 138.14285278320312 * e, 385.5892868041992 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(138.14285278320312 * e, 385.5892868041992 * e),
       n.bezierCurveTo(150.14285278320312 * e, 387.5892868041992 * e, 140.14285278320312 * e, 405.5892868041992 * e, 131.14285278320312 * e, 402.5892868041992 * e),
       n.bezierCurveTo(125.14285278320312 * e, 397.5892868041992 * e, 134.14285278320312 * e, 385.5892868041992 * e, 138.14285278320312 * e, 385.5892868041992 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(218.14285278320312 * e, 394.16071701049805 * e),
       n.bezierCurveTo(224.14285278320312 * e, 398.16071701049805 * e, 222.14285278320312 * e, 403.16071701049805 * e, 214.14285278320312 * e, 407.16071701049805 * e),
       n.bezierCurveTo(204.14285278320312 * e, 407.16071701049805 * e, 213.14285278320312 * e, 392.16071701049805 * e, 218.14285278320312 * e, 394.16071701049805 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(218.14285278320312 * e, 394.16071701049805 * e),
       n.bezierCurveTo(224.14285278320312 * e, 398.16071701049805 * e, 222.14285278320312 * e, 403.16071701049805 * e, 214.14285278320312 * e, 407.16071701049805 * e),
       n.bezierCurveTo(204.14285278320312 * e, 407.16071701049805 * e, 213.14285278320312 * e, 392.16071701049805 * e, 218.14285278320312 * e, 394.16071701049805 * e),
       n.closePath(),
       se(n, i[1]),
       n.translate(50 * e, 100 * e)) : (r.width = 543 * e,
       r.height = 470 * e,
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(97.14285278320312 * e, 113.875 * e),
       n.bezierCurveTo(104.14285278320312 * e, 106.875 * e, 113.14285278320312 * e, 109.875 * e, 118.14285278320312 * e, 118.875 * e),
       n.bezierCurveTo(119.14285278320312 * e, 121.875 * e, 118.14285278320312 * e, 129.875 * e, 103.14285278320312 * e, 124.875 * e),
       n.bezierCurveTo(94.14285278320312 * e, 120.875 * e, 95.14285278320312 * e, 117.875 * e, 97.14285278320312 * e, 113.875 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(97.14285278320312 * e, 113.875 * e),
       n.bezierCurveTo(104.14285278320312 * e, 106.875 * e, 113.14285278320312 * e, 109.875 * e, 118.14285278320312 * e, 118.875 * e),
       n.bezierCurveTo(119.14285278320312 * e, 121.875 * e, 118.14285278320312 * e, 129.875 * e, 103.14285278320312 * e, 124.875 * e),
       n.bezierCurveTo(94.14285278320312 * e, 120.875 * e, 95.14285278320312 * e, 117.875 * e, 97.14285278320312 * e, 113.875 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(88.14285278320312 * e, 138.87498474121094 * e),
       n.bezierCurveTo(90.14285278320312 * e, 128.87498474121094 * e, 104.14285278320312 * e, 130.87498474121094 * e, 107.14285278320312 * e, 138.87498474121094 * e),
       n.bezierCurveTo(109.14285278320312 * e, 147.87498474121094 * e, 89.14285278320312 * e, 145.87498474121094 * e, 88.14285278320312 * e, 138.87498474121094 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(88.14285278320312 * e, 138.87498474121094 * e),
       n.bezierCurveTo(90.14285278320312 * e, 128.87498474121094 * e, 104.14285278320312 * e, 130.87498474121094 * e, 107.14285278320312 * e, 138.87498474121094 * e),
       n.bezierCurveTo(109.14285278320312 * e, 147.87498474121094 * e, 89.14285278320312 * e, 145.87498474121094 * e, 88.14285278320312 * e, 138.87498474121094 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(194.14285278320312 * e, 44.87498474121094 * e),
       n.bezierCurveTo(202.14285278320312 * e, 49.87498474121094 * e, 195.14285278320312 * e, 62.87498474121094 * e, 187.14285278320312 * e, 60.87498474121094 * e),
       n.bezierCurveTo(180.14285278320312 * e, 57.87498474121094 * e, 190.14285278320312 * e, 40.87498474121094 * e, 194.14285278320312 * e, 44.87498474121094 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(194.14285278320312 * e, 44.87498474121094 * e),
       n.bezierCurveTo(202.14285278320312 * e, 49.87498474121094 * e, 195.14285278320312 * e, 62.87498474121094 * e, 187.14285278320312 * e, 60.87498474121094 * e),
       n.bezierCurveTo(180.14285278320312 * e, 57.87498474121094 * e, 190.14285278320312 * e, 40.87498474121094 * e, 194.14285278320312 * e, 44.87498474121094 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(22.142852783203125 * e, 218.44642639160156 * e),
       n.bezierCurveTo(31.142852783203125 * e, 205.44642639160156 * e, 49.142852783203125 * e, 221.44642639160156 * e, 49.142852783203125 * e, 230.44642639160156 * e),
       n.bezierCurveTo(44.142852783203125 * e, 243.44642639160156 * e, 14.142852783203125 * e, 228.44642639160156 * e, 22.142852783203125 * e, 218.44642639160156 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(22.142852783203125 * e, 218.44642639160156 * e),
       n.bezierCurveTo(31.142852783203125 * e, 205.44642639160156 * e, 49.142852783203125 * e, 221.44642639160156 * e, 49.142852783203125 * e, 230.44642639160156 * e),
       n.bezierCurveTo(44.142852783203125 * e, 243.44642639160156 * e, 14.142852783203125 * e, 228.44642639160156 * e, 22.142852783203125 * e, 218.44642639160156 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(41.142852783203125 * e, 249.875 * e),
       n.bezierCurveTo(33.142852783203125 * e, 255.875 * e, 30.142852783203125 * e, 265.875 * e, 40.142852783203125 * e, 266.875 * e),
       n.bezierCurveTo(49.142852783203125 * e, 261.875 * e, 53.142852783203125 * e, 244.875 * e, 41.142852783203125 * e, 249.875 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(41.142852783203125 * e, 249.875 * e),
       n.bezierCurveTo(33.142852783203125 * e, 255.875 * e, 30.142852783203125 * e, 265.875 * e, 40.142852783203125 * e, 266.875 * e),
       n.bezierCurveTo(49.142852783203125 * e, 261.875 * e, 53.142852783203125 * e, 244.875 * e, 41.142852783203125 * e, 249.875 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(105.14285278320312 * e, 369.875 * e),
       n.bezierCurveTo(92.14285278320312 * e, 361.875 * e, 77.14285278320312 * e, 375.875 * e, 79.14285278320312 * e, 384.875 * e),
       n.bezierCurveTo(84.14285278320312 * e, 399.875 * e, 114.14285278320312 * e, 375.875 * e, 104.14285278320312 * e, 369.875 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(105.14285278320312 * e, 369.875 * e),
       n.bezierCurveTo(92.14285278320312 * e, 361.875 * e, 77.14285278320312 * e, 375.875 * e, 79.14285278320312 * e, 384.875 * e),
       n.bezierCurveTo(84.14285278320312 * e, 399.875 * e, 114.14285278320312 * e, 375.875 * e, 104.14285278320312 * e, 369.875 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(233.14285278320312 * e, 43.4464111328125 * e),
       n.bezierCurveTo(238.14285278320312 * e, 47.4464111328125 * e, 222.14285278320312 * e, 73.4464111328125 * e, 214.14285278320312 * e, 58.4464111328125 * e),
       n.bezierCurveTo(211.14285278320312 * e, 48.4464111328125 * e, 230.14285278320312 * e, 35.4464111328125 * e, 233.14285278320312 * e, 42.4464111328125 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(233.14285278320312 * e, 43.4464111328125 * e),
       n.bezierCurveTo(238.14285278320312 * e, 47.4464111328125 * e, 222.14285278320312 * e, 73.4464111328125 * e, 214.14285278320312 * e, 58.4464111328125 * e),
       n.bezierCurveTo(211.14285278320312 * e, 48.4464111328125 * e, 230.14285278320312 * e, 35.4464111328125 * e, 233.14285278320312 * e, 42.4464111328125 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(371.1428527832031 * e, 34.73213195800781 * e),
       n.bezierCurveTo(378.1428527832031 * e, 20.732131958007812 * e, 395.1428527832031 * e, 32.73213195800781 * e, 396.1428527832031 * e, 42.73213195800781 * e),
       n.bezierCurveTo(399.1428527832031 * e, 59.73213195800781 * e, 369.1428527832031 * e, 43.73213195800781 * e, 372.1428527832031 * e, 34.73213195800781 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(371.1428527832031 * e, 34.73213195800781 * e),
       n.bezierCurveTo(378.1428527832031 * e, 20.732131958007812 * e, 395.1428527832031 * e, 32.73213195800781 * e, 396.1428527832031 * e, 42.73213195800781 * e),
       n.bezierCurveTo(399.1428527832031 * e, 59.73213195800781 * e, 369.1428527832031 * e, 43.73213195800781 * e, 372.1428527832031 * e, 34.73213195800781 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(117.14285278320312 * e, 392.5892868041992 * e),
       n.bezierCurveTo(115.14285278320312 * e, 384.5892868041992 * e, 109.14285278320312 * e, 383.5892868041992 * e, 103.14285278320312 * e, 384.5892868041992 * e),
       n.bezierCurveTo(95.14285278320312 * e, 389.5892868041992 * e, 97.14285278320312 * e, 393.5892868041992 * e, 107.14285278320312 * e, 396.5892868041992 * e),
       n.bezierCurveTo(114.14285278320312 * e, 396.5892868041992 * e, 118.14285278320312 * e, 393.5892868041992 * e, 116.14285278320312 * e, 391.5892868041992 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(117.14285278320312 * e, 392.5892868041992 * e),
       n.bezierCurveTo(115.14285278320312 * e, 384.5892868041992 * e, 109.14285278320312 * e, 383.5892868041992 * e, 103.14285278320312 * e, 384.5892868041992 * e),
       n.bezierCurveTo(95.14285278320312 * e, 389.5892868041992 * e, 97.14285278320312 * e, 393.5892868041992 * e, 107.14285278320312 * e, 396.5892868041992 * e),
       n.bezierCurveTo(114.14285278320312 * e, 396.5892868041992 * e, 118.14285278320312 * e, 393.5892868041992 * e, 116.14285278320312 * e, 391.5892868041992 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(122.14285278320312 * e, 403.7321472167969 * e),
       n.bezierCurveTo(132.14285278320312 * e, 399.7321472167969 * e, 133.14285278320312 * e, 418.7321472167969 * e, 129.14285278320312 * e, 419.7321472167969 * e),
       n.bezierCurveTo(119.14285278320312 * e, 420.7321472167969 * e, 118.14285278320312 * e, 402.7321472167969 * e, 123.14285278320312 * e, 403.7321472167969 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(122.14285278320312 * e, 403.7321472167969 * e),
       n.bezierCurveTo(132.14285278320312 * e, 399.7321472167969 * e, 133.14285278320312 * e, 418.7321472167969 * e, 129.14285278320312 * e, 419.7321472167969 * e),
       n.bezierCurveTo(119.14285278320312 * e, 420.7321472167969 * e, 118.14285278320312 * e, 402.7321472167969 * e, 123.14285278320312 * e, 403.7321472167969 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(317.1428527832031 * e, 417.5892868041992 * e),
       n.bezierCurveTo(333.1428527832031 * e, 421.5892868041992 * e, 299.1428527832031 * e, 455.5892868041992 * e, 294.1428527832031 * e, 438.5892868041992 * e),
       n.bezierCurveTo(289.1428527832031 * e, 423.5892868041992 * e, 307.1428527832031 * e, 414.5892868041992 * e, 317.1428527832031 * e, 417.5892868041992 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(317.1428527832031 * e, 417.5892868041992 * e),
       n.bezierCurveTo(333.1428527832031 * e, 421.5892868041992 * e, 299.1428527832031 * e, 455.5892868041992 * e, 294.1428527832031 * e, 438.5892868041992 * e),
       n.bezierCurveTo(289.1428527832031 * e, 423.5892868041992 * e, 307.1428527832031 * e, 414.5892868041992 * e, 317.1428527832031 * e, 417.5892868041992 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(322.1428527832031 * e, 437.30357360839844 * e),
       n.bezierCurveTo(330.1428527832031 * e, 431.30357360839844 * e, 336.1428527832031 * e, 440.30357360839844 * e, 336.1428527832031 * e, 448.30357360839844 * e),
       n.bezierCurveTo(334.1428527832031 * e, 454.30357360839844 * e, 316.1428527832031 * e, 447.30357360839844 * e, 323.1428527832031 * e, 437.30357360839844 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(322.1428527832031 * e, 437.30357360839844 * e),
       n.bezierCurveTo(330.1428527832031 * e, 431.30357360839844 * e, 336.1428527832031 * e, 440.30357360839844 * e, 336.1428527832031 * e, 448.30357360839844 * e),
       n.bezierCurveTo(334.1428527832031 * e, 454.30357360839844 * e, 316.1428527832031 * e, 447.30357360839844 * e, 323.1428527832031 * e, 437.30357360839844 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(438.1428527832031 * e, 358.5892868041992 * e),
       n.bezierCurveTo(455.1428527832031 * e, 351.5892868041992 * e, 467.1428527832031 * e, 371.5892868041992 * e, 455.1428527832031 * e, 374.5892868041992 * e),
       n.bezierCurveTo(442.1428527832031 * e, 377.5892868041992 * e, 429.1428527832031 * e, 361.5892868041992 * e, 438.1428527832031 * e, 358.5892868041992 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(438.1428527832031 * e, 358.5892868041992 * e),
       n.bezierCurveTo(455.1428527832031 * e, 351.5892868041992 * e, 467.1428527832031 * e, 371.5892868041992 * e, 455.1428527832031 * e, 374.5892868041992 * e),
       n.bezierCurveTo(442.1428527832031 * e, 377.5892868041992 * e, 429.1428527832031 * e, 361.5892868041992 * e, 438.1428527832031 * e, 358.5892868041992 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(423.1428527832031 * e, 363.16071701049805 * e),
       n.bezierCurveTo(433.1428527832031 * e, 362.16071701049805 * e, 433.1428527832031 * e, 374.16071701049805 * e, 421.1428527832031 * e, 382.16071701049805 * e),
       n.bezierCurveTo(413.1428527832031 * e, 383.16071701049805 * e, 413.1428527832031 * e, 368.16071701049805 * e, 423.1428527832031 * e, 363.16071701049805 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(423.1428527832031 * e, 363.16071701049805 * e),
       n.bezierCurveTo(433.1428527832031 * e, 362.16071701049805 * e, 433.1428527832031 * e, 374.16071701049805 * e, 421.1428527832031 * e, 382.16071701049805 * e),
       n.bezierCurveTo(413.1428527832031 * e, 383.16071701049805 * e, 413.1428527832031 * e, 368.16071701049805 * e, 423.1428527832031 * e, 363.16071701049805 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(431.1428527832031 * e, 333.0178565979004 * e),
       n.bezierCurveTo(447.1428527832031 * e, 330.0178565979004 * e, 448.1428527832031 * e, 340.0178565979004 * e, 447.1428527832031 * e, 343.0178565979004 * e),
       n.bezierCurveTo(445.1428527832031 * e, 351.0178565979004 * e, 415.1428527832031 * e, 343.0178565979004 * e, 431.1428527832031 * e, 333.0178565979004 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(431.1428527832031 * e, 333.0178565979004 * e),
       n.bezierCurveTo(447.1428527832031 * e, 330.0178565979004 * e, 448.1428527832031 * e, 340.0178565979004 * e, 447.1428527832031 * e, 343.0178565979004 * e),
       n.bezierCurveTo(445.1428527832031 * e, 351.0178565979004 * e, 415.1428527832031 * e, 343.0178565979004 * e, 431.1428527832031 * e, 333.0178565979004 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(486.1428527832031 * e, 272.44642639160156 * e),
       n.bezierCurveTo(493.1428527832031 * e, 260.44642639160156 * e, 519.1428527832031 * e, 277.44642639160156 * e, 511.1428527832031 * e, 289.44642639160156 * e),
       n.bezierCurveTo(503.1428527832031 * e, 297.44642639160156 * e, 483.1428527832031 * e, 277.44642639160156 * e, 486.1428527832031 * e, 273.44642639160156 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(486.1428527832031 * e, 272.44642639160156 * e),
       n.bezierCurveTo(493.1428527832031 * e, 260.44642639160156 * e, 519.1428527832031 * e, 277.44642639160156 * e, 511.1428527832031 * e, 289.44642639160156 * e),
       n.bezierCurveTo(503.1428527832031 * e, 297.44642639160156 * e, 483.1428527832031 * e, 277.44642639160156 * e, 486.1428527832031 * e, 273.44642639160156 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(503.1428527832031 * e, 245.01785278320312 * e),
       n.bezierCurveTo(516.1428527832031 * e, 247.01785278320312 * e, 513.1428527832031 * e, 264.0178527832031 * e, 509.1428527832031 * e, 265.0178527832031 * e),
       n.bezierCurveTo(499.1428527832031 * e, 268.0178527832031 * e, 494.1428527832031 * e, 244.01785278320312 * e, 504.1428527832031 * e, 245.01785278320312 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(503.1428527832031 * e, 245.01785278320312 * e),
       n.bezierCurveTo(516.1428527832031 * e, 247.01785278320312 * e, 513.1428527832031 * e, 264.0178527832031 * e, 509.1428527832031 * e, 265.0178527832031 * e),
       n.bezierCurveTo(499.1428527832031 * e, 268.0178527832031 * e, 494.1428527832031 * e, 244.01785278320312 * e, 504.1428527832031 * e, 245.01785278320312 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(518.1428527832031 * e, 179.73213958740234 * e),
       n.bezierCurveTo(529.1428527832031 * e, 181.73213958740234 * e, 514.1428527832031 * e, 212.73213958740234 * e, 505.1428527832031 * e, 200.73213958740234 * e),
       n.bezierCurveTo(499.1428527832031 * e, 186.73213958740234 * e, 515.1428527832031 * e, 177.73213958740234 * e, 518.1428527832031 * e, 179.73213958740234 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(518.1428527832031 * e, 179.73213958740234 * e),
       n.bezierCurveTo(529.1428527832031 * e, 181.73213958740234 * e, 514.1428527832031 * e, 212.73213958740234 * e, 505.1428527832031 * e, 200.73213958740234 * e),
       n.bezierCurveTo(499.1428527832031 * e, 186.73213958740234 * e, 515.1428527832031 * e, 177.73213958740234 * e, 518.1428527832031 * e, 179.73213958740234 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(438.1428527832031 * e, 22.16070556640625 * e),
       n.bezierCurveTo(446.1428527832031 * e, 27.16070556640625 * e, 422.1428527832031 * e, 54.16070556640625 * e, 414.1428527832031 * e, 40.16070556640625 * e),
       n.bezierCurveTo(409.1428527832031 * e, 27.16070556640625 * e, 430.1428527832031 * e, 15.16070556640625 * e, 438.1428527832031 * e, 22.16070556640625 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(438.1428527832031 * e, 22.16070556640625 * e),
       n.bezierCurveTo(446.1428527832031 * e, 27.16070556640625 * e, 422.1428527832031 * e, 54.16070556640625 * e, 414.1428527832031 * e, 40.16070556640625 * e),
       n.bezierCurveTo(409.1428527832031 * e, 27.16070556640625 * e, 430.1428527832031 * e, 15.16070556640625 * e, 438.1428527832031 * e, 22.16070556640625 * e),
       n.closePath(),
       se(n, i[1]),
       n.globalAlpha = .5,
       n.translate(3 * e, 3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(406.1428527832031 * e, 11.16070556640625 * e),
       n.bezierCurveTo(418.1428527832031 * e, 14.16070556640625 * e, 411.1428527832031 * e, 27.16070556640625 * e, 403.1428527832031 * e, 30.16070556640625 * e),
       n.bezierCurveTo(395.1428527832031 * e, 31.16070556640625 * e, 391.1428527832031 * e, 16.16070556640625 * e, 406.1428527832031 * e, 10.16070556640625 * e),
       n.closePath(),
       se(n, i[0]),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(406.1428527832031 * e, 11.16070556640625 * e),
       n.bezierCurveTo(418.1428527832031 * e, 14.16070556640625 * e, 411.1428527832031 * e, 27.16070556640625 * e, 403.1428527832031 * e, 30.16070556640625 * e),
       n.bezierCurveTo(395.1428527832031 * e, 31.16070556640625 * e, 391.1428527832031 * e, 16.16070556640625 * e, 406.1428527832031 * e, 10.16070556640625 * e),
       n.closePath(),
       se(n, i[1]),
       n.translate(100 * e, 100 * e)),
       n.globalAlpha = 1,
       n.translate(-3 * e, -3 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(271 * e, 111 * e),
       n.bezierCurveTo(259 * e, 110 * e, 258 * e, 99 * e, 265 * e, 95 * e),
       n.bezierCurveTo(276 * e, 91 * e, 279 * e, 100 * e, 275 * e, 107 * e),
       n.bezierCurveTo(274 * e, 109 * e, 273 * e, 110 * e, 271 * e, 111 * e),
       n.closePath(),
       se(n, i[2], i[3], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(169 * e, 121 * e),
       n.bezierCurveTo(159 * e, 129 * e, 149 * e, 126 * e, 144 * e, 114 * e),
       n.bezierCurveTo(142 * e, 102 * e, 149 * e, 98 * e, 163 * e, 96 * e),
       n.bezierCurveTo(175 * e, 98 * e, 176 * e, 115 * e, 169 * e, 121 * e),
       n.closePath(),
       se(n, i[2], i[3], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(213 * e, 150 * e),
       n.bezierCurveTo(206 * e, 134 * e, 216 * e, 120 * e, 235 * e, 129 * e),
       n.bezierCurveTo(247 * e, 139 * e, 242 * e, 146 * e, 237 * e, 154 * e),
       n.bezierCurveTo(226 * e, 162 * e, 218 * e, 159 * e, 213 * e, 150 * e),
       n.closePath(),
       se(n, i[2], i[3], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(236 * e, 169 * e),
       n.bezierCurveTo(247 * e, 166 * e, 250 * e, 172 * e, 247 * e, 181 * e),
       n.bezierCurveTo(242 * e, 186 * e, 241 * e, 181 * e, 242 * e, 182 * e),
       n.bezierCurveTo(241 * e, 178 * e, 240 * e, 179 * e, 239 * e, 181 * e),
       n.bezierCurveTo(240 * e, 184 * e, 237 * e, 186 * e, 233 * e, 181 * e),
       n.bezierCurveTo(230 * e, 173 * e, 233 * e, 169 * e, 236 * e, 169 * e),
       n.closePath(),
       se(n, i[2], i[3], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(163 * e, 170 * e),
       n.bezierCurveTo(176 * e, 165 * e, 180 * e, 172 * e, 181 * e, 181 * e),
       n.bezierCurveTo(182 * e, 189 * e, 178 * e, 192 * e, 174 * e, 188 * e),
       n.bezierCurveTo(172 * e, 183 * e, 170 * e, 184 * e, 170 * e, 188 * e),
       n.bezierCurveTo(176 * e, 194 * e, 165 * e, 196 * e, 162 * e, 190 * e),
       n.bezierCurveTo(152 * e, 181 * e, 157 * e, 173 * e, 163 * e, 170 * e),
       n.closePath(),
       se(n, i[2], i[3], 2 * e),
       n.scale(.05, .05),
       n.translate(5e3 * e, 1900 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(273 * e, 46.546875 * e),
       n.bezierCurveTo(353 * e, 131.546875 * e, 303 * e, 213.546875 * e, 272 * e, 236.546875 * e),
       n.bezierCurveTo(203 * e, 179.546875 * e, 236 * e, 84.546875 * e, 273 * e, 47.546875 * e),
       n.closePath(),
       se(n, i[4], i[5], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(467 * e, 257.546875 * e),
       n.bezierCurveTo(369 * e, 194.546875 * e, 325 * e, 236.546875 * e, 291 * e, 271.546875 * e),
       n.bezierCurveTo(371 * e, 335.546875 * e, 427 * e, 313.546875 * e, 467 * e, 258.546875 * e),
       n.closePath(),
       se(n, i[4], i[5], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(269 * e, 275.546875 * e),
       n.bezierCurveTo(343 * e, 356.546875 * e, 355 * e, 407.546875 * e, 323 * e, 472.546875 * e),
       n.bezierCurveTo(224 * e, 451.546875 * e, 238 * e, 326.546875 * e, 270 * e, 275.546875 * e),
       n.closePath(),
       se(n, i[4], i[5], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(260 * e, 267.546875 * e),
       n.bezierCurveTo(134 * e, 221.546875 * e, 89 * e, 256.546875 * e, 60 * e, 295.546875 * e),
       n.bezierCurveTo(116 * e, 357.546875 * e, 242 * e, 344.546875 * e, 260 * e, 267.546875 * e),
       n.closePath(),
       se(n, i[4], i[5], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(124 * e, 123.546875 * e),
       n.bezierCurveTo(255 * e, 140.546875 * e, 265 * e, 234.546875 * e, 267 * e, 269.546875 * e),
       n.bezierCurveTo(159 * e, 283.546875 * e, 127 * e, 192.546875 * e, 124 * e, 124.546875 * e),
       n.closePath(),
       se(n, i[6], i[7], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(267 * e, 268.546875 * e),
       n.bezierCurveTo(265 * e, 170.546875 * e, 364 * e, 127.546875 * e, 407 * e, 132.546875 * e),
       n.bezierCurveTo(427 * e, 204.546875 * e, 341 * e, 277.546875 * e, 268 * e, 271.546875 * e),
       n.closePath(),
       se(n, i[6], i[7], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(270 * e, 269.546875 * e),
       n.bezierCurveTo(370 * e, 251.546875 * e, 410 * e, 328.546875 * e, 420 * e, 399.546875 * e),
       n.bezierCurveTo(292 * e, 412.546875 * e, 275 * e, 313.546875 * e, 269 * e, 272.546875 * e),
       n.closePath(),
       se(n, i[6], i[7], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(273 * e, 266.546875 * e),
       n.bezierCurveTo(291 * e, 370.546875 * e, 235 * e, 428.546875 * e, 173 * e, 451.546875 * e),
       n.bezierCurveTo(124 * e, 365.546875 * e, 217 * e, 274.546875 * e, 272 * e, 265.546875 * e),
       n.closePath(),
       se(n, i[6], i[7], 2 * e),
       Ee(n, 266 * e, 251.546875 * e, 19.1049731745428 * e),
       se(n, i[8], i[9], 2 * e),
       Ee(n, 292 * e, 274.546875 * e, 15.556349186104045 * e),
       se(n, i[8], i[9], 2 * e),
       Ee(n, 258 * e, 291.546875 * e, 17.029386365926403 * e),
       se(n, i[8], i[9], 2 * e),
       n.scale(1.4, 1.4),
       n.translate(-700 * e, 280 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(273 * e, 46.546875 * e),
       n.bezierCurveTo(353 * e, 131.546875 * e, 303 * e, 213.546875 * e, 272 * e, 236.546875 * e),
       n.bezierCurveTo(203 * e, 179.546875 * e, 236 * e, 84.546875 * e, 273 * e, 47.546875 * e),
       n.closePath(),
       se(n, i[4], i[5], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(467 * e, 257.546875 * e),
       n.bezierCurveTo(369 * e, 194.546875 * e, 325 * e, 236.546875 * e, 291 * e, 271.546875 * e),
       n.bezierCurveTo(371 * e, 335.546875 * e, 427 * e, 313.546875 * e, 467 * e, 258.546875 * e),
       n.closePath(),
       se(n, i[4], i[5], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(269 * e, 275.546875 * e),
       n.bezierCurveTo(343 * e, 356.546875 * e, 355 * e, 407.546875 * e, 323 * e, 472.546875 * e),
       n.bezierCurveTo(224 * e, 451.546875 * e, 238 * e, 326.546875 * e, 270 * e, 275.546875 * e),
       n.closePath(),
       se(n, i[4], i[5], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(260 * e, 267.546875 * e),
       n.bezierCurveTo(134 * e, 221.546875 * e, 89 * e, 256.546875 * e, 60 * e, 295.546875 * e),
       n.bezierCurveTo(116 * e, 357.546875 * e, 242 * e, 344.546875 * e, 260 * e, 267.546875 * e),
       n.closePath(),
       se(n, i[4], i[5], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(124 * e, 123.546875 * e),
       n.bezierCurveTo(255 * e, 140.546875 * e, 265 * e, 234.546875 * e, 267 * e, 269.546875 * e),
       n.bezierCurveTo(159 * e, 283.546875 * e, 127 * e, 192.546875 * e, 124 * e, 124.546875 * e),
       n.closePath(),
       se(n, i[6], i[7], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(267 * e, 268.546875 * e),
       n.bezierCurveTo(265 * e, 170.546875 * e, 364 * e, 127.546875 * e, 407 * e, 132.546875 * e),
       n.bezierCurveTo(427 * e, 204.546875 * e, 341 * e, 277.546875 * e, 268 * e, 271.546875 * e),
       n.closePath(),
       se(n, i[6], i[7], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(270 * e, 269.546875 * e),
       n.bezierCurveTo(370 * e, 251.546875 * e, 410 * e, 328.546875 * e, 420 * e, 399.546875 * e),
       n.bezierCurveTo(292 * e, 412.546875 * e, 275 * e, 313.546875 * e, 269 * e, 272.546875 * e),
       n.closePath(),
       se(n, i[6], i[7], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(273 * e, 266.546875 * e),
       n.bezierCurveTo(291 * e, 370.546875 * e, 235 * e, 428.546875 * e, 173 * e, 451.546875 * e),
       n.bezierCurveTo(124 * e, 365.546875 * e, 217 * e, 274.546875 * e, 272 * e, 265.546875 * e),
       n.closePath(),
       se(n, i[6], i[7], 2 * e),
       Ee(n, 266 * e, 251.546875 * e, 19.1049731745428 * e),
       se(n, i[8], i[9], 2 * e),
       Ee(n, 292 * e, 274.546875 * e, 15.556349186104045 * e),
       se(n, i[8], i[9], 2 * e),
       Ee(n, 258 * e, 291.546875 * e, 17.029386365926403 * e),
       se(n, i[8], i[9], 2 * e),
       n.translate(-900 * e, -200 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(273 * e, 46.546875 * e),
       n.bezierCurveTo(353 * e, 131.546875 * e, 303 * e, 213.546875 * e, 272 * e, 236.546875 * e),
       n.bezierCurveTo(203 * e, 179.546875 * e, 236 * e, 84.546875 * e, 273 * e, 47.546875 * e),
       n.closePath(),
       se(n, i[4], i[5], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(467 * e, 257.546875 * e),
       n.bezierCurveTo(369 * e, 194.546875 * e, 325 * e, 236.546875 * e, 291 * e, 271.546875 * e),
       n.bezierCurveTo(371 * e, 335.546875 * e, 427 * e, 313.546875 * e, 467 * e, 258.546875 * e),
       n.closePath(),
       se(n, i[4], i[5], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(269 * e, 275.546875 * e),
       n.bezierCurveTo(343 * e, 356.546875 * e, 355 * e, 407.546875 * e, 323 * e, 472.546875 * e),
       n.bezierCurveTo(224 * e, 451.546875 * e, 238 * e, 326.546875 * e, 270 * e, 275.546875 * e),
       n.closePath(),
       se(n, i[4], i[5], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(260 * e, 267.546875 * e),
       n.bezierCurveTo(134 * e, 221.546875 * e, 89 * e, 256.546875 * e, 60 * e, 295.546875 * e),
       n.bezierCurveTo(116 * e, 357.546875 * e, 242 * e, 344.546875 * e, 260 * e, 267.546875 * e),
       n.closePath(),
       se(n, i[4], i[5], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(124 * e, 123.546875 * e),
       n.bezierCurveTo(255 * e, 140.546875 * e, 265 * e, 234.546875 * e, 267 * e, 269.546875 * e),
       n.bezierCurveTo(159 * e, 283.546875 * e, 127 * e, 192.546875 * e, 124 * e, 124.546875 * e),
       n.closePath(),
       se(n, i[6], i[7], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(267 * e, 268.546875 * e),
       n.bezierCurveTo(265 * e, 170.546875 * e, 364 * e, 127.546875 * e, 407 * e, 132.546875 * e),
       n.bezierCurveTo(427 * e, 204.546875 * e, 341 * e, 277.546875 * e, 268 * e, 271.546875 * e),
       n.closePath(),
       se(n, i[6], i[7], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(270 * e, 269.546875 * e),
       n.bezierCurveTo(370 * e, 251.546875 * e, 410 * e, 328.546875 * e, 420 * e, 399.546875 * e),
       n.bezierCurveTo(292 * e, 412.546875 * e, 275 * e, 313.546875 * e, 269 * e, 272.546875 * e),
       n.closePath(),
       se(n, i[6], i[7], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(273 * e, 266.546875 * e),
       n.bezierCurveTo(291 * e, 370.546875 * e, 235 * e, 428.546875 * e, 173 * e, 451.546875 * e),
       n.bezierCurveTo(124 * e, 365.546875 * e, 217 * e, 274.546875 * e, 272 * e, 265.546875 * e),
       n.closePath(),
       se(n, i[6], i[7], 2 * e),
       Ee(n, 266 * e, 251.546875 * e, 19.1049731745428 * e),
       se(n, i[8], i[9], 2 * e),
       Ee(n, 292 * e, 274.546875 * e, 15.556349186104045 * e),
       se(n, i[8], i[9], 2 * e),
       Ee(n, 258 * e, 291.546875 * e, 17.029386365926403 * e),
       se(n, i[8], i[9], 2 * e),
       r
   }
   function en(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 376 * e,
       t.height = 371 * e,
       r.globalAlpha = .5,
       r.translate(5 * e, 5 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(191.633544921875 * e, 123.98580932617188 * e),
       r.bezierCurveTo(215.633544921875 * e, 85.98580932617188 * e, 187.633544921875 * e, 71.98580932617188 * e, 202.633544921875 * e, 19.985809326171875 * e),
       r.bezierCurveTo(231.633544921875 * e, 68.98580932617188 * e, 253.633544921875 * e, 71.98580932617188 * e, 256.633544921875 * e, 93.98580932617188 * e),
       r.bezierCurveTo(306.633544921875 * e, 64.98580932617188 * e, 319.633544921875 * e, 61.985809326171875 * e, 350.633544921875 * e, 58.985809326171875 * e),
       r.bezierCurveTo(280.633544921875 * e, 86.98580932617188 * e, 281.633544921875 * e, 106.98580932617188 * e, 268.633544921875 * e, 130.98580932617188 * e),
       r.bezierCurveTo(295.633544921875 * e, 158.98580932617188 * e, 328.633544921875 * e, 155.98580932617188 * e, 353.633544921875 * e, 90.98580932617188 * e),
       r.bezierCurveTo(371.633544921875 * e, 158.98580932617188 * e, 337.633544921875 * e, 210.98580932617188 * e, 286.633544921875 * e, 209.98580932617188 * e),
       r.bezierCurveTo(323.633544921875 * e, 230.98580932617188 * e, 317.633544921875 * e, 274.9858093261719 * e, 356.633544921875 * e, 305.9858093261719 * e),
       r.bezierCurveTo(288.633544921875 * e, 297.9858093261719 * e, 288.633544921875 * e, 265.9858093261719 * e, 275.633544921875 * e, 266.9858093261719 * e),
       r.bezierCurveTo(280.633544921875 * e, 294.9858093261719 * e, 315.633544921875 * e, 306.9858093261719 * e, 336.633544921875 * e, 316.9858093261719 * e),
       r.bezierCurveTo(295.633544921875 * e, 318.9858093261719 * e, 264.633544921875 * e, 302.9858093261719 * e, 254.633544921875 * e, 289.9858093261719 * e),
       r.bezierCurveTo(252.633544921875 * e, 301.9858093261719 * e, 224.633544921875 * e, 315.9858093261719 * e, 201.633544921875 * e, 356.9858093261719 * e),
       r.bezierCurveTo(195.633544921875 * e, 313.9858093261719 * e, 195.633544921875 * e, 308.9858093261719 * e, 196.633544921875 * e, 307.9858093261719 * e),
       r.bezierCurveTo(197.633544921875 * e, 289.9858093261719 * e, 207.633544921875 * e, 283.9858093261719 * e, 195.633544921875 * e, 258.9858093261719 * e),
       r.bezierCurveTo(182.633544921875 * e, 282.9858093261719 * e, 190.633544921875 * e, 287.9858093261719 * e, 193.633544921875 * e, 297.9858093261719 * e),
       r.bezierCurveTo(195.633544921875 * e, 306.9858093261719 * e, 191.633544921875 * e, 334.9858093261719 * e, 187.633544921875 * e, 354.9858093261719 * e),
       r.bezierCurveTo(165.633544921875 * e, 320.9858093261719 * e, 138.633544921875 * e, 307.9858093261719 * e, 135.633544921875 * e, 288.9858093261719 * e),
       r.bezierCurveTo(110.633544921875 * e, 318.9858093261719 * e, 68.633544921875 * e, 323.9858093261719 * e, 49.633544921875 * e, 320.9858093261719 * e),
       r.bezierCurveTo(88.633544921875 * e, 308.9858093261719 * e, 108.633544921875 * e, 284.9858093261719 * e, 118.633544921875 * e, 258.9858093261719 * e),
       r.bezierCurveTo(86.633544921875 * e, 264.9858093261719 * e, 75.633544921875 * e, 310.9858093261719 * e, 19.633544921875 * e, 304.9858093261719 * e),
       r.bezierCurveTo(54.633544921875 * e, 276.9858093261719 * e, 59.633544921875 * e, 214.98580932617188 * e, 105.633544921875 * e, 205.98580932617188 * e),
       r.bezierCurveTo(14.633544921875 * e, 201.98580932617188 * e, 24.633544921875 * e, 141.98580932617188 * e, 25.633544921875 * e, 82.98580932617188 * e),
       r.bezierCurveTo(49.633544921875 * e, 168.98580932617188 * e, 87.633544921875 * e, 141.98580932617188 * e, 112.633544921875 * e, 123.98580932617188 * e),
       r.bezierCurveTo(95.633544921875 * e, 75.98580932617188 * e, 70.633544921875 * e, 68.98580932617188 * e, 35.633544921875 * e, 50.985809326171875 * e),
       r.bezierCurveTo(70.633544921875 * e, 53.985809326171875 * e, 102.633544921875 * e, 65.98580932617188 * e, 125.633544921875 * e, 84.98580932617188 * e),
       r.bezierCurveTo(133.633544921875 * e, 69.98580932617188 * e, 166.633544921875 * e, 42.985809326171875 * e, 176.633544921875 * e, 21.985809326171875 * e),
       r.bezierCurveTo(185.633544921875 * e, 49.985809326171875 * e, 168.633544921875 * e, 95.98580932617188 * e, 191.633544921875 * e, 121.98580932617188 * e),
       r.closePath(),
       se(r, i[0]),
       r.globalAlpha = 1,
       r.translate(-4 * e, -5 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(191.633544921875 * e, 123.98580932617188 * e),
       r.bezierCurveTo(215.633544921875 * e, 85.98580932617188 * e, 187.633544921875 * e, 71.98580932617188 * e, 202.633544921875 * e, 19.985809326171875 * e),
       r.bezierCurveTo(231.633544921875 * e, 68.98580932617188 * e, 253.633544921875 * e, 71.98580932617188 * e, 256.633544921875 * e, 93.98580932617188 * e),
       r.bezierCurveTo(306.633544921875 * e, 64.98580932617188 * e, 319.633544921875 * e, 61.985809326171875 * e, 350.633544921875 * e, 58.985809326171875 * e),
       r.bezierCurveTo(280.633544921875 * e, 86.98580932617188 * e, 281.633544921875 * e, 106.98580932617188 * e, 268.633544921875 * e, 130.98580932617188 * e),
       r.bezierCurveTo(295.633544921875 * e, 158.98580932617188 * e, 328.633544921875 * e, 155.98580932617188 * e, 353.633544921875 * e, 90.98580932617188 * e),
       r.bezierCurveTo(371.633544921875 * e, 158.98580932617188 * e, 337.633544921875 * e, 210.98580932617188 * e, 286.633544921875 * e, 209.98580932617188 * e),
       r.bezierCurveTo(323.633544921875 * e, 230.98580932617188 * e, 317.633544921875 * e, 274.9858093261719 * e, 356.633544921875 * e, 305.9858093261719 * e),
       r.bezierCurveTo(288.633544921875 * e, 297.9858093261719 * e, 288.633544921875 * e, 265.9858093261719 * e, 275.633544921875 * e, 266.9858093261719 * e),
       r.bezierCurveTo(280.633544921875 * e, 294.9858093261719 * e, 315.633544921875 * e, 306.9858093261719 * e, 336.633544921875 * e, 316.9858093261719 * e),
       r.bezierCurveTo(295.633544921875 * e, 318.9858093261719 * e, 264.633544921875 * e, 302.9858093261719 * e, 254.633544921875 * e, 289.9858093261719 * e),
       r.bezierCurveTo(252.633544921875 * e, 301.9858093261719 * e, 224.633544921875 * e, 315.9858093261719 * e, 201.633544921875 * e, 356.9858093261719 * e),
       r.bezierCurveTo(195.633544921875 * e, 313.9858093261719 * e, 195.633544921875 * e, 308.9858093261719 * e, 196.633544921875 * e, 307.9858093261719 * e),
       r.bezierCurveTo(197.633544921875 * e, 289.9858093261719 * e, 207.633544921875 * e, 283.9858093261719 * e, 195.633544921875 * e, 258.9858093261719 * e),
       r.bezierCurveTo(182.633544921875 * e, 282.9858093261719 * e, 190.633544921875 * e, 287.9858093261719 * e, 193.633544921875 * e, 297.9858093261719 * e),
       r.bezierCurveTo(195.633544921875 * e, 306.9858093261719 * e, 191.633544921875 * e, 334.9858093261719 * e, 187.633544921875 * e, 354.9858093261719 * e),
       r.bezierCurveTo(165.633544921875 * e, 320.9858093261719 * e, 138.633544921875 * e, 307.9858093261719 * e, 135.633544921875 * e, 288.9858093261719 * e),
       r.bezierCurveTo(110.633544921875 * e, 318.9858093261719 * e, 68.633544921875 * e, 323.9858093261719 * e, 49.633544921875 * e, 320.9858093261719 * e),
       r.bezierCurveTo(88.633544921875 * e, 308.9858093261719 * e, 108.633544921875 * e, 284.9858093261719 * e, 118.633544921875 * e, 258.9858093261719 * e),
       r.bezierCurveTo(86.633544921875 * e, 264.9858093261719 * e, 75.633544921875 * e, 310.9858093261719 * e, 19.633544921875 * e, 304.9858093261719 * e),
       r.bezierCurveTo(54.633544921875 * e, 276.9858093261719 * e, 59.633544921875 * e, 214.98580932617188 * e, 105.633544921875 * e, 205.98580932617188 * e),
       r.bezierCurveTo(14.633544921875 * e, 201.98580932617188 * e, 24.633544921875 * e, 141.98580932617188 * e, 25.633544921875 * e, 82.98580932617188 * e),
       r.bezierCurveTo(49.633544921875 * e, 168.98580932617188 * e, 87.633544921875 * e, 141.98580932617188 * e, 112.633544921875 * e, 123.98580932617188 * e),
       r.bezierCurveTo(95.633544921875 * e, 75.98580932617188 * e, 70.633544921875 * e, 68.98580932617188 * e, 35.633544921875 * e, 50.985809326171875 * e),
       r.bezierCurveTo(70.633544921875 * e, 53.985809326171875 * e, 102.633544921875 * e, 65.98580932617188 * e, 125.633544921875 * e, 84.98580932617188 * e),
       r.bezierCurveTo(133.633544921875 * e, 69.98580932617188 * e, 166.633544921875 * e, 42.985809326171875 * e, 176.633544921875 * e, 21.985809326171875 * e),
       r.bezierCurveTo(185.633544921875 * e, 49.985809326171875 * e, 168.633544921875 * e, 95.98580932617188 * e, 191.633544921875 * e, 121.98580932617188 * e),
       r.closePath(),
       se(r, void 0, i[1], 12 * e),
       r.translate(-1 * e, 0 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(270.633544921875 * e, 88.98580932617188 * e),
       r.bezierCurveTo(296.633544921875 * e, 65.98580932617188 * e, 318.633544921875 * e, 62.985809326171875 * e, 348.633544921875 * e, 57.985809326171875 * e),
       r.bezierCurveTo(309.633544921875 * e, 76.98580932617188 * e, 291.633544921875 * e, 88.98580932617188 * e, 280.633544921875 * e, 99.98580932617188 * e),
       r.closePath(),
       se(r, i[4], i[5], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(275.633544921875 * e, 281.9858093261719 * e),
       r.bezierCurveTo(303.633544921875 * e, 308.9858093261719 * e, 321.633544921875 * e, 308.9858093261719 * e, 335.633544921875 * e, 315.9858093261719 * e),
       r.bezierCurveTo(305.633544921875 * e, 320.9858093261719 * e, 278.633544921875 * e, 307.9858093261719 * e, 264.633544921875 * e, 293.9858093261719 * e),
       r.closePath(),
       se(r, i[4], i[5], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(124.633544921875 * e, 291.9858093261719 * e),
       r.bezierCurveTo(106.633544921875 * e, 316.9858093261719 * e, 72.633544921875 * e, 325.9858093261719 * e, 53.633544921875 * e, 319.9858093261719 * e),
       r.bezierCurveTo(83.633544921875 * e, 308.9858093261719 * e, 97.633544921875 * e, 298.9858093261719 * e, 112.633544921875 * e, 284.9858093261719 * e),
       r.closePath(),
       se(r, i[4], i[5], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(113.633544921875 * e, 80.98580932617188 * e),
       r.bezierCurveTo(91.633544921875 * e, 54.985809326171875 * e, 72.633544921875 * e, 56.985809326171875 * e, 36.633544921875 * e, 49.985809326171875 * e),
       r.bezierCurveTo(87.633544921875 * e, 72.98580932617188 * e, 95.633544921875 * e, 82.98580932617188 * e, 106.633544921875 * e, 96.98580932617188 * e),
       r.closePath(),
       se(r, i[4], i[5], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(202.633544921875 * e, 20.985809326171875 * e),
       r.bezierCurveTo(219.633544921875 * e, 49.985809326171875 * e, 259.633544921875 * e, 80.98580932617188 * e, 255.633544921875 * e, 92.98580932617188 * e),
       r.bezierCurveTo(268.633544921875 * e, 86.98580932617188 * e, 265.633544921875 * e, 87.98580932617188 * e, 275.633544921875 * e, 82.98580932617188 * e),
       r.bezierCurveTo(283.633544921875 * e, 87.98580932617188 * e, 283.633544921875 * e, 87.98580932617188 * e, 291.633544921875 * e, 92.98580932617188 * e),
       r.bezierCurveTo(269.633544921875 * e, 116.98580932617188 * e, 270.633544921875 * e, 124.98580932617188 * e, 267.633544921875 * e, 130.98580932617188 * e),
       r.bezierCurveTo(307.633544921875 * e, 168.98580932617188 * e, 339.633544921875 * e, 132.98580932617188 * e, 352.633544921875 * e, 93.98580932617188 * e),
       r.bezierCurveTo(366.633544921875 * e, 145.98580932617188 * e, 345.633544921875 * e, 207.98580932617188 * e, 286.633544921875 * e, 208.98580932617188 * e),
       r.bezierCurveTo(315.633544921875 * e, 223.98580932617188 * e, 327.633544921875 * e, 287.9858093261719 * e, 355.633544921875 * e, 305.9858093261719 * e),
       r.bezierCurveTo(293.633544921875 * e, 298.9858093261719 * e, 293.633544921875 * e, 275.9858093261719 * e, 276.633544921875 * e, 266.9858093261719 * e),
       r.bezierCurveTo(274.633544921875 * e, 282.9858093261719 * e, 287.633544921875 * e, 288.9858093261719 * e, 295.633544921875 * e, 296.9858093261719 * e),
       r.bezierCurveTo(287.133544921875 * e, 302.4858093261719 * e, 287.133544921875 * e, 302.4858093261719 * e, 278.633544921875 * e, 307.9858093261719 * e),
       r.bezierCurveTo(261.633544921875 * e, 297.9858093261719 * e, 258.633544921875 * e, 293.9858093261719 * e, 255.633544921875 * e, 290.9858093261719 * e),
       r.bezierCurveTo(249.633544921875 * e, 301.9858093261719 * e, 225.633544921875 * e, 320.9858093261719 * e, 202.633544921875 * e, 354.9858093261719 * e),
       r.bezierCurveTo(195.633544921875 * e, 318.9858093261719 * e, 196.633544921875 * e, 306.9858093261719 * e, 198.633544921875 * e, 300.9858093261719 * e),
       r.bezierCurveTo(209.633544921875 * e, 268.9858093261719 * e, 199.633544921875 * e, 266.9858093261719 * e, 195.633544921875 * e, 256.9858093261719 * e),
       r.bezierCurveTo(183.633544921875 * e, 274.9858093261719 * e, 182.633544921875 * e, 281.9858093261719 * e, 192.633544921875 * e, 305.9858093261719 * e),
       r.bezierCurveTo(194.633544921875 * e, 317.9858093261719 * e, 191.633544921875 * e, 336.9858093261719 * e, 186.633544921875 * e, 351.9858093261719 * e),
       r.bezierCurveTo(166.633544921875 * e, 318.9858093261719 * e, 141.633544921875 * e, 303.9858093261719 * e, 136.633544921875 * e, 286.9858093261719 * e),
       r.bezierCurveTo(122.633544921875 * e, 303.9858093261719 * e, 115.633544921875 * e, 305.9858093261719 * e, 109.633544921875 * e, 306.9858093261719 * e),
       r.bezierCurveTo(101.133544921875 * e, 301.9858093261719 * e, 94.633544921875 * e, 297.9858093261719 * e, 92.633544921875 * e, 296.9858093261719 * e),
       r.bezierCurveTo(116.633544921875 * e, 277.9858093261719 * e, 116.633544921875 * e, 266.9858093261719 * e, 119.633544921875 * e, 257.9858093261719 * e),
       r.bezierCurveTo(107.633544921875 * e, 257.9858093261719 * e, 65.633544921875 * e, 308.9858093261719 * e, 24.633544921875 * e, 303.9858093261719 * e),
       r.bezierCurveTo(51.633544921875 * e, 275.9858093261719 * e, 64.633544921875 * e, 220.98580932617188 * e, 108.633544921875 * e, 205.98580932617188 * e),
       r.bezierCurveTo(14.633544921875 * e, 198.98580932617188 * e, 26.633544921875 * e, 142.98580932617188 * e, 25.633544921875 * e, 86.98580932617188 * e),
       r.bezierCurveTo(41.633544921875 * e, 155.98580932617188 * e, 81.633544921875 * e, 148.98580932617188 * e, 113.633544921875 * e, 124.98580932617188 * e),
       r.bezierCurveTo(102.633544921875 * e, 93.98580932617188 * e, 95.633544921875 * e, 88.98580932617188 * e, 89.633544921875 * e, 81.98580932617188 * e),
       r.bezierCurveTo(97.633544921875 * e, 76.48580932617188 * e, 97.633544921875 * e, 76.48580932617188 * e, 105.633544921875 * e, 70.98580932617188 * e),
       r.bezierCurveTo(120.633544921875 * e, 78.98580932617188 * e, 121.633544921875 * e, 81.98580932617188 * e, 124.633544921875 * e, 86.98580932617188 * e),
       r.bezierCurveTo(132.633544921875 * e, 71.98580932617188 * e, 160.633544921875 * e, 56.985809326171875 * e, 175.633544921875 * e, 23.985809326171875 * e),
       r.bezierCurveTo(182.633544921875 * e, 53.985809326171875 * e, 170.633544921875 * e, 102.98580932617188 * e, 191.633544921875 * e, 125.98580932617188 * e),
       r.bezierCurveTo(214.633544921875 * e, 89.98580932617188 * e, 192.633544921875 * e, 58.985809326171875 * e, 202.633544921875 * e, 20.985809326171875 * e),
       r.closePath(),
       se(r, i[2], i[3], 5 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(203.633544921875 * e, 21.985809326171875 * e),
       r.bezierCurveTo(223.633544921875 * e, 63.985809326171875 * e, 227.633544921875 * e, 72.98580932617188 * e, 235.633544921875 * e, 98.98580932617188 * e),
       r.bezierCurveTo(241.633544921875 * e, 123.98580932617188 * e, 225.633544921875 * e, 138.98580932617188 * e, 196.633544921875 * e, 122.98580932617188 * e),
       r.bezierCurveTo(213.633544921875 * e, 93.98580932617188 * e, 199.633544921875 * e, 49.985809326171875 * e, 203.633544921875 * e, 26.985809326171875 * e),
       r.closePath(),
       se(r, i[3]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(175.633544921875 * e, 25.985809326171875 * e),
       r.bezierCurveTo(176.633544921875 * e, 51.985809326171875 * e, 171.633544921875 * e, 88.98580932617188 * e, 186.633544921875 * e, 121.98580932617188 * e),
       r.bezierCurveTo(156.633544921875 * e, 144.98580932617188 * e, 139.633544921875 * e, 120.98580932617188 * e, 147.633544921875 * e, 97.98580932617188 * e),
       r.bezierCurveTo(152.633544921875 * e, 77.98580932617188 * e, 162.633544921875 * e, 60.985809326171875 * e, 176.633544921875 * e, 25.985809326171875 * e),
       r.closePath(),
       se(r, i[3]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(26.633544921875 * e, 96.98580932617188 * e),
       r.bezierCurveTo(38.633544921875 * e, 151.98580932617188 * e, 61.633544921875 * e, 161.98580932617188 * e, 88.633544921875 * e, 168.98580932617188 * e),
       r.bezierCurveTo(117.633544921875 * e, 177.98580932617188 * e, 113.633544921875 * e, 185.98580932617188 * e, 106.633544921875 * e, 204.98580932617188 * e),
       r.bezierCurveTo(32.633544921875 * e, 204.98580932617188 * e, 25.633544921875 * e, 149.98580932617188 * e, 25.633544921875 * e, 97.98580932617188 * e),
       r.closePath(),
       se(r, i[3]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(351.633544921875 * e, 99.98580932617188 * e),
       r.bezierCurveTo(365.633544921875 * e, 161.98580932617188 * e, 333.633544921875 * e, 203.98580932617188 * e, 287.633544921875 * e, 207.98580932617188 * e),
       r.bezierCurveTo(255.633544921875 * e, 208.98580932617188 * e, 266.633544921875 * e, 174.98580932617188 * e, 285.633544921875 * e, 176.98580932617188 * e),
       r.bezierCurveTo(313.633544921875 * e, 178.98580932617188 * e, 348.633544921875 * e, 135.98580932617188 * e, 353.633544921875 * e, 99.98580932617188 * e),
       r.closePath(),
       se(r, i[3]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(350.633544921875 * e, 302.9858093261719 * e),
       r.bezierCurveTo(310.633544921875 * e, 280.9858093261719 * e, 314.633544921875 * e, 244.98580932617188 * e, 292.633544921875 * e, 230.98580932617188 * e),
       r.bezierCurveTo(272.633544921875 * e, 215.98580932617188 * e, 263.633544921875 * e, 222.98580932617188 * e, 256.633544921875 * e, 236.98580932617188 * e),
       r.bezierCurveTo(251.633544921875 * e, 249.98580932617188 * e, 264.633544921875 * e, 255.98580932617188 * e, 279.633544921875 * e, 268.9858093261719 * e),
       r.bezierCurveTo(306.633544921875 * e, 295.9858093261719 * e, 325.633544921875 * e, 299.9858093261719 * e, 349.633544921875 * e, 302.9858093261719 * e),
       r.closePath(),
       se(r, i[3]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(95.633544921875 * e, 224.98580932617188 * e),
       r.bezierCurveTo(64.633544921875 * e, 245.98580932617188 * e, 62.633544921875 * e, 280.9858093261719 * e, 32.633544921875 * e, 303.9858093261719 * e),
       r.bezierCurveTo(59.633544921875 * e, 301.9858093261719 * e, 102.633544921875 * e, 260.9858093261719 * e, 116.633544921875 * e, 255.98580932617188 * e),
       r.bezierCurveTo(139.633544921875 * e, 229.98580932617188 * e, 108.633544921875 * e, 209.98580932617188 * e, 97.633544921875 * e, 224.98580932617188 * e),
       r.closePath(),
       se(r, i[3]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(195.633544921875 * e, 253.98580932617188 * e),
       r.bezierCurveTo(209.633544921875 * e, 282.9858093261719 * e, 205.633544921875 * e, 278.9858093261719 * e, 199.633544921875 * e, 307.9858093261719 * e),
       r.bezierCurveTo(198.633544921875 * e, 332.9858093261719 * e, 201.633544921875 * e, 340.9858093261719 * e, 202.633544921875 * e, 348.9858093261719 * e),
       r.bezierCurveTo(215.633544921875 * e, 313.9858093261719 * e, 226.633544921875 * e, 291.9858093261719 * e, 235.633544921875 * e, 270.9858093261719 * e),
       r.bezierCurveTo(243.633544921875 * e, 247.98580932617188 * e, 219.633544921875 * e, 235.98580932617188 * e, 196.633544921875 * e, 252.98580932617188 * e),
       r.closePath(),
       se(r, i[3]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(195.633544921875 * e, 251.98580932617188 * e),
       r.bezierCurveTo(176.633544921875 * e, 275.9858093261719 * e, 182.633544921875 * e, 285.9858093261719 * e, 191.633544921875 * e, 308.9858093261719 * e),
       r.bezierCurveTo(194.633544921875 * e, 318.9858093261719 * e, 190.633544921875 * e, 334.9858093261719 * e, 186.633544921875 * e, 348.9858093261719 * e),
       r.bezierCurveTo(175.633544921875 * e, 307.9858093261719 * e, 157.633544921875 * e, 291.9858093261719 * e, 155.633544921875 * e, 272.9858093261719 * e),
       r.bezierCurveTo(150.633544921875 * e, 243.98580932617188 * e, 170.633544921875 * e, 236.98580932617188 * e, 195.633544921875 * e, 251.98580932617188 * e),
       r.closePath(),
       se(r, i[3]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(316 * e, 186.8020782470703 * e),
       r.bezierCurveTo(315 * e, 173.8020782470703 * e, 298 * e, 177.8020782470703 * e, 293 * e, 183.8020782470703 * e),
       r.bezierCurveTo(285 * e, 195.8020782470703 * e, 314 * e, 197.8020782470703 * e, 315 * e, 187.8020782470703 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(340 * e, 157.8020782470703 * e),
       r.bezierCurveTo(327 * e, 153.8020782470703 * e, 321 * e, 168.8020782470703 * e, 330 * e, 174.8020782470703 * e),
       r.bezierCurveTo(341 * e, 178.8020782470703 * e, 347 * e, 161.8020782470703 * e, 341 * e, 157.8020782470703 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(349 * e, 136.8020782470703 * e),
       r.bezierCurveTo(343 * e, 135.8020782470703 * e, 342 * e, 139.8020782470703 * e, 341 * e, 147.8020782470703 * e),
       r.bezierCurveTo(343 * e, 155.8020782470703 * e, 353 * e, 143.8020782470703 * e, 349 * e, 137.8020782470703 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(278.75 * e, 246.4375 * e),
       r.bezierCurveTo(288.75 * e, 242.4375 * e, 301.75 * e, 248.4375 * e, 298.75 * e, 262.4375 * e),
       r.bezierCurveTo(293.75 * e, 271.4375 * e, 287.75 * e, 271.4375 * e, 278.75 * e, 262.4375 * e),
       r.bezierCurveTo(271.75 * e, 255.4375 * e, 274.75 * e, 250.4375 * e, 277.75 * e, 247.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(310.75 * e, 277.4375 * e),
       r.bezierCurveTo(319.75 * e, 280.4375 * e, 322.75 * e, 283.4375 * e, 321.75 * e, 289.4375 * e),
       r.bezierCurveTo(319.75 * e, 295.4375 * e, 313.75 * e, 291.4375 * e, 308.75 * e, 288.4375 * e),
       r.bezierCurveTo(301.75 * e, 281.4375 * e, 306.75 * e, 277.4375 * e, 309.75 * e, 277.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(217.75 * e, 257.4375 * e),
       r.bezierCurveTo(227.75 * e, 269.4375 * e, 220.75 * e, 281.4375 * e, 212.75 * e, 280.4375 * e),
       r.bezierCurveTo(206.75 * e, 279.4375 * e, 206.75 * e, 269.4375 * e, 204.75 * e, 260.4375 * e),
       r.bezierCurveTo(204.75 * e, 254.4375 * e, 211.75 * e, 253.4375 * e, 216.75 * e, 256.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(211.75 * e, 289.4375 * e),
       r.bezierCurveTo(219.75 * e, 292.4375 * e, 213.75 * e, 306.4375 * e, 206.75 * e, 307.4375 * e),
       r.bezierCurveTo(199.75 * e, 303.4375 * e, 209.75 * e, 287.4375 * e, 210.75 * e, 289.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(171.75 * e, 256.4375 * e),
       r.bezierCurveTo(162.75 * e, 273.4375 * e, 166.75 * e, 278.4375 * e, 175.75 * e, 280.4375 * e),
       r.bezierCurveTo(183.75 * e, 278.4375 * e, 185.75 * e, 257.4375 * e, 182.75 * e, 255.4375 * e),
       r.bezierCurveTo(176.75 * e, 251.4375 * e, 172.75 * e, 253.4375 * e, 172.75 * e, 256.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(175.75 * e, 289.9375 * e),
       r.bezierCurveTo(183.75 * e, 287.9375 * e, 186.75 * e, 301.9375 * e, 182.75 * e, 305.9375 * e),
       r.bezierCurveTo(176.75 * e, 307.9375 * e, 171.75 * e, 292.9375 * e, 174.75 * e, 290.9375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(205.75 * e, 314.4375 * e),
       r.bezierCurveTo(209.75 * e, 316.4375 * e, 210.75 * e, 320.4375 * e, 206.75 * e, 323.4375 * e),
       r.bezierCurveTo(201.75 * e, 324.4375 * e, 201.75 * e, 314.4375 * e, 204.75 * e, 314.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(186.75 * e, 313.4375 * e),
       r.bezierCurveTo(181.75 * e, 315.4375 * e, 180.75 * e, 321.4375 * e, 185.75 * e, 326.4375 * e),
       r.bezierCurveTo(190.75 * e, 327.4375 * e, 190.75 * e, 313.4375 * e, 187.75 * e, 314.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(103.75 * e, 244.4375 * e),
       r.bezierCurveTo(96.75 * e, 239.4375 * e, 83.75 * e, 240.4375 * e, 81.75 * e, 255.4375 * e),
       r.bezierCurveTo(80.75 * e, 264.4375 * e, 89.75 * e, 269.4375 * e, 99.75 * e, 260.4375 * e),
       r.bezierCurveTo(106.75 * e, 254.4375 * e, 106.75 * e, 250.4375 * e, 104.75 * e, 245.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(86.75 * e, 182.4375 * e),
       r.bezierCurveTo(82.75 * e, 170.4375 * e, 66.75 * e, 169.4375 * e, 61.75 * e, 181.4375 * e),
       r.bezierCurveTo(58.75 * e, 187.4375 * e, 68.75 * e, 194.4375 * e, 75.75 * e, 192.4375 * e),
       r.bezierCurveTo(83.75 * e, 192.4375 * e, 86.75 * e, 187.4375 * e, 86.75 * e, 183.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(44.75 * e, 152.4375 * e),
       r.bezierCurveTo(55.75 * e, 159.4375 * e, 54.75 * e, 170.4375 * e, 46.75 * e, 171.4375 * e),
       r.bezierCurveTo(39.75 * e, 170.4375 * e, 34.75 * e, 151.4375 * e, 43.75 * e, 152.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(31.75 * e, 130.4375 * e),
       r.bezierCurveTo(35.75 * e, 132.4375 * e, 35.75 * e, 131.4375 * e, 37.75 * e, 137.4375 * e),
       r.bezierCurveTo(36.75 * e, 144.4375 * e, 36.75 * e, 145.4375 * e, 33.75 * e, 144.4375 * e),
       r.bezierCurveTo(26.75 * e, 137.4375 * e, 29.75 * e, 131.4375 * e, 31.75 * e, 130.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(69.75 * e, 274.4375 * e),
       r.bezierCurveTo(62.75 * e, 272.4375 * e, 59.75 * e, 277.4375 * e, 57.75 * e, 284.4375 * e),
       r.bezierCurveTo(56.75 * e, 290.4375 * e, 63.75 * e, 289.4375 * e, 71.75 * e, 282.4375 * e),
       r.bezierCurveTo(75.75 * e, 277.4375 * e, 72.75 * e, 275.4375 * e, 69.75 * e, 274.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(165.75 * e, 95.4375 * e),
       r.bezierCurveTo(177.75 * e, 97.4375 * e, 182.75 * e, 115.4375 * e, 173.75 * e, 121.4375 * e),
       r.bezierCurveTo(164.75 * e, 126.4375 * e, 149.75 * e, 102.4375 * e, 164.75 * e, 96.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(216.75 * e, 94.4375 * e),
       r.bezierCurveTo(227.75 * e, 99.4375 * e, 223.75 * e, 122.4375 * e, 210.75 * e, 119.4375 * e),
       r.bezierCurveTo(203.75 * e, 115.4375 * e, 207.75 * e, 93.4375 * e, 216.75 * e, 94.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(211.75 * e, 68.4375 * e),
       r.bezierCurveTo(218.75 * e, 69.4375 * e, 220.75 * e, 77.4375 * e, 216.75 * e, 83.4375 * e),
       r.bezierCurveTo(208.75 * e, 89.4375 * e, 205.75 * e, 68.4375 * e, 210.75 * e, 68.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(169.75 * e, 71.4375 * e),
       r.bezierCurveTo(162.75 * e, 72.4375 * e, 159.75 * e, 83.4375 * e, 167.75 * e, 88.4375 * e),
       r.bezierCurveTo(174.75 * e, 90.4375 * e, 174.75 * e, 72.4375 * e, 170.75 * e, 71.4375 * e),
       r.closePath(),
       se(r, i[6], i[7], 4 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(193.75 * e, 160.4375 * e),
       r.bezierCurveTo(215.75 * e, 168.4375 * e, 224.75 * e, 180.4375 * e, 229.75 * e, 193.4375 * e),
       r.bezierCurveTo(223.75 * e, 211.4375 * e, 205.75 * e, 225.4375 * e, 193.75 * e, 229.4375 * e),
       r.bezierCurveTo(167.75 * e, 217.4375 * e, 161.75 * e, 205.4375 * e, 156.75 * e, 192.4375 * e),
       r.bezierCurveTo(164.75 * e, 175.4375 * e, 176.75 * e, 166.4375 * e, 192.75 * e, 160.4375 * e),
       r.closePath(),
       se(r, i[8], i[9], 3 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(189.1999969482422 * e, 182.61249923706055 * e),
       r.bezierCurveTo(190.1999969482422 * e, 184.11249923706055 * e, 190.1999969482422 * e, 184.11249923706055 * e, 191.1999969482422 * e, 185.61249923706055 * e),
       r.bezierCurveTo(192.1999969482422 * e, 180.61249923706055 * e, 192.1999969482422 * e, 180.61249923706055 * e, 193.1999969482422 * e, 175.61249923706055 * e),
       r.bezierCurveTo(195.6999969482422 * e, 177.11249923706055 * e, 195.6999969482422 * e, 177.11249923706055 * e, 198.1999969482422 * e, 178.61249923706055 * e),
       r.bezierCurveTo(198.1999969482422 * e, 181.11249923706055 * e, 198.1999969482422 * e, 181.11249923706055 * e, 198.1999969482422 * e, 183.61249923706055 * e),
       r.bezierCurveTo(201.6999969482422 * e, 181.11249923706055 * e, 201.6999969482422 * e, 181.11249923706055 * e, 205.1999969482422 * e, 178.61249923706055 * e),
       r.bezierCurveTo(206.6999969482422 * e, 180.61249923706055 * e, 206.6999969482422 * e, 180.61249923706055 * e, 208.1999969482422 * e, 182.61249923706055 * e),
       r.bezierCurveTo(206.1999969482422 * e, 185.61249923706055 * e, 206.1999969482422 * e, 185.61249923706055 * e, 204.1999969482422 * e, 188.61249923706055 * e),
       r.bezierCurveTo(208.6999969482422 * e, 188.61249923706055 * e, 208.6999969482422 * e, 188.61249923706055 * e, 213.1999969482422 * e, 188.61249923706055 * e),
       r.bezierCurveTo(213.1999969482422 * e, 191.11249923706055 * e, 213.1999969482422 * e, 191.11249923706055 * e, 213.1999969482422 * e, 193.61249923706055 * e),
       r.bezierCurveTo(209.6999969482422 * e, 194.61249923706055 * e, 209.6999969482422 * e, 194.61249923706055 * e, 206.1999969482422 * e, 195.61249923706055 * e),
       r.bezierCurveTo(210.1999969482422 * e, 198.61249923706055 * e, 210.1999969482422 * e, 198.61249923706055 * e, 214.1999969482422 * e, 201.61249923706055 * e),
       r.bezierCurveTo(212.1999969482422 * e, 203.61249923706055 * e, 212.1999969482422 * e, 203.61249923706055 * e, 210.1999969482422 * e, 205.61249923706055 * e),
       r.bezierCurveTo(207.1999969482422 * e, 204.11249923706055 * e, 207.1999969482422 * e, 204.11249923706055 * e, 204.1999969482422 * e, 202.61249923706055 * e),
       r.bezierCurveTo(205.6999969482422 * e, 207.61249923706055 * e, 205.6999969482422 * e, 207.61249923706055 * e, 207.1999969482422 * e, 212.61249923706055 * e),
       r.bezierCurveTo(204.6999969482422 * e, 213.61249923706055 * e, 204.6999969482422 * e, 213.61249923706055 * e, 202.1999969482422 * e, 214.61249923706055 * e),
       r.bezierCurveTo(200.1999969482422 * e, 210.61249923706055 * e, 200.1999969482422 * e, 210.61249923706055 * e, 198.1999969482422 * e, 206.61249923706055 * e),
       r.bezierCurveTo(196.6999969482422 * e, 211.61249923706055 * e, 196.6999969482422 * e, 211.61249923706055 * e, 195.1999969482422 * e, 216.61249923706055 * e),
       r.bezierCurveTo(192.6999969482422 * e, 216.11249923706055 * e, 192.6999969482422 * e, 216.11249923706055 * e, 190.1999969482422 * e, 215.61249923706055 * e),
       r.bezierCurveTo(190.1999969482422 * e, 211.61249923706055 * e, 190.1999969482422 * e, 211.61249923706055 * e, 190.1999969482422 * e, 207.61249923706055 * e),
       r.bezierCurveTo(186.1999969482422 * e, 210.61249923706055 * e, 186.1999969482422 * e, 210.61249923706055 * e, 182.1999969482422 * e, 213.61249923706055 * e),
       r.bezierCurveTo(181.1999969482422 * e, 211.11249923706055 * e, 181.1999969482422 * e, 211.11249923706055 * e, 180.1999969482422 * e, 208.61249923706055 * e),
       r.bezierCurveTo(183.1999969482422 * e, 205.61249923706055 * e, 183.1999969482422 * e, 205.61249923706055 * e, 186.1999969482422 * e, 202.61249923706055 * e),
       r.bezierCurveTo(180.6999969482422 * e, 203.11249923706055 * e, 180.6999969482422 * e, 203.11249923706055 * e, 175.1999969482422 * e, 203.61249923706055 * e),
       r.bezierCurveTo(174.6999969482422 * e, 200.11249923706055 * e, 174.6999969482422 * e, 200.11249923706055 * e, 174.1999969482422 * e, 196.61249923706055 * e),
       r.bezierCurveTo(177.1999969482422 * e, 195.61249923706055 * e, 177.1999969482422 * e, 195.61249923706055 * e, 180.1999969482422 * e, 194.61249923706055 * e),
       r.bezierCurveTo(177.1999969482422 * e, 191.61249923706055 * e, 177.1999969482422 * e, 191.61249923706055 * e, 174.1999969482422 * e, 188.61249923706055 * e),
       r.bezierCurveTo(175.6999969482422 * e, 187.11249923706055 * e, 175.6999969482422 * e, 187.11249923706055 * e, 177.1999969482422 * e, 185.61249923706055 * e),
       r.bezierCurveTo(180.6999969482422 * e, 187.11249923706055 * e, 180.6999969482422 * e, 187.11249923706055 * e, 184.1999969482422 * e, 188.61249923706055 * e),
       r.bezierCurveTo(182.6999969482422 * e, 183.61249923706055 * e, 182.6999969482422 * e, 183.61249923706055 * e, 181.1999969482422 * e, 178.61249923706055 * e),
       r.bezierCurveTo(183.1999969482422 * e, 177.11249923706055 * e, 183.1999969482422 * e, 177.11249923706055 * e, 185.1999969482422 * e, 175.61249923706055 * e),
       r.closePath(),
       se(r, i[10]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(185.1999969482422 * e, 173.8125 * e),
       r.bezierCurveTo(187.1999969482422 * e, 179.3125 * e, 187.1999969482422 * e, 179.3125 * e, 189.1999969482422 * e, 184.8125 * e),
       r.bezierCurveTo(184.1999969482422 * e, 181.8125 * e, 184.1999969482422 * e, 181.8125 * e, 179.1999969482422 * e, 178.8125 * e),
       r.bezierCurveTo(181.1999969482422 * e, 175.8125 * e, 182.1999969482422 * e, 174.8125 * e, 185.1999969482422 * e, 173.8125 * e),
       r.closePath(),
       se(r, i[11]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(192.1999969482422 * e, 173.61249542236328 * e),
       r.bezierCurveTo(194.1999969482422 * e, 172.61249542236328 * e, 196.1999969482422 * e, 171.61249542236328 * e, 199.1999969482422 * e, 173.61249542236328 * e),
       r.bezierCurveTo(197.6999969482422 * e, 179.61249542236328 * e, 197.6999969482422 * e, 179.61249542236328 * e, 196.1999969482422 * e, 185.61249542236328 * e),
       r.bezierCurveTo(194.1999969482422 * e, 179.61249542236328 * e, 194.1999969482422 * e, 179.61249542236328 * e, 192.1999969482422 * e, 173.61249542236328 * e),
       r.closePath(),
       se(r, i[11]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(205.1999969482422 * e, 176.2125015258789 * e),
       r.bezierCurveTo(210.1999969482422 * e, 178.2125015258789 * e, 211.1999969482422 * e, 179.2125015258789 * e, 211.1999969482422 * e, 181.2125015258789 * e),
       r.bezierCurveTo(206.6999969482422 * e, 184.7125015258789 * e, 206.6999969482422 * e, 184.7125015258789 * e, 202.1999969482422 * e, 188.2125015258789 * e),
       r.bezierCurveTo(203.6999969482422 * e, 182.2125015258789 * e, 203.6999969482422 * e, 182.2125015258789 * e, 205.1999969482422 * e, 176.2125015258789 * e),
       r.closePath(),
       se(r, i[11]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(214.1999969482422 * e, 187.21249985694885 * e),
       r.bezierCurveTo(216.1999969482422 * e, 191.21249985694885 * e, 216.1999969482422 * e, 192.21249985694885 * e, 215.1999969482422 * e, 195.21249985694885 * e),
       r.bezierCurveTo(206.1999969482422 * e, 194.21249985694885 * e, 205.1999969482422 * e, 194.21249985694885 * e, 205.1999969482422 * e, 194.21249985694885 * e),
       r.bezierCurveTo(209.6999969482422 * e, 190.71249985694885 * e, 209.6999969482422 * e, 190.71249985694885 * e, 214.1999969482422 * e, 187.21249985694885 * e),
       r.closePath(),
       se(r, i[11]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(204.1999969482422 * e, 201.8125 * e),
       r.bezierCurveTo(209.1999969482422 * e, 201.3125 * e, 209.1999969482422 * e, 201.3125 * e, 214.1999969482422 * e, 200.8125 * e),
       r.bezierCurveTo(215.1999969482422 * e, 204.8125 * e, 214.1999969482422 * e, 205.8125 * e, 213.1999969482422 * e, 208.8125 * e),
       r.bezierCurveTo(208.6999969482422 * e, 205.3125 * e, 208.6999969482422 * e, 205.3125 * e, 204.1999969482422 * e, 201.8125 * e),
       r.closePath(),
       se(r, i[11]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(199.1999969482422 * e, 205.61249923706055 * e),
       r.bezierCurveTo(207.1999969482422 * e, 212.61249923706055 * e, 203.6999969482422 * e, 209.11249923706055 * e, 208.1999969482422 * e, 212.61249923706055 * e),
       r.bezierCurveTo(206.1999969482422 * e, 215.61249923706055 * e, 204.1999969482422 * e, 217.61249923706055 * e, 203.1999969482422 * e, 216.61249923706055 * e),
       r.bezierCurveTo(201.1999969482422 * e, 211.11249923706055 * e, 201.1999969482422 * e, 211.11249923706055 * e, 199.1999969482422 * e, 205.61249923706055 * e),
       r.closePath(),
       se(r, i[11]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(191.1999969482422 * e, 207.01250076293945 * e),
       r.bezierCurveTo(194.1999969482422 * e, 213.01250076293945 * e, 194.1999969482422 * e, 216.01250076293945 * e, 196.1999969482422 * e, 218.01250076293945 * e),
       r.bezierCurveTo(193.1999969482422 * e, 220.01250076293945 * e, 190.1999969482422 * e, 220.01250076293945 * e, 188.1999969482422 * e, 218.01250076293945 * e),
       r.bezierCurveTo(189.6999969482422 * e, 213.01250076293945 * e, 189.6999969482422 * e, 213.01250076293945 * e, 191.1999969482422 * e, 208.01250076293945 * e),
       r.closePath(),
       se(r, i[11]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(186.1999969482422 * e, 203.21249961853027 * e),
       r.bezierCurveTo(184.1999969482422 * e, 209.21249961853027 * e, 184.1999969482422 * e, 209.21249961853027 * e, 182.1999969482422 * e, 215.21249961853027 * e),
       r.bezierCurveTo(177.1999969482422 * e, 212.21249961853027 * e, 176.1999969482422 * e, 211.21249961853027 * e, 177.1999969482422 * e, 210.21249961853027 * e),
       r.bezierCurveTo(181.6999969482422 * e, 206.71249961853027 * e, 181.6999969482422 * e, 206.71249961853027 * e, 186.1999969482422 * e, 203.21249961853027 * e),
       r.closePath(),
       se(r, i[11]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(183.1999969482422 * e, 196.8125 * e),
       r.bezierCurveTo(177.1999969482422 * e, 196.3125 * e, 177.1999969482422 * e, 196.3125 * e, 171.1999969482422 * e, 195.8125 * e),
       r.bezierCurveTo(171.1999969482422 * e, 199.8125 * e, 171.1999969482422 * e, 202.8125 * e, 174.1999969482422 * e, 204.8125 * e),
       r.bezierCurveTo(178.6999969482422 * e, 200.8125 * e, 178.6999969482422 * e, 200.8125 * e, 183.1999969482422 * e, 196.8125 * e),
       r.closePath(),
       se(r, i[11]),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(185.1999969482422 * e, 190.21249771118164 * e),
       r.bezierCurveTo(179.6999969482422 * e, 186.71249771118164 * e, 179.6999969482422 * e, 186.71249771118164 * e, 174.1999969482422 * e, 183.21249771118164 * e),
       r.bezierCurveTo(172.1999969482422 * e, 186.21249771118164 * e, 172.1999969482422 * e, 187.21249771118164 * e, 172.1999969482422 * e, 190.21249771118164 * e),
       r.bezierCurveTo(178.1999969482422 * e, 190.21249771118164 * e, 178.1999969482422 * e, 190.21249771118164 * e, 184.1999969482422 * e, 190.21249771118164 * e),
       r.closePath(),
       se(r, i[11]),
       Ee(r, 126.19999694824219 * e, 169.8125 * e, 8.94427190999916 * e),
       se(r, i[12]),
       Ee(r, 123.19999694824219 * e, 164.8125 * e, 2.8284271247461903 * e),
       se(r, i[13]),
       Ee(r, 253.1999969482422 * e, 169.8125 * e, 8.94427190999916 * e),
       se(r, i[12]),
       Ee(r, 255.1999969482422 * e, 164.8125 * e, 2.23606797749979 * e),
       se(r, i[13]),
       t
   }
   function tn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 400 * e,
       r.height = 400 * e,
       n.globalAlpha = 1,
       n.translate(20 * e, 20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(36.5 * e, 278.0625 * e),
       n.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e),
       n.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e),
       n.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e),
       n.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e),
       n.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(-20 * e, -20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(36.5 * e, 278.0625 * e),
       n.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e),
       n.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e),
       n.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e),
       n.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e),
       n.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e),
       n.closePath(),
       se(n, t[1], t[2], 19 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(214.5 * e, 124.0625 * e),
       n.bezierCurveTo(242.5 * e, 125.0625 * e, 272.5 * e, 159.0625 * e, 283.5 * e, 184.0625 * e),
       n.bezierCurveTo(277.5 * e, 161.0625 * e, 233.5 * e, 128.0625 * e, 219.5 * e, 122.0625 * e),
       n.closePath(),
       se(n, void 0, t[2], 19 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(157.5 * e, 145.0625 * e),
       n.bezierCurveTo(176.5 * e, 148.0625 * e, 205.5 * e, 176.0625 * e, 212.5 * e, 197.0625 * e),
       n.bezierCurveTo(205.5 * e, 178.0625 * e, 177.5 * e, 152.0625 * e, 156.5 * e, 142.0625 * e),
       n.closePath(),
       se(n, void 0, t[2], 19 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(103.5 * e, 169.0625 * e),
       n.bezierCurveTo(160.5 * e, 166.0625 * e, 228.5 * e, 312.0625 * e, 162.5 * e, 323.0625 * e),
       n.bezierCurveTo(128.5 * e, 330.0625 * e, 45.5 * e, 312.0625 * e, 34.5 * e, 268.0625 * e),
       n.bezierCurveTo(30.5 * e, 238.0625 * e, 44.5 * e, 222.0625 * e, 52.5 * e, 211.0625 * e),
       n.bezierCurveTo(82.5 * e, 174.0625 * e, 104.5 * e, 166.0625 * e, 119.5 * e, 172.0625 * e),
       n.closePath(),
       se(n, t[3], t[2], 19 * e),
       Ee(n, 92.5 * e, 216.0625 * e, 13.892443989449804 * e),
       se(n, t[4]),
       Ee(n, 68.5 * e, 227.0625 * e, 8.06225774829855 * e),
       se(n, t[4]),
       Ee(n, 85.5 * e, 240.0625 * e, 6.708203932499369 * e),
       se(n, t[4]),
       Ee(n, 147.5 * e, 294.0625 * e, 17.46424919657298 * e),
       se(n, t[4]),
       Ee(n, 166.5 * e, 273.0625 * e, 6.708203932499369 * e),
       se(n, t[4]),
       Ee(n, 114.5 * e, 294.0625 * e, 12.36931687685298 * e),
       se(n, t[4]),
       Ee(n, 123.5 * e, 220.0625 * e, 5.830951894845301 * e),
       se(n, t[4]),
       Ee(n, 114.5 * e, 259.0625 * e, 4.123105625617661 * e),
       se(n, t[4]),
       Ee(n, 63.5 * e, 265.0625 * e, 5.385164807134504 * e),
       se(n, t[4]),
       Ee(n, 148.5 * e, 235.0625 * e, 4.47213595499958 * e),
       se(n, t[4]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(194.5 * e, 313.0625 * e),
       n.bezierCurveTo(222.5 * e, 306.0625 * e, 319.5 * e, 271.0625 * e, 337.5 * e, 241.0625 * e),
       n.bezierCurveTo(274.5 * e, 270.0625 * e, 216.5 * e, 288.0625 * e, 199.5 * e, 287.0625 * e),
       n.bezierCurveTo(198.5 * e, 302.0625 * e, 195.5 * e, 311.0625 * e, 193.5 * e, 312.0625 * e),
       n.closePath(),
       se(n, t[5]),
       r
   }
   function rn(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 376 * e,
       t.height = 371 * e,
       r.globalAlpha = 1,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(191.633544921875 * e, 123.98580932617188 * e),
       r.bezierCurveTo(215.633544921875 * e, 85.98580932617188 * e, 187.633544921875 * e, 71.98580932617188 * e, 202.633544921875 * e, 19.985809326171875 * e),
       r.bezierCurveTo(231.633544921875 * e, 68.98580932617188 * e, 253.633544921875 * e, 71.98580932617188 * e, 256.633544921875 * e, 93.98580932617188 * e),
       r.bezierCurveTo(306.633544921875 * e, 64.98580932617188 * e, 319.633544921875 * e, 61.985809326171875 * e, 350.633544921875 * e, 58.985809326171875 * e),
       r.bezierCurveTo(280.633544921875 * e, 86.98580932617188 * e, 281.633544921875 * e, 106.98580932617188 * e, 268.633544921875 * e, 130.98580932617188 * e),
       r.bezierCurveTo(295.633544921875 * e, 158.98580932617188 * e, 328.633544921875 * e, 155.98580932617188 * e, 353.633544921875 * e, 90.98580932617188 * e),
       r.bezierCurveTo(371.633544921875 * e, 158.98580932617188 * e, 337.633544921875 * e, 210.98580932617188 * e, 286.633544921875 * e, 209.98580932617188 * e),
       r.bezierCurveTo(323.633544921875 * e, 230.98580932617188 * e, 317.633544921875 * e, 274.9858093261719 * e, 356.633544921875 * e, 305.9858093261719 * e),
       r.bezierCurveTo(288.633544921875 * e, 297.9858093261719 * e, 288.633544921875 * e, 265.9858093261719 * e, 275.633544921875 * e, 266.9858093261719 * e),
       r.bezierCurveTo(280.633544921875 * e, 294.9858093261719 * e, 315.633544921875 * e, 306.9858093261719 * e, 336.633544921875 * e, 316.9858093261719 * e),
       r.bezierCurveTo(295.633544921875 * e, 318.9858093261719 * e, 264.633544921875 * e, 302.9858093261719 * e, 254.633544921875 * e, 289.9858093261719 * e),
       r.bezierCurveTo(252.633544921875 * e, 301.9858093261719 * e, 224.633544921875 * e, 315.9858093261719 * e, 201.633544921875 * e, 356.9858093261719 * e),
       r.bezierCurveTo(195.633544921875 * e, 313.9858093261719 * e, 195.633544921875 * e, 308.9858093261719 * e, 196.633544921875 * e, 307.9858093261719 * e),
       r.bezierCurveTo(197.633544921875 * e, 289.9858093261719 * e, 207.633544921875 * e, 283.9858093261719 * e, 195.633544921875 * e, 258.9858093261719 * e),
       r.bezierCurveTo(182.633544921875 * e, 282.9858093261719 * e, 190.633544921875 * e, 287.9858093261719 * e, 193.633544921875 * e, 297.9858093261719 * e),
       r.bezierCurveTo(195.633544921875 * e, 306.9858093261719 * e, 191.633544921875 * e, 334.9858093261719 * e, 187.633544921875 * e, 354.9858093261719 * e),
       r.bezierCurveTo(165.633544921875 * e, 320.9858093261719 * e, 138.633544921875 * e, 307.9858093261719 * e, 135.633544921875 * e, 288.9858093261719 * e),
       r.bezierCurveTo(110.633544921875 * e, 318.9858093261719 * e, 68.633544921875 * e, 323.9858093261719 * e, 49.633544921875 * e, 320.9858093261719 * e),
       r.bezierCurveTo(88.633544921875 * e, 308.9858093261719 * e, 108.633544921875 * e, 284.9858093261719 * e, 118.633544921875 * e, 258.9858093261719 * e),
       r.bezierCurveTo(86.633544921875 * e, 264.9858093261719 * e, 75.633544921875 * e, 310.9858093261719 * e, 19.633544921875 * e, 304.9858093261719 * e),
       r.bezierCurveTo(54.633544921875 * e, 276.9858093261719 * e, 59.633544921875 * e, 214.98580932617188 * e, 105.633544921875 * e, 205.98580932617188 * e),
       r.bezierCurveTo(14.633544921875 * e, 201.98580932617188 * e, 24.633544921875 * e, 141.98580932617188 * e, 25.633544921875 * e, 82.98580932617188 * e),
       r.bezierCurveTo(49.633544921875 * e, 168.98580932617188 * e, 87.633544921875 * e, 141.98580932617188 * e, 112.633544921875 * e, 123.98580932617188 * e),
       r.bezierCurveTo(95.633544921875 * e, 75.98580932617188 * e, 70.633544921875 * e, 68.98580932617188 * e, 35.633544921875 * e, 50.985809326171875 * e),
       r.bezierCurveTo(70.633544921875 * e, 53.985809326171875 * e, 102.633544921875 * e, 65.98580932617188 * e, 125.633544921875 * e, 84.98580932617188 * e),
       r.bezierCurveTo(133.633544921875 * e, 69.98580932617188 * e, 166.633544921875 * e, 42.985809326171875 * e, 176.633544921875 * e, 21.985809326171875 * e),
       r.bezierCurveTo(185.633544921875 * e, 49.985809326171875 * e, 168.633544921875 * e, 95.98580932617188 * e, 191.633544921875 * e, 121.98580932617188 * e),
       r.closePath(),
       se(r, i[0], i[0], 12 * e),
       t
   }
   function nn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 440 * e,
       r.height = 388 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       Ee(n, 220 * e, 201 * e, 170.41713528867922 * e),
       se(n, t[0], t[0], 6 * e),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       Ee(n, 220 * e, 201 * e, 170.41713528867922 * e),
       se(n, t[1], t[2], 6 * e),
       Ee(n, 220 * e, 201 * e, 130 * e),
       se(n, t[11], t[2], 6 * e),
       Ee(n, 222 * e, 199 * e, 120.74767078498864 * e),
       se(n, void 0, t[3], 40 * e),
       Ee(n, 220 * e, 200 * e, 95.44108130150245 * e),
       se(n, void 0, t[2], 15 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       Ee(n, 63 * e, 136 * e, 49.193495504995376 * e),
       se(n, t[0], t[0], 4 * e),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       Ee(n, 63 * e, 136 * e, 49.193495504995376 * e),
       se(n, t[8], t[2], 4 * e),
       Ee(n, 63 * e, 137 * e, 25.632011235952593 * e),
       se(n, t[7], t[2], 4 * e),
       r
   }
   function on(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 440 * e,
       r.height = 388 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       Ee(n, 220 * e, 201 * e, 170.41713528867922 * e),
       se(n, t[0], t[0], 6 * e),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       Ee(n, 220 * e, 201 * e, 170.41713528867922 * e),
       se(n, t[1], t[2], 6 * e),
       Ee(n, 220 * e, 201 * e, 130 * e),
       se(n, t[11], t[2], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(218 * e, 97 * e),
       n.bezierCurveTo(219 * e, 163 * e, 201 * e, 176 * e, 191 * e, 175 * e),
       n.bezierCurveTo(176 * e, 177 * e, 168 * e, 167 * e, 160 * e, 115 * e),
       n.closePath(),
       se(n, t[5], t[6], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(224 * e, 181 * e),
       n.bezierCurveTo(225 * e, 138 * e, 246 * e, 115 * e, 263 * e, 137 * e),
       n.bezierCurveTo(282 * e, 174 * e, 279 * e, 217 * e, 265 * e, 243 * e),
       n.bezierCurveTo(253 * e, 264 * e, 240 * e, 256 * e, 233 * e, 238 * e),
       n.bezierCurveTo(221 * e, 212 * e, 225 * e, 198 * e, 224 * e, 184 * e),
       n.closePath(),
       se(n, t[5], t[6], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(169 * e, 289 * e),
       n.bezierCurveTo(161 * e, 234 * e, 168 * e, 197 * e, 187 * e, 195 * e),
       n.bezierCurveTo(219 * e, 189 * e, 222 * e, 256 * e, 216 * e, 307 * e),
       n.closePath(),
       se(n, t[5], t[6], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(143 * e, 146 * e),
       n.bezierCurveTo(161 * e, 199 * e, 151 * e, 245 * e, 138 * e, 266 * e),
       n.bezierCurveTo(120.5 * e, 239.5 * e, 120.5 * e, 239.5 * e, 103 * e, 213 * e),
       n.closePath(),
       se(n, t[5], t[6], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(283 * e, 135 * e),
       n.bezierCurveTo(277 * e, 176 * e, 298 * e, 194 * e, 315 * e, 205 * e),
       n.bezierCurveTo(323.5 * e, 175 * e, 323.5 * e, 175 * e, 332 * e, 145 * e),
       n.closePath(),
       se(n, t[5], t[6], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(318 * e, 223 * e),
       n.bezierCurveTo(290 * e, 195 * e, 271 * e, 256 * e, 283 * e, 281 * e),
       n.bezierCurveTo(303.5 * e, 267 * e, 303.5 * e, 267 * e, 324 * e, 253 * e),
       n.closePath(),
       se(n, t[5], t[6], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(142 * e, 223 * e),
       n.bezierCurveTo(128 * e, 213 * e, 123 * e, 214 * e, 111 * e, 223 * e),
       n.closePath(),
       se(n, t[10], t[10], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(251 * e, 133 * e),
       n.bezierCurveTo(269 * e, 188 * e, 262 * e, 229 * e, 251 * e, 253 * e),
       n.bezierCurveTo(288 * e, 224 * e, 273 * e, 139 * e, 252 * e, 133 * e),
       n.closePath(),
       se(n, t[10], t[10], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(203 * e, 102 * e),
       n.bezierCurveTo(204 * e, 136 * e, 200 * e, 159 * e, 189 * e, 174 * e),
       n.bezierCurveTo(223 * e, 164 * e, 219 * e, 87 * e, 205 * e, 83 * e),
       n.closePath(),
       se(n, t[10], t[10], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(196 * e, 324 * e),
       n.bezierCurveTo(209 * e, 239 * e, 200 * e, 219 * e, 192 * e, 196 * e),
       n.bezierCurveTo(229 * e, 216 * e, 219 * e, 316 * e, 198 * e, 325 * e),
       n.closePath(),
       se(n, t[10], t[10], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(266 * e, 166 * e),
       n.bezierCurveTo(249 * e, 154 * e, 243 * e, 161 * e, 233 * e, 167 * e),
       se(n, void 0, t[6], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(269 * e, 192 * e),
       n.bezierCurveTo(256 * e, 183 * e, 241 * e, 186 * e, 233 * e, 192 * e),
       se(n, void 0, t[6], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(263 * e, 217 * e),
       n.bezierCurveTo(251 * e, 211 * e, 242 * e, 213 * e, 236 * e, 218 * e),
       se(n, void 0, t[6], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(204 * e, 141 * e),
       n.bezierCurveTo(191 * e, 131 * e, 187 * e, 133 * e, 176 * e, 141 * e),
       se(n, void 0, t[6], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(207 * e, 230 * e),
       n.bezierCurveTo(193 * e, 222 * e, 185 * e, 224 * e, 177 * e, 231 * e),
       se(n, void 0, t[6], 6 * e),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(210 * e, 258 * e),
       n.bezierCurveTo(196 * e, 247 * e, 191 * e, 250 * e, 177 * e, 259 * e),
       se(n, void 0, t[6], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(145 * e, 196 * e),
       n.bezierCurveTo(130 * e, 186 * e, 124 * e, 187 * e, 114 * e, 195 * e),
       se(n, void 0, t[6], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(218 * e, 97 * e),
       n.bezierCurveTo(219 * e, 163 * e, 201 * e, 176 * e, 191 * e, 175 * e),
       n.bezierCurveTo(176 * e, 177 * e, 168 * e, 167 * e, 160 * e, 115 * e),
       n.closePath(),
       se(n, void 0, t[6], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(224 * e, 181 * e),
       n.bezierCurveTo(225 * e, 138 * e, 246 * e, 115 * e, 263 * e, 137 * e),
       n.bezierCurveTo(282 * e, 174 * e, 279 * e, 217 * e, 265 * e, 243 * e),
       n.bezierCurveTo(253 * e, 264 * e, 240 * e, 256 * e, 233 * e, 238 * e),
       n.bezierCurveTo(221 * e, 212 * e, 225 * e, 198 * e, 224 * e, 184 * e),
       n.closePath(),
       se(n, void 0, t[6], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(169 * e, 289 * e),
       n.bezierCurveTo(161 * e, 234 * e, 168 * e, 197 * e, 187 * e, 195 * e),
       n.bezierCurveTo(219 * e, 189 * e, 222 * e, 256 * e, 216 * e, 307 * e),
       n.closePath(),
       se(n, void 0, t[6], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(143 * e, 146 * e),
       n.bezierCurveTo(161 * e, 199 * e, 151 * e, 245 * e, 138 * e, 266 * e),
       n.bezierCurveTo(120.5 * e, 239.5 * e, 120.5 * e, 239.5 * e, 103 * e, 213 * e),
       n.closePath(),
       se(n, void 0, t[6], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(283 * e, 135 * e),
       n.bezierCurveTo(277 * e, 176 * e, 298 * e, 194 * e, 315 * e, 205 * e),
       n.bezierCurveTo(323.5 * e, 175 * e, 323.5 * e, 175 * e, 332 * e, 145 * e),
       n.closePath(),
       se(n, void 0, t[6], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(318 * e, 223 * e),
       n.bezierCurveTo(290 * e, 195 * e, 271 * e, 256 * e, 283 * e, 281 * e),
       n.bezierCurveTo(303.5 * e, 267 * e, 303.5 * e, 267 * e, 324 * e, 253 * e),
       n.closePath(),
       se(n, void 0, t[6], 6 * e),
       Ee(n, 222 * e, 199 * e, 120.74767078498864 * e),
       se(n, void 0, t[3], 40 * e),
       Ee(n, 220 * e, 200 * e, 95.44108130150245 * e),
       se(n, void 0, t[2], 15 * e),
       Ee(n, 220 * e, 201 * e, 85 * e),
       se(n, void 0, t[4], 10 * e),
       n.globalAlpha = .5,
       Ee(n, 220 * e, 201 * e, 82 * e),
       se(n, t[9]),
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       Ee(n, 63 * e, 136 * e, 49.193495504995376 * e),
       se(n, t[0], t[0], 4 * e),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       Ee(n, 63 * e, 136 * e, 49.193495504995376 * e),
       se(n, t[8], t[2], 4 * e),
       Ee(n, 63 * e, 137 * e, 25.632011235952593 * e),
       se(n, t[7], t[2], 4 * e),
       r
   }
   function an(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 110 * e,
       t.height = 110 * e,
       r.globalAlpha = .2,
       Ee(r, 55 * e, 55 * e, 55 * e),
       se(r, i[0]),
       t
   }
   function sn(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 110 * e,
       t.height = 110 * e,
       r.globalAlpha = .2,
       Ee(r, 55 * e, 55 * e, 55 * e),
       se(r, i[0]),
       t
   }
   function Tn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 102 * e,
       r.height = 102 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(3, 3),
       Te(n, 24 * e, 26 * e, 70 * e, 9 * e, 10 * e),
       se(n, t[0]),
       Te(n, 26 * e, 70 * e, 70 * e, 9 * e, 10 * e),
       se(n, t[0]),
       Te(n, 5 * e, 3 * e, 22 * e, 94 * e, 5 * e),
       se(n, t[0]),
       Te(n, 40 * e, 3 * e, 22 * e, 94 * e, 5 * e),
       se(n, t[0]),
       Te(n, 75 * e, 3 * e, 22 * e, 94 * e, 5 * e),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-3, -3),
       Te(n, 24 * e, 26 * e, 70 * e, 9 * e, 10 * e),
       se(n, t[1]),
       Te(n, 26 * e, 70 * e, 70 * e, 9 * e, 10 * e),
       se(n, t[1]),
       Te(n, 5 * e, 3 * e, 22 * e, 94 * e, 5 * e),
       se(n, t[2], t[3], 4 * e),
       Te(n, 40 * e, 3 * e, 22 * e, 94 * e, 5 * e),
       se(n, t[2], t[3], 4 * e),
       Te(n, 75 * e, 3 * e, 22 * e, 94 * e, 5 * e),
       se(n, t[2], t[3], 4 * e),
       r
   }
   function In(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 496 * e,
       t.height = 520 * e,
       r.globalAlpha = 1,
       r.translate(0, -10 * e),
       Ee(r, 247.01138305664062 * e, 250.13068389892578 * e, 232.81967270830015 * e),
       se(r, i[1], i[2], 14 * e),
       r.globalCompositeOperation = "destination-out",
       Ee(r, 247.01138305664062 * e, 249.3125 * e, 161.4465855941215 * e),
       se(r, i[0], i[0], 14 * e),
       r.globalCompositeOperation = "source-over",
       t
   }
   function En(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       r.width = 496 * e,
       r.height = 520 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(19.000030517578125 * e, 256.67613983154297 * e),
       n.bezierCurveTo(1.000030517578125 * e, 332.67613983154297 * e, 23.000030517578125 * e, 404.67613983154297 * e, 95.00003051757812 * e, 463.67613983154297 * e),
       n.bezierCurveTo(128.00003051757812 * e, 491.67613983154297 * e, 165.00003051757812 * e, 507.67613983154297 * e, 194.00003051757812 * e, 512.676139831543 * e),
       n.bezierCurveTo(280.0000305175781 * e, 517.676139831543 * e, 291.0000305175781 * e, 516.676139831543 * e, 342.0000305175781 * e, 497.67613983154297 * e),
       n.bezierCurveTo(425.0000305175781 * e, 454.67613983154297 * e, 469.0000305175781 * e, 392.67613983154297 * e, 468.0000305175781 * e, 300.67613983154297 * e),
       n.bezierCurveTo(408.5000305175781 * e, 365.17613983154297 * e, 408.5000305175781 * e, 365.17613983154297 * e, 349.0000305175781 * e, 429.67613983154297 * e),
       n.bezierCurveTo(256.0000305175781 * e, 473.67613983154297 * e, 167.00003051757812 * e, 459.67613983154297 * e, 78.00003051757812 * e, 384.67613983154297 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -10 * e),
       Ee(n, 247.01138305664062 * e, 249.3125 * e, 161.4465855941215 * e),
       se(n, t[5], void 0, 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(65.00003051757812 * e, 263.4034118652344 * e),
       n.bezierCurveTo(109.00003051757812 * e, 160.40341186523438 * e, 185.00003051757812 * e, 128.40341186523438 * e, 222.00003051757812 * e, 124.40341186523438 * e),
       n.bezierCurveTo(277.0000305175781 * e, 116.40341186523438 * e, 339.0000305175781 * e, 134.40341186523438 * e, 379.0000305175781 * e, 195.40341186523438 * e),
       n.bezierCurveTo(409.0000305175781 * e, 242.40341186523438 * e, 416.0000305175781 * e, 256.4034118652344 * e, 428.0000305175781 * e, 304.4034118652344 * e),
       n.bezierCurveTo(457.0000305175781 * e, 203.40341186523438 * e, 449.0000305175781 * e, 183.40341186523438 * e, 438.0000305175781 * e, 162.40341186523438 * e),
       n.bezierCurveTo(381.0000305175781 * e, 73.40341186523438 * e, 360.0000305175781 * e, 66.40341186523438 * e, 257.0000305175781 * e, 46.403411865234375 * e),
       n.bezierCurveTo(191.00003051757812 * e, 45.403411865234375 * e, 142.00003051757812 * e, 65.40341186523438 * e, 101.00003051757812 * e, 115.40341186523438 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1;
       var o = In(e, t);
       return n.drawImage(o, 0, 0),
       n.translate(0, -10 * e),
       Ee(n, 247.01138305664062 * e, 249.3125 * e, 161.4465855941215 * e),
       se(n, void 0, t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(325.0113830566406 * e, 13.767059326171875 * e),
       n.bezierCurveTo(349.5113830566406 * e, 25.767059326171875 * e, 349.5113830566406 * e, 25.767059326171875 * e, 374.0113830566406 * e, 37.767059326171875 * e),
       n.bezierCurveTo(384.0113830566406 * e, 44.767059326171875 * e, 383.0113830566406 * e, 50.767059326171875 * e, 368.0113830566406 * e, 68.76705932617188 * e),
       n.bezierCurveTo(352.5113830566406 * e, 91.26705932617188 * e, 352.5113830566406 * e, 91.26705932617188 * e, 337.0113830566406 * e, 113.76705932617188 * e),
       n.bezierCurveTo(328.0113830566406 * e, 119.76705932617188 * e, 328.0113830566406 * e, 121.76705932617188 * e, 312.0113830566406 * e, 112.76705932617188 * e),
       n.bezierCurveTo(303.0113830566406 * e, 108.26705932617188 * e, 303.0113830566406 * e, 108.26705932617188 * e, 294.0113830566406 * e, 103.76705932617188 * e),
       n.bezierCurveTo(287.0113830566406 * e, 99.76705932617188 * e, 293.0113830566406 * e, 84.76705932617188 * e, 297.0113830566406 * e, 67.76705932617188 * e),
       n.bezierCurveTo(302.0113830566406 * e, 47.767059326171875 * e, 302.0113830566406 * e, 47.767059326171875 * e, 307.0113830566406 * e, 27.767059326171875 * e),
       n.bezierCurveTo(310.0113830566406 * e, 15.767059326171875 * e, 317.0113830566406 * e, 12.767059326171875 * e, 323.0113830566406 * e, 13.767059326171875 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(325.0113830566406 * e, 13.767059326171875 * e),
       n.bezierCurveTo(349.5113830566406 * e, 25.767059326171875 * e, 349.5113830566406 * e, 25.767059326171875 * e, 374.0113830566406 * e, 37.767059326171875 * e),
       n.bezierCurveTo(384.0113830566406 * e, 44.767059326171875 * e, 383.0113830566406 * e, 50.767059326171875 * e, 368.0113830566406 * e, 68.76705932617188 * e),
       n.bezierCurveTo(352.5113830566406 * e, 91.26705932617188 * e, 352.5113830566406 * e, 91.26705932617188 * e, 337.0113830566406 * e, 113.76705932617188 * e),
       n.bezierCurveTo(328.0113830566406 * e, 119.76705932617188 * e, 328.0113830566406 * e, 121.76705932617188 * e, 312.0113830566406 * e, 112.76705932617188 * e),
       n.bezierCurveTo(303.0113830566406 * e, 108.26705932617188 * e, 303.0113830566406 * e, 108.26705932617188 * e, 294.0113830566406 * e, 103.76705932617188 * e),
       n.bezierCurveTo(287.0113830566406 * e, 99.76705932617188 * e, 293.0113830566406 * e, 84.76705932617188 * e, 297.0113830566406 * e, 67.76705932617188 * e),
       n.bezierCurveTo(302.0113830566406 * e, 47.767059326171875 * e, 302.0113830566406 * e, 47.767059326171875 * e, 307.0113830566406 * e, 27.767059326171875 * e),
       n.bezierCurveTo(310.0113830566406 * e, 15.767059326171875 * e, 317.0113830566406 * e, 12.767059326171875 * e, 323.0113830566406 * e, 13.767059326171875 * e),
       n.closePath(),
       se(n, t[3], t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(403.0113830566406 * e, 89.76705932617188 * e),
       n.bezierCurveTo(413.0113830566406 * e, 76.76705932617188 * e, 418.0113830566406 * e, 79.76705932617188 * e, 428.0113830566406 * e, 92.76705932617188 * e),
       n.bezierCurveTo(435.0113830566406 * e, 99.76705932617188 * e, 435.0113830566406 * e, 99.76705932617188 * e, 442.0113830566406 * e, 106.76705932617188 * e),
       n.bezierCurveTo(450.0113830566406 * e, 116.76705932617188 * e, 445.0113830566406 * e, 119.76705932617188 * e, 433.0113830566406 * e, 128.76705932617188 * e),
       n.bezierCurveTo(408.0113830566406 * e, 146.26705932617188 * e, 408.0113830566406 * e, 146.26705932617188 * e, 383.0113830566406 * e, 163.76705932617188 * e),
       n.bezierCurveTo(376.0113830566406 * e, 166.76705932617188 * e, 377.0113830566406 * e, 165.76705932617188 * e, 368.0113830566406 * e, 156.76705932617188 * e),
       n.bezierCurveTo(359.0113830566406 * e, 144.76705932617188 * e, 359.0113830566406 * e, 142.76705932617188 * e, 367.0113830566406 * e, 133.76705932617188 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(403.0113830566406 * e, 89.76705932617188 * e),
       n.bezierCurveTo(413.0113830566406 * e, 76.76705932617188 * e, 418.0113830566406 * e, 79.76705932617188 * e, 428.0113830566406 * e, 92.76705932617188 * e),
       n.bezierCurveTo(435.0113830566406 * e, 99.76705932617188 * e, 435.0113830566406 * e, 99.76705932617188 * e, 442.0113830566406 * e, 106.76705932617188 * e),
       n.bezierCurveTo(450.0113830566406 * e, 116.76705932617188 * e, 445.0113830566406 * e, 119.76705932617188 * e, 433.0113830566406 * e, 128.76705932617188 * e),
       n.bezierCurveTo(408.0113830566406 * e, 146.26705932617188 * e, 408.0113830566406 * e, 146.26705932617188 * e, 383.0113830566406 * e, 163.76705932617188 * e),
       n.bezierCurveTo(376.0113830566406 * e, 166.76705932617188 * e, 377.0113830566406 * e, 165.76705932617188 * e, 368.0113830566406 * e, 156.76705932617188 * e),
       n.bezierCurveTo(359.0113830566406 * e, 144.76705932617188 * e, 359.0113830566406 * e, 142.76705932617188 * e, 367.0113830566406 * e, 133.76705932617188 * e),
       n.closePath(),
       se(n, t[4], t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(228.01138305664062 * e, 1.767059326171875 * e),
       n.bezierCurveTo(246.51138305664062 * e, 3.267059326171875 * e, 246.51138305664062 * e, 3.267059326171875 * e, 265.0113830566406 * e, 4.767059326171875 * e),
       n.bezierCurveTo(273.0113830566406 * e, 5.767059326171875 * e, 275.0113830566406 * e, 11.767059326171875 * e, 270.0113830566406 * e, 27.767059326171875 * e),
       n.bezierCurveTo(264.0113830566406 * e, 54.267059326171875 * e, 264.0113830566406 * e, 54.267059326171875 * e, 258.0113830566406 * e, 80.76705932617188 * e),
       n.bezierCurveTo(256.0113830566406 * e, 92.76705932617188 * e, 256.0113830566406 * e, 94.76705932617188 * e, 242.01138305664062 * e, 93.76705932617188 * e),
       n.bezierCurveTo(226.01138305664062 * e, 95.76705932617188 * e, 225.01138305664062 * e, 91.76705932617188 * e, 225.01138305664062 * e, 80.76705932617188 * e),
       n.bezierCurveTo(223.51138305664062 * e, 50.267059326171875 * e, 223.51138305664062 * e, 50.267059326171875 * e, 222.01138305664062 * e, 19.767059326171875 * e),
       n.bezierCurveTo(219.01138305664062 * e, 8.767059326171875 * e, 224.01138305664062 * e, 4.767059326171875 * e, 227.01138305664062 * e, 2.767059326171875 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(228.01138305664062 * e, 1.767059326171875 * e),
       n.bezierCurveTo(246.51138305664062 * e, 3.267059326171875 * e, 246.51138305664062 * e, 3.267059326171875 * e, 265.0113830566406 * e, 4.767059326171875 * e),
       n.bezierCurveTo(273.0113830566406 * e, 5.767059326171875 * e, 275.0113830566406 * e, 11.767059326171875 * e, 270.0113830566406 * e, 27.767059326171875 * e),
       n.bezierCurveTo(264.0113830566406 * e, 54.267059326171875 * e, 264.0113830566406 * e, 54.267059326171875 * e, 258.0113830566406 * e, 80.76705932617188 * e),
       n.bezierCurveTo(256.0113830566406 * e, 92.76705932617188 * e, 256.0113830566406 * e, 94.76705932617188 * e, 242.01138305664062 * e, 93.76705932617188 * e),
       n.bezierCurveTo(226.01138305664062 * e, 95.76705932617188 * e, 225.01138305664062 * e, 91.76705932617188 * e, 225.01138305664062 * e, 80.76705932617188 * e),
       n.bezierCurveTo(223.51138305664062 * e, 50.267059326171875 * e, 223.51138305664062 * e, 50.267059326171875 * e, 222.01138305664062 * e, 19.767059326171875 * e),
       n.bezierCurveTo(219.01138305664062 * e, 8.767059326171875 * e, 224.01138305664062 * e, 4.767059326171875 * e, 227.01138305664062 * e, 2.767059326171875 * e),
       n.closePath(),
       se(n, t[4], t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(142.01138305664062 * e, 25.767059326171875 * e),
       n.bezierCurveTo(158.51138305664062 * e, 19.767059326171875 * e, 158.51138305664062 * e, 19.767059326171875 * e, 175.01138305664062 * e, 13.767059326171875 * e),
       n.bezierCurveTo(188.01138305664062 * e, 11.767059326171875 * e, 188.01138305664062 * e, 16.767059326171875 * e, 191.01138305664062 * e, 29.767059326171875 * e),
       n.bezierCurveTo(197.01138305664062 * e, 60.267059326171875 * e, 197.01138305664062 * e, 60.267059326171875 * e, 203.01138305664062 * e, 90.76705932617188 * e),
       n.bezierCurveTo(206.01138305664062 * e, 102.76705932617188 * e, 196.01138305664062 * e, 99.76705932617188 * e, 181.01138305664062 * e, 105.76705932617188 * e),
       n.bezierCurveTo(175.01138305664062 * e, 108.76705932617188 * e, 172.01138305664062 * e, 104.76705932617188 * e, 164.01138305664062 * e, 84.76705932617188 * e),
       n.bezierCurveTo(152.51138305664062 * e, 63.267059326171875 * e, 152.51138305664062 * e, 63.267059326171875 * e, 141.01138305664062 * e, 41.767059326171875 * e),
       n.bezierCurveTo(138.01138305664062 * e, 35.767059326171875 * e, 138.01138305664062 * e, 29.767059326171875 * e, 141.01138305664062 * e, 27.767059326171875 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(142.01138305664062 * e, 25.767059326171875 * e),
       n.bezierCurveTo(158.51138305664062 * e, 19.767059326171875 * e, 158.51138305664062 * e, 19.767059326171875 * e, 175.01138305664062 * e, 13.767059326171875 * e),
       n.bezierCurveTo(188.01138305664062 * e, 11.767059326171875 * e, 188.01138305664062 * e, 16.767059326171875 * e, 191.01138305664062 * e, 29.767059326171875 * e),
       n.bezierCurveTo(197.01138305664062 * e, 60.267059326171875 * e, 197.01138305664062 * e, 60.267059326171875 * e, 203.01138305664062 * e, 90.76705932617188 * e),
       n.bezierCurveTo(206.01138305664062 * e, 102.76705932617188 * e, 196.01138305664062 * e, 99.76705932617188 * e, 181.01138305664062 * e, 105.76705932617188 * e),
       n.bezierCurveTo(175.01138305664062 * e, 108.76705932617188 * e, 172.01138305664062 * e, 104.76705932617188 * e, 164.01138305664062 * e, 84.76705932617188 * e),
       n.bezierCurveTo(152.51138305664062 * e, 63.267059326171875 * e, 152.51138305664062 * e, 63.267059326171875 * e, 141.01138305664062 * e, 41.767059326171875 * e),
       n.bezierCurveTo(138.01138305664062 * e, 35.767059326171875 * e, 138.01138305664062 * e, 29.767059326171875 * e, 141.01138305664062 * e, 27.767059326171875 * e),
       n.closePath(),
       se(n, t[4], t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(70.01138305664062 * e, 76.76705932617188 * e),
       n.bezierCurveTo(83.01138305664062 * e, 64.26705932617188 * e, 83.01138305664062 * e, 64.26705932617188 * e, 96.01138305664062 * e, 51.767059326171875 * e),
       n.bezierCurveTo(104.01138305664062 * e, 44.767059326171875 * e, 110.01138305664062 * e, 51.767059326171875 * e, 119.01138305664062 * e, 66.76705932617188 * e),
       n.bezierCurveTo(135.01138305664062 * e, 88.26705932617188 * e, 135.01138305664062 * e, 88.26705932617188 * e, 151.01138305664062 * e, 109.76705932617188 * e),
       n.bezierCurveTo(157.01138305664062 * e, 119.76705932617188 * e, 153.01138305664062 * e, 122.76705932617188 * e, 147.01138305664062 * e, 129.76705932617188 * e),
       n.bezierCurveTo(138.01138305664062 * e, 140.76705932617188 * e, 136.01138305664062 * e, 140.76705932617188 * e, 122.01138305664062 * e, 127.76705932617188 * e),
       n.bezierCurveTo(99.51138305664062 * e, 110.26705932617188 * e, 99.51138305664062 * e, 110.26705932617188 * e, 77.01138305664062 * e, 92.76705932617188 * e),
       n.bezierCurveTo(66.01138305664062 * e, 83.76705932617188 * e, 66.01138305664062 * e, 82.76705932617188 * e, 69.01138305664062 * e, 78.76705932617188 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(70.01138305664062 * e, 76.76705932617188 * e),
       n.bezierCurveTo(83.01138305664062 * e, 64.26705932617188 * e, 83.01138305664062 * e, 64.26705932617188 * e, 96.01138305664062 * e, 51.767059326171875 * e),
       n.bezierCurveTo(104.01138305664062 * e, 44.767059326171875 * e, 110.01138305664062 * e, 51.767059326171875 * e, 119.01138305664062 * e, 66.76705932617188 * e),
       n.bezierCurveTo(135.01138305664062 * e, 88.26705932617188 * e, 135.01138305664062 * e, 88.26705932617188 * e, 151.01138305664062 * e, 109.76705932617188 * e),
       n.bezierCurveTo(157.01138305664062 * e, 119.76705932617188 * e, 153.01138305664062 * e, 122.76705932617188 * e, 147.01138305664062 * e, 129.76705932617188 * e),
       n.bezierCurveTo(138.01138305664062 * e, 140.76705932617188 * e, 136.01138305664062 * e, 140.76705932617188 * e, 122.01138305664062 * e, 127.76705932617188 * e),
       n.bezierCurveTo(99.51138305664062 * e, 110.26705932617188 * e, 99.51138305664062 * e, 110.26705932617188 * e, 77.01138305664062 * e, 92.76705932617188 * e),
       n.bezierCurveTo(66.01138305664062 * e, 83.76705932617188 * e, 66.01138305664062 * e, 82.76705932617188 * e, 69.01138305664062 * e, 78.76705932617188 * e),
       n.closePath(),
       se(n, t[4], t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(33.011383056640625 * e, 126.76705932617188 * e),
       n.bezierCurveTo(22.011383056640625 * e, 149.76705932617188 * e, 22.011383056640625 * e, 149.76705932617188 * e, 11.011383056640625 * e, 172.76705932617188 * e),
       n.bezierCurveTo(7.011383056640625 * e, 184.76705932617188 * e, 11.011383056640625 * e, 189.76705932617188 * e, 36.011383056640625 * e, 195.76705932617188 * e),
       n.bezierCurveTo(61.011383056640625 * e, 202.26705932617188 * e, 61.011383056640625 * e, 202.26705932617188 * e, 86.01138305664062 * e, 208.76705932617188 * e),
       n.bezierCurveTo(100.01138305664062 * e, 214.76705932617188 * e, 102.01138305664062 * e, 203.76705932617188 * e, 109.01138305664062 * e, 189.76705932617188 * e),
       n.bezierCurveTo(117.01138305664062 * e, 171.76705932617188 * e, 116.01138305664062 * e, 166.76705932617188 * e, 97.01138305664062 * e, 156.76705932617188 * e),
       n.bezierCurveTo(74.01138305664062 * e, 140.76705932617188 * e, 74.01138305664062 * e, 140.76705932617188 * e, 51.011383056640625 * e, 124.76705932617188 * e),
       n.bezierCurveTo(42.011383056640625 * e, 118.76705932617188 * e, 37.011383056640625 * e, 119.76705932617188 * e, 33.011383056640625 * e, 126.76705932617188 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(33.011383056640625 * e, 126.76705932617188 * e),
       n.bezierCurveTo(22.011383056640625 * e, 149.76705932617188 * e, 22.011383056640625 * e, 149.76705932617188 * e, 11.011383056640625 * e, 172.76705932617188 * e),
       n.bezierCurveTo(7.011383056640625 * e, 184.76705932617188 * e, 11.011383056640625 * e, 189.76705932617188 * e, 36.011383056640625 * e, 195.76705932617188 * e),
       n.bezierCurveTo(61.011383056640625 * e, 202.26705932617188 * e, 61.011383056640625 * e, 202.26705932617188 * e, 86.01138305664062 * e, 208.76705932617188 * e),
       n.bezierCurveTo(100.01138305664062 * e, 214.76705932617188 * e, 102.01138305664062 * e, 203.76705932617188 * e, 109.01138305664062 * e, 189.76705932617188 * e),
       n.bezierCurveTo(117.01138305664062 * e, 171.76705932617188 * e, 116.01138305664062 * e, 166.76705932617188 * e, 97.01138305664062 * e, 156.76705932617188 * e),
       n.bezierCurveTo(74.01138305664062 * e, 140.76705932617188 * e, 74.01138305664062 * e, 140.76705932617188 * e, 51.011383056640625 * e, 124.76705932617188 * e),
       n.bezierCurveTo(42.011383056640625 * e, 118.76705932617188 * e, 37.011383056640625 * e, 119.76705932617188 * e, 33.011383056640625 * e, 126.76705932617188 * e),
       n.closePath(),
       se(n, t[3], t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(13.011383056640625 * e, 229.76705932617188 * e),
       n.bezierCurveTo(45.511383056640625 * e, 233.76705932617188 * e, 45.511383056640625 * e, 233.76705932617188 * e, 78.01138305664062 * e, 237.76705932617188 * e),
       n.bezierCurveTo(92.01138305664062 * e, 239.76705932617188 * e, 92.01138305664062 * e, 246.76705932617188 * e, 91.01138305664062 * e, 257.7670593261719 * e),
       n.bezierCurveTo(92.01138305664062 * e, 275.7670593261719 * e, 91.01138305664062 * e, 274.7670593261719 * e, 68.01138305664062 * e, 276.7670593261719 * e),
       n.bezierCurveTo(42.511383056640625 * e, 279.7670593261719 * e, 42.511383056640625 * e, 279.7670593261719 * e, 17.011383056640625 * e, 282.7670593261719 * e),
       n.bezierCurveTo(2.011383056640625 * e, 282.7670593261719 * e, 3.011383056640625 * e, 276.7670593261719 * e, 2.011383056640625 * e, 260.7670593261719 * e),
       n.bezierCurveTo(2.011383056640625 * e, 231.76705932617188 * e, 4.011383056640625 * e, 232.76705932617188 * e, 11.011383056640625 * e, 230.76705932617188 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(13.011383056640625 * e, 229.76705932617188 * e),
       n.bezierCurveTo(45.511383056640625 * e, 233.76705932617188 * e, 45.511383056640625 * e, 233.76705932617188 * e, 78.01138305664062 * e, 237.76705932617188 * e),
       n.bezierCurveTo(92.01138305664062 * e, 239.76705932617188 * e, 92.01138305664062 * e, 246.76705932617188 * e, 91.01138305664062 * e, 257.7670593261719 * e),
       n.bezierCurveTo(92.01138305664062 * e, 275.7670593261719 * e, 91.01138305664062 * e, 274.7670593261719 * e, 68.01138305664062 * e, 276.7670593261719 * e),
       n.bezierCurveTo(42.511383056640625 * e, 279.7670593261719 * e, 42.511383056640625 * e, 279.7670593261719 * e, 17.011383056640625 * e, 282.7670593261719 * e),
       n.bezierCurveTo(2.011383056640625 * e, 282.7670593261719 * e, 3.011383056640625 * e, 276.7670593261719 * e, 2.011383056640625 * e, 260.7670593261719 * e),
       n.bezierCurveTo(2.011383056640625 * e, 231.76705932617188 * e, 4.011383056640625 * e, 232.76705932617188 * e, 11.011383056640625 * e, 230.76705932617188 * e),
       n.closePath(),
       se(n, t[4], t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(97.01138305664062 * e, 329.7670593261719 * e),
       n.bezierCurveTo(68.51138305664062 * e, 343.7670593261719 * e, 68.51138305664062 * e, 343.7670593261719 * e, 40.011383056640625 * e, 357.7670593261719 * e),
       n.bezierCurveTo(29.011383056640625 * e, 360.7670593261719 * e, 27.011383056640625 * e, 361.7670593261719 * e, 20.011383056640625 * e, 346.7670593261719 * e),
       n.bezierCurveTo(16.511383056640625 * e, 336.2670593261719 * e, 16.511383056640625 * e, 336.2670593261719 * e, 13.011383056640625 * e, 325.7670593261719 * e),
       n.bezierCurveTo(10.011383056640625 * e, 307.7670593261719 * e, 18.011383056640625 * e, 312.7670593261719 * e, 34.011383056640625 * e, 306.7670593261719 * e),
       n.bezierCurveTo(59.511383056640625 * e, 302.2670593261719 * e, 59.511383056640625 * e, 302.2670593261719 * e, 85.01138305664062 * e, 297.7670593261719 * e),
       n.bezierCurveTo(97.01138305664062 * e, 294.7670593261719 * e, 100.01138305664062 * e, 297.7670593261719 * e, 100.01138305664062 * e, 307.7670593261719 * e),
       n.bezierCurveTo(105.01138305664062 * e, 326.7670593261719 * e, 103.01138305664062 * e, 325.7670593261719 * e, 97.01138305664062 * e, 329.7670593261719 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(97.01138305664062 * e, 329.7670593261719 * e),
       n.bezierCurveTo(68.51138305664062 * e, 343.7670593261719 * e, 68.51138305664062 * e, 343.7670593261719 * e, 40.011383056640625 * e, 357.7670593261719 * e),
       n.bezierCurveTo(29.011383056640625 * e, 360.7670593261719 * e, 27.011383056640625 * e, 361.7670593261719 * e, 20.011383056640625 * e, 346.7670593261719 * e),
       n.bezierCurveTo(16.511383056640625 * e, 336.2670593261719 * e, 16.511383056640625 * e, 336.2670593261719 * e, 13.011383056640625 * e, 325.7670593261719 * e),
       n.bezierCurveTo(10.011383056640625 * e, 307.7670593261719 * e, 18.011383056640625 * e, 312.7670593261719 * e, 34.011383056640625 * e, 306.7670593261719 * e),
       n.bezierCurveTo(59.511383056640625 * e, 302.2670593261719 * e, 59.511383056640625 * e, 302.2670593261719 * e, 85.01138305664062 * e, 297.7670593261719 * e),
       n.bezierCurveTo(97.01138305664062 * e, 294.7670593261719 * e, 100.01138305664062 * e, 297.7670593261719 * e, 100.01138305664062 * e, 307.7670593261719 * e),
       n.bezierCurveTo(105.01138305664062 * e, 326.7670593261719 * e, 103.01138305664062 * e, 325.7670593261719 * e, 97.01138305664062 * e, 329.7670593261719 * e),
       n.closePath(),
       se(n, t[4], t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(394.0113830566406 * e, 181.76705932617188 * e),
       n.bezierCurveTo(426.5113830566406 * e, 166.76705932617188 * e, 426.5113830566406 * e, 166.76705932617188 * e, 459.0113830566406 * e, 151.76705932617188 * e),
       n.bezierCurveTo(469.0113830566406 * e, 152.76705932617188 * e, 469.0113830566406 * e, 155.76705932617188 * e, 472.0113830566406 * e, 165.76705932617188 * e),
       n.bezierCurveTo(476.0113830566406 * e, 177.26705932617188 * e, 476.0113830566406 * e, 177.26705932617188 * e, 480.0113830566406 * e, 188.76705932617188 * e),
       n.bezierCurveTo(483.0113830566406 * e, 199.76705932617188 * e, 480.0113830566406 * e, 200.76705932617188 * e, 460.0113830566406 * e, 205.76705932617188 * e),
       n.bezierCurveTo(433.5113830566406 * e, 210.26705932617188 * e, 433.5113830566406 * e, 210.26705932617188 * e, 407.0113830566406 * e, 214.76705932617188 * e),
       n.bezierCurveTo(395.0113830566406 * e, 218.76705932617188 * e, 397.0113830566406 * e, 211.76705932617188 * e, 393.0113830566406 * e, 202.76705932617188 * e),
       n.bezierCurveTo(387.0113830566406 * e, 188.76705932617188 * e, 387.0113830566406 * e, 187.76705932617188 * e, 394.0113830566406 * e, 181.76705932617188 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(394.0113830566406 * e, 181.76705932617188 * e),
       n.bezierCurveTo(426.5113830566406 * e, 166.76705932617188 * e, 426.5113830566406 * e, 166.76705932617188 * e, 459.0113830566406 * e, 151.76705932617188 * e),
       n.bezierCurveTo(469.0113830566406 * e, 152.76705932617188 * e, 469.0113830566406 * e, 155.76705932617188 * e, 472.0113830566406 * e, 165.76705932617188 * e),
       n.bezierCurveTo(476.0113830566406 * e, 177.26705932617188 * e, 476.0113830566406 * e, 177.26705932617188 * e, 480.0113830566406 * e, 188.76705932617188 * e),
       n.bezierCurveTo(483.0113830566406 * e, 199.76705932617188 * e, 480.0113830566406 * e, 200.76705932617188 * e, 460.0113830566406 * e, 205.76705932617188 * e),
       n.bezierCurveTo(433.5113830566406 * e, 210.26705932617188 * e, 433.5113830566406 * e, 210.26705932617188 * e, 407.0113830566406 * e, 214.76705932617188 * e),
       n.bezierCurveTo(395.0113830566406 * e, 218.76705932617188 * e, 397.0113830566406 * e, 211.76705932617188 * e, 393.0113830566406 * e, 202.76705932617188 * e),
       n.bezierCurveTo(387.0113830566406 * e, 188.76705932617188 * e, 387.0113830566406 * e, 187.76705932617188 * e, 394.0113830566406 * e, 181.76705932617188 * e),
       n.closePath(),
       se(n, t[4], t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(411.0113830566406 * e, 234.76705932617188 * e),
       n.bezierCurveTo(446.0113830566406 * e, 233.26705932617188 * e, 446.0113830566406 * e, 233.26705932617188 * e, 481.0113830566406 * e, 231.76705932617188 * e),
       n.bezierCurveTo(491.0113830566406 * e, 232.76705932617188 * e, 493.0113830566406 * e, 239.76705932617188 * e, 491.0113830566406 * e, 251.76705932617188 * e),
       n.bezierCurveTo(490.0113830566406 * e, 263.7670593261719 * e, 490.0113830566406 * e, 263.7670593261719 * e, 489.0113830566406 * e, 275.7670593261719 * e),
       n.bezierCurveTo(487.0113830566406 * e, 283.7670593261719 * e, 483.0113830566406 * e, 284.7670593261719 * e, 464.0113830566406 * e, 280.7670593261719 * e),
       n.bezierCurveTo(437.0113830566406 * e, 273.7670593261719 * e, 437.0113830566406 * e, 273.7670593261719 * e, 410.0113830566406 * e, 266.7670593261719 * e),
       n.bezierCurveTo(400.0113830566406 * e, 261.7670593261719 * e, 401.0113830566406 * e, 259.7670593261719 * e, 402.0113830566406 * e, 249.76705932617188 * e),
       n.bezierCurveTo(401.0113830566406 * e, 237.76705932617188 * e, 403.0113830566406 * e, 235.76705932617188 * e, 408.0113830566406 * e, 234.76705932617188 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(411.0113830566406 * e, 234.76705932617188 * e),
       n.bezierCurveTo(446.0113830566406 * e, 233.26705932617188 * e, 446.0113830566406 * e, 233.26705932617188 * e, 481.0113830566406 * e, 231.76705932617188 * e),
       n.bezierCurveTo(491.0113830566406 * e, 232.76705932617188 * e, 493.0113830566406 * e, 239.76705932617188 * e, 491.0113830566406 * e, 251.76705932617188 * e),
       n.bezierCurveTo(490.0113830566406 * e, 263.7670593261719 * e, 490.0113830566406 * e, 263.7670593261719 * e, 489.0113830566406 * e, 275.7670593261719 * e),
       n.bezierCurveTo(487.0113830566406 * e, 283.7670593261719 * e, 483.0113830566406 * e, 284.7670593261719 * e, 464.0113830566406 * e, 280.7670593261719 * e),
       n.bezierCurveTo(437.0113830566406 * e, 273.7670593261719 * e, 437.0113830566406 * e, 273.7670593261719 * e, 410.0113830566406 * e, 266.7670593261719 * e),
       n.bezierCurveTo(400.0113830566406 * e, 261.7670593261719 * e, 401.0113830566406 * e, 259.7670593261719 * e, 402.0113830566406 * e, 249.76705932617188 * e),
       n.bezierCurveTo(401.0113830566406 * e, 237.76705932617188 * e, 403.0113830566406 * e, 235.76705932617188 * e, 408.0113830566406 * e, 234.76705932617188 * e),
       n.closePath(),
       se(n, t[4], t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(400.0113830566406 * e, 290.7670593261719 * e),
       n.bezierCurveTo(437.0113830566406 * e, 301.2670593261719 * e, 437.0113830566406 * e, 301.2670593261719 * e, 474.0113830566406 * e, 311.7670593261719 * e),
       n.bezierCurveTo(484.0113830566406 * e, 319.7670593261719 * e, 481.0113830566406 * e, 322.7670593261719 * e, 474.0113830566406 * e, 335.7670593261719 * e),
       n.bezierCurveTo(465.5113830566406 * e, 354.7670593261719 * e, 465.5113830566406 * e, 354.7670593261719 * e, 457.0113830566406 * e, 373.7670593261719 * e),
       n.bezierCurveTo(449.0113830566406 * e, 386.7670593261719 * e, 444.0113830566406 * e, 384.7670593261719 * e, 427.0113830566406 * e, 370.7670593261719 * e),
       n.bezierCurveTo(403.0113830566406 * e, 354.7670593261719 * e, 403.0113830566406 * e, 354.7670593261719 * e, 379.0113830566406 * e, 338.7670593261719 * e),
       n.bezierCurveTo(371.0113830566406 * e, 327.7670593261719 * e, 373.0113830566406 * e, 323.7670593261719 * e, 377.0113830566406 * e, 313.7670593261719 * e),
       n.bezierCurveTo(386.0113830566406 * e, 292.7670593261719 * e, 393.0113830566406 * e, 288.7670593261719 * e, 398.0113830566406 * e, 291.7670593261719 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(400.0113830566406 * e, 290.7670593261719 * e),
       n.bezierCurveTo(437.0113830566406 * e, 301.2670593261719 * e, 437.0113830566406 * e, 301.2670593261719 * e, 474.0113830566406 * e, 311.7670593261719 * e),
       n.bezierCurveTo(484.0113830566406 * e, 319.7670593261719 * e, 481.0113830566406 * e, 322.7670593261719 * e, 474.0113830566406 * e, 335.7670593261719 * e),
       n.bezierCurveTo(465.5113830566406 * e, 354.7670593261719 * e, 465.5113830566406 * e, 354.7670593261719 * e, 457.0113830566406 * e, 373.7670593261719 * e),
       n.bezierCurveTo(449.0113830566406 * e, 386.7670593261719 * e, 444.0113830566406 * e, 384.7670593261719 * e, 427.0113830566406 * e, 370.7670593261719 * e),
       n.bezierCurveTo(403.0113830566406 * e, 354.7670593261719 * e, 403.0113830566406 * e, 354.7670593261719 * e, 379.0113830566406 * e, 338.7670593261719 * e),
       n.bezierCurveTo(371.0113830566406 * e, 327.7670593261719 * e, 373.0113830566406 * e, 323.7670593261719 * e, 377.0113830566406 * e, 313.7670593261719 * e),
       n.bezierCurveTo(386.0113830566406 * e, 292.7670593261719 * e, 393.0113830566406 * e, 288.7670593261719 * e, 398.0113830566406 * e, 291.7670593261719 * e),
       n.closePath(),
       se(n, t[3], t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(366.0113830566406 * e, 361.2216033935547 * e),
       n.bezierCurveTo(393.0113830566406 * e, 383.2216033935547 * e, 393.0113830566406 * e, 383.2216033935547 * e, 420.0113830566406 * e, 405.2216033935547 * e),
       n.bezierCurveTo(427.0113830566406 * e, 414.2216033935547 * e, 425.0113830566406 * e, 417.2216033935547 * e, 413.0113830566406 * e, 428.2216033935547 * e),
       n.bezierCurveTo(405.5113830566406 * e, 435.2216033935547 * e, 405.5113830566406 * e, 435.2216033935547 * e, 398.0113830566406 * e, 442.2216033935547 * e),
       n.bezierCurveTo(388.0113830566406 * e, 451.2216033935547 * e, 385.0113830566406 * e, 445.2216033935547 * e, 373.0113830566406 * e, 428.2216033935547 * e),
       n.bezierCurveTo(358.5113830566406 * e, 408.2216033935547 * e, 358.5113830566406 * e, 408.2216033935547 * e, 344.0113830566406 * e, 388.2216033935547 * e),
       n.bezierCurveTo(337.0113830566406 * e, 378.2216033935547 * e, 342.0113830566406 * e, 377.2216033935547 * e, 347.0113830566406 * e, 371.2216033935547 * e),
       n.bezierCurveTo(359.0113830566406 * e, 359.2216033935547 * e, 361.0113830566406 * e, 358.2216033935547 * e, 364.0113830566406 * e, 361.2216033935547 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(366.0113830566406 * e, 361.2216033935547 * e),
       n.bezierCurveTo(393.0113830566406 * e, 383.2216033935547 * e, 393.0113830566406 * e, 383.2216033935547 * e, 420.0113830566406 * e, 405.2216033935547 * e),
       n.bezierCurveTo(427.0113830566406 * e, 414.2216033935547 * e, 425.0113830566406 * e, 417.2216033935547 * e, 413.0113830566406 * e, 428.2216033935547 * e),
       n.bezierCurveTo(405.5113830566406 * e, 435.2216033935547 * e, 405.5113830566406 * e, 435.2216033935547 * e, 398.0113830566406 * e, 442.2216033935547 * e),
       n.bezierCurveTo(388.0113830566406 * e, 451.2216033935547 * e, 385.0113830566406 * e, 445.2216033935547 * e, 373.0113830566406 * e, 428.2216033935547 * e),
       n.bezierCurveTo(358.5113830566406 * e, 408.2216033935547 * e, 358.5113830566406 * e, 408.2216033935547 * e, 344.0113830566406 * e, 388.2216033935547 * e),
       n.bezierCurveTo(337.0113830566406 * e, 378.2216033935547 * e, 342.0113830566406 * e, 377.2216033935547 * e, 347.0113830566406 * e, 371.2216033935547 * e),
       n.bezierCurveTo(359.0113830566406 * e, 359.2216033935547 * e, 361.0113830566406 * e, 358.2216033935547 * e, 364.0113830566406 * e, 361.2216033935547 * e),
       n.closePath(),
       se(n, t[4], t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(323.0113830566406 * e, 393.2216033935547 * e),
       n.bezierCurveTo(338.0113830566406 * e, 424.7216033935547 * e, 338.0113830566406 * e, 424.7216033935547 * e, 353.0113830566406 * e, 456.2216033935547 * e),
       n.bezierCurveTo(355.0113830566406 * e, 467.2216033935547 * e, 354.0113830566406 * e, 469.2216033935547 * e, 336.0113830566406 * e, 475.2216033935547 * e),
       n.bezierCurveTo(326.0113830566406 * e, 478.2216033935547 * e, 326.0113830566406 * e, 478.2216033935547 * e, 316.0113830566406 * e, 481.2216033935547 * e),
       n.bezierCurveTo(304.0113830566406 * e, 484.2216033935547 * e, 304.0113830566406 * e, 477.2216033935547 * e, 301.0113830566406 * e, 454.2216033935547 * e),
       n.bezierCurveTo(295.5113830566406 * e, 429.2216033935547 * e, 295.5113830566406 * e, 429.2216033935547 * e, 290.0113830566406 * e, 404.2216033935547 * e),
       n.bezierCurveTo(287.0113830566406 * e, 396.2216033935547 * e, 297.0113830566406 * e, 394.2216033935547 * e, 303.0113830566406 * e, 392.2216033935547 * e),
       n.bezierCurveTo(316.0113830566406 * e, 387.2216033935547 * e, 318.0113830566406 * e, 387.2216033935547 * e, 323.0113830566406 * e, 394.2216033935547 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(323.0113830566406 * e, 393.2216033935547 * e),
       n.bezierCurveTo(338.0113830566406 * e, 424.7216033935547 * e, 338.0113830566406 * e, 424.7216033935547 * e, 353.0113830566406 * e, 456.2216033935547 * e),
       n.bezierCurveTo(355.0113830566406 * e, 467.2216033935547 * e, 354.0113830566406 * e, 469.2216033935547 * e, 336.0113830566406 * e, 475.2216033935547 * e),
       n.bezierCurveTo(326.0113830566406 * e, 478.2216033935547 * e, 326.0113830566406 * e, 478.2216033935547 * e, 316.0113830566406 * e, 481.2216033935547 * e),
       n.bezierCurveTo(304.0113830566406 * e, 484.2216033935547 * e, 304.0113830566406 * e, 477.2216033935547 * e, 301.0113830566406 * e, 454.2216033935547 * e),
       n.bezierCurveTo(295.5113830566406 * e, 429.2216033935547 * e, 295.5113830566406 * e, 429.2216033935547 * e, 290.0113830566406 * e, 404.2216033935547 * e),
       n.bezierCurveTo(287.0113830566406 * e, 396.2216033935547 * e, 297.0113830566406 * e, 394.2216033935547 * e, 303.0113830566406 * e, 392.2216033935547 * e),
       n.bezierCurveTo(316.0113830566406 * e, 387.2216033935547 * e, 318.0113830566406 * e, 387.2216033935547 * e, 323.0113830566406 * e, 394.2216033935547 * e),
       n.closePath(),
       se(n, t[4], t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(270.0113830566406 * e, 413.2216033935547 * e),
       n.bezierCurveTo(271.0113830566406 * e, 445.7216033935547 * e, 271.0113830566406 * e, 445.7216033935547 * e, 272.0113830566406 * e, 478.2216033935547 * e),
       n.bezierCurveTo(273.0113830566406 * e, 490.2216033935547 * e, 267.0113830566406 * e, 493.2216033935547 * e, 249.01138305664062 * e, 490.2216033935547 * e),
       n.bezierCurveTo(222.01138305664062 * e, 492.2216033935547 * e, 220.01138305664062 * e, 485.2216033935547 * e, 225.01138305664062 * e, 467.2216033935547 * e),
       n.bezierCurveTo(230.51138305664062 * e, 440.2216033935547 * e, 230.51138305664062 * e, 440.2216033935547 * e, 236.01138305664062 * e, 413.2216033935547 * e),
       n.bezierCurveTo(237.01138305664062 * e, 405.2216033935547 * e, 238.01138305664062 * e, 404.2216033935547 * e, 253.01138305664062 * e, 403.2216033935547 * e),
       n.bezierCurveTo(269.0113830566406 * e, 405.2216033935547 * e, 270.0113830566406 * e, 407.2216033935547 * e, 269.0113830566406 * e, 412.2216033935547 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(270.0113830566406 * e, 413.2216033935547 * e),
       n.bezierCurveTo(271.0113830566406 * e, 445.7216033935547 * e, 271.0113830566406 * e, 445.7216033935547 * e, 272.0113830566406 * e, 478.2216033935547 * e),
       n.bezierCurveTo(273.0113830566406 * e, 490.2216033935547 * e, 267.0113830566406 * e, 493.2216033935547 * e, 249.01138305664062 * e, 490.2216033935547 * e),
       n.bezierCurveTo(222.01138305664062 * e, 492.2216033935547 * e, 220.01138305664062 * e, 485.2216033935547 * e, 225.01138305664062 * e, 467.2216033935547 * e),
       n.bezierCurveTo(230.51138305664062 * e, 440.2216033935547 * e, 230.51138305664062 * e, 440.2216033935547 * e, 236.01138305664062 * e, 413.2216033935547 * e),
       n.bezierCurveTo(237.01138305664062 * e, 405.2216033935547 * e, 238.01138305664062 * e, 404.2216033935547 * e, 253.01138305664062 * e, 403.2216033935547 * e),
       n.bezierCurveTo(269.0113830566406 * e, 405.2216033935547 * e, 270.0113830566406 * e, 407.2216033935547 * e, 269.0113830566406 * e, 412.2216033935547 * e),
       n.closePath(),
       se(n, t[4], t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(207.01138305664062 * e, 406.2216033935547 * e),
       n.bezierCurveTo(197.51138305664062 * e, 440.7216033935547 * e, 197.51138305664062 * e, 440.7216033935547 * e, 188.01138305664062 * e, 475.2216033935547 * e),
       n.bezierCurveTo(184.01138305664062 * e, 485.2216033935547 * e, 179.01138305664062 * e, 491.2216033935547 * e, 152.01138305664062 * e, 477.2216033935547 * e),
       n.bezierCurveTo(136.51138305664062 * e, 469.7216033935547 * e, 136.51138305664062 * e, 469.7216033935547 * e, 121.01138305664062 * e, 462.2216033935547 * e),
       n.bezierCurveTo(109.01138305664062 * e, 453.2216033935547 * e, 117.01138305664062 * e, 447.2216033935547 * e, 133.01138305664062 * e, 427.2216033935547 * e),
       n.bezierCurveTo(146.51138305664062 * e, 406.7216033935547 * e, 146.51138305664062 * e, 406.7216033935547 * e, 160.01138305664062 * e, 386.2216033935547 * e),
       n.bezierCurveTo(163.01138305664062 * e, 377.2216033935547 * e, 168.01138305664062 * e, 378.2216033935547 * e, 187.01138305664062 * e, 387.2216033935547 * e),
       n.bezierCurveTo(206.01138305664062 * e, 395.2216033935547 * e, 208.01138305664062 * e, 398.2216033935547 * e, 207.01138305664062 * e, 405.2216033935547 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(207.01138305664062 * e, 406.2216033935547 * e),
       n.bezierCurveTo(197.51138305664062 * e, 440.7216033935547 * e, 197.51138305664062 * e, 440.7216033935547 * e, 188.01138305664062 * e, 475.2216033935547 * e),
       n.bezierCurveTo(184.01138305664062 * e, 485.2216033935547 * e, 179.01138305664062 * e, 491.2216033935547 * e, 152.01138305664062 * e, 477.2216033935547 * e),
       n.bezierCurveTo(136.51138305664062 * e, 469.7216033935547 * e, 136.51138305664062 * e, 469.7216033935547 * e, 121.01138305664062 * e, 462.2216033935547 * e),
       n.bezierCurveTo(109.01138305664062 * e, 453.2216033935547 * e, 117.01138305664062 * e, 447.2216033935547 * e, 133.01138305664062 * e, 427.2216033935547 * e),
       n.bezierCurveTo(146.51138305664062 * e, 406.7216033935547 * e, 146.51138305664062 * e, 406.7216033935547 * e, 160.01138305664062 * e, 386.2216033935547 * e),
       n.bezierCurveTo(163.01138305664062 * e, 377.2216033935547 * e, 168.01138305664062 * e, 378.2216033935547 * e, 187.01138305664062 * e, 387.2216033935547 * e),
       n.bezierCurveTo(206.01138305664062 * e, 395.2216033935547 * e, 208.01138305664062 * e, 398.2216033935547 * e, 207.01138305664062 * e, 405.2216033935547 * e),
       n.closePath(),
       se(n, t[3], t[2], 12 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(130.01138305664062 * e, 375.2216033935547 * e),
       n.bezierCurveTo(109.51138305664062 * e, 400.7216033935547 * e, 109.51138305664062 * e, 400.7216033935547 * e, 89.01138305664062 * e, 426.2216033935547 * e),
       n.bezierCurveTo(82.01138305664062 * e, 435.2216033935547 * e, 77.01138305664062 * e, 435.2216033935547 * e, 62.011383056640625 * e, 417.2216033935547 * e),
       n.bezierCurveTo(43.011383056640625 * e, 397.2216033935547 * e, 47.011383056640625 * e, 395.2216033935547 * e, 62.011383056640625 * e, 382.2216033935547 * e),
       n.bezierCurveTo(84.01138305664062 * e, 366.7216033935547 * e, 84.01138305664062 * e, 366.7216033935547 * e, 106.01138305664062 * e, 351.2216033935547 * e),
       n.bezierCurveTo(116.01138305664062 * e, 344.2216033935547 * e, 120.01138305664062 * e, 347.2216033935547 * e, 127.01138305664062 * e, 356.2216033935547 * e),
       n.bezierCurveTo(137.01138305664062 * e, 366.2216033935547 * e, 137.01138305664062 * e, 366.2216033935547 * e, 131.01138305664062 * e, 376.2216033935547 * e),
       n.closePath(),
       se(n, t[0], t[0], 12 * e),
       n.globalAlpha = 1,
       n.translate(0, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(130.01138305664062 * e, 375.2216033935547 * e),
       n.bezierCurveTo(109.51138305664062 * e, 400.7216033935547 * e, 109.51138305664062 * e, 400.7216033935547 * e, 89.01138305664062 * e, 426.2216033935547 * e),
       n.bezierCurveTo(82.01138305664062 * e, 435.2216033935547 * e, 77.01138305664062 * e, 435.2216033935547 * e, 62.011383056640625 * e, 417.2216033935547 * e),
       n.bezierCurveTo(43.011383056640625 * e, 397.2216033935547 * e, 47.011383056640625 * e, 395.2216033935547 * e, 62.011383056640625 * e, 382.2216033935547 * e),
       n.bezierCurveTo(84.01138305664062 * e, 366.7216033935547 * e, 84.01138305664062 * e, 366.7216033935547 * e, 106.01138305664062 * e, 351.2216033935547 * e),
       n.bezierCurveTo(116.01138305664062 * e, 344.2216033935547 * e, 120.01138305664062 * e, 347.2216033935547 * e, 127.01138305664062 * e, 356.2216033935547 * e),
       n.bezierCurveTo(137.01138305664062 * e, 366.2216033935547 * e, 137.01138305664062 * e, 366.2216033935547 * e, 131.01138305664062 * e, 376.2216033935547 * e),
       n.closePath(),
       se(n, t[4], t[2], 12 * e),
       r
   }
   function _n(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 218 * e,
       r.height = 185 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(64 * e, 53.135406494140625 * e),
       n.bezierCurveTo(92 * e, 17.135406494140625 * e, 116 * e, 11.135406494140625 * e, 158 * e, 53.135406494140625 * e),
       n.bezierCurveTo(178 * e, 74.13540649414062 * e, 181 * e, 81.13540649414062 * e, 196 * e, 101.13540649414062 * e),
       n.bezierCurveTo(214 * e, 127.13540649414062 * e, 192 * e, 138.13540649414062 * e, 173 * e, 149.13540649414062 * e),
       n.bezierCurveTo(137 * e, 166.13540649414062 * e, 74 * e, 170.13540649414062 * e, 36 * e, 141.13540649414062 * e),
       n.bezierCurveTo(13 * e, 127.13540649414062 * e, 20 * e, 119.13540649414062 * e, 30 * e, 103.13540649414062 * e),
       n.bezierCurveTo(48 * e, 71.13540649414062 * e, 54 * e, 67.13540649414062 * e, 63 * e, 54.135406494140625 * e),
       n.closePath(),
       se(n, t[0], t[1], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(107 * e, 25.135406494140625 * e),
       n.bezierCurveTo(62 * e, 90.13540649414062 * e, 54 * e, 129.13540649414062 * e, 53 * e, 151.13540649414062 * e),
       n.bezierCurveTo(39.5 * e, 142.13540649414062 * e, 39.5 * e, 142.13540649414062 * e, 26 * e, 133.13540649414062 * e),
       n.bezierCurveTo(23.5 * e, 128.63540649414062 * e, 23.5 * e, 128.63540649414062 * e, 21 * e, 124.13540649414062 * e),
       n.bezierCurveTo(22 * e, 113.13540649414062 * e, 31 * e, 99.13540649414062 * e, 40 * e, 88.13540649414062 * e),
       n.bezierCurveTo(54.5 * e, 67.13540649414062 * e, 54.5 * e, 67.13540649414062 * e, 69 * e, 46.135406494140625 * e),
       n.bezierCurveTo(80.5 * e, 36.635406494140625 * e, 80.5 * e, 36.635406494140625 * e, 92 * e, 27.135406494140625 * e),
       n.closePath(),
       se(n, t[1]),
       r
   }
   function un(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 167 * e,
       r.height = 136 * e,
       n.globalAlpha = .5,
       n.save(),
       n.translate(76.71426391601562 * e, 67.85713195800781 * e),
       Te(n, -57.5 * e, -54.5 * e, 115 * e, 109 * e, 15 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = .8,
       n.save(),
       n.translate(76.71426391601562 * e, 67.85713195800781 * e),
       Te(n, -57.5 * e, -54.5 * e, 115 * e, 109 * e, 15 * e),
       n.restore(),
       se(n, void 0, t[1], 7 * e),
       n.globalAlpha = .5,
       n.save(),
       n.translate(91.21426391601562 * e, 67.35713195800781 * e),
       Te(n, -56 * e, -55 * e, 115 * e, 109 * e, 15 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.save(),
       n.translate(91.21426391601562 * e, 67.35713195800781 * e),
       Te(n, -56 * e, -55 * e, 115 * e, 109 * e, 15 * e),
       n.restore(),
       se(n, void 0, t[1], 7 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(131.21426391601562 * e, 70.35713195800781 * e),
       n.bezierCurveTo(133.21426391601562 * e, 95.35713195800781 * e, 128.21426391601562 * e, 109.35713195800781 * e, 108.21426391601562 * e, 108.35713195800781 * e),
       se(n, void 0, t[1], 10 * e),
       r
   }
   function hn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 163 * e,
       r.height = 163 * e,
       n.save(),
       n.translate(82.5 * e, 81.1015625 * e),
       n.rotate(0),
       Te(n, -65.5 * e, -66 * e, 131 * e, 131 * e, 5 * e),
       n.restore(),
       se(n, t[1]),
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.save(),
       n.translate(80 * e, 17.1015625 * e),
       Te(n, -64 * e, -4.5 * e, 129 * e, 9 * e, 5 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.save(),
       n.translate(80 * e, 17.1015625 * e),
       Te(n, -64 * e, -4.5 * e, 129 * e, 9 * e, 5 * e),
       n.restore(),
       se(n, t[2], t[3], 3 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.save(),
       n.translate(145.5 * e, 83.6015625 * e),
       Te(n, -4.5 * e, -61 * e, 9 * e, 129 * e, 5 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.save(),
       n.translate(145.5 * e, 83.6015625 * e),
       Te(n, -4.5 * e, -61 * e, 9 * e, 129 * e, 5 * e),
       n.restore(),
       se(n, t[2], t[3], 3 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.save(),
       n.translate(17.5 * e, 82.6015625 * e),
       Te(n, -4.5 * e, -65 * e, 9 * e, 129 * e, 5 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.save(),
       n.translate(17.5 * e, 82.6015625 * e),
       Te(n, -4.5 * e, -65 * e, 9 * e, 129 * e, 5 * e),
       n.restore(),
       se(n, t[2], t[3], 3 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.save(),
       n.translate(80.5 * e, 145.6015625 * e),
       Te(n, -65.5 * e, -4 * e, 129 * e, 9 * e, 5 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.save(),
       n.translate(80.5 * e, 145.6015625 * e),
       Te(n, -65.5 * e, -4 * e, 129 * e, 9 * e, 5 * e),
       n.restore(),
       se(n, t[2], t[3], 3 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.save(),
       n.translate(17 * e, 18.1015625 * e),
       Te(n, -11 * e, -11.5 * e, 22 * e, 22 * e, 5 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.save(),
       n.translate(17 * e, 18.1015625 * e),
       Te(n, -11 * e, -11.5 * e, 22 * e, 22 * e, 5 * e),
       n.restore(),
       se(n, t[2], t[3], 3 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.save(),
       n.translate(145.5 * e, 16.6015625 * e),
       Te(n, -10.5 * e, -11.5 * e, 21 * e, 22 * e, 5 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.save(),
       n.translate(145.5 * e, 16.6015625 * e),
       Te(n, -10.5 * e, -11.5 * e, 21 * e, 22 * e, 5 * e),
       n.restore(),
       se(n, t[2], t[3], 3 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.save(),
       n.translate(145.5 * e, 144.1015625 * e),
       Te(n, -10.5 * e, -11 * e, 22 * e, 22 * e, 5 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.save(),
       n.translate(145.5 * e, 144.1015625 * e),
       Te(n, -10.5 * e, -11 * e, 22 * e, 22 * e, 5 * e),
       n.restore(),
       se(n, t[2], t[3], 3 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.save(),
       n.translate(17.5 * e, 145.1015625 * e),
       Te(n, -11.5 * e, -12 * e, 22 * e, 22 * e, 5 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.save(),
       n.translate(17.5 * e, 145.1015625 * e),
       Te(n, -11.5 * e, -12 * e, 22 * e, 22 * e, 5 * e),
       n.restore(),
       se(n, t[2], t[3], 3 * e),
       r
   }
   function Rn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 168 * e,
       r.height = 100 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(10 * e, 5 * e),
       n.save(),
       n.translate(24.5 * e, 44.30000305175781 * e),
       Te(n, -19.5 * e, -8.5 * e, 39 * e, 17 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(115 * e, 37.80000305175781 * e),
       n.bezierCurveTo(142 * e, 37.80000305175781 * e, 140 * e, 37.80000305175781 * e, 141 * e, 37.80000305175781 * e),
       n.bezierCurveTo(147 * e, 28.800003051757812 * e, 149 * e, 26.800003051757812 * e, 153 * e, 32.80000305175781 * e),
       n.bezierCurveTo(160 * e, 42.80000305175781 * e, 157 * e, 50.80000305175781 * e, 153 * e, 58.80000305175781 * e),
       n.bezierCurveTo(148 * e, 62.80000305175781 * e, 147 * e, 59.80000305175781 * e, 143 * e, 52.80000305175781 * e),
       n.bezierCurveTo(129 * e, 52.80000305175781 * e, 129 * e, 52.80000305175781 * e, 115 * e, 52.80000305175781 * e),
       n.closePath(),
       se(n, t[0]),
       Ee(n, 78 * e, 44.80000305175781 * e, 39.44616584663204 * e),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-10 * e, -5 * e),
       n.save(),
       n.translate(24.5 * e, 44.30000305175781 * e),
       Te(n, -19.5 * e, -8.5 * e, 39 * e, 17 * e, 10 * e),
       n.restore(),
       se(n, void 0, t[3], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(115 * e, 37.80000305175781 * e),
       n.bezierCurveTo(142 * e, 37.80000305175781 * e, 140 * e, 37.80000305175781 * e, 141 * e, 37.80000305175781 * e),
       n.bezierCurveTo(147 * e, 28.800003051757812 * e, 149 * e, 26.800003051757812 * e, 153 * e, 32.80000305175781 * e),
       n.bezierCurveTo(160 * e, 42.80000305175781 * e, 157 * e, 50.80000305175781 * e, 153 * e, 58.80000305175781 * e),
       n.bezierCurveTo(148 * e, 62.80000305175781 * e, 147 * e, 59.80000305175781 * e, 143 * e, 52.80000305175781 * e),
       n.bezierCurveTo(129 * e, 52.80000305175781 * e, 129 * e, 52.80000305175781 * e, 115 * e, 52.80000305175781 * e),
       n.closePath(),
       se(n, void 0, t[3], 6 * e),
       Ee(n, 78 * e, 44.80000305175781 * e, 42.44616584663204 * e),
       se(n, void 0, t[3], 6 * e),
       n.save(),
       n.translate(24.5 * e, 44.30000305175781 * e),
       Te(n, -19.5 * e, -8.5 * e, 39 * e, 17 * e, 10 * e),
       n.restore(),
       se(n, t[1]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(115 * e, 37.80000305175781 * e),
       n.bezierCurveTo(142 * e, 37.80000305175781 * e, 140 * e, 37.80000305175781 * e, 141 * e, 37.80000305175781 * e),
       n.bezierCurveTo(147 * e, 28.800003051757812 * e, 149 * e, 26.800003051757812 * e, 153 * e, 32.80000305175781 * e),
       n.bezierCurveTo(160 * e, 42.80000305175781 * e, 157 * e, 50.80000305175781 * e, 153 * e, 58.80000305175781 * e),
       n.bezierCurveTo(148 * e, 62.80000305175781 * e, 147 * e, 59.80000305175781 * e, 143 * e, 52.80000305175781 * e),
       n.bezierCurveTo(129 * e, 52.80000305175781 * e, 129 * e, 52.80000305175781 * e, 115 * e, 52.80000305175781 * e),
       n.closePath(),
       se(n, t[1]),
       Ee(n, 78 * e, 44.80000305175781 * e, 39.44616584663204 * e),
       se(n, t[2], t[1], 4 * e),
       Ee(n, 78 * e, 44.80000305175781 * e, 29.68164415931166 * e),
       se(n, t[3], t[1], 4 * e),
       Ee(n, 78 * e, 44 * e, 20 * e),
       se(n, t[4]),
       r
   }
   function An(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 158 * e,
       r.height = 201 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(96.5 * e, 76.421875 * e),
       n.bezierCurveTo(100.5 * e, 64.421875 * e, 103.5 * e, 62.421875 * e, 110.5 * e, 65.421875 * e),
       n.bezierCurveTo(116.5 * e, 66.421875 * e, 117.5 * e, 67.421875 * e, 112.5 * e, 73.421875 * e),
       n.bezierCurveTo(107 * e, 79.921875 * e, 107 * e, 79.921875 * e, 101.5 * e, 86.421875 * e),
       n.closePath(),
       se(n, t[8], t[8], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(61.5 * e, 78.421875 * e),
       n.bezierCurveTo(57.5 * e, 73.421875 * e, 51.5 * e, 66.421875 * e, 45.5 * e, 68.421875 * e),
       n.bezierCurveTo(32.5 * e, 73.421875 * e, 38.5 * e, 75.421875 * e, 46.5 * e, 81.421875 * e),
       n.bezierCurveTo(51.5 * e, 84.921875 * e, 51.5 * e, 84.921875 * e, 56.5 * e, 88.421875 * e),
       n.closePath(),
       se(n, t[8], t[8], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(116.5 * e, 127.421875 * e),
       n.bezierCurveTo(124.5 * e, 108.421875 * e, 129.5 * e, 104.421875 * e, 141.5 * e, 107.421875 * e),
       n.bezierCurveTo(156.5 * e, 112.421875 * e, 153.5 * e, 113.421875 * e, 132.5 * e, 134.421875 * e),
       n.bezierCurveTo(123.5 * e, 141.921875 * e, 123.5 * e, 141.921875 * e, 114.5 * e, 149.421875 * e),
       n.closePath(),
       se(n, t[8], t[8], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(41.5 * e, 134.421875 * e),
       n.bezierCurveTo(30.5 * e, 119.421875 * e, 25.5 * e, 111.421875 * e, 12.5 * e, 115.421875 * e),
       n.bezierCurveTo(4.5 * e, 120.421875 * e, 4.5 * e, 121.421875 * e, 26.5 * e, 142.421875 * e),
       n.bezierCurveTo(35 * e, 149.921875 * e, 35 * e, 149.921875 * e, 43.5 * e, 157.421875 * e),
       n.closePath(),
       se(n, t[8], t[8], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(78.5 * e, 51.921875 * e),
       n.bezierCurveTo(99.5 * e, 75.921875 * e, 110.5 * e, 96.921875 * e, 118.5 * e, 120.921875 * e),
       n.bezierCurveTo(121.5 * e, 140.921875 * e, 107.5 * e, 179.921875 * e, 75.5 * e, 183.921875 * e),
       n.bezierCurveTo(30.5 * e, 169.921875 * e, 37.5 * e, 131.921875 * e, 34.5 * e, 120.921875 * e),
       n.bezierCurveTo(41.5 * e, 89.921875 * e, 61.5 * e, 67.921875 * e, 78.5 * e, 51.921875 * e),
       n.closePath(),
       se(n, t[8], t[8], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(72.5 * e, 72.421875 * e),
       n.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e),
       n.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e),
       n.closePath(),
       se(n, t[8], t[8], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(42.5 * e, 163.421875 * e),
       n.bezierCurveTo(62.5 * e, 185.421875 * e, 86.5 * e, 186.421875 * e, 111.5 * e, 165.421875 * e),
       n.bezierCurveTo(107.5 * e, 176.421875 * e, 95.5 * e, 187.421875 * e, 75.5 * e, 188.421875 * e),
       n.bezierCurveTo(53.5 * e, 188.421875 * e, 43.5 * e, 171.421875 * e, 42.5 * e, 164.421875 * e),
       n.closePath(),
       se(n, t[8], t[8], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(79.5 * e, 61.421875 * e),
       n.bezierCurveTo(88.5 * e, 31.421875 * e, 81.5 * e, 16.421875 * e, 75.5 * e, 7.421875 * e),
       n.bezierCurveTo(77.5 * e, 28.421875 * e, 77.5 * e, 37.421875 * e, 68.5 * e, 42.421875 * e),
       n.bezierCurveTo(79.5 * e, 57.421875 * e, 79.5 * e, 58.421875 * e, 80.5 * e, 61.421875 * e),
       n.closePath(),
       se(n, t[8], t[8], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(72.5 * e, 72.421875 * e),
       n.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e),
       n.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e),
       n.closePath(),
       se(n, t[8], t[8], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(96.5 * e, 76.421875 * e),
       n.bezierCurveTo(100.5 * e, 64.421875 * e, 103.5 * e, 62.421875 * e, 110.5 * e, 65.421875 * e),
       n.bezierCurveTo(116.5 * e, 66.421875 * e, 117.5 * e, 67.421875 * e, 112.5 * e, 73.421875 * e),
       n.bezierCurveTo(107 * e, 79.921875 * e, 107 * e, 79.921875 * e, 101.5 * e, 86.421875 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(61.5 * e, 78.421875 * e),
       n.bezierCurveTo(57.5 * e, 73.421875 * e, 51.5 * e, 66.421875 * e, 45.5 * e, 68.421875 * e),
       n.bezierCurveTo(32.5 * e, 73.421875 * e, 38.5 * e, 75.421875 * e, 46.5 * e, 81.421875 * e),
       n.bezierCurveTo(51.5 * e, 84.921875 * e, 51.5 * e, 84.921875 * e, 56.5 * e, 88.421875 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(116.5 * e, 127.421875 * e),
       n.bezierCurveTo(124.5 * e, 108.421875 * e, 129.5 * e, 104.421875 * e, 141.5 * e, 107.421875 * e),
       n.bezierCurveTo(156.5 * e, 112.421875 * e, 153.5 * e, 113.421875 * e, 132.5 * e, 134.421875 * e),
       n.bezierCurveTo(123.5 * e, 141.921875 * e, 123.5 * e, 141.921875 * e, 114.5 * e, 149.421875 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(41.5 * e, 134.421875 * e),
       n.bezierCurveTo(30.5 * e, 119.421875 * e, 25.5 * e, 111.421875 * e, 12.5 * e, 115.421875 * e),
       n.bezierCurveTo(4.5 * e, 120.421875 * e, 4.5 * e, 121.421875 * e, 26.5 * e, 142.421875 * e),
       n.bezierCurveTo(35 * e, 149.921875 * e, 35 * e, 149.921875 * e, 43.5 * e, 157.421875 * e),
       n.closePath(),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(78.5 * e, 51.921875 * e),
       n.bezierCurveTo(99.5 * e, 75.921875 * e, 110.5 * e, 96.921875 * e, 118.5 * e, 120.921875 * e),
       n.bezierCurveTo(121.5 * e, 140.921875 * e, 107.5 * e, 179.921875 * e, 75.5 * e, 183.921875 * e),
       n.bezierCurveTo(30.5 * e, 169.921875 * e, 37.5 * e, 131.921875 * e, 34.5 * e, 120.921875 * e),
       n.bezierCurveTo(41.5 * e, 89.921875 * e, 61.5 * e, 67.921875 * e, 78.5 * e, 51.921875 * e),
       n.closePath(),
       se(n, t[3], t[2], 4 * e),
       Ee(n, 108.5 * e, 148.421875 * e, 9 * e),
       se(n, t[5]),
       Ee(n, 106.5 * e, 144.421875 * e, 3 * e),
       se(n, t[6]),
       Ee(n, 46.5 * e, 148.421875 * e, 9 * e),
       se(n, t[5]),
       Ee(n, 44.5 * e, 144.421875 * e, 3 * e),
       se(n, t[6]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(116.5 * e, 114.421875 * e),
       n.bezierCurveTo(121.5 * e, 137.421875 * e, 118.5 * e, 133.421875 * e, 108.5 * e, 139.421875 * e),
       n.bezierCurveTo(94.5 * e, 146.421875 * e, 96.5 * e, 148.421875 * e, 95.5 * e, 152.421875 * e),
       se(n, t[3], t[2], 4 * e),
       n.beginPath(),
       n.translate(0, -2 * e),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(35.5 * e, 131.421875 * e),
       n.bezierCurveTo(36.5 * e, 140.421875 * e, 39.5 * e, 140.421875 * e, 49.5 * e, 143.421875 * e),
       n.bezierCurveTo(59.5 * e, 149.421875 * e, 57.5 * e, 151.421875 * e, 59.5 * e, 155.421875 * e),
       se(n, t[3], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(84.5 * e, 57.421875 * e),
       n.bezierCurveTo(101.5 * e, 120.421875 * e, 92.5 * e, 127.421875 * e, 78.5 * e, 134.421875 * e),
       n.bezierCurveTo(51.5 * e, 131.421875 * e, 63.5 * e, 102.421875 * e, 70.5 * e, 59.421875 * e),
       n.bezierCurveTo(75 * e, 55.421875 * e, 78.5 * e, 52.421875 * e, 79.5 * e, 51.421875 * e),
       n.closePath(),
       se(n, t[4]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(79.5 * e, 61.421875 * e),
       n.bezierCurveTo(88.5 * e, 31.421875 * e, 81.5 * e, 16.421875 * e, 75.5 * e, 7.421875 * e),
       n.bezierCurveTo(77.5 * e, 28.421875 * e, 77.5 * e, 37.421875 * e, 68.5 * e, 42.421875 * e),
       n.bezierCurveTo(79.5 * e, 57.421875 * e, 79.5 * e, 58.421875 * e, 80.5 * e, 61.421875 * e),
       n.closePath(),
       se(n, t[3], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(72.5 * e, 72.421875 * e),
       n.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e),
       n.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e),
       n.closePath(),
       se(n, t[3], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(87.5 * e, 154.421875 * e),
       n.bezierCurveTo(93.5 * e, 163.921875 * e, 93.5 * e, 163.921875 * e, 99.5 * e, 173.421875 * e),
       n.bezierCurveTo(95 * e, 177.421875 * e, 95 * e, 177.421875 * e, 90.5 * e, 181.421875 * e),
       n.bezierCurveTo(89 * e, 167.921875 * e, 89 * e, 167.921875 * e, 87.5 * e, 154.421875 * e),
       n.closePath(),
       se(n, t[6], t[7], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(81.5 * e, 164.421875 * e),
       n.bezierCurveTo(84 * e, 172.921875 * e, 84 * e, 172.921875 * e, 86.5 * e, 181.421875 * e),
       n.bezierCurveTo(82.5 * e, 182.421875 * e, 82.5 * e, 182.421875 * e, 78.5 * e, 183.421875 * e),
       n.closePath(),
       se(n, t[6], t[7], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(72.5 * e, 164.421875 * e),
       n.bezierCurveTo(73.5 * e, 173.921875 * e, 73.5 * e, 173.921875 * e, 74.5 * e, 183.421875 * e),
       n.bezierCurveTo(70.5 * e, 182.921875 * e, 70.5 * e, 182.921875 * e, 66.5 * e, 182.421875 * e),
       n.closePath(),
       se(n, t[6], t[7], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(65.5 * e, 156.421875 * e),
       n.bezierCurveTo(65 * e, 168.421875 * e, 65 * e, 168.421875 * e, 64.5 * e, 180.421875 * e),
       n.bezierCurveTo(58.5 * e, 177.421875 * e, 58.5 * e, 177.421875 * e, 52.5 * e, 174.421875 * e),
       n.closePath(),
       se(n, t[6], t[7], 2 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(42.5 * e, 163.421875 * e),
       n.bezierCurveTo(62.5 * e, 185.421875 * e, 86.5 * e, 186.421875 * e, 111.5 * e, 165.421875 * e),
       n.bezierCurveTo(107.5 * e, 176.421875 * e, 95.5 * e, 187.421875 * e, 75.5 * e, 188.421875 * e),
       n.bezierCurveTo(53.5 * e, 188.421875 * e, 43.5 * e, 171.421875 * e, 42.5 * e, 164.421875 * e),
       n.closePath(),
       se(n, t[3], t[2], 4 * e),
       r
   }
   function dn(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 158 * e,
       t.height = 201 * e,
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(96.5 * e, 76.421875 * e),
       r.bezierCurveTo(100.5 * e, 64.421875 * e, 103.5 * e, 62.421875 * e, 110.5 * e, 65.421875 * e),
       r.bezierCurveTo(116.5 * e, 66.421875 * e, 117.5 * e, 67.421875 * e, 112.5 * e, 73.421875 * e),
       r.bezierCurveTo(107 * e, 79.921875 * e, 107 * e, 79.921875 * e, 101.5 * e, 86.421875 * e),
       r.closePath(),
       se(r, i[0], i[0], 10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(61.5 * e, 78.421875 * e),
       r.bezierCurveTo(57.5 * e, 73.421875 * e, 51.5 * e, 66.421875 * e, 45.5 * e, 68.421875 * e),
       r.bezierCurveTo(32.5 * e, 73.421875 * e, 38.5 * e, 75.421875 * e, 46.5 * e, 81.421875 * e),
       r.bezierCurveTo(51.5 * e, 84.921875 * e, 51.5 * e, 84.921875 * e, 56.5 * e, 88.421875 * e),
       r.closePath(),
       se(r, i[0], i[0], 10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(116.5 * e, 127.421875 * e),
       r.bezierCurveTo(124.5 * e, 108.421875 * e, 129.5 * e, 104.421875 * e, 141.5 * e, 107.421875 * e),
       r.bezierCurveTo(156.5 * e, 112.421875 * e, 153.5 * e, 113.421875 * e, 132.5 * e, 134.421875 * e),
       r.bezierCurveTo(123.5 * e, 141.921875 * e, 123.5 * e, 141.921875 * e, 114.5 * e, 149.421875 * e),
       r.closePath(),
       se(r, i[0], i[0], 10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(41.5 * e, 134.421875 * e),
       r.bezierCurveTo(30.5 * e, 119.421875 * e, 25.5 * e, 111.421875 * e, 12.5 * e, 115.421875 * e),
       r.bezierCurveTo(4.5 * e, 120.421875 * e, 4.5 * e, 121.421875 * e, 26.5 * e, 142.421875 * e),
       r.bezierCurveTo(35 * e, 149.921875 * e, 35 * e, 149.921875 * e, 43.5 * e, 157.421875 * e),
       r.closePath(),
       se(r, i[0], i[0], 10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(78.5 * e, 51.921875 * e),
       r.bezierCurveTo(99.5 * e, 75.921875 * e, 110.5 * e, 96.921875 * e, 118.5 * e, 120.921875 * e),
       r.bezierCurveTo(121.5 * e, 140.921875 * e, 107.5 * e, 179.921875 * e, 75.5 * e, 183.921875 * e),
       r.bezierCurveTo(30.5 * e, 169.921875 * e, 37.5 * e, 131.921875 * e, 34.5 * e, 120.921875 * e),
       r.bezierCurveTo(41.5 * e, 89.921875 * e, 61.5 * e, 67.921875 * e, 78.5 * e, 51.921875 * e),
       r.closePath(),
       se(r, i[0], i[0], 10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(72.5 * e, 72.421875 * e),
       r.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e),
       r.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e),
       r.closePath(),
       se(r, i[0], i[0], 10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(42.5 * e, 163.421875 * e),
       r.bezierCurveTo(62.5 * e, 185.421875 * e, 86.5 * e, 186.421875 * e, 111.5 * e, 165.421875 * e),
       r.bezierCurveTo(107.5 * e, 176.421875 * e, 95.5 * e, 187.421875 * e, 75.5 * e, 188.421875 * e),
       r.bezierCurveTo(53.5 * e, 188.421875 * e, 43.5 * e, 171.421875 * e, 42.5 * e, 164.421875 * e),
       r.closePath(),
       se(r, i[0], i[0], 10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(79.5 * e, 61.421875 * e),
       r.bezierCurveTo(88.5 * e, 31.421875 * e, 81.5 * e, 16.421875 * e, 75.5 * e, 7.421875 * e),
       r.bezierCurveTo(77.5 * e, 28.421875 * e, 77.5 * e, 37.421875 * e, 68.5 * e, 42.421875 * e),
       r.bezierCurveTo(79.5 * e, 57.421875 * e, 79.5 * e, 58.421875 * e, 80.5 * e, 61.421875 * e),
       r.closePath(),
       se(r, i[0], i[0], 10 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(72.5 * e, 72.421875 * e),
       r.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e),
       r.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e),
       r.closePath(),
       se(r, i[0], i[0], 10 * e),
       t
   }
   function Sn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 400 * e,
       r.height = 170 * e,
       n.translate(0, -170 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(159.5 * e, 322.0625 * e),
       n.bezierCurveTo(240.5 * e, 293.0625 * e, 240.5 * e, 293.0625 * e, 321.5 * e, 264.0625 * e),
       n.bezierCurveTo(276.5 * e, 230.0625 * e, 276.5 * e, 230.0625 * e, 231.5 * e, 196.0625 * e),
       n.bezierCurveTo(158.5 * e, 221.5625 * e, 158.5 * e, 221.5625 * e, 85.5 * e, 247.0625 * e),
       n.closePath(),
       se(n, t[0], t[1], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(212.5 * e, 270.0625 * e),
       n.bezierCurveTo(235 * e, 261.5625 * e, 235 * e, 261.5625 * e, 257.5 * e, 253.0625 * e),
       n.closePath(),
       se(n, void 0, t[0], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(193.5 * e, 226.0625 * e),
       n.bezierCurveTo(204.5 * e, 242.0625 * e, 242.5 * e, 237.0625 * e, 251.5 * e, 225.0625 * e),
       n.bezierCurveTo(246.5 * e, 195.0625 * e, 205.5 * e, 190.0625 * e, 193.5 * e, 227.0625 * e),
       n.closePath(),
       se(n, t[2], t[3], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(164.5 * e, 245.0625 * e),
       n.bezierCurveTo(182.5 * e, 264.0625 * e, 252.5 * e, 258.0625 * e, 276.5 * e, 244.0625 * e),
       n.bezierCurveTo(265.5 * e, 226.0625 * e, 244.5 * e, 231.0625 * e, 229.5 * e, 230.0625 * e),
       n.bezierCurveTo(205.5 * e, 227.0625 * e, 175.5 * e, 202.0625 * e, 162.5 * e, 244.0625 * e),
       n.closePath(),
       se(n, t[2], t[3], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(115.5 * e, 260.0625 * e),
       n.bezierCurveTo(134.5 * e, 279.0625 * e, 170.5 * e, 275.0625 * e, 191.5 * e, 257.0625 * e),
       n.bezierCurveTo(174.5 * e, 208.0625 * e, 142.5 * e, 197.0625 * e, 116.5 * e, 259.0625 * e),
       n.closePath(),
       se(n, t[2], t[3], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(152.5 * e, 278.0625 * e),
       n.bezierCurveTo(165.5 * e, 294.0625 * e, 200.5 * e, 287.0625 * e, 216.5 * e, 278.0625 * e),
       n.bezierCurveTo(206.5 * e, 247.0625 * e, 173.5 * e, 233.0625 * e, 153.5 * e, 276.0625 * e),
       n.closePath(),
       se(n, t[2], t[3], 12 * e),
       r
   }
   function ln(e) {
       var i = document.createElement("canvas")
         , t = i.getContext("2d")
         , r = 200 * e
         , n = 270 * e
         , o = 8 * e;
       i.width = r,
       i.height = n + 20,
       t.beginPath(),
       Te(t, 0, 0, r, n - o, o),
       t.globalAlpha = .5,
       se(t, "#1D6055"),
       t.globalAlpha = 1;
       var a = Yi(e, "Leaderboard", 25, "#FFF");
       return t.drawImage(a, (r - a.width) / 2, 5 * e),
       i
   }
   function Nn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 272 * e,
       r.height = 264 * e,
       n.translate(0, 20 * e),
       n.globalAlpha = i ? .5 : 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(56.999969482421875 * e, 84.517333984375 * e),
       n.bezierCurveTo(61.999969482421875 * e, 58.517333984375 * e, 79.99996948242188 * e, 50.517333984375 * e, 102.99996948242188 * e, 50.517333984375 * e),
       n.bezierCurveTo(119.99996948242188 * e, 26.517333984375 * e, 137.99996948242188 * e, 32.517333984375 * e, 156.99996948242188 * e, 44.517333984375 * e),
       n.bezierCurveTo(187.99996948242188 * e, 42.517333984375 * e, 195.99996948242188 * e, 50.517333984375 * e, 202.99996948242188 * e, 77.517333984375 * e),
       n.bezierCurveTo(229.99996948242188 * e, 80.517333984375 * e, 231.99996948242188 * e, 96.517333984375 * e, 229.99996948242188 * e, 118.517333984375 * e),
       n.bezierCurveTo(241.99996948242188 * e, 147.517333984375 * e, 236.99996948242188 * e, 148.517333984375 * e, 220.99996948242188 * e, 165.517333984375 * e),
       n.bezierCurveTo(222.99996948242188 * e, 192.517333984375 * e, 209.99996948242188 * e, 212.517333984375 * e, 177.99996948242188 * e, 213.517333984375 * e),
       n.bezierCurveTo(159.99996948242188 * e, 234.517333984375 * e, 141.99996948242188 * e, 234.517333984375 * e, 116.99996948242188 * e, 222.517333984375 * e),
       n.bezierCurveTo(72.99996948242188 * e, 226.517333984375 * e, 66.99996948242188 * e, 207.517333984375 * e, 65.99996948242188 * e, 190.517333984375 * e),
       n.bezierCurveTo(35.999969482421875 * e, 180.517333984375 * e, 30.999969482421875 * e, 162.517333984375 * e, 39.999969482421875 * e, 135.517333984375 * e),
       n.bezierCurveTo(23.999969482421875 * e, 110.517333984375 * e, 43.999969482421875 * e, 90.517333984375 * e, 55.999969482421875 * e, 85.517333984375 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(0, -20 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(56.999969482421875 * e, 84.517333984375 * e),
       n.bezierCurveTo(61.999969482421875 * e, 58.517333984375 * e, 79.99996948242188 * e, 50.517333984375 * e, 102.99996948242188 * e, 50.517333984375 * e),
       n.bezierCurveTo(119.99996948242188 * e, 26.517333984375 * e, 137.99996948242188 * e, 32.517333984375 * e, 156.99996948242188 * e, 44.517333984375 * e),
       n.bezierCurveTo(187.99996948242188 * e, 42.517333984375 * e, 195.99996948242188 * e, 50.517333984375 * e, 202.99996948242188 * e, 77.517333984375 * e),
       n.bezierCurveTo(229.99996948242188 * e, 80.517333984375 * e, 231.99996948242188 * e, 96.517333984375 * e, 229.99996948242188 * e, 118.517333984375 * e),
       n.bezierCurveTo(241.99996948242188 * e, 147.517333984375 * e, 236.99996948242188 * e, 148.517333984375 * e, 220.99996948242188 * e, 165.517333984375 * e),
       n.bezierCurveTo(222.99996948242188 * e, 192.517333984375 * e, 209.99996948242188 * e, 212.517333984375 * e, 177.99996948242188 * e, 213.517333984375 * e),
       n.bezierCurveTo(159.99996948242188 * e, 234.517333984375 * e, 141.99996948242188 * e, 234.517333984375 * e, 116.99996948242188 * e, 222.517333984375 * e),
       n.bezierCurveTo(72.99996948242188 * e, 226.517333984375 * e, 66.99996948242188 * e, 207.517333984375 * e, 65.99996948242188 * e, 190.517333984375 * e),
       n.bezierCurveTo(35.999969482421875 * e, 180.517333984375 * e, 30.999969482421875 * e, 162.517333984375 * e, 39.999969482421875 * e, 135.517333984375 * e),
       n.bezierCurveTo(23.999969482421875 * e, 110.517333984375 * e, 43.999969482421875 * e, 90.517333984375 * e, 55.999969482421875 * e, 85.517333984375 * e),
       n.closePath(),
       se(n, t[1], t[2], 8 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(123.99996948242188 * e, 116.18402099609375 * e),
       n.bezierCurveTo(115.99996948242188 * e, 99.18402099609375 * e, 109.99996948242188 * e, 74.18402099609375 * e, 109.99996948242188 * e, 63.18402099609375 * e),
       n.bezierCurveTo(115.99996948242188 * e, 69.18402099609375 * e, 125.99996948242188 * e, 87.18402099609375 * e, 137.99996948242188 * e, 112.18402099609375 * e),
       n.bezierCurveTo(142.99996948242188 * e, 84.18402099609375 * e, 143.99996948242188 * e, 76.18402099609375 * e, 153.99996948242188 * e, 62.18402099609375 * e),
       n.bezierCurveTo(155.99996948242188 * e, 79.18402099609375 * e, 149.99996948242188 * e, 110.18402099609375 * e, 151.99996948242188 * e, 117.18402099609375 * e),
       n.bezierCurveTo(162.99996948242188 * e, 104.18402099609375 * e, 180.99996948242188 * e, 91.18402099609375 * e, 191.99996948242188 * e, 91.18402099609375 * e),
       n.bezierCurveTo(185.99996948242188 * e, 102.18402099609375 * e, 180.99996948242188 * e, 106.18402099609375 * e, 160.99996948242188 * e, 124.18402099609375 * e),
       n.bezierCurveTo(190.99996948242188 * e, 121.18402099609375 * e, 199.99996948242188 * e, 120.18402099609375 * e, 207.99996948242188 * e, 123.18402099609375 * e),
       n.bezierCurveTo(199.99996948242188 * e, 129.18402099609375 * e, 181.99996948242188 * e, 132.18402099609375 * e, 160.99996948242188 * e, 135.18402099609375 * e),
       n.bezierCurveTo(179.99996948242188 * e, 142.18402099609375 * e, 193.99996948242188 * e, 151.18402099609375 * e, 196.99996948242188 * e, 156.18402099609375 * e),
       n.bezierCurveTo(185.99996948242188 * e, 156.18402099609375 * e, 163.99996948242188 * e, 149.18402099609375 * e, 152.99996948242188 * e, 147.18402099609375 * e),
       n.bezierCurveTo(157.99996948242188 * e, 155.18402099609375 * e, 165.99996948242188 * e, 176.18402099609375 * e, 169.99996948242188 * e, 195.18402099609375 * e),
       n.bezierCurveTo(162.99996948242188 * e, 190.18402099609375 * e, 147.99996948242188 * e, 167.18402099609375 * e, 139.99996948242188 * e, 153.18402099609375 * e),
       n.bezierCurveTo(137.99996948242188 * e, 167.18402099609375 * e, 126.99996948242188 * e, 194.18402099609375 * e, 119.99996948242188 * e, 204.18402099609375 * e),
       n.bezierCurveTo(117.99996948242188 * e, 186.18402099609375 * e, 123.99996948242188 * e, 165.18402099609375 * e, 126.99996948242188 * e, 149.18402099609375 * e),
       n.bezierCurveTo(110.99996948242188 * e, 163.18402099609375 * e, 103.99996948242188 * e, 170.18402099609375 * e, 82.99996948242188 * e, 177.18402099609375 * e),
       n.bezierCurveTo(90.99996948242188 * e, 162.18402099609375 * e, 99.99996948242188 * e, 153.18402099609375 * e, 117.99996948242188 * e, 140.18402099609375 * e),
       n.bezierCurveTo(97.99996948242188 * e, 140.18402099609375 * e, 83.99996948242188 * e, 139.18402099609375 * e, 65.99996948242188 * e, 132.18402099609375 * e),
       n.bezierCurveTo(77.99996948242188 * e, 127.18402099609375 * e, 95.99996948242188 * e, 127.18402099609375 * e, 115.99996948242188 * e, 127.18402099609375 * e),
       n.bezierCurveTo(91.99996948242188 * e, 113.18402099609375 * e, 84.99996948242188 * e, 107.18402099609375 * e, 76.99996948242188 * e, 96.18402099609375 * e),
       n.bezierCurveTo(94.99996948242188 * e, 99.18402099609375 * e, 109.99996948242188 * e, 109.18402099609375 * e, 123.99996948242188 * e, 116.18402099609375 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(131.99996948242188 * e, 119.18402099609375 * e),
       n.bezierCurveTo(141.99996948242188 * e, 119.18402099609375 * e, 145.99996948242188 * e, 116.18402099609375 * e, 147.99996948242188 * e, 109.18402099609375 * e),
       n.bezierCurveTo(151.99996948242188 * e, 107.18402099609375 * e, 159.99996948242188 * e, 107.18402099609375 * e, 156.99996948242188 * e, 123.18402099609375 * e),
       n.bezierCurveTo(155.99996948242188 * e, 140.18402099609375 * e, 142.99996948242188 * e, 149.18402099609375 * e, 132.99996948242188 * e, 147.18402099609375 * e),
       n.bezierCurveTo(119.99996948242188 * e, 144.18402099609375 * e, 113.99996948242188 * e, 122.18402099609375 * e, 131.99996948242188 * e, 119.18402099609375 * e),
       n.closePath(),
       se(n, t[4], t[5], 6 * e),
       r
   }
   function Cn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 247 * e,
       r.height = 247 * e,
       n.translate(0, 10 * e),
       n.globalAlpha = i ? .5 : 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(150 * e, 62 * e),
       n.bezierCurveTo(151.5 * e, 71.5 * e, 149 * e, 70 * e, 153 * e, 81 * e),
       n.bezierCurveTo(158 * e, 73.5 * e, 158 * e, 73.5 * e, 163 * e, 66 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(164 * e, 171 * e),
       n.bezierCurveTo(149 * e, 159 * e, 156.5 * e, 165 * e, 149 * e, 159 * e),
       n.bezierCurveTo(149 * e, 167 * e, 149 * e, 170 * e, 152 * e, 178 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(132 * e, 95 * e),
       n.bezierCurveTo(154 * e, 102 * e, 154 * e, 126 * e, 137 * e, 139 * e),
       n.bezierCurveTo(113 * e, 152 * e, 89 * e, 136 * e, 80 * e, 121 * e),
       n.bezierCurveTo(57 * e, 89 * e, 69 * e, 63 * e, 79 * e, 52 * e),
       n.bezierCurveTo(110 * e, 20 * e, 139 * e, 21 * e, 150 * e, 25 * e),
       n.bezierCurveTo(197 * e, 36 * e, 221 * e, 67 * e, 226 * e, 90 * e),
       n.bezierCurveTo(234 * e, 134 * e, 214 * e, 177 * e, 195 * e, 197 * e),
       n.bezierCurveTo(144 * e, 242 * e, 79 * e, 216 * e, 58 * e, 206 * e),
       n.bezierCurveTo(13 * e, 174 * e, 20 * e, 134 * e, 23 * e, 107 * e),
       n.bezierCurveTo(26 * e, 78 * e, 33 * e, 60 * e, 38 * e, 43 * e),
       n.bezierCurveTo(42 * e, 32 * e, 47 * e, 32 * e, 50 * e, 36 * e),
       n.bezierCurveTo(54 * e, 37 * e, 50 * e, 52 * e, 44 * e, 87 * e),
       n.bezierCurveTo(40 * e, 115 * e, 46 * e, 142 * e, 57 * e, 158 * e),
       n.bezierCurveTo(76 * e, 189 * e, 129 * e, 182 * e, 152 * e, 173 * e),
       n.bezierCurveTo(186 * e, 156 * e, 191 * e, 106 * e, 176 * e, 85 * e),
       n.bezierCurveTo(159 * e, 61 * e, 132 * e, 62 * e, 122 * e, 66 * e),
       n.bezierCurveTo(108 * e, 74 * e, 108 * e, 89 * e, 116 * e, 90 * e),
       n.bezierCurveTo(123 * e, 92 * e, 130 * e, 93 * e, 131 * e, 94 * e),
       n.closePath(),
       se(n, t[0]),
       n.translate(0, -10 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(150 * e, 62 * e),
       n.bezierCurveTo(151.5 * e, 71.5 * e, 149 * e, 70 * e, 153 * e, 81 * e),
       n.bezierCurveTo(158 * e, 73.5 * e, 158 * e, 73.5 * e, 163 * e, 66 * e),
       n.closePath(),
       se(n, t[5]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(164 * e, 171 * e),
       n.bezierCurveTo(149 * e, 159 * e, 156.5 * e, 165 * e, 149 * e, 159 * e),
       n.bezierCurveTo(149 * e, 167 * e, 149 * e, 170 * e, 152 * e, 178 * e),
       n.closePath(),
       se(n, t[5]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(132 * e, 95 * e),
       n.bezierCurveTo(154 * e, 102 * e, 154 * e, 126 * e, 137 * e, 139 * e),
       n.bezierCurveTo(113 * e, 152 * e, 89 * e, 136 * e, 80 * e, 121 * e),
       n.bezierCurveTo(57 * e, 89 * e, 69 * e, 63 * e, 79 * e, 52 * e),
       n.bezierCurveTo(110 * e, 20 * e, 139 * e, 21 * e, 150 * e, 25 * e),
       n.bezierCurveTo(197 * e, 36 * e, 221 * e, 67 * e, 226 * e, 90 * e),
       n.bezierCurveTo(234 * e, 134 * e, 214 * e, 177 * e, 195 * e, 197 * e),
       n.bezierCurveTo(144 * e, 242 * e, 79 * e, 216 * e, 58 * e, 206 * e),
       n.bezierCurveTo(13 * e, 174 * e, 20 * e, 134 * e, 23 * e, 107 * e),
       n.bezierCurveTo(26 * e, 78 * e, 33 * e, 60 * e, 38 * e, 43 * e),
       n.bezierCurveTo(42 * e, 32 * e, 47 * e, 32 * e, 50 * e, 36 * e),
       n.bezierCurveTo(54 * e, 37 * e, 50 * e, 52 * e, 44 * e, 87 * e),
       n.bezierCurveTo(40 * e, 115 * e, 46 * e, 142 * e, 57 * e, 158 * e),
       n.bezierCurveTo(76 * e, 189 * e, 129 * e, 182 * e, 152 * e, 173 * e),
       n.bezierCurveTo(186 * e, 156 * e, 191 * e, 106 * e, 176 * e, 85 * e),
       n.bezierCurveTo(159 * e, 61 * e, 132 * e, 62 * e, 122 * e, 66 * e),
       n.bezierCurveTo(108 * e, 74 * e, 108 * e, 89 * e, 116 * e, 90 * e),
       n.bezierCurveTo(123 * e, 92 * e, 130 * e, 93 * e, 131 * e, 94 * e),
       n.closePath(),
       se(n, t[1], t[2], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(137 * e, 137 * e),
       n.bezierCurveTo(145 * e, 125 * e, 138 * e, 108 * e, 123 * e, 104 * e),
       n.bezierCurveTo(81 * e, 101 * e, 88 * e, 77 * e, 98 * e, 65 * e),
       n.bezierCurveTo(117 * e, 38 * e, 138 * e, 39 * e, 165 * e, 52 * e),
       n.bezierCurveTo(197 * e, 72 * e, 207 * e, 111 * e, 197 * e, 140 * e),
       n.bezierCurveTo(182 * e, 180 * e, 161 * e, 197 * e, 112 * e, 194 * e),
       n.bezierCurveTo(58 * e, 194 * e, 37 * e, 170 * e, 34 * e, 142 * e),
       n.bezierCurveTo(29 * e, 102 * e, 40 * e, 63 * e, 51 * e, 45 * e),
       n.bezierCurveTo(43 * e, 78 * e, 41 * e, 103 * e, 43 * e, 122 * e),
       n.bezierCurveTo(51 * e, 158 * e, 63 * e, 174 * e, 95 * e, 179 * e),
       n.bezierCurveTo(129 * e, 186 * e, 169 * e, 172 * e, 177 * e, 144 * e),
       n.bezierCurveTo(197 * e, 105 * e, 172 * e, 76 * e, 160 * e, 71 * e),
       n.bezierCurveTo(125 * e, 52 * e, 111 * e, 73 * e, 111 * e, 81 * e),
       n.bezierCurveTo(106 * e, 93 * e, 140 * e, 92 * e, 147 * e, 107 * e),
       n.bezierCurveTo(153 * e, 128 * e, 140 * e, 135 * e, 137 * e, 139 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(132 * e, 95 * e),
       n.bezierCurveTo(154 * e, 102 * e, 154 * e, 126 * e, 137 * e, 139 * e),
       n.bezierCurveTo(113 * e, 152 * e, 89 * e, 136 * e, 80 * e, 121 * e),
       n.bezierCurveTo(57 * e, 89 * e, 69 * e, 63 * e, 79 * e, 52 * e),
       n.bezierCurveTo(110 * e, 20 * e, 139 * e, 21 * e, 150 * e, 25 * e),
       n.bezierCurveTo(197 * e, 36 * e, 221 * e, 67 * e, 226 * e, 90 * e),
       n.bezierCurveTo(234 * e, 134 * e, 214 * e, 177 * e, 195 * e, 197 * e),
       n.bezierCurveTo(144 * e, 242 * e, 79 * e, 216 * e, 58 * e, 206 * e),
       n.bezierCurveTo(13 * e, 174 * e, 20 * e, 134 * e, 23 * e, 107 * e),
       n.bezierCurveTo(26 * e, 78 * e, 33 * e, 60 * e, 38 * e, 43 * e),
       n.bezierCurveTo(42 * e, 32 * e, 47 * e, 32 * e, 50 * e, 36 * e),
       n.bezierCurveTo(54 * e, 37 * e, 50 * e, 52 * e, 44 * e, 87 * e),
       n.bezierCurveTo(40 * e, 115 * e, 46 * e, 142 * e, 57 * e, 158 * e),
       n.bezierCurveTo(76 * e, 189 * e, 129 * e, 182 * e, 152 * e, 173 * e),
       n.bezierCurveTo(186 * e, 156 * e, 191 * e, 106 * e, 176 * e, 85 * e),
       n.bezierCurveTo(159 * e, 61 * e, 132 * e, 62 * e, 122 * e, 66 * e),
       n.bezierCurveTo(108 * e, 74 * e, 108 * e, 89 * e, 116 * e, 90 * e),
       n.bezierCurveTo(123 * e, 92 * e, 130 * e, 93 * e, 131 * e, 94 * e),
       n.closePath(),
       se(n, void 0, t[2], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(82 * e, 63 * e),
       n.bezierCurveTo(91 * e, 64 * e, 96 * e, 62 * e, 98 * e, 53 * e),
       n.bezierCurveTo(91 * e, 45 * e, 85 * e, 42 * e, 78 * e, 41 * e),
       n.bezierCurveTo(81 * e, 51 * e, 82 * e, 57 * e, 82 * e, 63 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(148 * e, 40 * e),
       n.bezierCurveTo(140 * e, 52 * e, 131 * e, 51 * e, 123 * e, 43 * e),
       n.bezierCurveTo(123 * e, 25 * e, 129 * e, 17 * e, 134 * e, 12 * e),
       n.bezierCurveTo(138 * e, 35 * e, 142 * e, 31 * e, 148 * e, 40 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(189 * e, 43 * e),
       n.bezierCurveTo(191 * e, 54 * e, 196 * e, 58 * e, 205 * e, 59 * e),
       n.bezierCurveTo(211 * e, 42 * e, 214 * e, 37 * e, 216 * e, 31 * e),
       n.bezierCurveTo(202 * e, 34 * e, 195 * e, 39 * e, 190 * e, 43 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(216 * e, 98 * e),
       n.bezierCurveTo(219 * e, 105 * e, 225 * e, 107 * e, 230 * e, 109 * e),
       n.bezierCurveTo(227 * e, 113 * e, 221 * e, 115 * e, 215 * e, 115 * e),
       n.bezierCurveTo(208 * e, 109 * e, 211 * e, 101 * e, 216 * e, 98 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(180 * e, 85 * e),
       n.bezierCurveTo(193 * e, 86 * e, 196 * e, 98 * e, 191 * e, 108 * e),
       n.bezierCurveTo(179 * e, 112 * e, 167 * e, 113 * e, 155 * e, 111 * e),
       n.bezierCurveTo(169 * e, 100 * e, 176 * e, 96 * e, 180 * e, 85 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(96 * e, 114 * e),
       n.bezierCurveTo(102 * e, 109 * e, 112 * e, 110 * e, 114 * e, 118 * e),
       n.bezierCurveTo(111 * e, 134 * e, 102 * e, 143 * e, 95 * e, 147 * e),
       n.bezierCurveTo(98 * e, 123 * e, 97 * e, 119 * e, 96 * e, 115 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(79 * e, 92 * e),
       n.bezierCurveTo(86 * e, 95 * e, 89 * e, 102 * e, 83 * e, 111 * e),
       n.bezierCurveTo(70 * e, 110 * e, 61 * e, 107 * e, 54 * e, 100 * e),
       n.bezierCurveTo(70 * e, 97 * e, 70 * e, 95 * e, 78 * e, 92 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(39 * e, 130 * e),
       n.bezierCurveTo(37 * e, 141 * e, 41 * e, 143 * e, 48 * e, 144 * e),
       n.bezierCurveTo(54 * e, 134 * e, 55 * e, 131 * e, 56 * e, 123 * e),
       n.bezierCurveTo(47 * e, 129 * e, 43 * e, 129 * e, 39 * e, 129 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(113 * e, 189 * e),
       n.bezierCurveTo(119 * e, 201 * e, 127 * e, 198 * e, 134 * e, 192 * e),
       n.bezierCurveTo(128 * e, 175 * e, 128 * e, 173 * e, 128 * e, 165 * e),
       n.bezierCurveTo(117 * e, 176 * e, 116 * e, 182 * e, 113 * e, 187 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(74 * e, 154 * e),
       n.bezierCurveTo(76 * e, 163 * e, 76 * e, 170 * e, 75 * e, 177 * e),
       n.bezierCurveTo(68 * e, 179 * e, 66 * e, 176 * e, 63 * e, 171 * e),
       n.bezierCurveTo(69 * e, 164 * e, 72 * e, 159 * e, 74 * e, 154 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(206 * e, 152 * e),
       n.bezierCurveTo(198 * e, 158 * e, 198 * e, 166 * e, 201 * e, 171 * e),
       n.bezierCurveTo(209 * e, 170 * e, 221 * e, 170 * e, 226 * e, 172 * e),
       n.bezierCurveTo(219 * e, 159 * e, 210 * e, 155 * e, 207 * e, 153 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(181 * e, 184 * e),
       n.bezierCurveTo(170 * e, 184 * e, 167 * e, 187 * e, 163 * e, 195 * e),
       n.bezierCurveTo(171 * e, 207 * e, 183 * e, 214 * e, 191 * e, 217 * e),
       n.bezierCurveTo(183 * e, 204 * e, 184 * e, 196 * e, 181 * e, 184 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(66 * e, 199 * e),
       n.bezierCurveTo(73 * e, 197 * e, 78 * e, 199 * e, 79 * e, 206 * e),
       n.bezierCurveTo(71 * e, 216 * e, 67 * e, 221 * e, 57 * e, 223 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(182 * e, 143 * e),
       n.bezierCurveTo(183 * e, 146 * e, 183 * e, 149 * e, 179 * e, 152 * e),
       n.bezierCurveTo(174 * e, 146 * e, 174 * e, 146 * e, 169 * e, 140 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(32 * e, 159 * e),
       n.bezierCurveTo(45 * e, 160 * e, 48 * e, 164 * e, 45 * e, 175 * e),
       n.bezierCurveTo(28 * e, 183 * e, 25 * e, 184 * e, 19 * e, 184 * e),
       n.bezierCurveTo(30 * e, 170 * e, 29 * e, 164 * e, 31 * e, 160 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(110 * e, 214 * e),
       n.bezierCurveTo(106 * e, 212 * e, 104 * e, 213 * e, 102 * e, 218 * e),
       n.bezierCurveTo(104 * e, 220 * e, 107 * e, 222 * e, 110 * e, 224 * e),
       n.bezierCurveTo(110.5 * e, 219 * e, 110.5 * e, 219 * e, 111 * e, 214 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(40 * e, 52 * e),
       n.bezierCurveTo(41 * e, 57 * e, 40 * e, 61 * e, 34 * e, 60 * e),
       n.bezierCurveTo(31.5 * e, 55 * e, 31.5 * e, 55 * e, 29 * e, 50 * e),
       n.bezierCurveTo(34 * e, 50.5 * e, 34 * e, 50.5 * e, 39 * e, 51 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(31 * e, 81 * e),
       n.bezierCurveTo(37 * e, 84 * e, 38 * e, 90 * e, 34 * e, 99 * e),
       n.bezierCurveTo(23 * e, 97 * e, 19 * e, 96 * e, 16 * e, 93 * e),
       n.bezierCurveTo(24 * e, 88 * e, 28 * e, 85 * e, 30 * e, 81 * e),
       n.closePath(),
       se(n, t[4], t[5], 5 * e),
       r
   }
   function gn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 465 * e,
       r.height = 310 * e,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(126 * e, 192 * e),
       n.bezierCurveTo(198 * e, 202 * e, 245 * e, 203 * e, 335 * e, 194 * e),
       n.bezierCurveTo(336 * e, 232 * e, 326 * e, 235 * e, 232 * e, 237 * e),
       n.bezierCurveTo(161 * e, 235 * e, 122 * e, 235 * e, 126 * e, 193 * e),
       n.closePath(),
       se(n, t[0], t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(146 * e, 239 * e),
       n.bezierCurveTo(174 * e, 74 * e, 287 * e, 88 * e, 320 * e, 240 * e),
       n.bezierCurveTo(329 * e, 231 * e, 340 * e, 219 * e, 332 * e, 115 * e),
       n.bezierCurveTo(330 * e, 40 * e, 144 * e, 30 * e, 129 * e, 116 * e),
       n.bezierCurveTo(124 * e, 217 * e, 124 * e, 228 * e, 143 * e, 237 * e),
       n.closePath(),
       se(n, t[0], t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(126 * e, 193 * e),
       n.bezierCurveTo(173 * e, 94 * e, 209 * e, 100 * e, 228 * e, 57 * e),
       n.bezierCurveTo(190 * e, 112 * e, 165 * e, 115 * e, 127 * e, 184 * e),
       n.closePath(),
       se(n, void 0, t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(230 * e, 57 * e),
       n.bezierCurveTo(266 * e, 117 * e, 310 * e, 130 * e, 332 * e, 183 * e),
       n.bezierCurveTo(290 * e, 112 * e, 262 * e, 109 * e, 230 * e, 56 * e),
       n.closePath(),
       se(n, void 0, t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(154 * e, 212 * e),
       n.bezierCurveTo(208 * e, 224 * e, 252 * e, 219 * e, 305 * e, 212 * e),
       n.bezierCurveTo(267 * e, 219 * e, 204 * e, 222 * e, 155 * e, 212 * e),
       n.closePath(),
       se(n, void 0, t[1], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(239 * e, 59 * e),
       n.bezierCurveTo(302 * e, 72 * e, 325 * e, 84 * e, 326 * e, 115 * e),
       n.bezierCurveTo(289 * e, 80 * e, 270 * e, 88 * e, 253 * e, 78 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(216 * e, 61 * e),
       n.bezierCurveTo(209 * e, 70 * e, 209 * e, 70 * e, 202 * e, 79 * e),
       n.bezierCurveTo(173 * e, 87 * e, 162 * e, 91 * e, 137 * e, 107 * e),
       n.bezierCurveTo(153 * e, 78 * e, 174 * e, 67 * e, 212 * e, 62 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(175 * e, 125 * e),
       n.bezierCurveTo(218 * e, 94 * e, 238 * e, 90 * e, 281 * e, 125 * e),
       n.bezierCurveTo(245 * e, 89 * e, 240 * e, 80 * e, 228 * e, 67 * e),
       n.bezierCurveTo(207 * e, 100 * e, 192 * e, 104 * e, 177 * e, 123 * e),
       n.closePath(),
       se(n, t[2]),
       r
   }
   function bn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 465 * e,
       r.height = 405 * e,
       n.globalAlpha = 1,
       n.translate(6 * e, 0 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(39.000030517578125 * e, 162.03977966308594 * e),
       n.bezierCurveTo(125.00003051757812 * e, 84.03977966308594 * e, 108.50003051757812 * e, 115.03977966308594 * e, 178.00003051757812 * e, 68.03977966308594 * e),
       n.bezierCurveTo(299.0000305175781 * e, 146.53977966308594 * e, 299.0000305175781 * e, 146.53977966308594 * e, 420.0000305175781 * e, 225.03977966308594 * e),
       n.bezierCurveTo(400.0000305175781 * e, 288.53977966308594 * e, 400.0000305175781 * e, 288.53977966308594 * e, 380.0000305175781 * e, 352.03977966308594 * e),
       n.bezierCurveTo(216.50003051757812 * e, 345.53977966308594 * e, 216.50003051757812 * e, 345.53977966308594 * e, 53.000030517578125 * e, 339.03977966308594 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(23.000030517578125 * e, 306.94886779785156 * e),
       n.bezierCurveTo(5.000030517578125 * e, 275.94886779785156 * e, 6.000030517578125 * e, 201.94886779785156 * e, 14.000030517578125 * e, 150.94886779785156 * e),
       n.bezierCurveTo(40.000030517578125 * e, 34.94886779785156 * e, 157.00003051757812 * e, 14.948867797851562 * e, 199.00003051757812 * e, 11.948867797851562 * e),
       n.bezierCurveTo(331.0000305175781 * e, .9488677978515625 * e, 409.0000305175781 * e, 61.94886779785156 * e, 428.0000305175781 * e, 133.94886779785156 * e),
       n.bezierCurveTo(445.0000305175781 * e, 207.94886779785156 * e, 439.0000305175781 * e, 274.94886779785156 * e, 426.0000305175781 * e, 342.94886779785156 * e),
       n.bezierCurveTo(355.0000305175781 * e, 207.94886779785156 * e, 345.0000305175781 * e, 208.94886779785156 * e, 333.0000305175781 * e, 202.94886779785156 * e),
       n.bezierCurveTo(262.0000305175781 * e, 143.94886779785156 * e, 236.00003051757812 * e, 148.94886779785156 * e, 189.00003051757812 * e, 162.94886779785156 * e),
       n.bezierCurveTo(82.00003051757812 * e, 190.94886779785156 * e, 78.00003051757812 * e, 235.94886779785156 * e, 62.000030517578125 * e, 279.94886779785156 * e),
       n.closePath(),
       se(n, t[0], t[1], 20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(17.000030517578125 * e, 149.94886779785156 * e),
       n.bezierCurveTo(76.00003051757812 * e, 67.94886779785156 * e, 177.00003051757812 * e, 40.94886779785156 * e, 232.00003051757812 * e, 45.94886779785156 * e),
       n.bezierCurveTo(316.0000305175781 * e, 46.94886779785156 * e, 359.0000305175781 * e, 74.94886779785156 * e, 428.0000305175781 * e, 145.94886779785156 * e),
       n.bezierCurveTo(414.0000305175781 * e, 73.94886779785156 * e, 386.0000305175781 * e, 68.94886779785156 * e, 359.0000305175781 * e, 43.94886779785156 * e),
       n.bezierCurveTo(295.0000305175781 * e, 5.9488677978515625 * e, 239.00003051757812 * e, 10.948867797851562 * e, 207.00003051757812 * e, 10.948867797851562 * e),
       n.bezierCurveTo(121.00003051757812 * e, 20.948867797851562 * e, 104.00003051757812 * e, 34.94886779785156 * e, 45.000030517578125 * e, 84.94886779785156 * e),
       n.bezierCurveTo(14.000030517578125 * e, 128.94886779785156 * e, 18.000030517578125 * e, 142.94886779785156 * e, 16.000030517578125 * e, 151.94886779785156 * e),
       n.closePath(),
       se(n, t[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(23.000030517578125 * e, 306.94886779785156 * e),
       n.bezierCurveTo(5.000030517578125 * e, 275.94886779785156 * e, 6.000030517578125 * e, 201.94886779785156 * e, 14.000030517578125 * e, 150.94886779785156 * e),
       n.bezierCurveTo(40.000030517578125 * e, 34.94886779785156 * e, 157.00003051757812 * e, 14.948867797851562 * e, 199.00003051757812 * e, 11.948867797851562 * e),
       n.bezierCurveTo(331.0000305175781 * e, .9488677978515625 * e, 409.0000305175781 * e, 61.94886779785156 * e, 428.0000305175781 * e, 133.94886779785156 * e),
       n.bezierCurveTo(445.0000305175781 * e, 207.94886779785156 * e, 439.0000305175781 * e, 274.94886779785156 * e, 426.0000305175781 * e, 342.94886779785156 * e),
       n.bezierCurveTo(355.0000305175781 * e, 207.94886779785156 * e, 345.0000305175781 * e, 208.94886779785156 * e, 333.0000305175781 * e, 202.94886779785156 * e),
       n.bezierCurveTo(262.0000305175781 * e, 143.94886779785156 * e, 236.00003051757812 * e, 148.94886779785156 * e, 189.00003051757812 * e, 162.94886779785156 * e),
       n.bezierCurveTo(82.00003051757812 * e, 190.94886779785156 * e, 78.00003051757812 * e, 235.94886779785156 * e, 62.000030517578125 * e, 279.94886779785156 * e),
       n.closePath(),
       se(n, void 0, t[1], 16 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(60.000030517578125 * e, 288.03977966308594 * e),
       n.bezierCurveTo(183.00003051757812 * e, 320.03977966308594 * e, 342.0000305175781 * e, 306.03977966308594 * e, 399.0000305175781 * e, 286.03977966308594 * e),
       n.bezierCurveTo(420.0000305175781 * e, 345.03977966308594 * e, 410.0000305175781 * e, 335.03977966308594 * e, 415.0000305175781 * e, 362.03977966308594 * e),
       n.bezierCurveTo(351.0000305175781 * e, 384.03977966308594 * e, 299.0000305175781 * e, 389.03977966308594 * e, 215.00003051757812 * e, 391.03977966308594 * e),
       n.bezierCurveTo(128.00003051757812 * e, 388.03977966308594 * e, 69.00003051757812 * e, 373.03977966308594 * e, 39.000030517578125 * e, 359.03977966308594 * e),
       n.closePath(),
       se(n, t[0], t[1], 13 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(47.000030517578125 * e, 327.03977966308594 * e),
       n.bezierCurveTo(203.00003051757812 * e, 377.03977966308594 * e, 331.0000305175781 * e, 349.03977966308594 * e, 410.0000305175781 * e, 330.03977966308594 * e),
       n.closePath(),
       se(n, t[0], t[1], 20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(9.000030517578125 * e, 339.1306915283203 * e),
       n.bezierCurveTo(2.000030517578125 * e, 280.1306915283203 * e, 30.000030517578125 * e, 219.1306915283203 * e, 85.00003051757812 * e, 167.1306915283203 * e),
       n.bezierCurveTo(174.00003051757812 * e, 82.13069152832031 * e, 241.00003051757812 * e, 101.13069152832031 * e, 284.0000305175781 * e, 115.13069152832031 * e),
       n.bezierCurveTo(333.0000305175781 * e, 134.1306915283203 * e, 376.0000305175781 * e, 177.1306915283203 * e, 410.0000305175781 * e, 247.1306915283203 * e),
       n.bezierCurveTo(439.0000305175781 * e, 300.1306915283203 * e, 442.0000305175781 * e, 346.1306915283203 * e, 430.0000305175781 * e, 363.1306915283203 * e),
       n.bezierCurveTo(418.0000305175781 * e, 366.1306915283203 * e, 395.0000305175781 * e, 295.1306915283203 * e, 355.0000305175781 * e, 223.1306915283203 * e),
       n.bezierCurveTo(299.0000305175781 * e, 156.1306915283203 * e, 262.0000305175781 * e, 155.1306915283203 * e, 215.00003051757812 * e, 159.1306915283203 * e),
       n.bezierCurveTo(133.00003051757812 * e, 171.1306915283203 * e, 120.00003051757812 * e, 193.1306915283203 * e, 96.00003051757812 * e, 221.1306915283203 * e),
       n.bezierCurveTo(49.000030517578125 * e, 262.1306915283203 * e, 47.000030517578125 * e, 306.1306915283203 * e, 38.000030517578125 * e, 336.1306915283203 * e),
       n.bezierCurveTo(30.000030517578125 * e, 349.1306915283203 * e, 30.000030517578125 * e, 349.1306915283203 * e, 22.000030517578125 * e, 362.1306915283203 * e),
       n.closePath(),
       se(n, t[2], t[1], 20 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(228.00003051757812 * e, 128.03977966308594 * e),
       n.bezierCurveTo(315.0000305175781 * e, 131.03977966308594 * e, 349.0000305175781 * e, 178.03977966308594 * e, 386.0000305175781 * e, 234.03977966308594 * e),
       n.bezierCurveTo(444.0000305175781 * e, 329.03977966308594 * e, 446.0000305175781 * e, 354.03977966308594 * e, 427.0000305175781 * e, 373.03977966308594 * e),
       n.bezierCurveTo(389.0000305175781 * e, 389.03977966308594 * e, 399.0000305175781 * e, 329.03977966308594 * e, 361.0000305175781 * e, 277.03977966308594 * e),
       n.bezierCurveTo(306.0000305175781 * e, 191.03977966308594 * e, 266.0000305175781 * e, 183.03977966308594 * e, 220.00003051757812 * e, 181.03977966308594 * e),
       n.bezierCurveTo(138.00003051757812 * e, 184.03977966308594 * e, 123.00003051757812 * e, 212.03977966308594 * e, 89.00003051757812 * e, 271.03977966308594 * e),
       n.bezierCurveTo(52.000030517578125 * e, 349.03977966308594 * e, 68.00003051757812 * e, 364.03977966308594 * e, 33.000030517578125 * e, 369.03977966308594 * e),
       n.bezierCurveTo(6.000030517578125 * e, 366.03977966308594 * e, 5.000030517578125 * e, 341.03977966308594 * e, 26.000030517578125 * e, 288.03977966308594 * e),
       n.bezierCurveTo(60.000030517578125 * e, 207.03977966308594 * e, 100.00003051757812 * e, 180.03977966308594 * e, 113.00003051757812 * e, 170.03977966308594 * e),
       n.bezierCurveTo(159.00003051757812 * e, 132.03977966308594 * e, 196.00003051757812 * e, 133.03977966308594 * e, 226.00003051757812 * e, 129.03977966308594 * e),
       n.closePath(),
       se(n, t[0], t[1], 20 * e),
       r
   }
   function On(e, i, t, r) {
       var n = document.createElement("canvas")
         , o = n.getContext("2d");
       return n.width = 198 * e,
       n.height = 147 * e,
       o.globalAlpha = i ? .5 : 1,
       o.translate(0, 6 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(44 * e, 76 * e),
       o.bezierCurveTo(50 * e, 82 * e, 50 * e, 82 * e, 56 * e, 88 * e),
       o.bezierCurveTo(59 * e, 82 * e, 59 * e, 82 * e, 62 * e, 76 * e),
       o.bezierCurveTo(59 * e, 71 * e, 59 * e, 71 * e, 56 * e, 66 * e),
       o.bezierCurveTo(59 * e, 69 * e, 59 * e, 69 * e, 62 * e, 72 * e),
       o.bezierCurveTo(80 * e, 48 * e, 102 * e, 50 * e, 120 * e, 62 * e),
       o.bezierCurveTo(127 * e, 58 * e, 127 * e, 58 * e, 134 * e, 54 * e),
       o.bezierCurveTo(129 * e, 60 * e, 129 * e, 60 * e, 124 * e, 66 * e),
       o.bezierCurveTo(129 * e, 73 * e, 129 * e, 73 * e, 134 * e, 80 * e),
       o.bezierCurveTo(140 * e, 74 * e, 140 * e, 74 * e, 146 * e, 68 * e),
       o.bezierCurveTo(142 * e, 76 * e, 142 * e, 76 * e, 138 * e, 84 * e),
       o.bezierCurveTo(144 * e, 90 * e, 142 * e, 90 * e, 144 * e, 90 * e),
       o.bezierCurveTo(136 * e, 97 * e, 136 * e, 97 * e, 128 * e, 104 * e),
       o.bezierCurveTo(154 * e, 110 * e, 164 * e, 90 * e, 160 * e, 80 * e),
       o.bezierCurveTo(138 * e, 22 * e, 148 * e, 51 * e, 136 * e, 22 * e),
       o.bezierCurveTo(97 * e, 24 * e, 97 * e, 24 * e, 58 * e, 26 * e),
       o.bezierCurveTo(47 * e, 54 * e, 36 * e, 80 * e, 36 * e, 82 * e),
       o.bezierCurveTo(40 * e, 108 * e, 54 * e, 104 * e, 62 * e, 104 * e),
       o.bezierCurveTo(46 * e, 92 * e, 54 * e, 97 * e, 46 * e, 90 * e),
       o.closePath(),
       se(o, t[0]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(36 * e, 80 * e),
       o.bezierCurveTo(30 * e, 84 * e, 28 * e, 92 * e, 34 * e, 100 * e),
       o.bezierCurveTo(41.5 * e, 102 * e, 41.5 * e, 102 * e, 49 * e, 104 * e),
       o.bezierCurveTo(43 * e, 105.5 * e, 43 * e, 105.5 * e, 37 * e, 107 * e),
       o.bezierCurveTo(46 * e, 111 * e, 60 * e, 114 * e, 76 * e, 114 * e),
       o.bezierCurveTo(78 * e, 110.5 * e, 78 * e, 110.5 * e, 80 * e, 107 * e),
       o.bezierCurveTo(81 * e, 110.5 * e, 81 * e, 110.5 * e, 82 * e, 114 * e),
       o.bezierCurveTo(94.5 * e, 113.5 * e, 94.5 * e, 113.5 * e, 107 * e, 113 * e),
       o.bezierCurveTo(108.5 * e, 110 * e, 108.5 * e, 110 * e, 110 * e, 107 * e),
       o.bezierCurveTo(111.5 * e, 110.5 * e, 111.5 * e, 110.5 * e, 113 * e, 114 * e),
       o.bezierCurveTo(131 * e, 112.5 * e, 131 * e, 112.5 * e, 149 * e, 111 * e),
       o.bezierCurveTo(148.5 * e, 107.5 * e, 148.5 * e, 107.5 * e, 148 * e, 104 * e),
       o.bezierCurveTo(150.5 * e, 107 * e, 150.5 * e, 107 * e, 153 * e, 110 * e),
       o.bezierCurveTo(155.5 * e, 108.5 * e, 155.5 * e, 108.5 * e, 158 * e, 107 * e),
       o.bezierCurveTo(156.5 * e, 104 * e, 156.5 * e, 104 * e, 155 * e, 101 * e),
       o.bezierCurveTo(158.5 * e, 102.5 * e, 158.5 * e, 102.5 * e, 162 * e, 104 * e),
       o.bezierCurveTo(168 * e, 100 * e, 170 * e, 92 * e, 169 * e, 85 * e),
       o.bezierCurveTo(166 * e, 86 * e, 166 * e, 86 * e, 163 * e, 87 * e),
       o.bezierCurveTo(165.5 * e, 83 * e, 165.5 * e, 83 * e, 168 * e, 79 * e),
       o.bezierCurveTo(165.5 * e, 76.5 * e, 165.5 * e, 76.5 * e, 163 * e, 74 * e),
       o.bezierCurveTo(155 * e, 82.5 * e, 155 * e, 82.5 * e, 147 * e, 91 * e),
       o.bezierCurveTo(139 * e, 95.5 * e, 139 * e, 95.5 * e, 131 * e, 100 * e),
       o.bezierCurveTo(97.5 * e, 100.5 * e, 97.5 * e, 100.5 * e, 64 * e, 101 * e),
       o.bezierCurveTo(49 * e, 102 * e, 43 * e, 90 * e, 36 * e, 80 * e),
       o.closePath(),
       se(o, t[0]),
       o.globalAlpha = 1,
       o.translate(0, -6 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(36 * e, 80 * e),
       o.bezierCurveTo(30 * e, 84 * e, 28 * e, 92 * e, 34 * e, 100 * e),
       o.bezierCurveTo(41.5 * e, 102 * e, 41.5 * e, 102 * e, 49 * e, 104 * e),
       o.bezierCurveTo(43 * e, 105.5 * e, 43 * e, 105.5 * e, 37 * e, 107 * e),
       o.bezierCurveTo(46 * e, 111 * e, 60 * e, 114 * e, 76 * e, 114 * e),
       o.bezierCurveTo(78 * e, 110.5 * e, 78 * e, 110.5 * e, 80 * e, 107 * e),
       o.bezierCurveTo(81 * e, 110.5 * e, 81 * e, 110.5 * e, 82 * e, 114 * e),
       o.bezierCurveTo(94.5 * e, 113.5 * e, 94.5 * e, 113.5 * e, 107 * e, 113 * e),
       o.bezierCurveTo(108.5 * e, 110 * e, 108.5 * e, 110 * e, 110 * e, 107 * e),
       o.bezierCurveTo(111.5 * e, 110.5 * e, 111.5 * e, 110.5 * e, 113 * e, 114 * e),
       o.bezierCurveTo(131 * e, 112.5 * e, 131 * e, 112.5 * e, 149 * e, 111 * e),
       o.bezierCurveTo(148.5 * e, 107.5 * e, 148.5 * e, 107.5 * e, 148 * e, 104 * e),
       o.bezierCurveTo(150.5 * e, 107 * e, 150.5 * e, 107 * e, 153 * e, 110 * e),
       o.bezierCurveTo(155.5 * e, 108.5 * e, 155.5 * e, 108.5 * e, 158 * e, 107 * e),
       o.bezierCurveTo(156.5 * e, 104 * e, 156.5 * e, 104 * e, 155 * e, 101 * e),
       o.bezierCurveTo(158.5 * e, 102.5 * e, 158.5 * e, 102.5 * e, 162 * e, 104 * e),
       o.bezierCurveTo(168 * e, 100 * e, 170 * e, 92 * e, 169 * e, 85 * e),
       o.bezierCurveTo(166 * e, 86 * e, 166 * e, 86 * e, 163 * e, 87 * e),
       o.bezierCurveTo(165.5 * e, 83 * e, 165.5 * e, 83 * e, 168 * e, 79 * e),
       o.bezierCurveTo(165.5 * e, 76.5 * e, 165.5 * e, 76.5 * e, 163 * e, 74 * e),
       o.bezierCurveTo(155 * e, 82.5 * e, 155 * e, 82.5 * e, 147 * e, 91 * e),
       o.bezierCurveTo(139 * e, 95.5 * e, 139 * e, 95.5 * e, 131 * e, 100 * e),
       o.bezierCurveTo(97.5 * e, 100.5 * e, 97.5 * e, 100.5 * e, 64 * e, 101 * e),
       o.bezierCurveTo(49 * e, 102 * e, 43 * e, 90 * e, 36 * e, 80 * e),
       o.closePath(),
       se(o, t[1], t[2], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(49 * e, 98 * e),
       o.bezierCurveTo(96.5 * e, 98 * e, 96.5 * e, 98 * e, 144 * e, 98 * e),
       o.bezierCurveTo(136.5 * e, 102 * e, 136.5 * e, 102 * e, 129 * e, 106 * e),
       o.bezierCurveTo(103 * e, 105.5 * e, 103 * e, 105.5 * e, 77 * e, 105 * e),
       o.bezierCurveTo(65 * e, 105 * e, 65 * e, 105 * e, 53 * e, 105 * e),
       o.closePath(),
       se(o, t[1]),
       o.globalAlpha = .5,
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(54 * e, 98 * e),
       o.bezierCurveTo(97 * e, 98 * e, 97 * e, 98 * e, 140 * e, 98 * e),
       o.bezierCurveTo(134 * e, 101 * e, 134 * e, 101 * e, 128 * e, 104 * e),
       o.bezierCurveTo(92 * e, 104 * e, 92 * e, 104 * e, 56 * e, 104 * e),
       o.closePath(),
       se(o, t[0]),
       o.globalAlpha = 1,
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(118 * e, 47 * e),
       o.bezierCurveTo(124.5 * e, 43.5 * e, 124.5 * e, 43.5 * e, 131 * e, 40 * e),
       o.bezierCurveTo(128 * e, 46 * e, 128 * e, 46 * e, 125 * e, 52 * e),
       o.bezierCurveTo(131 * e, 57 * e, 135 * e, 64 * e, 139 * e, 73 * e),
       o.bezierCurveTo(142.5 * e, 69.5 * e, 142.5 * e, 69.5 * e, 146 * e, 66 * e),
       o.bezierCurveTo(143.5 * e, 72.5 * e, 143.5 * e, 72.5 * e, 141 * e, 79 * e),
       o.bezierCurveTo(142 * e, 91 * e, 141 * e, 94 * e, 132 * e, 98 * e),
       o.bezierCurveTo(117 * e, 102 * e, 126 * e, 108 * e, 142 * e, 102 * e),
       o.bezierCurveTo(159 * e, 98 * e, 164 * e, 80 * e, 162 * e, 47 * e),
       o.bezierCurveTo(160 * e, 19 * e, 150 * e, 6 * e, 117 * e, 4 * e),
       o.bezierCurveTo(44 * e, 0 * e, 35 * e, 20 * e, 33 * e, 37 * e),
       o.bezierCurveTo(29 * e, 69 * e, 33 * e, 88 * e, 44 * e, 96 * e),
       o.bezierCurveTo(64 * e, 107 * e, 70 * e, 102 * e, 54 * e, 93 * e),
       o.bezierCurveTo(49 * e, 88 * e, 50 * e, 82 * e, 53 * e, 77 * e),
       o.bezierCurveTo(51.5 * e, 71 * e, 51.5 * e, 71 * e, 50 * e, 65 * e),
       o.bezierCurveTo(53 * e, 68.5 * e, 53 * e, 68.5 * e, 56 * e, 72 * e),
       o.bezierCurveTo(59 * e, 67.5 * e, 59 * e, 67.5 * e, 62 * e, 63 * e),
       o.bezierCurveTo(60.5 * e, 59.5 * e, 60.5 * e, 59.5 * e, 59 * e, 56 * e),
       o.bezierCurveTo(62 * e, 57 * e, 62 * e, 57 * e, 65 * e, 58 * e),
       o.bezierCurveTo(78 * e, 35 * e, 103 * e, 36 * e, 117 * e, 47 * e),
       o.closePath(),
       se(o, t[1], t[2], 6 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(62 * e, 21 * e),
       o.bezierCurveTo(63 * e, 34 * e, 64 * e, 37 * e, 66 * e, 40 * e),
       o.bezierCurveTo(54 * e, 49 * e, 53 * e, 51 * e, 48 * e, 58 * e),
       o.bezierCurveTo(44 * e, 51 * e, 42 * e, 43 * e, 40 * e, 36 * e),
       o.bezierCurveTo(47 * e, 28 * e, 52 * e, 25 * e, 61 * e, 21 * e),
       o.closePath(),
       se(o, t[4]),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(60 * e, 29 * e),
       o.bezierCurveTo(62 * e, 25 * e, 65 * e, 24 * e, 70 * e, 23 * e),
       se(o, void 0, t[3], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(61 * e, 37 * e),
       o.bezierCurveTo(63 * e, 32 * e, 66 * e, 32 * e, 71 * e, 32 * e),
       se(o, void 0, t[3], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(52 * e, 31 * e),
       o.bezierCurveTo(50 * e, 26 * e, 50 * e, 25 * e, 51 * e, 23 * e),
       se(o, void 0, t[3], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(46 * e, 35 * e),
       o.bezierCurveTo(44 * e, 31 * e, 43 * e, 29 * e, 45 * e, 26 * e),
       se(o, void 0, t[3], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(58 * e, 44 * e),
       o.bezierCurveTo(57 * e, 48 * e, 57 * e, 50 * e, 60 * e, 52 * e),
       se(o, void 0, t[3], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(53 * e, 48 * e),
       o.bezierCurveTo(52 * e, 52 * e, 52 * e, 54 * e, 55 * e, 57 * e),
       se(o, void 0, t[3], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(46 * e, 41 * e),
       o.bezierCurveTo(41 * e, 42 * e, 39 * e, 45 * e, 38 * e, 48 * e),
       se(o, void 0, t[3], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(48 * e, 48 * e),
       o.bezierCurveTo(42 * e, 51 * e, 42 * e, 53 * e, 40 * e, 55 * e),
       se(o, void 0, t[3], 4 * e),
       0 == r ? (o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(99 * e, 101 * e),
       o.bezierCurveTo(118.6666259765625 * e, 104.33331298828125 * e, 124.6666259765625 * e, 116.33331298828125 * e, 112.6666259765625 * e, 114.33331298828125 * e),
       o.bezierCurveTo(104.6666259765625 * e, 112.33331298828125 * e, 100.6666259765625 * e, 105.33331298828125 * e, 99.6666259765625 * e, 101.33331298828125 * e),
       se(o, void 0, t[5], 6 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(97.6666259765625 * e, 101.33331298828125 * e),
       o.bezierCurveTo(81.6666259765625 * e, 106.33331298828125 * e, 79.6666259765625 * e, 114.33331298828125 * e, 89.6666259765625 * e, 114.33331298828125 * e),
       o.bezierCurveTo(95.6666259765625 * e, 111.33331298828125 * e, 95.6666259765625 * e, 109.33331298828125 * e, 98.6666259765625 * e, 102.33331298828125 * e),
       se(o, void 0, t[5], 6 * e)) : (o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(103 * e, 100.39999389648438 * e),
       o.bezierCurveTo(120 * e, 106.39999389648438 * e, 118 * e, 107.39999389648438 * e, 120 * e, 111.39999389648438 * e),
       se(o, void 0, t[5], 6 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(103 * e, 100.39999389648438 * e),
       o.bezierCurveTo(90 * e, 103.39999389648438 * e, 89 * e, 106.39999389648438 * e, 87 * e, 112.39999389648438 * e),
       se(o, void 0, t[5], 6 * e),
       Ee(o, 86 * e, 114.39999389648438 * e, 4.5 * e),
       se(o, t[1], t[5], 6 * e),
       Ee(o, 121 * e, 114.39999389648438 * e, 4.5 * e),
       se(o, t[1], t[5], 6 * e)),
       n
   }
   function pn(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 253 * e,
       t.height = 192 * e,
       r.globalAlpha = .5,
       r.save(),
       r.translate(42 * e, 99 * e),
       r.globalAlpha = .5,
       Te(r, -7 * e, -20 * e, 14 * e, 39 * e, 20 * e),
       r.restore(),
       se(r, i[0]),
       r.globalAlpha = 1,
       r.save(),
       r.translate(37 * e, 94 * e),
       Te(r, -7 * e, -20 * e, 14 * e, 37 * e, 20 * e),
       r.restore(),
       se(r, i[2]),
       r.globalAlpha = .5,
       r.save(),
       r.translate(136 * e, 99 * e),
       r.globalAlpha = .5,
       Te(r, -84 * e, -67 * e, 168 * e, 134 * e, 20 * e),
       r.restore(),
       se(r, i[0], i[0], 13 * e),
       r.globalAlpha = 1,
       r.save(),
       r.translate(131 * e, 94 * e),
       Te(r, -84 * e, -67 * e, 168 * e, 134 * e, 20 * e),
       r.restore(),
       se(r, i[2], i[2], 13 * e),
       r.save(),
       r.translate(131 * e, 94 * e),
       Te(r, -76 * e, -61 * e, 152 * e, 122 * e, 20 * e),
       r.restore(),
       se(r, i[3], i[1], 8 * e),
       r.save(),
       r.translate(168.5 * e, 93.5 * e),
       Te(r, -30.5 * e, -58.5 * e, 61 * e, 117 * e, 20 * e),
       r.restore(),
       se(r, i[3], i[4], 6 * e),
       r.save(),
       r.translate(93.5 * e, 95.5 * e),
       Te(r, -32 * e, -59.5 * e, 59 * e, 119 * e, 20 * e),
       r.restore(),
       se(r, i[3], i[4], 6 * e),
       r.save(),
       r.translate(130.5 * e, 94 * e),
       Te(r, -36 * e, -67 * e, 73 * e, 134 * e, 20 * e),
       r.restore(),
       se(r, i[3], i[2], 8 * e),
       r.globalAlpha = .5,
       r.save(),
       r.translate(133 * e, 97 * e),
       Te(r, -83 * e, -12 * e, 160 * e, 24 * e, 0 * e),
       r.restore(),
       se(r, i[0]),
       r.globalAlpha = 1,
       r.save(),
       r.translate(133 * e, 92 * e),
       Te(r, -83 * e, -12 * e, 160 * e, 24 * e, 0 * e),
       r.restore(),
       se(r, i[2]),
       r.globalAlpha = .5,
       r.save(),
       r.translate(228 * e, 99.5 * e),
       r.globalAlpha = .5,
       Te(r, -5 * e, -18.5 * e, 10 * e, 37 * e, 20 * e),
       r.restore(),
       se(r, i[0]),
       r.globalAlpha = 1,
       r.save(),
       r.translate(223 * e, 94.5 * e),
       Te(r, -5 * e, -18.5 * e, 10 * e, 37 * e, 20 * e),
       r.restore(),
       se(r, i[2]),
       r.save(),
       r.translate(133.5 * e, 175.5 * e),
       r.globalAlpha = .5,
       Te(r, -22.5 * e, -6.5 * e, 45 * e, 13 * e, 20 * e),
       r.restore(),
       se(r, i[0]),
       r.globalAlpha = 1,
       r.save(),
       r.translate(128.5 * e, 170.5 * e),
       Te(r, -22.5 * e, -6.5 * e, 45 * e, 13 * e, 20 * e),
       r.restore(),
       se(r, i[2]),
       t
   }
   function cn(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 253 * e,
       t.height = 192 * e,
       r.save(),
       r.translate(37 * e, 94 * e),
       Te(r, -7 * e, -20 * e, 14 * e, 37 * e, 20 * e),
       r.restore(),
       se(r, i[0]),
       r.save(),
       r.translate(131 * e, 94 * e),
       Te(r, -84 * e, -67 * e, 168 * e, 134 * e, 20 * e),
       r.restore(),
       se(r, i[0], i[0], 13 * e),
       r.save(),
       r.translate(223 * e, 94.5 * e),
       Te(r, -5 * e, -18.5 * e, 10 * e, 37 * e, 20 * e),
       r.restore(),
       se(r, i[0]),
       r.save(),
       r.translate(128.5 * e, 170.5 * e),
       Te(r, -22.5 * e, -6.5 * e, 45 * e, 13 * e, 20 * e),
       r.restore(),
       se(r, i[0]),
       t
   }
   function vn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 316 * e,
       r.height = 365 * e,
       n.save(),
       n.translate(156.07142639160156 * e, 51.81248474121094 * e),
       n.rotate(0),
       Te(n, -21.5 * e, -34 * e, 43 * e, 68 * e, 8 * e),
       n.restore(),
       se(n, t[1], t[2], 15 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(110.57142639160156 * e, 197.09820556640625 * e),
       n.bezierCurveTo(158.07142639160156 * e, 179.09820556640625 * e, 158.07142639160156 * e, 179.09820556640625 * e, 205.57142639160156 * e, 161.09820556640625 * e),
       n.bezierCurveTo(205.57142639160156 * e, 235.45535278320312 * e, 205.57142639160156 * e, 235.45535278320312 * e, 205.57142639160156 * e, 309.8125 * e),
       n.bezierCurveTo(205.57142639160156 * e, 323.8125 * e, 200.57142639160156 * e, 325.8125 * e, 187.57142639160156 * e, 326.8125 * e),
       n.bezierCurveTo(155.57142639160156 * e, 326.3125 * e, 155.57142639160156 * e, 326.3125 * e, 123.57142639160156 * e, 325.8125 * e),
       n.bezierCurveTo(111.57142639160156 * e, 326.8125 * e, 109.57142639160156 * e, 321.8125 * e, 110.57142639160156 * e, 312.8125 * e),
       n.closePath(),
       se(n, t[3], t[4], 15 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(126.57142639160156 * e, 67.38392639160156 * e),
       n.bezierCurveTo(126.57142639160156 * e, 57.38392639160156 * e, 132.57142639160156 * e, 54.38392639160156 * e, 140.57142639160156 * e, 54.38392639160156 * e),
       n.bezierCurveTo(177.57142639160156 * e, 55.38392639160156 * e, 158.07142639160156 * e, 54.38392639160156 * e, 175.57142639160156 * e, 54.38392639160156 * e),
       n.bezierCurveTo(185.57142639160156 * e, 56.38392639160156 * e, 185.57142639160156 * e, 57.38392639160156 * e, 184.57142639160156 * e, 66.38392639160156 * e),
       n.bezierCurveTo(184.57142639160156 * e, 78.38392639160156 * e, 184.57142639160156 * e, 89.38392639160156 * e, 184.57142639160156 * e, 90.38392639160156 * e),
       n.bezierCurveTo(177.57142639160156 * e, 107.38392639160156 * e, 180.57142639160156 * e, 112.38392639160156 * e, 189.57142639160156 * e, 116.38392639160156 * e),
       n.bezierCurveTo(212.57142639160156 * e, 127.38392639160156 * e, 212.57142639160156 * e, 132.38392639160156 * e, 211.57142639160156 * e, 150.38392639160156 * e),
       n.bezierCurveTo(211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 304.81249618530273 * e),
       n.bezierCurveTo(212.57142639160156 * e, 328.81249618530273 * e, 209.57142639160156 * e, 330.81249618530273 * e, 188.57142639160156 * e, 333.81249618530273 * e),
       n.bezierCurveTo(155.07142639160156 * e, 333.31249618530273 * e, 155.07142639160156 * e, 333.31249618530273 * e, 121.57142639160156 * e, 332.81249618530273 * e),
       n.bezierCurveTo(104.57142639160156 * e, 327.81249618530273 * e, 105.57142639160156 * e, 328.81249618530273 * e, 104.57142639160156 * e, 312.81249618530273 * e),
       n.bezierCurveTo(104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 143.52678298950195 * e),
       n.bezierCurveTo(106.57142639160156 * e, 124.52678298950195 * e, 110.57142639160156 * e, 123.52678298950195 * e, 123.57142639160156 * e, 116.52678298950195 * e),
       n.bezierCurveTo(136.57142639160156 * e, 110.52678298950195 * e, 130.57142639160156 * e, 106.52678298950195 * e, 126.57142639160156 * e, 98.52678298950195 * e),
       n.closePath(),
       se(n, void 0, t[5], 15 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(125.57142639160156 * e, 156.66963958740234 * e),
       n.bezierCurveTo(125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 208.66963958740234 * e),
       n.closePath(),
       se(n, void 0, t[6], 15 * e),
       r
   }
   function Pn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 316 * e,
       r.height = 365 * e,
       n.save(),
       n.translate(156.07142639160156 * e, 51.81248474121094 * e),
       n.rotate(0),
       Te(n, -21.5 * e, -34 * e, 43 * e, 68 * e, 8 * e),
       n.restore(),
       se(n, t[1], t[2], 15 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(126.57142639160156 * e, 67.38392639160156 * e),
       n.bezierCurveTo(126.57142639160156 * e, 57.38392639160156 * e, 132.57142639160156 * e, 54.38392639160156 * e, 140.57142639160156 * e, 54.38392639160156 * e),
       n.bezierCurveTo(177.57142639160156 * e, 55.38392639160156 * e, 158.07142639160156 * e, 54.38392639160156 * e, 175.57142639160156 * e, 54.38392639160156 * e),
       n.bezierCurveTo(185.57142639160156 * e, 56.38392639160156 * e, 185.57142639160156 * e, 57.38392639160156 * e, 184.57142639160156 * e, 66.38392639160156 * e),
       n.bezierCurveTo(184.57142639160156 * e, 78.38392639160156 * e, 184.57142639160156 * e, 89.38392639160156 * e, 184.57142639160156 * e, 90.38392639160156 * e),
       n.bezierCurveTo(177.57142639160156 * e, 107.38392639160156 * e, 180.57142639160156 * e, 112.38392639160156 * e, 189.57142639160156 * e, 116.38392639160156 * e),
       n.bezierCurveTo(212.57142639160156 * e, 127.38392639160156 * e, 212.57142639160156 * e, 132.38392639160156 * e, 211.57142639160156 * e, 150.38392639160156 * e),
       n.bezierCurveTo(211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 304.81249618530273 * e),
       n.bezierCurveTo(212.57142639160156 * e, 328.81249618530273 * e, 209.57142639160156 * e, 330.81249618530273 * e, 188.57142639160156 * e, 333.81249618530273 * e),
       n.bezierCurveTo(155.07142639160156 * e, 333.31249618530273 * e, 155.07142639160156 * e, 333.31249618530273 * e, 121.57142639160156 * e, 332.81249618530273 * e),
       n.bezierCurveTo(104.57142639160156 * e, 327.81249618530273 * e, 105.57142639160156 * e, 328.81249618530273 * e, 104.57142639160156 * e, 312.81249618530273 * e),
       n.bezierCurveTo(104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 143.52678298950195 * e),
       n.bezierCurveTo(106.57142639160156 * e, 124.52678298950195 * e, 110.57142639160156 * e, 123.52678298950195 * e, 123.57142639160156 * e, 116.52678298950195 * e),
       n.bezierCurveTo(136.57142639160156 * e, 110.52678298950195 * e, 130.57142639160156 * e, 106.52678298950195 * e, 126.57142639160156 * e, 98.52678298950195 * e),
       n.closePath(),
       se(n, void 0, t[5], 15 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(125.57142639160156 * e, 156.66963958740234 * e),
       n.bezierCurveTo(125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 208.66963958740234 * e),
       n.closePath(),
       se(n, void 0, t[6], 15 * e),
       r
   }
   function mn(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d");
       return t.width = 316 * e,
       t.height = 365 * e,
       r.save(),
       r.translate(156.07142639160156 * e, 51.81248474121094 * e),
       r.rotate(0),
       Te(r, -21.5 * e, -34 * e, 43 * e, 68 * e, 8 * e),
       r.restore(),
       se(r, i[0], i[0], 15 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(126.57142639160156 * e, 67.38392639160156 * e),
       r.bezierCurveTo(126.57142639160156 * e, 57.38392639160156 * e, 132.57142639160156 * e, 54.38392639160156 * e, 140.57142639160156 * e, 54.38392639160156 * e),
       r.bezierCurveTo(177.57142639160156 * e, 55.38392639160156 * e, 158.07142639160156 * e, 54.38392639160156 * e, 175.57142639160156 * e, 54.38392639160156 * e),
       r.bezierCurveTo(185.57142639160156 * e, 56.38392639160156 * e, 185.57142639160156 * e, 57.38392639160156 * e, 184.57142639160156 * e, 66.38392639160156 * e),
       r.bezierCurveTo(184.57142639160156 * e, 78.38392639160156 * e, 184.57142639160156 * e, 89.38392639160156 * e, 184.57142639160156 * e, 90.38392639160156 * e),
       r.bezierCurveTo(177.57142639160156 * e, 107.38392639160156 * e, 180.57142639160156 * e, 112.38392639160156 * e, 189.57142639160156 * e, 116.38392639160156 * e),
       r.bezierCurveTo(212.57142639160156 * e, 127.38392639160156 * e, 212.57142639160156 * e, 132.38392639160156 * e, 211.57142639160156 * e, 150.38392639160156 * e),
       r.bezierCurveTo(211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 304.81249618530273 * e),
       r.bezierCurveTo(212.57142639160156 * e, 328.81249618530273 * e, 209.57142639160156 * e, 330.81249618530273 * e, 188.57142639160156 * e, 333.81249618530273 * e),
       r.bezierCurveTo(155.07142639160156 * e, 333.31249618530273 * e, 155.07142639160156 * e, 333.31249618530273 * e, 121.57142639160156 * e, 332.81249618530273 * e),
       r.bezierCurveTo(104.57142639160156 * e, 327.81249618530273 * e, 105.57142639160156 * e, 328.81249618530273 * e, 104.57142639160156 * e, 312.81249618530273 * e),
       r.bezierCurveTo(104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 143.52678298950195 * e),
       r.bezierCurveTo(106.57142639160156 * e, 124.52678298950195 * e, 110.57142639160156 * e, 123.52678298950195 * e, 123.57142639160156 * e, 116.52678298950195 * e),
       r.bezierCurveTo(136.57142639160156 * e, 110.52678298950195 * e, 130.57142639160156 * e, 106.52678298950195 * e, 126.57142639160156 * e, 98.52678298950195 * e),
       r.closePath(),
       se(r, i[0], i[0], 15 * e),
       r.beginPath(),
       r.lineCap = "round",
       r.lineJoin = "round",
       r.moveTo(125.57142639160156 * e, 156.66963958740234 * e),
       r.bezierCurveTo(125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 208.66963958740234 * e),
       r.closePath(),
       se(r, i[0], i[0], 15 * e),
       t
   }
   function Dn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 400 * e,
       r.height = 400 * e,
       n.translate(0, 15 * e),
       n.globalAlpha = i ? .5 : 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(102 * e, 154 * e),
       n.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e),
       n.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e),
       n.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e),
       n.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(102 * e, 154 * e),
       n.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e),
       n.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e),
       n.closePath(),
       se(n, void 0, t[0], 11 * e),
       n.translate(0, -5 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(103 * e, 154 * e),
       n.bezierCurveTo(98 * e, 119 * e, 264 * e, 119 * e, 264 * e, 154 * e),
       n.bezierCurveTo(271 * e, 189 * e, 94 * e, 188 * e, 103 * e, 154 * e),
       n.closePath(),
       se(n, t[3], t[2], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(102 * e, 154 * e),
       n.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e),
       n.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e),
       n.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e),
       n.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e),
       n.closePath(),
       se(n, t[1], t[2], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(182 * e, 185 * e),
       n.bezierCurveTo(182.5 * e, 237.5 * e, 182.5 * e, 237.5 * e, 183 * e, 290 * e),
       n.closePath(),
       se(n, void 0, t[2], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(222 * e, 287 * e),
       n.bezierCurveTo(226 * e, 233.5 * e, 226 * e, 233.5 * e, 230 * e, 180 * e),
       n.closePath(),
       se(n, void 0, t[2], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(145 * e, 290 * e),
       n.bezierCurveTo(140.5 * e, 237 * e, 140.5 * e, 237 * e, 136 * e, 184 * e),
       n.closePath(),
       se(n, t[1], t[2], 11 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(105 * e, 184 * e),
       n.bezierCurveTo(148 * e, 205 * e, 231 * e, 202 * e, 260 * e, 182 * e),
       n.bezierCurveTo(259 * e, 195.5 * e, 259 * e, 195.5 * e, 258 * e, 209 * e),
       n.bezierCurveTo(217 * e, 218 * e, 163 * e, 225 * e, 108 * e, 207 * e),
       n.closePath(),
       se(n, t[4], t[2], 11 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(251 * e, 276 * e),
       n.bezierCurveTo(251.5 * e, 267.5 * e, 251.5 * e, 267.5 * e, 252 * e, 259 * e),
       n.bezierCurveTo(212 * e, 272 * e, 156 * e, 275 * e, 112 * e, 260 * e),
       n.bezierCurveTo(112.5 * e, 269 * e, 112.5 * e, 269 * e, 113 * e, 278 * e),
       n.bezierCurveTo(155 * e, 306 * e, 253 * e, 286 * e, 250 * e, 276 * e),
       n.closePath(),
       se(n, t[4], t[2], 11 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(102 * e, 154 * e),
       n.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e),
       n.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e),
       n.closePath(),
       se(n, void 0, t[2], 11 * e),
       r
   }
   function Mn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 400 * e,
       r.height = 400 * e,
       n.translate(0, 15 * e),
       n.globalAlpha = i ? .5 : 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(102 * e, 154 * e),
       n.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e),
       n.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e),
       n.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e),
       n.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(102 * e, 154 * e),
       n.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e),
       n.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e),
       n.closePath(),
       se(n, void 0, t[0], 11 * e),
       n.translate(0, -5 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(103 * e, 154 * e),
       n.bezierCurveTo(98 * e, 119 * e, 264 * e, 119 * e, 264 * e, 154 * e),
       n.bezierCurveTo(271 * e, 189 * e, 94 * e, 188 * e, 103 * e, 154 * e),
       n.closePath(),
       se(n, t[3], t[2], 12 * e),
       n.translate(0, 25 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(103 * e, 154 * e),
       n.bezierCurveTo(98 * e, 119 * e, 264 * e, 119 * e, 264 * e, 154 * e),
       n.bezierCurveTo(271 * e, 189 * e, 94 * e, 188 * e, 103 * e, 154 * e),
       n.closePath(),
       se(n, t[5]),
       n.translate(0, -25 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(102 * e, 154 * e),
       n.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e),
       n.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e),
       n.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e),
       n.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e),
       n.closePath(),
       se(n, t[1], t[2], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(182 * e, 185 * e),
       n.bezierCurveTo(182.5 * e, 237.5 * e, 182.5 * e, 237.5 * e, 183 * e, 290 * e),
       n.closePath(),
       se(n, void 0, t[2], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(222 * e, 287 * e),
       n.bezierCurveTo(226 * e, 233.5 * e, 226 * e, 233.5 * e, 230 * e, 180 * e),
       n.closePath(),
       se(n, void 0, t[2], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(145 * e, 290 * e),
       n.bezierCurveTo(140.5 * e, 237 * e, 140.5 * e, 237 * e, 136 * e, 184 * e),
       n.closePath(),
       se(n, t[1], t[2], 11 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(105 * e, 184 * e),
       n.bezierCurveTo(148 * e, 205 * e, 231 * e, 202 * e, 260 * e, 182 * e),
       n.bezierCurveTo(259 * e, 195.5 * e, 259 * e, 195.5 * e, 258 * e, 209 * e),
       n.bezierCurveTo(217 * e, 218 * e, 163 * e, 225 * e, 108 * e, 207 * e),
       n.closePath(),
       se(n, t[4], t[2], 11 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(251 * e, 276 * e),
       n.bezierCurveTo(251.5 * e, 267.5 * e, 251.5 * e, 267.5 * e, 252 * e, 259 * e),
       n.bezierCurveTo(212 * e, 272 * e, 156 * e, 275 * e, 112 * e, 260 * e),
       n.bezierCurveTo(112.5 * e, 269 * e, 112.5 * e, 269 * e, 113 * e, 278 * e),
       n.bezierCurveTo(155 * e, 306 * e, 253 * e, 286 * e, 250 * e, 276 * e),
       n.closePath(),
       se(n, t[4], t[2], 11 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(102 * e, 154 * e),
       n.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e),
       n.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e),
       n.closePath(),
       se(n, void 0, t[2], 11 * e),
       r
   }
   function Gn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 80 * e,
       r.height = 160 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.save(),
       Te(n, 33 * e, 53 * e, 10 * e, 98 * e, 10 * e),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.translate(-150 * e, -100 * e),
       n.moveTo(167.5 * e, 171.0625 * e),
       n.bezierCurveTo(188 * e, 171.0625 * e, 188 * e, 171.0625 * e, 208.5 * e, 171.0625 * e),
       n.bezierCurveTo(208.5 * e, 156.0625 * e, 208.5 * e, 156.0625 * e, 208.5 * e, 141.0625 * e),
       n.bezierCurveTo(203.5 * e, 113.0625 * e, 179.5 * e, 96.0625 * e, 167.5 * e, 141.0625 * e),
       n.closePath(),
       se(n, t[0]),
       n.restore(),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.save(),
       Te(n, 33 * e, 53 * e, 10 * e, 98 * e, 10 * e),
       se(n, t[1], t[2], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.translate(-150 * e, -100 * e),
       n.moveTo(167.5 * e, 171.0625 * e),
       n.bezierCurveTo(188 * e, 171.0625 * e, 188 * e, 171.0625 * e, 208.5 * e, 171.0625 * e),
       n.bezierCurveTo(208.5 * e, 156.0625 * e, 208.5 * e, 156.0625 * e, 208.5 * e, 141.0625 * e),
       n.bezierCurveTo(203.5 * e, 113.0625 * e, 179.5 * e, 96.0625 * e, 167.5 * e, 141.0625 * e),
       n.closePath(),
       se(n, t[3], t[4], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.translate(0 * e, 1 * e),
       n.moveTo(180.5 * e, 169.0625 * e),
       n.bezierCurveTo(180.5 * e, 157.5625 * e, 180.5 * e, 157.5625 * e, 180.5 * e, 146.0625 * e),
       n.bezierCurveTo(181.5 * e, 134.0625 * e, 193.5 * e, 129.0625 * e, 196.5 * e, 146.0625 * e),
       n.bezierCurveTo(196.5 * e, 157.5625 * e, 196.5 * e, 157.5625 * e, 196.5 * e, 169.0625 * e),
       n.closePath(),
       se(n, t[5]),
       n.restore(),
       r
   }
   function Ln(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 109 * e,
       r.height = 110 * e,
       Ee(n, 54.5 * e, 55 * e, 48.038209575038294 * e),
       se(n, i[0], i[1], 8 * e),
       0 == t ? (n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(54.928558349609375 * e, 43.72320556640625 * e),
       n.bezierCurveTo(66.92855834960938 * e, 31.72320556640625 * e, 69.92855834960938 * e, 29.72320556640625 * e, 74.92855834960938 * e, 29.72320556640625 * e),
       n.bezierCurveTo(86.92855834960938 * e, 28.72320556640625 * e, 91.92855834960938 * e, 42.72320556640625 * e, 89.92855834960938 * e, 52.72320556640625 * e),
       n.bezierCurveTo(88.92855834960938 * e, 63.72320556640625 * e, 73.92855834960938 * e, 75.72320556640625 * e, 55.928558349609375 * e, 87.72320556640625 * e),
       n.bezierCurveTo(37.928558349609375 * e, 78.72320556640625 * e, 26.928558349609375 * e, 65.72320556640625 * e, 19.928558349609375 * e, 54.72320556640625 * e),
       n.bezierCurveTo(13.928558349609375 * e, 42.72320556640625 * e, 21.928558349609375 * e, 28.72320556640625 * e, 35.928558349609375 * e, 29.72320556640625 * e),
       n.bezierCurveTo(45.928558349609375 * e, 31.72320556640625 * e, 51.928558349609375 * e, 40.72320556640625 * e, 53.928558349609375 * e, 44.72320556640625 * e),
       n.closePath(),
       se(n, i[2])) : 1 == t ? (n.save(),
       n.translate(55 * e, 39.48748779296875 * e),
       Te(n, -11.5 * e, -36 * e, 23 * e, 72 * e, 10 * e),
       n.restore(),
       se(n, i[2], i[3], 4 * e),
       Ee(n, 54.5 * e, 78.48748779296875 * e, 22.02271554554524 * e),
       se(n, i[4], i[3], 4 * e),
       n.save(),
       n.translate(55.5 * e, 57.287506103515625 * e),
       Te(n, -9 * e, -16 * e, 18 * e, 32 * e, 10 * e),
       n.restore(),
       se(n, i[4]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(66.5 * e, 25.287506103515625 * e),
       n.bezierCurveTo(60.5 * e, 25.287506103515625 * e, 63.5 * e, 25.287506103515625 * e, 54.5 * e, 25.287506103515625 * e),
       n.closePath(),
       se(n, void 0, i[5], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(66.5 * e, 37.287506103515625 * e),
       n.bezierCurveTo(60.5 * e, 37.287506103515625 * e, 60.5 * e, 37.287506103515625 * e, 54.5 * e, 37.287506103515625 * e),
       n.closePath(),
       se(n, void 0, i[5], 4 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(66.5 * e, 50.287506103515625 * e),
       n.bezierCurveTo(61 * e, 50.287506103515625 * e, 61 * e, 50.287506103515625 * e, 55.5 * e, 50.287506103515625 * e),
       n.closePath(),
       se(n, void 0, i[5], 4 * e)) : 2 == t ? (n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(45.928558349609375 * e, 55.29463195800781 * e),
       n.bezierCurveTo(38.928558349609375 * e, 67.29463195800781 * e, 38.928558349609375 * e, 67.29463195800781 * e, 31.928558349609375 * e, 79.29463195800781 * e),
       n.bezierCurveTo(15.928558349609375 * e, 85.29463195800781 * e, 17.928558349609375 * e, 86.29463195800781 * e, 17.928558349609375 * e, 90.29463195800781 * e),
       n.bezierCurveTo(19.928558349609375 * e, 94.29463195800781 * e, 21.928558349609375 * e, 94.29463195800781 * e, 27.928558349609375 * e, 92.29463195800781 * e),
       n.bezierCurveTo(29.928558349609375 * e, 98.29463195800781 * e, 30.928558349609375 * e, 99.29463195800781 * e, 33.928558349609375 * e, 99.29463195800781 * e),
       n.bezierCurveTo(38.928558349609375 * e, 97.29463195800781 * e, 38.928558349609375 * e, 93.29463195800781 * e, 37.928558349609375 * e, 86.29463195800781 * e),
       n.bezierCurveTo(45.428558349609375 * e, 73.29463195800781 * e, 51.928558349609375 * e, 64.29463195800781 * e, 52.928558349609375 * e, 60.29463195800781 * e),
       n.closePath(),
       se(n, i[2]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(55.928558349609375 * e, 8.866058349609375 * e),
       n.bezierCurveTo(35.928558349609375 * e, 35.866058349609375 * e, 37.928558349609375 * e, 48.866058349609375 * e, 46.928558349609375 * e, 62.866058349609375 * e),
       n.bezierCurveTo(65.92855834960938 * e, 72.86605834960938 * e, 80.92855834960938 * e, 55.866058349609375 * e, 93.92855834960938 * e, 36.866058349609375 * e),
       n.closePath(),
       se(n, i[3], i[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(93.92855834960938 * e, 36.866058349609375 * e),
       n.bezierCurveTo(82.92855834960938 * e, 37.866058349609375 * e, 77.92855834960938 * e, 36.866058349609375 * e, 67.92855834960938 * e, 28.866058349609375 * e),
       n.bezierCurveTo(53.928558349609375 * e, 16.866058349609375 * e, 53.928558349609375 * e, 14.866058349609375 * e, 55.928558349609375 * e, 7.866058349609375 * e),
       n.bezierCurveTo(65.92855834960938 * e, 4.866058349609375 * e, 71.92855834960938 * e, 7.866058349609375 * e, 83.92855834960938 * e, 13.866058349609375 * e),
       n.bezierCurveTo(96.92855834960938 * e, 21.866058349609375 * e, 95.92855834960938 * e, 31.866058349609375 * e, 92.92855834960938 * e, 36.866058349609375 * e),
       n.closePath(),
       se(n, i[3], i[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(68.92855834960938 * e, 16.866058349609375 * e),
       n.bezierCurveTo(71.92855834960938 * e, 13.866058349609375 * e, 76.92855834960938 * e, 16.866058349609375 * e, 79.92855834960938 * e, 21.866058349609375 * e),
       n.bezierCurveTo(82.92855834960938 * e, 24.866058349609375 * e, 81.92855834960938 * e, 27.866058349609375 * e, 73.92855834960938 * e, 24.866058349609375 * e),
       n.bezierCurveTo(67.92855834960938 * e, 20.866058349609375 * e, 66.92855834960938 * e, 19.866058349609375 * e, 67.92855834960938 * e, 17.866058349609375 * e),
       n.closePath(),
       se(n, i[2])) : 3 == t && (n.scale(.9, .9),
       n.translate(6 * e, 0),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(54 * e, .421875 * e),
       n.bezierCurveTo(84 * e, 45.421875 * e, 89 * e, 51.421875 * e, 83 * e, 74.421875 * e),
       n.bezierCurveTo(74 * e, 95.421875 * e, 46 * e, 98.421875 * e, 30 * e, 78.421875 * e),
       n.bezierCurveTo(22 * e, 59.421875 * e, 27 * e, 49.421875 * e, 34 * e, 36.421875 * e),
       n.closePath(),
       se(n, i[2], i[3], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(74 * e, 52.421875 * e),
       n.bezierCurveTo(77 * e, 73.421875 * e, 69 * e, 81.421875 * e, 58 * e, 81.421875 * e),
       n.bezierCurveTo(66 * e, 71.421875 * e, 70 * e, 66.421875 * e, 74 * e, 52.421875 * e),
       n.closePath(),
       se(n, i[3])),
       r
   }
   function fn(e, i) {
       var t = document.createElement("canvas")
         , r = t.getContext("2d")
         , n = e.w + e.lw
         , o = e.h + e.lw
         , a = .1 * o;
       return t.width = n,
       t.height = o + a,
       r.beginPath(),
       r.translate(n / 2, o / 2 + a),
       r.globalAlpha = .5,
       Te(r, -e.w / 2, -e.h / 2, e.w, e.h, e.r),
       se(r, "#000", "#000", e.lw),
       r.globalAlpha = 1,
       r.beginPath(),
       i || r.translate(0, -a),
       Te(r, -e.w / 2, -e.h / 2, e.w, e.h, e.r),
       se(r, e.bg, e.fg, e.lw),
       r.beginPath(),
       r.fillStyle = e.color,
       r.textBaseline = "middle",
       r.textAlign = "center",
       r.font = e.size + "px " + e.font,
       r.fillText(e.text, 0, 0),
       t
   }
   function Vn(e) {
       for (var i = [], t = 0; t < e.length; t++)
           i.push(fn(e[t], 2 == t));
       return i
   }
   function zn(e) {
       var i = document.createElement("canvas")
         , t = i.getContext("2d")
         , r = 600 * e
         , n = 22 * e
         , o = 4 * e
         , a = 4 * e;
       return i.width = r,
       i.height = n,
       Te(t, 5 * e, 5 * e, r - 10 * e, n - 10 * e, o),
       se(t, null, "#BBE8EF", a),
       i
   }
   function Hn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 573 * e,
       r.height = 350 * e,
       1 == t && (n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(336 * e, 72 * e),
       n.bezierCurveTo(366 * e, 15 * e, 426 * e, 36 * e, 497 * e, 83 * e),
       n.bezierCurveTo(522 * e, 85 * e, 522 * e, 85 * e, 547 * e, 87 * e),
       n.bezierCurveTo(476.5 * e, 205 * e, 476.5 * e, 205 * e, 406 * e, 323 * e),
       n.bezierCurveTo(297.5 * e, 319 * e, 297.5 * e, 319 * e, 189 * e, 315 * e),
       n.bezierCurveTo(105.5 * e, 279 * e, 105.5 * e, 279 * e, 22 * e, 243 * e),
       n.bezierCurveTo(92 * e, 140 * e, 92 * e, 140 * e, 162 * e, 37 * e),
       n.bezierCurveTo(173 * e, 39 * e, 173 * e, 39 * e, 184 * e, 41 * e),
       n.bezierCurveTo(185 * e, 38.5 * e, 185 * e, 38.5 * e, 186 * e, 36 * e),
       n.bezierCurveTo(323 * e, 13 * e, 322 * e, 25 * e, 337 * e, 74 * e),
       n.closePath(),
       se(n, i[4], i[4], 35 * e)),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(168 * e, 42 * e),
       n.bezierCurveTo(255 * e, 60 * e, 255 * e, 60 * e, 342 * e, 78 * e),
       n.bezierCurveTo(443 * e, 81.5 * e, 443 * e, 81.5 * e, 544 * e, 85 * e),
       n.bezierCurveTo(475 * e, 204.5 * e, 475 * e, 204.5 * e, 406 * e, 324 * e),
       n.bezierCurveTo(297.5 * e, 320 * e, 297.5 * e, 320 * e, 189 * e, 316 * e),
       n.bezierCurveTo(105.5 * e, 279 * e, 105.5 * e, 279 * e, 22 * e, 242 * e),
       n.closePath(),
       se(n, i[0], i[1], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(188 * e, 41 * e),
       n.bezierCurveTo(308 * e, 15 * e, 325 * e, 18 * e, 337 * e, 66 * e),
       n.bezierCurveTo(191 * e, 305 * e, 196 * e, 286 * e, 184 * e, 307 * e),
       n.bezierCurveTo(175 * e, 250 * e, 90 * e, 254 * e, 52 * e, 241 * e),
       n.closePath(),
       se(n, i[2], i[3], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(336 * e, 71 * e),
       n.bezierCurveTo(375 * e, 8 * e, 429 * e, 50 * e, 518 * e, 92 * e),
       n.bezierCurveTo(455 * e, 199.5 * e, 455 * e, 199.5 * e, 392 * e, 307 * e),
       n.bezierCurveTo(227 * e, 301 * e, 261 * e, 255 * e, 188 * e, 308 * e),
       n.closePath(),
       se(n, i[2], i[3], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(357 * e, 76 * e),
       n.bezierCurveTo(390 * e, 67 * e, 414 * e, 86 * e, 435 * e, 104 * e),
       n.bezierCurveTo(417 * e, 135 * e, 417 * e, 135 * e, 399 * e, 166 * e),
       n.bezierCurveTo(352 * e, 140 * e, 345 * e, 139 * e, 319 * e, 142 * e),
       n.closePath(),
       se(n, i[3], i[3], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(309 * e, 168 * e),
       n.bezierCurveTo(345 * e, 163 * e, 372 * e, 180 * e, 412 * e, 203 * e),
       se(n, i[2], i[3], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(263 * e, 54 * e),
       n.bezierCurveTo(305 * e, 44 * e, 307 * e, 51 * e, 311 * e, 64 * e),
       n.bezierCurveTo(270.5 * e, 129.5 * e, 270.5 * e, 129.5 * e, 230 * e, 195 * e),
       n.bezierCurveTo(221 * e, 175 * e, 203 * e, 171 * e, 186 * e, 172 * e),
       n.closePath(),
       se(n, i[3], i[3], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(292 * e, 198 * e),
       n.bezierCurveTo(328 * e, 191 * e, 364 * e, 211 * e, 401 * e, 237 * e),
       se(n, i[2], i[3], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(245 * e, 68 * e),
       n.bezierCurveTo(210 * e, 72 * e, 210 * e, 72 * e, 189 * e, 69 * e),
       se(n, i[2], i[3], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(222 * e, 96 * e),
       n.bezierCurveTo(196 * e, 97 * e, 193 * e, 97 * e, 177 * e, 92 * e),
       se(n, i[2], i[3], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(207 * e, 124 * e),
       n.bezierCurveTo(179 * e, 123 * e, 177 * e, 124 * e, 161 * e, 119 * e),
       se(n, i[2], i[3], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(115 * e, 183 * e),
       n.bezierCurveTo(184 * e, 185 * e, 203 * e, 198 * e, 219 * e, 221 * e),
       se(n, i[2], i[3], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(98 * e, 213 * e),
       n.bezierCurveTo(161 * e, 214 * e, 193 * e, 227 * e, 201 * e, 249 * e),
       se(n, i[2], i[3], 12 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(399 * e, 257 * e),
       n.bezierCurveTo(287 * e, 215 * e, 280 * e, 215 * e, 263 * e, 222 * e),
       n.bezierCurveTo(253 * e, 238 * e, 247 * e, 245 * e, 243 * e, 254 * e),
       n.bezierCurveTo(267 * e, 236 * e, 292 * e, 263 * e, 377 * e, 284 * e),
       se(n, i[3], i[3], 12 * e),
       r
   }
   function yn(e, i, t, r) {
       var n = document.createElement("canvas")
         , o = n.getContext("2d");
       return n.width = 170 * e,
       n.height = 200 * e,
       o.translate(5 * e, 15 * e),
       1 == r && (o.translate(0, -5 * e),
       Ee(o, 77.00003051757812 * e, 104.49432373046875 * e, 71.84010022264724 * e),
       se(o, t[1], t[5], 20 * e),
       Ee(o, 77.00003051757812 * e, 104.22160339355469 * e, 61.554853586049575 * e),
       se(o, t[1], t[5], 20 * e),
       o.save(),
       o.translate(77.00003051757812 * e, 31.267044067382812 * e),
       Te(o, -6 * e, -12.5 * e, 12 * e, 25 * e, 10 * e),
       o.restore(),
       se(o, t[1], t[5], 20 * e),
       o.save(),
       o.translate(77.00003051757812 * e, 13.267044067382812 * e),
       Te(o, -15 * e, -10.5 * e, 30 * e, 21 * e, 10 * e),
       o.restore(),
       se(o, t[1], t[5], 20 * e)),
       Ee(o, 77.00003051757812 * e, 104.49432373046875 * e, 71.84010022264724 * e),
       se(o, t[1], t[2], 7 * e),
       Ee(o, 77.00003051757812 * e, 104.22160339355469 * e, 61.554853586049575 * e),
       se(o, t[1], t[2], 7 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(18.000030517578125 * e, 105.85795593261719 * e),
       o.bezierCurveTo(134.00003051757812 * e, 104.85795593261719 * e, 77.00003051757812 * e, 104.85795593261719 * e, 136.00003051757812 * e, 103.85795593261719 * e),
       o.closePath(),
       se(o, t[1], t[2], 8 * e),
       Ee(o, 77.00003051757812 * e, 104.6761474609375 * e, 32.55764119219941 * e),
       se(o, t[1], t[2], 8 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(78.00003051757812 * e, 112.03977966308594 * e),
       o.bezierCurveTo(78.00003051757812 * e, 87.03977966308594 * e, 78.00003051757812 * e, 87.03977966308594 * e, 78.00003051757812 * e, 62.03977966308594 * e),
       o.closePath(),
       se(o, t[3], t[2], 8 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(78.00003051757812 * e, 48.03977966308594 * e),
       o.bezierCurveTo(82.00003051757812 * e, 55.53977966308594 * e, 82.00003051757812 * e, 55.53977966308594 * e, 86.00003051757812 * e, 63.03977966308594 * e),
       o.bezierCurveTo(78.00003051757812 * e, 63.03977966308594 * e, 78.00003051757812 * e, 63.03977966308594 * e, 70.00003051757812 * e, 63.03977966308594 * e),
       o.closePath(),
       se(o, t[3], t[2], 4 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(80.00003051757812 * e, 111.6761474609375 * e),
       o.bezierCurveTo(95.00003051757812 * e, 97.1761474609375 * e, 95.00003051757812 * e, 97.1761474609375 * e, 110.00003051757812 * e, 82.6761474609375 * e),
       o.closePath(),
       se(o, t[3], t[2], 8 * e),
       o.beginPath(),
       o.lineCap = "round",
       o.lineJoin = "round",
       o.moveTo(107.00003051757812 * e, 76.6761474609375 * e),
       o.bezierCurveTo(111.50003051757812 * e, 82.6761474609375 * e, 111.50003051757812 * e, 82.6761474609375 * e, 116.00003051757812 * e, 88.6761474609375 * e),
       o.bezierCurveTo(118.50003051757812 * e, 81.6761474609375 * e, 118.50003051757812 * e, 81.6761474609375 * e, 121.00003051757812 * e, 74.6761474609375 * e),
       o.closePath(),
       se(o, t[3], t[2], 4 * e),
       Ee(o, 77.00003051757812 * e, 105.03977966308594 * e, 15.556349186104045 * e),
       se(o, t[3], t[2], 4 * e),
       o.save(),
       o.translate(77.00003051757812 * e, 31.267044067382812 * e),
       o.rotate(0),
       Te(o, -6 * e, -12.5 * e, 12 * e, 25 * e, 10 * e),
       o.restore(),
       se(o, t[1], t[2], 7 * e),
       o.save(),
       o.translate(77.00003051757812 * e, 13.267044067382812 * e),
       o.rotate(0),
       Te(o, -15 * e, -10.5 * e, 30 * e, 21 * e, 10 * e),
       o.restore(),
       se(o, t[1], t[2], 7 * e),
       n
   }
   function Bn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 81 * e,
       r.height = 77 * e,
       n.translate(0, 10 * e),
       n.scale(.2, .2),
       n.translate(0, -30 * e),
       1 == t && (n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(36.5 * e, 278.0625 * e),
       n.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e),
       n.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e),
       n.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e),
       n.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e),
       n.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e),
       n.closePath(),
       se(n, i[0], i[3], 50 * e)),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(36.5 * e, 278.0625 * e),
       n.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e),
       n.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e),
       n.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e),
       n.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e),
       n.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e),
       n.closePath(),
       se(n, i[0], i[1], 19 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(214.5 * e, 124.0625 * e),
       n.bezierCurveTo(242.5 * e, 125.0625 * e, 272.5 * e, 159.0625 * e, 283.5 * e, 184.0625 * e),
       n.bezierCurveTo(277.5 * e, 161.0625 * e, 233.5 * e, 128.0625 * e, 219.5 * e, 122.0625 * e),
       n.closePath(),
       se(n, i[0], i[1], 19 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(157.5 * e, 145.0625 * e),
       n.bezierCurveTo(176.5 * e, 148.0625 * e, 205.5 * e, 176.0625 * e, 212.5 * e, 197.0625 * e),
       n.bezierCurveTo(205.5 * e, 178.0625 * e, 177.5 * e, 152.0625 * e, 156.5 * e, 142.0625 * e),
       n.closePath(),
       se(n, i[0], i[1], 19 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(103.5 * e, 169.0625 * e),
       n.bezierCurveTo(160.5 * e, 166.0625 * e, 228.5 * e, 312.0625 * e, 162.5 * e, 323.0625 * e),
       n.bezierCurveTo(128.5 * e, 330.0625 * e, 45.5 * e, 312.0625 * e, 34.5 * e, 268.0625 * e),
       n.bezierCurveTo(30.5 * e, 238.0625 * e, 44.5 * e, 222.0625 * e, 52.5 * e, 211.0625 * e),
       n.bezierCurveTo(82.5 * e, 174.0625 * e, 104.5 * e, 166.0625 * e, 119.5 * e, 172.0625 * e),
       n.closePath(),
       se(n, i[2], i[1], 19 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(194.5 * e, 313.0625 * e),
       n.bezierCurveTo(222.5 * e, 306.0625 * e, 319.5 * e, 271.0625 * e, 337.5 * e, 241.0625 * e),
       n.bezierCurveTo(274.5 * e, 270.0625 * e, 216.5 * e, 288.0625 * e, 199.5 * e, 287.0625 * e),
       n.bezierCurveTo(198.5 * e, 302.0625 * e, 195.5 * e, 311.0625 * e, 193.5 * e, 312.0625 * e),
       n.closePath(),
       se(n, i[1]),
       n.scale(3, 3),
       n.translate(15, 10 * e),
       1 == t && (n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(4 * e, 32 * e),
       n.bezierCurveTo(19 * e, 25 * e, 19 * e, 25 * e, 34 * e, 18 * e),
       n.bezierCurveTo(41.5 * e, 23.5 * e, 41.5 * e, 23.5 * e, 49 * e, 29 * e),
       n.bezierCurveTo(59.5 * e, 20 * e, 59.5 * e, 20 * e, 70 * e, 11 * e),
       se(n, void 0, i[3], 28 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(56 * e, 6 * e),
       n.bezierCurveTo(63.5 * e, 13.5 * e, 63.5 * e, 13.5 * e, 71 * e, 21 * e),
       n.bezierCurveTo(74.5 * e, 11.5 * e, 74.5 * e, 11.5 * e, 78 * e, 2 * e),
       n.closePath(),
       se(n, i[3], i[3], 28 * e)),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(4 * e, 32 * e),
       n.bezierCurveTo(19 * e, 25 * e, 19 * e, 25 * e, 34 * e, 18 * e),
       n.bezierCurveTo(41.5 * e, 23.5 * e, 41.5 * e, 23.5 * e, 49 * e, 29 * e),
       n.bezierCurveTo(59.5 * e, 20 * e, 59.5 * e, 20 * e, 70 * e, 11 * e),
       se(n, void 0, i[1], 17 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(56 * e, 6 * e),
       n.bezierCurveTo(63.5 * e, 13.5 * e, 63.5 * e, 13.5 * e, 71 * e, 21 * e),
       n.bezierCurveTo(74.5 * e, 11.5 * e, 74.5 * e, 11.5 * e, 78 * e, 2 * e),
       n.closePath(),
       se(n, i[1], i[1], 17 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(4 * e, 32 * e),
       n.bezierCurveTo(19 * e, 25 * e, 19 * e, 25 * e, 34 * e, 18 * e),
       n.bezierCurveTo(41.5 * e, 23.5 * e, 41.5 * e, 23.5 * e, 49 * e, 29 * e),
       n.bezierCurveTo(59.5 * e, 20 * e, 59.5 * e, 20 * e, 70 * e, 11 * e),
       se(n, void 0, i[2], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(56 * e, 6 * e),
       n.bezierCurveTo(63.5 * e, 13.5 * e, 63.5 * e, 13.5 * e, 71 * e, 21 * e),
       n.bezierCurveTo(74.5 * e, 11.5 * e, 74.5 * e, 11.5 * e, 78 * e, 2 * e),
       n.closePath(),
       se(n, i[2], i[2], 10 * e),
       r
   }
   function wn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 144 * e,
       r.height = 280 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(5 * e, 5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(62 * e, 103.79999542236328 * e),
       n.bezierCurveTo(62.5 * e, 148.79999542236328 * e, 62.5 * e, 148.79999542236328 * e, 63 * e, 193.79999542236328 * e),
       n.bezierCurveTo(63 * e, 219.79999542236328 * e, 47 * e, 217.79999542236328 * e, 51 * e, 230.79999542236328 * e),
       n.bezierCurveTo(62 * e, 255.79999542236328 * e, 74 * e, 260.7999954223633 * e, 72 * e, 248.79999542236328 * e),
       n.bezierCurveTo(65 * e, 226.79999542236328 * e, 71 * e, 229.79999542236328 * e, 76 * e, 225.79999542236328 * e),
       n.bezierCurveTo(90 * e, 224.79999542236328 * e, 89 * e, 232.79999542236328 * e, 90 * e, 243.79999542236328 * e),
       n.bezierCurveTo(95 * e, 253.79999542236328 * e, 99 * e, 249.79999542236328 * e, 100 * e, 229.79999542236328 * e),
       n.bezierCurveTo(102 * e, 213.79999542236328 * e, 98 * e, 214.79999542236328 * e, 90 * e, 205.79999542236328 * e),
       n.bezierCurveTo(82 * e, 201.79999542236328 * e, 82 * e, 185.79999542236328 * e, 82 * e, 114.79999542236328 * e),
       n.bezierCurveTo(80 * e, 73 * e, 82 * e, 68 * e, 93 * e, 53 * e),
       n.bezierCurveTo(98 * e, 37 * e, 65 * e, 14 * e, 74 * e, 33 * e),
       n.bezierCurveTo(82 * e, 56 * e, 77 * e, 52 * e, 69 * e, 54 * e),
       n.bezierCurveTo(55 * e, 57 * e, 57 * e, 53 * e, 54 * e, 39 * e),
       n.bezierCurveTo(46 * e, 20 * e, 37 * e, 61 * e, 50 * e, 68 * e),
       n.bezierCurveTo(65 * e, 81 * e, 60 * e, 89 * e, 62 * e, 102 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(-5 * e, -5 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(62 * e, 103.79999542236328 * e),
       n.bezierCurveTo(62.5 * e, 148.79999542236328 * e, 62.5 * e, 148.79999542236328 * e, 63 * e, 193.79999542236328 * e),
       n.bezierCurveTo(63 * e, 219.79999542236328 * e, 47 * e, 217.79999542236328 * e, 51 * e, 230.79999542236328 * e),
       n.bezierCurveTo(62 * e, 255.79999542236328 * e, 74 * e, 260.7999954223633 * e, 72 * e, 248.79999542236328 * e),
       n.bezierCurveTo(65 * e, 226.79999542236328 * e, 71 * e, 229.79999542236328 * e, 76 * e, 225.79999542236328 * e),
       n.bezierCurveTo(90 * e, 224.79999542236328 * e, 89 * e, 232.79999542236328 * e, 90 * e, 243.79999542236328 * e),
       n.bezierCurveTo(95 * e, 253.79999542236328 * e, 99 * e, 249.79999542236328 * e, 100 * e, 229.79999542236328 * e),
       n.bezierCurveTo(102 * e, 213.79999542236328 * e, 98 * e, 214.79999542236328 * e, 90 * e, 205.79999542236328 * e),
       n.bezierCurveTo(82 * e, 201.79999542236328 * e, 82 * e, 185.79999542236328 * e, 82 * e, 114.79999542236328 * e),
       n.bezierCurveTo(80 * e, 73 * e, 82 * e, 68 * e, 93 * e, 53 * e),
       n.bezierCurveTo(98 * e, 37 * e, 65 * e, 14 * e, 74 * e, 33 * e),
       n.bezierCurveTo(82 * e, 56 * e, 77 * e, 52 * e, 69 * e, 54 * e),
       n.bezierCurveTo(55 * e, 57 * e, 57 * e, 53 * e, 54 * e, 39 * e),
       n.bezierCurveTo(46 * e, 20 * e, 37 * e, 61 * e, 50 * e, 68 * e),
       n.bezierCurveTo(65 * e, 81 * e, 60 * e, 89 * e, 62 * e, 102 * e),
       n.closePath(),
       se(n, t[1], t[2], 6 * e),
       r
   }
   function Kn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 160 * e,
       r.height = 161 * e,
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 10 * e),
       n.save(),
       n.translate(80.5 * e, 78 * e),
       Te(n, -71.5 * e, -71 * e, 143 * e, 143 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -10 * e),
       n.save(),
       n.translate(80.5 * e, 78 * e),
       Te(n, -71.5 * e, -71 * e, 143 * e, 143 * e, 10 * e),
       n.restore(),
       se(n, t[1], t[2], 6 * e),
       n.save(),
       n.translate(80 * e, 78.5 * e),
       Te(n, -17 * e, -72.5 * e, 34 * e, 145 * e, 10 * e),
       n.restore(),
       se(n, t[3], t[4], 6 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 10 * e),
       n.save(),
       n.translate(80 * e, 79.5 * e),
       Te(n, -73 * e, -16.5 * e, 145 * e, 34 * e, 10 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -10 * e),
       n.save(),
       n.translate(80 * e, 79.5 * e),
       Te(n, -73 * e, -16.5 * e, 145 * e, 34 * e, 10 * e),
       n.restore(),
       se(n, t[3], t[4], 6 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(79 * e, 71 * e),
       n.bezierCurveTo(90 * e, 42 * e, 98 * e, 36 * e, 109 * e, 43 * e),
       n.bezierCurveTo(119 * e, 47 * e, 128 * e, 62 * e, 107 * e, 72 * e),
       n.bezierCurveTo(96 * e, 78.5 * e, 96 * e, 78.5 * e, 85 * e, 85 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(84 * e, 78 * e),
       n.bezierCurveTo(113 * e, 82 * e, 123 * e, 97 * e, 115 * e, 108 * e),
       n.bezierCurveTo(110 * e, 119 * e, 98 * e, 124 * e, 87 * e, 107 * e),
       n.bezierCurveTo(81.5 * e, 94.5 * e, 81.5 * e, 94.5 * e, 76 * e, 82 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(80 * e, 73 * e),
       n.bezierCurveTo(64 * e, 37 * e, 55 * e, 34 * e, 45 * e, 42 * e),
       n.bezierCurveTo(30 * e, 54 * e, 36 * e, 65 * e, 51 * e, 72 * e),
       n.bezierCurveTo(62.5 * e, 77 * e, 62.5 * e, 77 * e, 74 * e, 82 * e),
       n.closePath(),
       se(n, t[0]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(82 * e, 83 * e),
       n.bezierCurveTo(73 * e, 107 * e, 60 * e, 123 * e, 47 * e, 113 * e),
       n.bezierCurveTo(33 * e, 105 * e, 33 * e, 92 * e, 52 * e, 85 * e),
       n.bezierCurveTo(74 * e, 73 * e, 77 * e, 76 * e, 76 * e, 75 * e),
       n.closePath(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(79 * e, 71 * e),
       n.bezierCurveTo(90 * e, 42 * e, 98 * e, 36 * e, 109 * e, 43 * e),
       n.bezierCurveTo(119 * e, 47 * e, 128 * e, 62 * e, 107 * e, 72 * e),
       n.bezierCurveTo(96 * e, 78.5 * e, 96 * e, 78.5 * e, 85 * e, 85 * e),
       n.closePath(),
       se(n, t[3], t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(84 * e, 78 * e),
       n.bezierCurveTo(113 * e, 82 * e, 123 * e, 97 * e, 115 * e, 108 * e),
       n.bezierCurveTo(110 * e, 119 * e, 98 * e, 124 * e, 87 * e, 107 * e),
       n.bezierCurveTo(81.5 * e, 94.5 * e, 81.5 * e, 94.5 * e, 76 * e, 82 * e),
       n.closePath(),
       se(n, t[3], t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(80 * e, 73 * e),
       n.bezierCurveTo(64 * e, 37 * e, 55 * e, 34 * e, 45 * e, 42 * e),
       n.bezierCurveTo(30 * e, 54 * e, 36 * e, 65 * e, 51 * e, 72 * e),
       n.bezierCurveTo(62.5 * e, 77 * e, 62.5 * e, 77 * e, 74 * e, 82 * e),
       n.closePath(),
       se(n, t[3], t[4], 6 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(82 * e, 83 * e),
       n.bezierCurveTo(73 * e, 107 * e, 60 * e, 123 * e, 47 * e, 113 * e),
       n.bezierCurveTo(33 * e, 105 * e, 33 * e, 92 * e, 52 * e, 85 * e),
       n.bezierCurveTo(74 * e, 73 * e, 77 * e, 76 * e, 76 * e, 75 * e),
       n.closePath(),
       se(n, t[3], t[4], 6 * e),
       n.globalAlpha = i ? .5 : 1,
       n.translate(0, 10 * e),
       n.save(),
       n.translate(78.5 * e, 78 * e),
       Te(n, -13.5 * e, -14 * e, 27 * e, 27 * e, 6 * e),
       n.restore(),
       se(n, t[0]),
       n.globalAlpha = 1,
       n.translate(0, -10 * e),
       n.save(),
       n.translate(78.5 * e, 78 * e),
       Te(n, -13.5 * e, -14 * e, 27 * e, 27 * e, 6 * e),
       n.restore(),
       se(n, t[3], t[4], 6 * e),
       r
   }
   function Wn(e, i, t) {
       var r = document.createElement("canvas")
         , n = r.getContext("2d");
       return r.width = 372 * e,
       r.height = 358 * e,
       n.translate(0 * e, 10 * e),
       n.globalAlpha = i ? .2 : 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(247.00003051757812 * e, 115.76704406738281 * e),
       n.bezierCurveTo(305.0000305175781 * e, 124.76704406738281 * e, 335.0000305175781 * e, 112.76704406738281 * e, 359.0000305175781 * e, 93.76704406738281 * e),
       n.bezierCurveTo(359.5000305175781 * e, 113.26704406738281 * e, 359.5000305175781 * e, 113.26704406738281 * e, 360.0000305175781 * e, 132.7670440673828 * e),
       n.bezierCurveTo(339.0000305175781 * e, 177.7670440673828 * e, 281.0000305175781 * e, 178.7670440673828 * e, 243.00003051757812 * e, 183.7670440673828 * e),
       n.bezierCurveTo(214.50003051757812 * e, 214.2670440673828 * e, 214.50003051757812 * e, 214.2670440673828 * e, 186.00003051757812 * e, 244.7670440673828 * e),
       n.bezierCurveTo(155.00003051757812 * e, 214.2670440673828 * e, 155.00003051757812 * e, 214.2670440673828 * e, 124.00003051757812 * e, 183.7670440673828 * e),
       n.bezierCurveTo(51.000030517578125 * e, 180.7670440673828 * e, 21.000030517578125 * e, 161.7670440673828 * e, 9.000030517578125 * e, 129.7670440673828 * e),
       n.bezierCurveTo(8.500030517578125 * e, 110.76704406738281 * e, 8.500030517578125 * e, 110.76704406738281 * e, 8.000030517578125 * e, 91.76704406738281 * e),
       n.bezierCurveTo(31.000030517578125 * e, 112.76704406738281 * e, 87.00003051757812 * e, 119.76704406738281 * e, 116.00003051757812 * e, 117.76704406738281 * e),
       n.bezierCurveTo(175.00003051757812 * e, 18.767044067382812 * e, 170.00003051757812 * e, 23.767044067382812 * e, 181.00003051757812 * e, 14.767044067382812 * e),
       n.bezierCurveTo(199.00003051757812 * e, 34.76704406738281 * e, 203.00003051757812 * e, 54.76704406738281 * e, 247.00003051757812 * e, 115.76704406738281 * e),
       n.closePath(),
       se(n, t[0], t[0], 10 * e),
       n.translate(0 * e, -10 * e),
       n.globalAlpha = 1,
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(107.00003051757812 * e, 54.13069152832031 * e),
       n.bezierCurveTo(106.50003051757812 * e, 38.63069152832031 * e, 106.50003051757812 * e, 38.63069152832031 * e, 106.00003051757812 * e, 23.130691528320312 * e),
       n.bezierCurveTo(121.50003051757812 * e, 38.13069152832031 * e, 121.50003051757812 * e, 38.13069152832031 * e, 137.00003051757812 * e, 53.13069152832031 * e),
       n.closePath(),
       se(n, t[2], t[3], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(233.00003051757812 * e, 53.6761474609375 * e),
       n.bezierCurveTo(247.00003051757812 * e, 37.1761474609375 * e, 247.00003051757812 * e, 37.1761474609375 * e, 261.0000305175781 * e, 20.6761474609375 * e),
       n.bezierCurveTo(261.0000305175781 * e, 36.1761474609375 * e, 261.0000305175781 * e, 36.1761474609375 * e, 261.0000305175781 * e, 51.6761474609375 * e),
       n.closePath(),
       se(n, t[2], t[3], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(293.0000305175781 * e, 54.403411865234375 * e),
       n.bezierCurveTo(300.0000305175781 * e, 49.903411865234375 * e, 300.0000305175781 * e, 49.903411865234375 * e, 307.0000305175781 * e, 45.403411865234375 * e),
       n.bezierCurveTo(307.0000305175781 * e, 49.903411865234375 * e, 307.0000305175781 * e, 49.903411865234375 * e, 307.0000305175781 * e, 54.403411865234375 * e),
       n.closePath(),
       se(n, t[2], t[3], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(77.00003051757812 * e, 54.403411865234375 * e),
       n.bezierCurveTo(70.00003051757812 * e, 50.403411865234375 * e, 70.00003051757812 * e, 50.403411865234375 * e, 63.000030517578125 * e, 46.403411865234375 * e),
       n.bezierCurveTo(62.500030517578125 * e, 50.903411865234375 * e, 62.500030517578125 * e, 50.903411865234375 * e, 62.000030517578125 * e, 55.403411865234375 * e),
       n.closePath(),
       se(n, t[2], t[3], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(58.000030517578125 * e, 122.3125 * e),
       n.bezierCurveTo(59.500030517578125 * e, 97.3125 * e, 59.500030517578125 * e, 97.3125 * e, 61.000030517578125 * e, 72.3125 * e),
       n.bezierCurveTo(91.00003051757812 * e, 89.3125 * e, 91.00003051757812 * e, 89.3125 * e, 121.00003051757812 * e, 106.3125 * e),
       n.closePath(),
       se(n, t[1], t[1], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(310.0000305175781 * e, 127.3125 * e),
       n.bezierCurveTo(308.0000305175781 * e, 98.3125 * e, 308.0000305175781 * e, 98.3125 * e, 306.0000305175781 * e, 69.3125 * e),
       n.bezierCurveTo(274.5000305175781 * e, 88.8125 * e, 274.5000305175781 * e, 88.8125 * e, 243.00003051757812 * e, 108.3125 * e),
       n.closePath(),
       se(n, t[1], t[1], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(226.00003051757812 * e, 87.85795593261719 * e),
       n.bezierCurveTo(243.50003051757812 * e, 66.85795593261719 * e, 243.50003051757812 * e, 66.85795593261719 * e, 261.0000305175781 * e, 45.85795593261719 * e),
       n.bezierCurveTo(265.0000305175781 * e, 83.85795593261719 * e, 265.0000305175781 * e, 83.85795593261719 * e, 269.0000305175781 * e, 121.85795593261719 * e),
       n.bezierCurveTo(235.00003051757812 * e, 122.85795593261719 * e, 233.00003051757812 * e, 107.85795593261719 * e, 228.00003051757812 * e, 90.85795593261719 * e),
       n.closePath(),
       se(n, t[2], t[3], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(105.00003051757812 * e, 128.8579559326172 * e),
       n.bezierCurveTo(104.50003051757812 * e, 87.85795593261719 * e, 104.50003051757812 * e, 87.85795593261719 * e, 104.00003051757812 * e, 46.85795593261719 * e),
       n.bezierCurveTo(126.50003051757812 * e, 69.35795593261719 * e, 126.50003051757812 * e, 69.35795593261719 * e, 149.00003051757812 * e, 91.85795593261719 * e),
       n.bezierCurveTo(130.00003051757812 * e, 123.85795593261719 * e, 123.00003051757812 * e, 132.8579559326172 * e, 107.00003051757812 * e, 130.8579559326172 * e),
       n.closePath(),
       se(n, t[1], t[1], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(59.000030517578125 * e, 121.85795593261719 * e),
       n.bezierCurveTo(59.500030517578125 * e, 99.35795593261719 * e, 59.500030517578125 * e, 99.35795593261719 * e, 60.000030517578125 * e, 76.85795593261719 * e),
       n.bezierCurveTo(84.00003051757812 * e, 92.35795593261719 * e, 84.00003051757812 * e, 92.35795593261719 * e, 108.00003051757812 * e, 107.85795593261719 * e),
       n.bezierCurveTo(106.00003051757812 * e, 148.8579559326172 * e, 86.00003051757812 * e, 148.8579559326172 * e, 62.000030517578125 * e, 123.85795593261719 * e),
       n.closePath(),
       se(n, t[2], t[3], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(105.00003051757812 * e, 132.8579559326172 * e),
       n.bezierCurveTo(104.50003051757812 * e, 93.35795593261719 * e, 104.50003051757812 * e, 93.35795593261719 * e, 104.00003051757812 * e, 53.85795593261719 * e),
       n.bezierCurveTo(126.50003051757812 * e, 75.85795593261719 * e, 126.50003051757812 * e, 75.85795593261719 * e, 149.00003051757812 * e, 97.85795593261719 * e),
       n.closePath(),
       se(n, t[2], t[3], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(311.0000305175781 * e, 126.85795593261719 * e),
       n.bezierCurveTo(309.0000305175781 * e, 101.35795593261719 * e, 309.0000305175781 * e, 101.35795593261719 * e, 307.0000305175781 * e, 75.85795593261719 * e),
       n.bezierCurveTo(271.0000305175781 * e, 96.85795593261719 * e, 271.0000305175781 * e, 96.85795593261719 * e, 235.00003051757812 * e, 117.85795593261719 * e),
       n.closePath(),
       se(n, t[2], t[3], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(228.00003051757812 * e, 96.85795593261719 * e),
       n.bezierCurveTo(244.50003051757812 * e, 74.85795593261719 * e, 244.50003051757812 * e, 74.85795593261719 * e, 261.0000305175781 * e, 52.85795593261719 * e),
       n.bezierCurveTo(265.5000305175781 * e, 89.85795593261719 * e, 265.5000305175781 * e, 89.85795593261719 * e, 270.0000305175781 * e, 126.85795593261719 * e),
       n.closePath(),
       se(n, t[2], t[3], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(12.000030517578125 * e, 86.13069152832031 * e),
       n.bezierCurveTo(36.000030517578125 * e, 113.13069152832031 * e, 84.00003051757812 * e, 111.13069152832031 * e, 116.00003051757812 * e, 113.13069152832031 * e),
       n.bezierCurveTo(164.00003051757812 * e, 23.130691528320312 * e, 172.00003051757812 * e, 18.130691528320312 * e, 181.00003051757812 * e, 9.130691528320312 * e),
       n.bezierCurveTo(199.00003051757812 * e, 29.130691528320312 * e, 221.00003051757812 * e, 78.13069152832031 * e, 247.00003051757812 * e, 112.13069152832031 * e),
       n.bezierCurveTo(301.0000305175781 * e, 122.13069152832031 * e, 338.0000305175781 * e, 111.13069152832031 * e, 359.0000305175781 * e, 94.13069152832031 * e),
       n.bezierCurveTo(359.0000305175781 * e, 113.13069152832031 * e, 358.5000305175781 * e, 105.13069152832031 * e, 358.0000305175781 * e, 116.13069152832031 * e),
       n.bezierCurveTo(270.5000305175781 * e, 130.1306915283203 * e, 270.5000305175781 * e, 130.1306915283203 * e, 183.00003051757812 * e, 144.1306915283203 * e),
       n.bezierCurveTo(98.00003051757812 * e, 128.6306915283203 * e, 98.00003051757812 * e, 128.6306915283203 * e, 13.000030517578125 * e, 113.13069152832031 * e),
       n.closePath(),
       se(n, t[1], t[1], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(247.00003051757812 * e, 115.76704406738281 * e),
       n.bezierCurveTo(305.0000305175781 * e, 124.76704406738281 * e, 335.0000305175781 * e, 112.76704406738281 * e, 359.0000305175781 * e, 93.76704406738281 * e),
       n.bezierCurveTo(359.5000305175781 * e, 113.26704406738281 * e, 359.5000305175781 * e, 113.26704406738281 * e, 360.0000305175781 * e, 132.7670440673828 * e),
       n.bezierCurveTo(339.0000305175781 * e, 177.7670440673828 * e, 281.0000305175781 * e, 178.7670440673828 * e, 243.00003051757812 * e, 183.7670440673828 * e),
       n.bezierCurveTo(214.50003051757812 * e, 214.2670440673828 * e, 214.50003051757812 * e, 214.2670440673828 * e, 186.00003051757812 * e, 244.7670440673828 * e),
       n.bezierCurveTo(155.00003051757812 * e, 214.2670440673828 * e, 155.00003051757812 * e, 214.2670440673828 * e, 124.00003051757812 * e, 183.7670440673828 * e),
       n.bezierCurveTo(51.000030517578125 * e, 180.7670440673828 * e, 21.000030517578125 * e, 161.7670440673828 * e, 9.000030517578125 * e, 129.7670440673828 * e),
       n.bezierCurveTo(8.500030517578125 * e, 110.76704406738281 * e, 8.500030517578125 * e, 110.76704406738281 * e, 8.000030517578125 * e, 91.76704406738281 * e),
       n.bezierCurveTo(31.000030517578125 * e, 112.76704406738281 * e, 87.00003051757812 * e, 119.76704406738281 * e, 116.00003051757812 * e, 117.76704406738281 * e),
       n.bezierCurveTo(175.00003051757812 * e, 18.767044067382812 * e, 170.00003051757812 * e, 23.767044067382812 * e, 181.00003051757812 * e, 14.767044067382812 * e),
       n.bezierCurveTo(199.00003051757812 * e, 34.76704406738281 * e, 203.00003051757812 * e, 54.76704406738281 * e, 247.00003051757812 * e, 115.76704406738281 * e),
       n.closePath(),
       se(n, t[2], t[3], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(27.000030517578125 * e, 94.76704406738281 * e),
       n.bezierCurveTo(11.000030517578125 * e, 81.76704406738281 * e, 31.000030517578125 * e, 72.76704406738281 * e, 44.000030517578125 * e, 59.76704406738281 * e),
       n.bezierCurveTo(9.000030517578125 * e, 65.76704406738281 * e, 4.000030517578125 * e, 78.76704406738281 * e, 9.000030517578125 * e, 89.76704406738281 * e),
       n.closePath(),
       se(n, t[2], t[3], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(352.0000305175781 * e, 100.76705932617188 * e),
       n.bezierCurveTo(362.0000305175781 * e, 92.76705932617188 * e, 352.0000305175781 * e, 84.76705932617188 * e, 340.0000305175781 * e, 68.76705932617188 * e),
       n.bezierCurveTo(360.0000305175781 * e, 69.76705932617188 * e, 364.0000305175781 * e, 79.76705932617188 * e, 364.0000305175781 * e, 94.76705932617188 * e),
       n.closePath(),
       se(n, t[1], t[1], 1 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(25.000030517578125 * e, 97.94886779785156 * e),
       n.bezierCurveTo(2.000030517578125 * e, 76.94886779785156 * e, 29.000030517578125 * e, 62.94886779785156 * e, 44.000030517578125 * e, 59.94886779785156 * e),
       n.bezierCurveTo(8.000030517578125 * e, 59.94886779785156 * e, -.999969482421875 * e, 81.94886779785156 * e, 4.000030517578125 * e, 92.94886779785156 * e),
       n.closePath(),
       se(n, t[3]),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(349.0000305175781 * e, 100.94886779785156 * e),
       n.bezierCurveTo(366.0000305175781 * e, 82.94886779785156 * e, 353.0000305175781 * e, 76.94886779785156 * e, 337.0000305175781 * e, 67.94886779785156 * e),
       n.bezierCurveTo(366.0000305175781 * e, 69.94886779785156 * e, 366.0000305175781 * e, 83.94886779785156 * e, 363.0000305175781 * e, 101.94886779785156 * e),
       n.closePath(),
       se(n, t[2], t[3], 10 * e),
       Ee(n, 46.000030517578125 * e, 137.5852279663086 * e, 9.219544457292887 * e),
       se(n, t[4], t[5], 1 * e),
       Ee(n, 308.0000305175781 * e, 141.5852279663086 * e, 8.54400374531753 * e),
       se(n, t[4], t[5], 1 * e),
       Ee(n, 92.00003051757812 * e, 149.58523559570312 * e, 14.866068747318506 * e),
       se(n, t[4], t[5], 1 * e),
       Ee(n, 262.0000305175781 * e, 148.8579559326172 * e, 15.620499351813308 * e),
       se(n, t[4], t[5], 1 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(184.00003051757812 * e, 68.85795593261719 * e),
       n.bezierCurveTo(203.00003051757812 * e, 108.85795593261719 * e, 203.00003051757812 * e, 108.85795593261719 * e, 222.00003051757812 * e, 148.8579559326172 * e),
       n.bezierCurveTo(202.50003051757812 * e, 177.8579559326172 * e, 202.50003051757812 * e, 177.8579559326172 * e, 183.00003051757812 * e, 206.8579559326172 * e),
       n.bezierCurveTo(162.00003051757812 * e, 178.8579559326172 * e, 162.00003051757812 * e, 178.8579559326172 * e, 141.00003051757812 * e, 150.8579559326172 * e),
       n.closePath(),
       se(n, t[4], t[5], 10 * e),
       n.beginPath(),
       n.lineCap = "round",
       n.lineJoin = "round",
       n.moveTo(183.00003051757812 * e, 104.94886779785156 * e),
       n.bezierCurveTo(192.50003051757812 * e, 125.44886779785156 * e, 192.50003051757812 * e, 125.44886779785156 * e, 202.00003051757812 * e, 145.94886779785156 * e),
       n.bezierCurveTo(192.00003051757812 * e, 163.94886779785156 * e, 192.00003051757812 * e, 163.94886779785156 * e, 182.00003051757812 * e, 181.94886779785156 * e),
       n.bezierCurveTo(172.50003051757812 * e, 164.44886779785156 * e, 172.50003051757812 * e, 164.44886779785156 * e, 163.00003051757812 * e, 146.94886779785156 * e),
       n.closePath(),
       se(n, t[6]),
       r
   }
   function Yn() {
       var e = document.createElement("canvas")
         , i = e.getContext("2d");
       e.width = 460,
       e.height = 220,
       i.fillStyle = "#3a2a0d",
       i.fillRect(0, 0, e.width, e.height),
       i.lineWidth = 4,
       i.beginPath(),
       i.strokeStyle = "#513810";
       for (var t = 20; t < 220; t += 20)
           i.moveTo(0, t),
           i.lineTo(460, t),
           i.closePath(),
           i.stroke();
       return e
   }
   function Un(e) {
       var i = document.createElement("canvas")
         , t = i.getContext("2d")
         , r = 950 * e
         , n = 180 * e
         , o = 50 * e
         , a = 20 * e
         , s = 240 * e
         , T = 35 * e
         , I = 1 * e
         , E = 4 * e
         , _ = 4 * e;
       i.width = r,
       i.height = o,
       t.translate(0, 15 * e),
       Te(t, T, I, n, a, E),
       se(t, null, "#69A148", _);
       var u = sprite[SPRITE.HEART_SYMBOL_HUD];
       t.drawImage(u, 17, -8),
       t.translate(s, 0),
       Te(t, T, I, n, a, E),
       se(t, null, "#AF352A", _);
       u = sprite[SPRITE.FOOD_SYMBOL_HUD];
       t.drawImage(u, 17, -9),
       t.translate(s, 0),
       Te(t, T, I, n, a, E),
       se(t, null, "#669BB1", _);
       u = sprite[SPRITE.COLD_SYMBOL_HUD];
       t.drawImage(u, 17, -8),
       t.translate(s, 0),
       Te(t, T, I, n, a, E),
       se(t, null, "#074A87", _);
       u = sprite[SPRITE.WATER_SYMBOL_HUD];
       return t.drawImage(u, 17, -8),
       i
   }
   function kn() {
       var e = (new Date).getTime();
       function i(e) {
           for (var i = 0, t = 0, r = 0; t < e.length; t++) {
               var n = e.charAt(t);
               "_" !== n && 5 !== t && ("1" === n && (i += Math.pow(2, r)),
               r++)
           }
           return i
       }
       for (var t in render_cosmetics(),
       sprite[SPRITE.RIVER_WAVE] = [IMAGES.RIVER_WAVED, IMAGES.RIVER_WAVEN],
       sprite[SPRITE.RIVER_DECO] = [],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY] = [],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_010_000")] = [IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_010_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_010_000")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_011_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_010_000")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_011_010")] = [IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_011_011")] = [IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO20],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO8, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_111_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_111_111")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO13],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_010_000")] = [IMAGES.DAY_RIVER_COMPO20],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_010_010")] = [IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_011_000")] = [IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_011_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_011_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_011_000")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_011_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_011_011")] = [IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO15],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_011_010")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_111_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_111_010")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_111_010")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_110_000")] = [IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_000")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("111_111_110")] = [IMAGES.DAY_RIVER_COMPO28, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("111_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("111_111_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("111_111_000")] = [IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO14],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("111_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("111_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("111_111_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT] = [],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_010_000")] = [IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_010_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_010_000")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_011_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_010_000")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_011_010")] = [IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_011_011")] = [IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO20],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO8, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_111_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_111_111")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO13],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_010_000")] = [IMAGES.NIGHT_RIVER_COMPO20],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_010_010")] = [IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_011_000")] = [IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_011_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_011_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_011_000")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_011_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_011_011")] = [IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO15],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_011_010")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_111_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_111_010")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_111_010")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_110_000")] = [IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_000")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("111_111_110")] = [IMAGES.NIGHT_RIVER_COMPO28, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("111_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("111_111_110")],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("111_111_000")] = [IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO14],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("111_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
       sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("111_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("111_111_110")],
       sprite[SPRITE.RIVER] = [],
       sprite[SPRITE.RIVER][SPRITE.DAY] = [],
       sprite[SPRITE.RIVER][SPRITE.DAY][i("000_010_000")] = IMAGES.DAY_RIVER_000_010_000,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("000_010_010")] = IMAGES.DAY_RIVER_000_010_010,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("000_011_000")] = IMAGES.DAY_RIVER_000_011_000,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("000_011_010")] = IMAGES.DAY_RIVER_000_011_010,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("000_011_011")] = IMAGES.DAY_RIVER_000_011_011,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("000_110_000")] = IMAGES.DAY_RIVER_000_110_000,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("000_110_010")] = IMAGES.DAY_RIVER_000_110_010,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("000_110_110")] = IMAGES.DAY_RIVER_000_110_110,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("000_111_000")] = IMAGES.DAY_RIVER_000_111_000,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("000_111_010")] = IMAGES.DAY_RIVER_000_111_010,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("000_111_011")] = IMAGES.DAY_RIVER_000_111_011,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("000_111_110")] = IMAGES.DAY_RIVER_000_111_110,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("000_111_111")] = IMAGES.DAY_RIVER_000_111_111,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("010_010_000")] = IMAGES.DAY_RIVER_010_010_000,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("010_010_010")] = IMAGES.DAY_RIVER_010_010_010,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("010_011_000")] = IMAGES.DAY_RIVER_010_011_000,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("010_011_010")] = IMAGES.DAY_RIVER_010_011_010,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("010_011_011")] = IMAGES.DAY_RIVER_010_011_011,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("010_110_000")] = IMAGES.DAY_RIVER_010_110_000,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("010_110_010")] = IMAGES.DAY_RIVER_010_110_010,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("010_110_110")] = IMAGES.DAY_RIVER_010_110_110,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("010_111_000")] = IMAGES.DAY_RIVER_010_111_000,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("010_111_010")] = IMAGES.DAY_RIVER_010_111_010,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("010_111_011")] = IMAGES.DAY_RIVER_010_111_011,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("010_111_110")] = IMAGES.DAY_RIVER_010_111_110,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("010_111_111")] = IMAGES.DAY_RIVER_010_111_111,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("011_011_000")] = IMAGES.DAY_RIVER_011_011_000,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("011_011_010")] = IMAGES.DAY_RIVER_011_011_010,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("011_011_011")] = IMAGES.DAY_RIVER_011_011_011,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("011_111_000")] = IMAGES.DAY_RIVER_011_111_000,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("011_111_010")] = IMAGES.DAY_RIVER_011_111_010,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("011_111_011")] = IMAGES.DAY_RIVER_011_111_011,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("011_111_110")] = IMAGES.DAY_RIVER_011_111_110,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("011_111_111")] = IMAGES.DAY_RIVER_011_111_111,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("110_110_000")] = IMAGES.DAY_RIVER_110_110_000,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("110_110_010")] = IMAGES.DAY_RIVER_110_110_010,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("110_110_110")] = IMAGES.DAY_RIVER_110_110_110,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("110_111_000")] = IMAGES.DAY_RIVER_110_111_000,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("110_111_010")] = IMAGES.DAY_RIVER_110_111_010,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("110_111_011")] = IMAGES.DAY_RIVER_110_111_011,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("110_111_110")] = IMAGES.DAY_RIVER_110_111_110,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("110_111_111")] = IMAGES.DAY_RIVER_110_111_111,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("111_111_011")] = IMAGES.DAY_RIVER_111_111_011,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("111_111_110")] = IMAGES.DAY_RIVER_111_111_110,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("111_111_011")] = IMAGES.DAY_RIVER_111_111_011,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("111_111_000")] = IMAGES.DAY_RIVER_111_111_000,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("111_111_111")] = IMAGES.DAY_RIVER_111_111_111,
       sprite[SPRITE.RIVER][SPRITE.DAY][i("111_111_010")] = IMAGES.DAY_RIVER_111_111_010,
       sprite[SPRITE.RIVER][SPRITE.NIGHT] = [],
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_010_000")] = IMAGES.NIGHT_RIVER_000_010_000,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_010_010")] = IMAGES.NIGHT_RIVER_000_010_010,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_011_000")] = IMAGES.NIGHT_RIVER_000_011_000,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_011_010")] = IMAGES.NIGHT_RIVER_000_011_010,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_011_011")] = IMAGES.NIGHT_RIVER_000_011_011,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_110_000")] = IMAGES.NIGHT_RIVER_000_110_000,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_110_010")] = IMAGES.NIGHT_RIVER_000_110_010,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_110_110")] = IMAGES.NIGHT_RIVER_000_110_110,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_111_000")] = IMAGES.NIGHT_RIVER_000_111_000,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_111_010")] = IMAGES.NIGHT_RIVER_000_111_010,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_111_011")] = IMAGES.NIGHT_RIVER_000_111_011,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_111_110")] = IMAGES.NIGHT_RIVER_000_111_110,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_111_111")] = IMAGES.NIGHT_RIVER_000_111_111,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_010_000")] = IMAGES.NIGHT_RIVER_010_010_000,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_010_010")] = IMAGES.NIGHT_RIVER_010_010_010,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_011_000")] = IMAGES.NIGHT_RIVER_010_011_000,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_011_010")] = IMAGES.NIGHT_RIVER_010_011_010,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_011_011")] = IMAGES.NIGHT_RIVER_010_011_011,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_110_000")] = IMAGES.NIGHT_RIVER_010_110_000,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_110_010")] = IMAGES.NIGHT_RIVER_010_110_010,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_110_110")] = IMAGES.NIGHT_RIVER_010_110_110,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_111_000")] = IMAGES.NIGHT_RIVER_010_111_000,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_111_010")] = IMAGES.NIGHT_RIVER_010_111_010,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_111_011")] = IMAGES.NIGHT_RIVER_010_111_011,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_111_110")] = IMAGES.NIGHT_RIVER_010_111_110,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_111_111")] = IMAGES.NIGHT_RIVER_010_111_111,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_011_000")] = IMAGES.NIGHT_RIVER_011_011_000,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_011_010")] = IMAGES.NIGHT_RIVER_011_011_010,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_011_011")] = IMAGES.NIGHT_RIVER_011_011_011,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_111_000")] = IMAGES.NIGHT_RIVER_011_111_000,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_111_010")] = IMAGES.NIGHT_RIVER_011_111_010,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_111_011")] = IMAGES.NIGHT_RIVER_011_111_011,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_111_110")] = IMAGES.NIGHT_RIVER_011_111_110,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_111_111")] = IMAGES.NIGHT_RIVER_011_111_111,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_110_000")] = IMAGES.NIGHT_RIVER_110_110_000,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_110_010")] = IMAGES.NIGHT_RIVER_110_110_010,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_110_110")] = IMAGES.NIGHT_RIVER_110_110_110,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_111_000")] = IMAGES.NIGHT_RIVER_110_111_000,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_111_010")] = IMAGES.NIGHT_RIVER_110_111_010,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_111_011")] = IMAGES.NIGHT_RIVER_110_111_011,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_111_110")] = IMAGES.NIGHT_RIVER_110_111_110,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_111_111")] = IMAGES.NIGHT_RIVER_110_111_111,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("111_111_110")] = IMAGES.NIGHT_RIVER_111_111_110,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("111_111_000")] = IMAGES.NIGHT_RIVER_111_111_000,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("111_111_111")] = IMAGES.NIGHT_RIVER_111_111_111,
       sprite[SPRITE.RIVER][SPRITE.NIGHT][i("111_111_010")] = IMAGES.NIGHT_RIVER_111_111_010,
       sprite[SPRITE.PICK_REIDITE] = [],
       sprite[SPRITE.PICK_REIDITE][SPRITE.DAY] = IMAGES.PICK_REIDITED,
       sprite[SPRITE.PICK_REIDITE][SPRITE.NIGHT] = IMAGES.PICK_REIDITEN,
       sprite[SPRITE.CARROT] = [],
       sprite[SPRITE.CARROT][SPRITE.DAY] = IMAGES.CARROTD,
       sprite[SPRITE.CARROT][SPRITE.NIGHT] = IMAGES.CARROTN,
       sprite[SPRITE.TOMATO_MINI] = [],
       sprite[SPRITE.TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINID,
       sprite[SPRITE.TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MININ,
       sprite[SPRITE.TOMATO] = [],
       sprite[SPRITE.TOMATO][SPRITE.DAY] = IMAGES.TOMATOD,
       sprite[SPRITE.TOMATO][SPRITE.NIGHT] = IMAGES.TOMATON,
       sprite[SPRITE.DRIED_CARROT] = [],
       sprite[SPRITE.DRIED_CARROT][SPRITE.DAY] = IMAGES.CARROT_DRIEDD,
       sprite[SPRITE.DRIED_CARROT][SPRITE.NIGHT] = IMAGES.CARROT_DRIEDN,
       sprite[SPRITE.DRIED_TOMATO_MINI] = [],
       sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINI_DRIEDD,
       sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MINI_DRIEDN,
       sprite[SPRITE.WATERMELON] = [],
       sprite[SPRITE.WATERMELON][SPRITE.DAY] = IMAGES.WATERMELOND,
       sprite[SPRITE.WATERMELON][SPRITE.NIGHT] = IMAGES.WATERMELONN,
       sprite[SPRITE.DRIED_WATERMELON] = [],
       sprite[SPRITE.DRIED_WATERMELON][SPRITE.DAY] = IMAGES.DRIED_WATERMELOND,
       sprite[SPRITE.DRIED_WATERMELON][SPRITE.NIGHT] = IMAGES.DRIED_WATERMELONN,
       sprite[SPRITE.ALOE_VERA_GROWN] = [],
       sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.DAY] = IMAGES.ALOE_VERA_GROWND,
       sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.NIGHT] = IMAGES.ALOE_VERA_GROWNN,
       sprite[SPRITE.DRIED_ALOE_VERA] = [],
       sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.DAY] = IMAGES.ALOE_VERA_DRIEDD,
       sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.NIGHT] = IMAGES.ALOE_VERAN_DRIEDN,
       sprite[SPRITE.CACTUS] = [],
       sprite[SPRITE.CACTUS][SPRITE.DAY] = [IMAGES.CACTUSD],
       sprite[SPRITE.CACTUS][SPRITE.NIGHT] = [IMAGES.CACTUSN],
       sprite[SPRITE.REIDITE_WALL] = [],
       sprite[SPRITE.REIDITE_WALL][SPRITE.DAY] = IMAGES.REIDITE_WALLD,
       sprite[SPRITE.REIDITE_WALL][SPRITE.NIGHT] = IMAGES.REIDITE_WALLN,
       sprite[SPRITE.REIDITE_SPIKE] = [],
       sprite[SPRITE.REIDITE_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_SPIKED,
       sprite[SPRITE.REIDITE_SPIKE][SPRITE.NIGHT] = IMAGES.REIDITE_SPIKEN,
       sprite[SPRITE.REIDITE_DOOR] = [],
       sprite[SPRITE.REIDITE_DOOR][SPRITE.DAY] = IMAGES.REIDITE_DOORD,
       sprite[SPRITE.REIDITE_DOOR][SPRITE.NIGHT] = IMAGES.REIDITE_DOORN,
       sprite[SPRITE.WOOD_DOOR_SPIKE] = [],
       sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.WOOD_DOOR_SPIKED,
       sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.WOOD_DOOR_SPIKEN,
       sprite[SPRITE.STONE_DOOR_SPIKE] = [],
       sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.STONE_DOOR_SPIKED,
       sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.STONE_DOOR_SPIKEN,
       sprite[SPRITE.GOLD_DOOR_SPIKE] = [],
       sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.GOLD_DOOR_SPIKED,
       sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.GOLD_DOOR_SPIKEN,
       sprite[SPRITE.DIAMOND_DOOR_SPIKE] = [],
       sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.DAY] = IMAGES.DIAMOND_DOOR_SPIKED,
       sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.DIAMOND_DOOR_SPIKEN,
       sprite[SPRITE.AMETHYST_DOOR_SPIKE] = [],
       sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.DAY] = IMAGES.AMETHYST_DOOR_SPIKED,
       sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.AMETHYST_DOOR_SPIKEN,
       sprite[SPRITE.REIDITE_DOOR_SPIKE] = [],
       sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_DOOR_SPIKED,
       sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.REIDITE_DOOR_SPIKEN,
       sprite[SPRITE.GOLDEN_HEN] = [],
       sprite[SPRITE.GOLDEN_HEN][SPRITE.DAY] = IMAGES.HEND,
       sprite[SPRITE.GOLDEN_HEN][SPRITE.NIGHT] = IMAGES.HENN,
       sprite[SPRITE.GOLDEN_CHICKEN] = [],
       sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.DAY] = IMAGES.CHICKEND,
       sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.NIGHT] = IMAGES.CHICKENN,
       sprite[SPRITE.HAMMER_REIDITE] = [],
       sprite[SPRITE.HAMMER_REIDITE][SPRITE.DAY] = IMAGES.HAMMER_REIDITED,
       sprite[SPRITE.HAMMER_REIDITE][SPRITE.NIGHT] = IMAGES.HAMMER_REIDITEN,
       sprite[SPRITE.HURT_GOLDEN_HEN] = IMAGES.HURT_GOLDEN_HEN,
       sprite[SPRITE.HURT_GOLDEN_CHICKEN] = IMAGES.HURT_GOLDEN_CHICKEN,
       sprite[SPRITE.FOG] = [],
       sprite[SPRITE.FOG][SPRITE.DAY] = [],
       sprite[SPRITE.FOG][SPRITE.NIGHT] = [],
       sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG0D),
       sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG1D),
       sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG2D),
       sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG0N),
       sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG1N),
       sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG2N),
       sprite[SPRITE.FOD] = [],
       sprite[SPRITE.FOD][SPRITE.DAY] = [],
       sprite[SPRITE.FOD][SPRITE.NIGHT] = [],
       sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD0D),
       sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD1D),
       sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD2D),
       sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD0N),
       sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD1N),
       sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD2N),
       sprite[SPRITE.MARKER] = [],
       sprite[SPRITE.MARKER][SPRITE.DAY] = [],
       sprite[SPRITE.MARKER][SPRITE.NIGHT] = [],
       sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER0D),
       sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER1D),
       sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER2D),
       sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER3D),
       sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER0N),
       sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER1N),
       sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER2N),
       sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER3N),
       sprite[SPRITE.LAVA_DRAGON] = [],
       sprite[SPRITE.LAVA_DRAGON][SPRITE.DAY] = IMAGES.LAVA_DRAGOND,
       sprite[SPRITE.LAVA_DRAGON][SPRITE.NIGHT] = IMAGES.LAVA_DRAGONN,
       sprite[SPRITE.LAVA_WING_LEFT] = [],
       sprite[SPRITE.LAVA_WING_LEFT][SPRITE.DAY] = IMAGES.LAVA_WING_LEFTD,
       sprite[SPRITE.LAVA_WING_LEFT][SPRITE.NIGHT] = IMAGES.LAVA_WING_LEFTN,
       sprite[SPRITE.LAVA_WING_RIGHT] = [],
       sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.DAY] = IMAGES.LAVA_WING_RIGHTD,
       sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.NIGHT] = IMAGES.LAVA_WING_RIGHTN,
       sprite[SPRITE.HURT_LAVA_DRAGON] = IMAGES.HURT_LAVA_DRAGON,
       sprite[SPRITE.HURT_LAVA_WING_LEFT] = IMAGES.HURT_LAVA_WING_LEFT,
       sprite[SPRITE.HURT_LAVA_WING_RIGHT] = IMAGES.HURT_LAVA_WING_RIGHT,
       sprite[SPRITE.DIAMOND_PROTECTION] = [],
       sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.DAY] = IMAGES.DIAMOND_PROTECTIOND,
       sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.NIGHT] = IMAGES.DIAMOND_PROTECTIONN,
       sprite[SPRITE.GLOVES_DIAMOND_PROTECTION] = [],
       sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND,
       sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN,
       sprite[SPRITE.AMETHYST_PROTECTION] = [],
       sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.DAY] = IMAGES.AMETHYST_PROTECTIOND,
       sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.NIGHT] = IMAGES.AMETHYST_PROTECTIONN,
       sprite[SPRITE.GLOVES_AMETHYST_PROTECTION] = [],
       sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND,
       sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN,
       sprite[SPRITE.REIDITE_HELMET] = [],
       sprite[SPRITE.REIDITE_HELMET][SPRITE.DAY] = IMAGES.REIDITE_HELMETD,
       sprite[SPRITE.REIDITE_HELMET][SPRITE.NIGHT] = IMAGES.REIDITE_HELMETN,
       sprite[SPRITE.REIDITE_SWORD] = [],
       sprite[SPRITE.REIDITE_SWORD][SPRITE.DAY] = IMAGES.REIDITE_SWORDD,
       sprite[SPRITE.REIDITE_SWORD][SPRITE.NIGHT] = IMAGES.REIDITE_SWORDN,
       sprite[SPRITE.REIDITE_SPEAR] = [],
       sprite[SPRITE.REIDITE_SPEAR][SPRITE.DAY] = IMAGES.REIDITE_SPEARD,
       sprite[SPRITE.REIDITE_SPEAR][SPRITE.NIGHT] = IMAGES.REIDITE_SPEARN,
       sprite[SPRITE.LAVA_SPEAR] = [],
       sprite[SPRITE.LAVA_SPEAR][SPRITE.DAY] = IMAGES.LAVA_SPEARD,
       sprite[SPRITE.LAVA_SPEAR][SPRITE.NIGHT] = IMAGES.LAVA_SPEARN,
       sprite[SPRITE.LAVA_SWORD] = [],
       sprite[SPRITE.LAVA_SWORD][SPRITE.DAY] = IMAGES.LAVA_SWORDD,
       sprite[SPRITE.LAVA_SWORD][SPRITE.NIGHT] = IMAGES.LAVA_SWORDN,
       sprite[SPRITE.LAVA_HELMET] = [],
       sprite[SPRITE.LAVA_HELMET][SPRITE.DAY] = IMAGES.LAVA_HELMETD,
       sprite[SPRITE.LAVA_HELMET][SPRITE.NIGHT] = IMAGES.LAVA_HELMETN,
       sprite[SPRITE.WITCH] = [],
       sprite[SPRITE.WITCH][SPRITE.DAY] = IMAGES.WITCHD,
       sprite[SPRITE.WITCH][SPRITE.NIGHT] = IMAGES.WITCHN,
       sprite[SPRITE.NIMBUS] = [],
       sprite[SPRITE.NIMBUS][SPRITE.DAY] = IMAGES.NIMBUSD,
       sprite[SPRITE.NIMBUS][SPRITE.NIGHT] = IMAGES.NIMBUSN,
       sprite[SPRITE.WOOD_SHIELD] = [],
       sprite[SPRITE.WOOD_SHIELD][SPRITE.DAY] = IMAGES.WOOD_SHIELDD,
       sprite[SPRITE.WOOD_SHIELD][SPRITE.NIGHT] = IMAGES.WOOD_SHIELDN,
       sprite[SPRITE.STONE_SHIELD] = [],
       sprite[SPRITE.STONE_SHIELD][SPRITE.DAY] = IMAGES.STONE_SHIELDD,
       sprite[SPRITE.STONE_SHIELD][SPRITE.NIGHT] = IMAGES.STONE_SHIELDN,
       sprite[SPRITE.GOLD_SHIELD] = [],
       sprite[SPRITE.GOLD_SHIELD][SPRITE.DAY] = IMAGES.GOLD_SHIELDD,
       sprite[SPRITE.GOLD_SHIELD][SPRITE.NIGHT] = IMAGES.GOLD_SHIELDN,
       sprite[SPRITE.DIAMOND_SHIELD] = [],
       sprite[SPRITE.DIAMOND_SHIELD][SPRITE.DAY] = IMAGES.DIAMOND_SHIELDD,
       sprite[SPRITE.DIAMOND_SHIELD][SPRITE.NIGHT] = IMAGES.DIAMOND_SHIELDN,
       sprite[SPRITE.AMETHYST_SHIELD] = [],
       sprite[SPRITE.AMETHYST_SHIELD][SPRITE.DAY] = IMAGES.AMETHYST_SHIELDD,
       sprite[SPRITE.AMETHYST_SHIELD][SPRITE.NIGHT] = IMAGES.AMETHYST_SHIELDN,
       sprite[SPRITE.REIDITE_SHIELD] = [],
       sprite[SPRITE.REIDITE_SHIELD][SPRITE.DAY] = IMAGES.REIDITE_SHIELDD,
       sprite[SPRITE.REIDITE_SHIELD][SPRITE.NIGHT] = IMAGES.REIDITE_SHIELDN,
       sprite[SPRITE.WOOD_ARROW] = [],
       sprite[SPRITE.WOOD_ARROW][SPRITE.DAY] = IMAGES.WOOD_ARROWD,
       sprite[SPRITE.WOOD_ARROW][SPRITE.NIGHT] = IMAGES.WOOD_ARROWN,
       sprite[SPRITE.WOOD_BOW] = [],
       sprite[SPRITE.WOOD_BOW][SPRITE.DAY] = IMAGES.WOOD_BOWD,
       sprite[SPRITE.WOOD_BOW][SPRITE.NIGHT] = IMAGES.WOOD_BOWN,
       sprite[SPRITE.STONE_ARROW] = [],
       sprite[SPRITE.STONE_ARROW][SPRITE.DAY] = IMAGES.STONE_ARROWD,
       sprite[SPRITE.STONE_ARROW][SPRITE.NIGHT] = IMAGES.STONE_ARROWN,
       sprite[SPRITE.STONE_BOW] = [],
       sprite[SPRITE.STONE_BOW][SPRITE.DAY] = IMAGES.STONE_BOWD,
       sprite[SPRITE.STONE_BOW][SPRITE.NIGHT] = IMAGES.STONE_BOWN,
       sprite[SPRITE.GOLD_ARROW] = [],
       sprite[SPRITE.GOLD_ARROW][SPRITE.DAY] = IMAGES.GOLD_ARROWD,
       sprite[SPRITE.GOLD_ARROW][SPRITE.NIGHT] = IMAGES.GOLD_ARROWN,
       sprite[SPRITE.GOLD_BOW] = [],
       sprite[SPRITE.GOLD_BOW][SPRITE.DAY] = IMAGES.GOLD_BOWD,
       sprite[SPRITE.GOLD_BOW][SPRITE.NIGHT] = IMAGES.GOLD_BOWN,
       sprite[SPRITE.DIAMOND_ARROW] = [],
       sprite[SPRITE.DIAMOND_ARROW][SPRITE.DAY] = IMAGES.DIAMOND_ARROWD,
       sprite[SPRITE.DIAMOND_ARROW][SPRITE.NIGHT] = IMAGES.DIAMOND_ARROWN,
       sprite[SPRITE.DIAMOND_BOW] = [],
       sprite[SPRITE.DIAMOND_BOW][SPRITE.DAY] = IMAGES.DIAMOND_BOWD,
       sprite[SPRITE.DIAMOND_BOW][SPRITE.NIGHT] = IMAGES.DIAMOND_BOWN,
       sprite[SPRITE.AMETHYST_ARROW] = [],
       sprite[SPRITE.AMETHYST_ARROW][SPRITE.DAY] = IMAGES.AMETHYST_ARROWD,
       sprite[SPRITE.AMETHYST_ARROW][SPRITE.NIGHT] = IMAGES.AMETHYST_ARROWN,
       sprite[SPRITE.AMETHYST_BOW] = [],
       sprite[SPRITE.AMETHYST_BOW][SPRITE.DAY] = IMAGES.AMETHYST_BOWD,
       sprite[SPRITE.AMETHYST_BOW][SPRITE.NIGHT] = IMAGES.AMETHYST_BOWN,
       sprite[SPRITE.REIDITE_ARROW] = [],
       sprite[SPRITE.REIDITE_ARROW][SPRITE.DAY] = IMAGES.REIDITE_ARROWD,
       sprite[SPRITE.REIDITE_ARROW][SPRITE.NIGHT] = IMAGES.REIDITE_ARROWN,
       sprite[SPRITE.REIDITE_BOW] = [],
       sprite[SPRITE.REIDITE_BOW][SPRITE.DAY] = IMAGES.REIDITE_BOWD,
       sprite[SPRITE.REIDITE_BOW][SPRITE.NIGHT] = IMAGES.REIDITE_BOWN,
       sprite[SPRITE.DRAGON_ARROW] = [],
       sprite[SPRITE.DRAGON_ARROW][SPRITE.DAY] = IMAGES.DRAGON_ARROWD,
       sprite[SPRITE.DRAGON_ARROW][SPRITE.NIGHT] = IMAGES.DRAGON_ARROWN,
       sprite[SPRITE.DRAGON_BOW] = [],
       sprite[SPRITE.DRAGON_BOW][SPRITE.DAY] = IMAGES.DRAGON_BOWD,
       sprite[SPRITE.DRAGON_BOW][SPRITE.NIGHT] = IMAGES.DRAGON_BOWN,
       sprite[SPRITE.TURBAN1] = [],
       sprite[SPRITE.TURBAN1][SPRITE.DAY] = IMAGES.TURBAN1D,
       sprite[SPRITE.TURBAN1][SPRITE.NIGHT] = IMAGES.TURBAN1N,
       sprite[SPRITE.TURBAN2] = [],
       sprite[SPRITE.TURBAN2][SPRITE.DAY] = IMAGES.TURBAN2D,
       sprite[SPRITE.TURBAN2][SPRITE.NIGHT] = IMAGES.TURBAN2N,
       sprite[SPRITE.REIDITE_PROTECTION] = [],
       sprite[SPRITE.REIDITE_PROTECTION][SPRITE.DAY] = IMAGES.REIDITE_PROTECTIOND,
       sprite[SPRITE.REIDITE_PROTECTION][SPRITE.NIGHT] = IMAGES.REIDITE_PROTECTIONN,
       sprite[SPRITE.GLOVES_REIDITE_PROTECTION] = [],
       sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.DAY] = IMAGES.HAND_REIDITE_PROTECTIOND,
       sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_REIDITE_PROTECTIONN,
       sprite[SPRITE.LAVA_SHINGLE] = [],
       sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY] = [],
       sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT] = [],
       sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES0D),
       sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES1D),
       sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1D),
       sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1N),
       sprite[SPRITE.LAVA_BUBBLE] = [],
       sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY] = [],
       sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT] = [],
       sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE0D),
       sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE1D),
       sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE2D),
       sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE0N),
       sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE1N),
       sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE2N),
       sprite[SPRITE.PITCHFORK] = [],
       sprite[SPRITE.PITCHFORK][SPRITE.DAY] = IMAGES.PITCHFORKD,
       sprite[SPRITE.PITCHFORK][SPRITE.NIGHT] = IMAGES.PITCHFORKN,
       sprite[SPRITE.PITCHFORK2] = [],
       sprite[SPRITE.PITCHFORK2][SPRITE.DAY] = IMAGES.PITCHFORK2D,
       sprite[SPRITE.PITCHFORK2][SPRITE.NIGHT] = IMAGES.PITCHFORK2N,
       sprite[SPRITE.EMERALD] = [],
       sprite[SPRITE.EMERALD][SPRITE.DAY] = [],
       sprite[SPRITE.EMERALD][SPRITE.NIGHT] = [],
       sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD0D),
       sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD1D),
       sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD2D),
       sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD0N),
       sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD1N),
       sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD2N),
       sprite[SPRITE.REIDITE] = [],
       sprite[SPRITE.REIDITE][SPRITE.DAY] = [],
       sprite[SPRITE.REIDITE][SPRITE.NIGHT] = [],
       sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE0D),
       sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE1D),
       sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE2D),
       sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE0N),
       sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE1N),
       sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE2N),
       sprite[SPRITE.MAGMA] = [],
       sprite[SPRITE.MAGMA][SPRITE.DAY] = [],
       sprite[SPRITE.MAGMA][SPRITE.NIGHT] = [],
       sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA1D),
       sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA2D),
       sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA3D),
       sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA4D),
       sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA5D),
       sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA6D),
       sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA1N),
       sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA2N),
       sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA3N),
       sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA4N),
       sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA5N),
       sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA6N),
       sprite[SPRITE.LAVA_GROUND] = [],
       sprite[SPRITE.LAVA_GROUND][SPRITE.DAY] = [],
       sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT] = [],
       sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND1D),
       sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND2D),
       sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND3D),
       sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND4D),
       sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND5D),
       sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND6D),
       sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND1N),
       sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND2N),
       sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND3N),
       sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND4N),
       sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND5N),
       sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND6N),
       sprite[SPRITE.FIRE_MOB] = [],
       sprite[SPRITE.FIRE_MOB][SPRITE.DAY] = IMAGES.FIRE_MOBD,
       sprite[SPRITE.FIRE_MOB][SPRITE.NIGHT] = IMAGES.FIRE_MOBN,
       sprite[SPRITE.HURT_FIRE_MOB] = IMAGES.FIRE_MOB_HURT,
       sprite[SPRITE.MACHETE] = [],
       sprite[SPRITE.MACHETE][SPRITE.DAY] = IMAGES.MACHETED,
       sprite[SPRITE.MACHETE][SPRITE.NIGHT] = IMAGES.MACHETEN,
       sprite[SPRITE.BOAT] = [],
       sprite[SPRITE.BOAT][SPRITE.DAY] = IMAGES.BOATD,
       sprite[SPRITE.BOAT][SPRITE.NIGHT] = IMAGES.BOATN,
       sprite[SPRITE.SLED] = [],
       sprite[SPRITE.SLED][SPRITE.DAY] = IMAGES.SLEDD,
       sprite[SPRITE.SLED][SPRITE.NIGHT] = IMAGES.SLEDN,
       sprite[SPRITE.PLANE] = [],
       sprite[SPRITE.PLANE][SPRITE.DAY] = IMAGES.PLANED,
       sprite[SPRITE.PLANE][SPRITE.NIGHT] = IMAGES.PLANEN,
       sprite[SPRITE.PENGUIN] = [],
       sprite[SPRITE.PENGUIN][SPRITE.DAY] = IMAGES.PENGUIND,
       sprite[SPRITE.PENGUIN][SPRITE.NIGHT] = IMAGES.PENGUINN,
       sprite[SPRITE.HURT_PENGUIN] = IMAGES.HURT_PENGUIN,
       sprite[SPRITE.SAND_WORM1] = [],
       sprite[SPRITE.SAND_WORM1][SPRITE.DAY] = IMAGES.SAND_WORM1D,
       sprite[SPRITE.SAND_WORM1][SPRITE.NIGHT] = IMAGES.SAND_WORM1N,
       sprite[SPRITE.SAND_WORM2] = [],
       sprite[SPRITE.SAND_WORM2][SPRITE.DAY] = IMAGES.SAND_WORM2D,
       sprite[SPRITE.SAND_WORM2][SPRITE.NIGHT] = IMAGES.SAND_WORM2N,
       sprite[SPRITE.HURT_SAND_WORM0] = IMAGES.HURT_SAND_WORM0,
       sprite[SPRITE.HURT_SAND_WORM1] = IMAGES.HURT_SAND_WORM1,
       sprite[SPRITE.HURT_SAND_WORM2] = IMAGES.HURT_SAND_WORM2,
       sprite[SPRITE.SCORPION] = [],
       sprite[SPRITE.SCORPION][SPRITE.DAY] = IMAGES.SCORPIOND,
       sprite[SPRITE.SCORPION][SPRITE.NIGHT] = IMAGES.SCORPIONN,
       sprite[SPRITE.SCORPION_HAND_LEFT] = [],
       sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.DAY] = IMAGES.SCORPION_HAND_LEFTD,
       sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.NIGHT] = IMAGES.SCORPION_HAND_LEFTN,
       sprite[SPRITE.SCORPION_HAND_RIGHT] = [],
       sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.DAY] = IMAGES.SCORPION_HAND_RIGHTD,
       sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.NIGHT] = IMAGES.SCORPION_HAND_RIGHTN,
       sprite[SPRITE.HURT_SCORPION] = IMAGES.HURT_SCORPION,
       sprite[SPRITE.HURT_SCORPION_HAND_RIGHT] = IMAGES.HURT_SCORPION_HAND_RIGHT,
       sprite[SPRITE.HURT_SCORPION_HAND_LEFT] = IMAGES.HURT_SCORPION_HAND_LEFT,
       sprite[SPRITE.CRAB_BOSS_ATTACK] = [],
       sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_ATTACKD,
       sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_ATTACKN,
       sprite[SPRITE.CRAB_BOSS_TAMED] = [],
       sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.DAY] = IMAGES.CRAB_BOSS_TAMEDD,
       sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_TAMEDN,
       sprite[SPRITE.CRAB_BOSS] = [],
       sprite[SPRITE.CRAB_BOSS][SPRITE.DAY] = IMAGES.CRAB_BOSSD,
       sprite[SPRITE.CRAB_BOSS][SPRITE.NIGHT] = IMAGES.CRAB_BOSSN,
       sprite[SPRITE.CRAB_BOSS_CLAW_LEFT] = [],
       sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFTD,
       sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFTN,
       sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT] = [],
       sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHTD,
       sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHTN,
       sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK] = [],
       sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKD,
       sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKN,
       sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK] = [],
       sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKD,
       sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKN,
       sprite[SPRITE.HURT_CRAB_BOSS] = IMAGES.HURT_CRAB_BOSS,
       sprite[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT] = IMAGES.HURT_CRAB_BOSS_CLAW_LEFT,
       sprite[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HURT_CRAB_BOSS_CLAW_RIGHT,
       sprite[SPRITE.HEAL_CRAB_BOSS] = IMAGES.HEAL_CRAB_BOSS,
       sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT] = IMAGES.HEAL_CRAB_BOSS_CLAW_LEFT,
       sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HEAL_CRAB_BOSS_CLAW_RIGHT,
       sprite[SPRITE.BABY_MAMMOTH_ATTACK] = [],
       sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_ATTACKD,
       sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_ATTACKN,
       sprite[SPRITE.BABY_MAMMOTH] = [],
       sprite[SPRITE.BABY_MAMMOTH][SPRITE.DAY] = IMAGES.BABY_MAMMOTHD,
       sprite[SPRITE.BABY_MAMMOTH][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTHN,
       sprite[SPRITE.MAMMOTH] = [],
       sprite[SPRITE.MAMMOTH][SPRITE.DAY] = IMAGES.MAMMOTHD,
       sprite[SPRITE.MAMMOTH][SPRITE.NIGHT] = IMAGES.MAMMOTHN,
       sprite[SPRITE.BABY_MAMMOTH_TAMED] = [],
       sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_TAMEDD,
       sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_TAMEDN,
       sprite[SPRITE.HURT_BABY_MAMMOTH] = IMAGES.HURT_BABY_MAMMOTH,
       sprite[SPRITE.HURT_MAMMOTH] = IMAGES.HURT_MAMMOTH,
       sprite[SPRITE.BABY_DRAGON_ATTACK] = [],
       sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_ATTACKD,
       sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_ATTACKN,
       sprite[SPRITE.BABY_DRAGON] = [],
       sprite[SPRITE.BABY_DRAGON][SPRITE.DAY] = IMAGES.BABY_DRAGOND,
       sprite[SPRITE.BABY_DRAGON][SPRITE.NIGHT] = IMAGES.BABY_DRAGONN,
       sprite[SPRITE.BABY_DRAGON_TAMED] = [],
       sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_TAMEDD,
       sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_TAMEDN,
       sprite[SPRITE.BABY_DRAGON_WING_LEFT] = [],
       sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFTD,
       sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFTN,
       sprite[SPRITE.BABY_DRAGON_WING_RIGHT] = [],
       sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHTD,
       sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHTN,
       sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK] = [],
       sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKD,
       sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKN,
       sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK] = [],
       sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKD,
       sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKN,
       sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED] = [],
       sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDD,
       sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDN,
       sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED] = [],
       sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDD,
       sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDN,
       sprite[SPRITE.HURT_BABY_DRAGON] = IMAGES.HURT_BABY_DRAGON,
       sprite[SPRITE.HURT_BABY_DRAGON_WING_LEFT] = IMAGES.HURT_BABY_DRAGON_WING_LEFT,
       sprite[SPRITE.HURT_BABY_DRAGON_WING_RIGHT] = IMAGES.HURT_BABY_DRAGON_WING_RIGHT,
       sprite[SPRITE.BABY_LAVA_ATTACK] = [],
       sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_ATTACKD,
       sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_ATTACKN,
       sprite[SPRITE.BABY_LAVA] = [],
       sprite[SPRITE.BABY_LAVA][SPRITE.DAY] = IMAGES.BABY_LAVAD,
       sprite[SPRITE.BABY_LAVA][SPRITE.NIGHT] = IMAGES.BABY_LAVAN,
       sprite[SPRITE.BABY_LAVA_TAMED] = [],
       sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_TAMEDD,
       sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_TAMEDN,
       sprite[SPRITE.BABY_LAVA_WING_LEFT] = [],
       sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFTD,
       sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFTN,
       sprite[SPRITE.BABY_LAVA_WING_RIGHT] = [],
       sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHTD,
       sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHTN,
       sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK] = [],
       sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKD,
       sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKN,
       sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK] = [],
       sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKD,
       sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKN,
       sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED] = [],
       sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDD,
       sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDN,
       sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED] = [],
       sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDD,
       sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDN,
       sprite[SPRITE.HURT_BABY_LAVA] = IMAGES.HURT_BABY_LAVA,
       sprite[SPRITE.HURT_BABY_LAVA_WING_LEFT] = IMAGES.HURT_BABY_LAVA_WING_LEFT,
       sprite[SPRITE.HURT_BABY_LAVA_WING_RIGHT] = IMAGES.HURT_BABY_LAVA_WING_RIGHT,
       sprite[SPRITE.HAWK_ATTACK] = [],
       sprite[SPRITE.HAWK_ATTACK][SPRITE.DAY] = IMAGES.HAWK_ATTACKD,
       sprite[SPRITE.HAWK_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_ATTACKN,
       sprite[SPRITE.HAWK] = [],
       sprite[SPRITE.HAWK][SPRITE.DAY] = IMAGES.HAWKD,
       sprite[SPRITE.HAWK][SPRITE.NIGHT] = IMAGES.HAWKN,
       sprite[SPRITE.HURT_HAWK_GROUND] = IMAGES.HURT_HAWK_GROUND,
       sprite[SPRITE.HAWK_GROUND] = [],
       sprite[SPRITE.HAWK_GROUND][SPRITE.DAY] = IMAGES.HAWK_GROUNDD,
       sprite[SPRITE.HAWK_GROUND][SPRITE.NIGHT] = IMAGES.HAWK_GROUNDN,
       sprite[SPRITE.HAWK_GROUND_ATTACK] = [],
       sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.DAY] = IMAGES.HAWK_GROUND_ATTACKD,
       sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_GROUND_ATTACKN,
       sprite[SPRITE.HAWK_TAMED] = [],
       sprite[SPRITE.HAWK_TAMED][SPRITE.DAY] = IMAGES.HAWK_TAMEDD,
       sprite[SPRITE.HAWK_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_TAMEDN,
       sprite[SPRITE.HAWK_WING_LEFT] = [],
       sprite[SPRITE.HAWK_WING_LEFT][SPRITE.DAY] = IMAGES.HAWK_WING_LEFTD,
       sprite[SPRITE.HAWK_WING_LEFT][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFTN,
       sprite[SPRITE.HAWK_WING_RIGHT] = [],
       sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHTD,
       sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHTN,
       sprite[SPRITE.HAWK_WING_LEFT_ATTACK] = [],
       sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.HAWK_WING_LEFT_ATTACKD,
       sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFT_ATTACKN,
       sprite[SPRITE.HAWK_WING_RIGHT_ATTACK] = [],
       sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHT_ATTACKD,
       sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHT_ATTACKN,
       sprite[SPRITE.HAWK_WING_LEFT_TAMED] = [],
       sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.HAWK_WING_LEFT_TAMEDD,
       sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFT_TAMEDN,
       sprite[SPRITE.HAWK_WING_RIGHT_TAMED] = [],
       sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHT_TAMEDD,
       sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHT_TAMEDN,
       sprite[SPRITE.HURT_HAWK] = IMAGES.HURT_HAWK,
       sprite[SPRITE.HURT_HAWK_WING_LEFT] = IMAGES.HURT_HAWK_WING_LEFT,
       sprite[SPRITE.HURT_HAWK_WING_RIGHT] = IMAGES.HURT_HAWK_WING_RIGHT,
       sprite[SPRITE.VULTURE_ATTACK] = [],
       sprite[SPRITE.VULTURE_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_ATTACKD,
       sprite[SPRITE.VULTURE_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_ATTACKN,
       sprite[SPRITE.VULTURE] = [],
       sprite[SPRITE.VULTURE][SPRITE.DAY] = IMAGES.VULTURED,
       sprite[SPRITE.VULTURE][SPRITE.NIGHT] = IMAGES.VULTUREN,
       sprite[SPRITE.HURT_VULTURE_GROUND] = IMAGES.HURT_VULTURE_GROUND,
       sprite[SPRITE.VULTURE_GROUND] = [],
       sprite[SPRITE.VULTURE_GROUND][SPRITE.DAY] = IMAGES.VULTURE_GROUNDD,
       sprite[SPRITE.VULTURE_GROUND][SPRITE.NIGHT] = IMAGES.VULTURE_GROUNDN,
       sprite[SPRITE.VULTURE_GROUND_ATTACK] = [],
       sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_GROUND_ATTACKD,
       sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_GROUND_ATTACKN,
       sprite[SPRITE.VULTURE_TAMED] = [],
       sprite[SPRITE.VULTURE_TAMED][SPRITE.DAY] = IMAGES.VULTURE_TAMEDD,
       sprite[SPRITE.VULTURE_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_TAMEDN,
       sprite[SPRITE.VULTURE_WING_LEFT] = [],
       sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFTD,
       sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFTN,
       sprite[SPRITE.VULTURE_WING_RIGHT] = [],
       sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHTD,
       sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHTN,
       sprite[SPRITE.VULTURE_WING_LEFT_ATTACK] = [],
       sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFT_ATTACKD,
       sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFT_ATTACKN,
       sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK] = [],
       sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHT_ATTACKD,
       sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHT_ATTACKN,
       sprite[SPRITE.VULTURE_WING_LEFT_TAMED] = [],
       sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFT_TAMEDD,
       sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFT_TAMEDN,
       sprite[SPRITE.VULTURE_WING_RIGHT_TAMED] = [],
       sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHT_TAMEDD,
       sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHT_TAMEDN,
       sprite[SPRITE.HURT_VULTURE] = IMAGES.HURT_VULTURE,
       sprite[SPRITE.HURT_VULTURE_WING_LEFT] = IMAGES.HURT_VULTURE_WING_LEFT,
       sprite[SPRITE.HURT_VULTURE_WING_RIGHT] = IMAGES.HURT_VULTURE_WING_RIGHT,
       sprite[SPRITE.BOAR] = [],
       sprite[SPRITE.BOAR][SPRITE.DAY] = IMAGES.BOARD,
       sprite[SPRITE.BOAR][SPRITE.NIGHT] = IMAGES.BOARN,
       sprite[SPRITE.BOAR_TAMED] = [],
       sprite[SPRITE.BOAR_TAMED][SPRITE.DAY] = IMAGES.BOAR_TAMEDD,
       sprite[SPRITE.BOAR_TAMED][SPRITE.NIGHT] = IMAGES.BOAR_TAMEDN,
       sprite[SPRITE.BOAR_ATTACK] = [],
       sprite[SPRITE.BOAR_ATTACK][SPRITE.DAY] = IMAGES.BOAR_ANGRYD,
       sprite[SPRITE.BOAR_ATTACK][SPRITE.NIGHT] = IMAGES.BOAR_ANGRYN,
       sprite[SPRITE.BOAR_STEP] = [],
       sprite[SPRITE.BOAR_STEP][SPRITE.DAY] = IMAGES.BOAR_STEP,
       sprite[SPRITE.BOAR_STEP][SPRITE.NIGHT] = IMAGES.BOAR_STEP,
       sprite[SPRITE.CRAB_STEP] = [],
       sprite[SPRITE.CRAB_STEP][SPRITE.DAY] = IMAGES.CRAB_STEP,
       sprite[SPRITE.CRAB_STEP][SPRITE.NIGHT] = IMAGES.CRAB_STEP,
       sprite[SPRITE.BABY_MAMMOTH_STEP] = [],
       sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_STEP,
       sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_STEP,
       sprite[SPRITE.HURT_BOAR] = IMAGES.HURT_BOAR,
       sprite[SPRITE.SADDLE] = [],
       sprite[SPRITE.SADDLE][SPRITE.DAY] = IMAGES.SADDLED,
       sprite[SPRITE.SADDLE][SPRITE.NIGHT] = IMAGES.SADDLEN,
       sprite[SPRITE.WAND1] = [],
       sprite[SPRITE.WAND1][SPRITE.DAY] = IMAGES.WAND1D,
       sprite[SPRITE.WAND1][SPRITE.NIGHT] = IMAGES.WAND1N,
       sprite[SPRITE.SPELL] = [],
       sprite[SPRITE.SPELL][SPRITE.DAY] = [IMAGES.LIGHT_WAND0D, IMAGES.LIGHT_WAND1D, IMAGES.WOOD_ARROWD, IMAGES.STONE_ARROWD, IMAGES.GOLD_ARROWD, IMAGES.DIAMOND_ARROWD, IMAGES.AMETHYST_ARROWD, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWD],
       sprite[SPRITE.SPELL][SPRITE.NIGHT] = [IMAGES.LIGHT_WAND0N, IMAGES.LIGHT_WAND1N, IMAGES.WOOD_ARROWN, IMAGES.STONE_ARROWN, IMAGES.GOLD_ARROWN, IMAGES.DIAMOND_ARROWN, IMAGES.AMETHYST_ARROWN, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWN],
       sprite[SPRITE.WAND2] = [],
       sprite[SPRITE.WAND2][SPRITE.DAY] = IMAGES.WAND2D,
       sprite[SPRITE.WAND2][SPRITE.NIGHT] = IMAGES.WAND2N,
       sprite[SPRITE.BOAT_WAVE] = [],
       sprite[SPRITE.BOAT_WAVE][SPRITE.DAY] = IMAGES.BOAT_WAVED,
       sprite[SPRITE.BOAT_WAVE][SPRITE.NIGHT] = IMAGES.BOAT_WAVEN,
       sprite[SPRITE.SLED_WAVE] = [],
       sprite[SPRITE.SLED_WAVE][SPRITE.DAY] = IMAGES.SLED_WAVED,
       sprite[SPRITE.SLED_WAVE][SPRITE.NIGHT] = IMAGES.SLED_WAVEN,
       sprite[SPRITE.PIRATE_HAT] = [],
       sprite[SPRITE.PIRATE_HAT][SPRITE.DAY] = IMAGES.PIRATE_HATD,
       sprite[SPRITE.PIRATE_HAT][SPRITE.NIGHT] = IMAGES.PIRATE_HATN,
       sprite[SPRITE.FUR_HAT] = [],
       sprite[SPRITE.FUR_HAT][SPRITE.DAY] = IMAGES.FUR_HATD,
       sprite[SPRITE.FUR_HAT][SPRITE.NIGHT] = IMAGES.FUR_HATN,
       sprite[SPRITE.FLOWER_HAT] = [],
       sprite[SPRITE.FLOWER_HAT][SPRITE.DAY] = IMAGES.FLOWER_HATD,
       sprite[SPRITE.FLOWER_HAT][SPRITE.NIGHT] = IMAGES.FLOWER_HATN,
       sprite[SPRITE.PILOT_HELMET] = [],
       sprite[SPRITE.PILOT_HELMET][SPRITE.DAY] = IMAGES.PILOT_HELMETD,
       sprite[SPRITE.PILOT_HELMET][SPRITE.NIGHT] = IMAGES.PILOT_HELMETN,
       sprite[SPRITE.LAKE_EDGE] = [],
       sprite[SPRITE.LAKE_EDGE][SPRITE.DAY] = [],
       sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT] = [],
       sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE0D_EDGE),
       sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE1D_EDGE),
       sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE2D_EDGE),
       sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE0N_EDGE),
       sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE1N_EDGE),
       sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE2N_EDGE),
       sprite[SPRITE.LAKE_DEEP] = [],
       sprite[SPRITE.LAKE_DEEP][SPRITE.DAY] = [],
       sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT] = [],
       sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE0D_DEEP),
       sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE1D_DEEP),
       sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE2D_DEEP),
       sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE0N_DEEP),
       sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE1N_DEEP),
       sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE2N_DEEP),
       sprite[SPRITE.LAKE] = [],
       sprite[SPRITE.LAKE][SPRITE.DAY] = [],
       sprite[SPRITE.LAKE][SPRITE.NIGHT] = [],
       sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE0D),
       sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE1D),
       sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE2D),
       sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE0N),
       sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE1N),
       sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE2N),
       MINIMAP_UTILS.g = [],
       MINIMAP_UTILS.g[0] = [IMAGES.MAPDAY_GOLD1, IMAGES.MAPNIGHT_GOLD1],
       MINIMAP_UTILS.g[1] = MINIMAP_UTILS.g[0],
       MINIMAP_UTILS.g[2] = [IMAGES.MAPDAY_GOLD2, IMAGES.MAPNIGHT_GOLD2],
       MINIMAP_UTILS.m = [],
       MINIMAP_UTILS.m[0] = [IMAGES.MAPDAY_EMERALD1, IMAGES.MAPNIGHT_EMERALD1],
       MINIMAP_UTILS.m[1] = MINIMAP_UTILS.m[0],
       MINIMAP_UTILS.m[2] = [IMAGES.MAPDAY_EMERALD2, IMAGES.MAPNIGHT_EMERALD2],
       MINIMAP_UTILS.la = [],
       MINIMAP_UTILS.la[0] = [IMAGES.MAPDAY_MAGMA, IMAGES.MAPNIGHT_MAGMA],
       MINIMAP_UTILS.la[1] = MINIMAP_UTILS.la[0],
       MINIMAP_UTILS.la[2] = MINIMAP_UTILS.la[0],
       MINIMAP_UTILS.la[3] = MINIMAP_UTILS.la[0],
       MINIMAP_UTILS.la[4] = MINIMAP_UTILS.la[0],
       MINIMAP_UTILS.la[5] = MINIMAP_UTILS.la[0],
       MINIMAP_UTILS.s = [],
       MINIMAP_UTILS.s[0] = [IMAGES.MAPDAY_STONE1, IMAGES.MAPNIGHT_STONE1],
       MINIMAP_UTILS.s[1] = MINIMAP_UTILS.s[0],
       MINIMAP_UTILS.s[2] = [IMAGES.MAPDAY_STONE2, IMAGES.MAPNIGHT_STONE2],
       MINIMAP_UTILS.p = [],
       MINIMAP_UTILS.p[0] = [IMAGES.MAPDAY_BERRY, IMAGES.MAPDAY_BERRY],
       MINIMAP_UTILS.a = [],
       MINIMAP_UTILS.a[0] = [IMAGES.MAPDAY_AMETHYST, IMAGES.MAPNIGHT_AMETHYST],
       MINIMAP_UTILS.a[1] = MINIMAP_UTILS.a[0],
       MINIMAP_UTILS.a[2] = MINIMAP_UTILS.a[0],
       MINIMAP_UTILS.d = [],
       MINIMAP_UTILS.d[0] = [IMAGES.MAPDAY_DIAMOND, IMAGES.MAPNIGHT_DIAMOND],
       MINIMAP_UTILS.d[1] = MINIMAP_UTILS.d[0],
       MINIMAP_UTILS.d[2] = MINIMAP_UTILS.d[0],
       MINIMAP_UTILS.re = [],
       MINIMAP_UTILS.re[0] = [IMAGES.MAPDAY_REIDITE, IMAGES.MAPNIGHT_REIDITE],
       MINIMAP_UTILS.re[1] = MINIMAP_UTILS.re[0],
       MINIMAP_UTILS.re[2] = MINIMAP_UTILS.re[0],
       MINIMAP_UTILS.f = [],
       MINIMAP_UTILS.f[0] = [IMAGES.MAPDAY_FIR_TREE, IMAGES.MAPNIGHT_FIR_TREE],
       MINIMAP_UTILS.f[1] = MINIMAP_UTILS.f[0],
       MINIMAP_UTILS.f[2] = MINIMAP_UTILS.f[0],
       MINIMAP_UTILS.isl = [],
       MINIMAP_UTILS.isl[0] = [IMAGES.MAPDAY_ISLAND, IMAGES.MAPNIGHT_ISLAND],
       MINIMAP_UTILS.isl[1] = MINIMAP_UTILS.isl[0],
       MINIMAP_UTILS.isl[2] = MINIMAP_UTILS.isl[0],
       MINIMAP_UTILS.c = [],
       MINIMAP_UTILS.c[0] = [IMAGES.MAPDAY_CACTUS, IMAGES.MAPNIGHT_CACTUS],
       MINIMAP_UTILS.c[1] = MINIMAP_UTILS.c[0],
       MINIMAP_UTILS.c[2] = MINIMAP_UTILS.c[0],
       MINIMAP_UTILS.wtb = [],
       MINIMAP_UTILS.wtb[0] = [IMAGES.MAPDAY_RIVER, IMAGES.MAPNIGHT_RIVER],
       MINIMAP_UTILS.PIRANHA = [IMAGES.MAPDAY_PIRANHA, IMAGES.MAPNIGHT_PIRANHA],
       MINIMAP_UTILS.KRAKEN = [IMAGES.MAPDAY_KRAKEN, IMAGES.MAPNIGHT_KRAKEN],
       MINIMAP_UTILS.FOX = [IMAGES.MAPDAY_FOX, IMAGES.MAPNIGHT_FOX],
       MINIMAP_UTILS.WOLF = [IMAGES.MAPDAY_WOLF, IMAGES.MAPNIGHT_WOLF],
       MINIMAP_UTILS.SPIDER = [IMAGES.MAPDAY_SPIDER, IMAGES.MAPNIGHT_SPIDER],
       MINIMAP_UTILS.BEAR = [IMAGES.MAPDAY_BEAR, IMAGES.MAPNIGHT_BEAR],
       MINIMAP_UTILS.CAVE = [IMAGES.MAPDAY_CAVE, IMAGES.MAPNIGHT_CAVE],
       MINIMAP_UTILS.MAP = [IMAGES.BIGDAY, IMAGES.BIGNIGHT],
       MINIMAP_UTILS.FOREST = [IMAGES.MAPDAY_FOREST, IMAGES.MAPNIGHT_FOREST],
       MINIMAP_UTILS.WINTER = [IMAGES.MAPDAY_WINTER, IMAGES.MAPNIGHT_WINTER],
       MINIMAP_UTILS.DESERT = [IMAGES.MAPDAY_DESERT, IMAGES.MAPNIGHT_DESERT],
       MINIMAP_UTILS.LAVA = [IMAGES.MAPDAY_LAVA, IMAGES.MAPNIGHT_LAVA],
       MINIMAP_UTILS)
           for (var r = MINIMAP_UTILS[t], n = 0; n < r.length; n++) {
               var o = r[n];
               if (void 0 !== o.tryLoad)
                   o.tryLoad();
               else if (o.length > 0)
                   for (var a = 0; a < o.length; a++)
                       void 0 !== o[a].tryLoad && o[a].tryLoad()
           }
       console.log("Load images", Date.now() - e)
   }
   function Fn() {
       var e = (new Date).getTime();
       kn(),
       Xn(),
       sprite[SPRITE.BUBBLES] = [],
       sprite[SPRITE.BUBBLES][SPRITE.DAY] = [],
       sprite[SPRITE.BUBBLES][SPRITE.NIGHT] = [];
       for (var i = 0; i < SPRITE.BUBBLES_SIZES; i++)
           sprite[SPRITE.BUBBLES][SPRITE.DAY].push(p(Zi(1, 4 + i, "#59B8CE"))),
           sprite[SPRITE.BUBBLES][SPRITE.NIGHT].push(p(Zi(1, 4 + i, "#90DDD9")));
       sprite[SPRITE.FLAKES] = [],
       sprite[SPRITE.FLAKES][SPRITE.DAY] = [],
       sprite[SPRITE.FLAKES][SPRITE.NIGHT] = [];
       for (i = 0; i < SPRITE.FLAKES_SIZES; i++)
           sprite[SPRITE.FLAKES][SPRITE.DAY].push(p(Zi(1, 4 + i, "#fff"))),
           sprite[SPRITE.FLAKES][SPRITE.NIGHT].push(p(Zi(1, 4 + i, "#fff")));
       sprite[SPRITE.DESERT] = [],
       sprite[SPRITE.DESERT][SPRITE.DAY] = [],
       sprite[SPRITE.DESERT][SPRITE.NIGHT] = [];
       for (i = 0; i < SPRITE.FLAKES_SIZES; i++)
           sprite[SPRITE.DESERT][SPRITE.DAY].push(p(Zi(1, 6 + i, "#DDCD8A"))),
           sprite[SPRITE.DESERT][SPRITE.NIGHT].push(p(Zi(1, 6 + i, "#155E57")));
       sprite[SPRITE.ASHES] = [],
       sprite[SPRITE.ASHES][SPRITE.DAY] = [],
       sprite[SPRITE.ASHES][SPRITE.NIGHT] = [];
       for (i = 0; i < SPRITE.ASHES_SIZES; i++)
           sprite[SPRITE.ASHES][SPRITE.DAY].push(p(Zi(1, 4 + i, "#353326"))),
           sprite[SPRITE.ASHES][SPRITE.NIGHT].push(p(Zi(1, 4 + i, "#1D2526")));
       sprite[SPRITE.GARLAND] = [],
       sprite[SPRITE.GARLAND][SPRITE.DAY] = p(be(1.5, !0, ["#ee71a9"])),
       sprite[SPRITE.GARLAND][SPRITE.NIGHT] = p(be(1.5, !0, ["#ee71a9"])),
       sprite[SPRITE.GARLANDS] = [sprite[SPRITE.GARLAND]],
       sprite[SPRITE.GARLANDS][1] = [],
       sprite[SPRITE.GARLANDS][2] = [],
       sprite[SPRITE.GARLANDS][3] = [],
       sprite[SPRITE.GARLANDS][4] = [],
       sprite[SPRITE.GARLANDS][1][SPRITE.DAY] = p(be(1.5, !0, ["#e2d63b"])),
       sprite[SPRITE.GARLANDS][1][SPRITE.NIGHT] = p(be(1.5, !0, ["#e2d63b"])),
       sprite[SPRITE.GARLANDS][2][SPRITE.DAY] = p(be(1.5, !0, ["#309cbd"])),
       sprite[SPRITE.GARLANDS][2][SPRITE.NIGHT] = p(be(1.5, !0, ["#309cbd"])),
       sprite[SPRITE.GARLANDS][3][SPRITE.DAY] = p(be(1.5, !0, ["#cd232d"])),
       sprite[SPRITE.GARLANDS][3][SPRITE.NIGHT] = p(be(1.5, !0, ["#cd232d"])),
       sprite[SPRITE.GARLANDS][4][SPRITE.DAY] = p(be(1.5, !0, ["#42b672"])),
       sprite[SPRITE.GARLANDS][4][SPRITE.NIGHT] = p(be(1.5, !0, ["#42b672"])),
       s.gup("cti", window.location.href) ? document.getElementById("version").innerHTML += "[CTI]" : p = function(e) {
           return e.loaded = 1,
           e
       }
       ,
       sprite[SPRITE.MARKET_BGD] = p(Yn()),
       sprite[SPRITE.STONES] = [],
       sprite[SPRITE.STONES][SPRITE.DAY] = [],
       sprite[SPRITE.STONES][SPRITE.NIGHT] = [],
       sprite[SPRITE.STONES][SPRITE.DAY].push(p(Ui(1.1, !1, ["#0a2d18", "#c3d1cb", "#e4efe8"]))),
       sprite[SPRITE.STONES][SPRITE.DAY].push(p(Ui(.9, !1, ["#0a2d18", "#c3d1cb", "#e4efe8"]))),
       sprite[SPRITE.STONES][SPRITE.DAY].push(p(Ui(.6, !1, ["#0a2d18", "#c3d1cb", "#e4efe8"]))),
       sprite[SPRITE.STONES][SPRITE.NIGHT].push(p(Ui(1.1, !1, ["#0a2728", "#3c8e88", "#40a39b"]))),
       sprite[SPRITE.STONES][SPRITE.NIGHT].push(p(Ui(.9, !1, ["#0a2728", "#3c8e88", "#40a39b"]))),
       sprite[SPRITE.STONES][SPRITE.NIGHT].push(p(Ui(.6, !1, ["#0a2728", "#3c8e88", "#40a39b"]))),
       sprite[SPRITE.GOLD] = [],
       sprite[SPRITE.GOLD][SPRITE.DAY] = [],
       sprite[SPRITE.GOLD][SPRITE.NIGHT] = [],
       sprite[SPRITE.GOLD][SPRITE.DAY].push(p(Fi(1.5, !1, ["#2b280a", "#ddcf8a", "#f4efc6"]))),
       sprite[SPRITE.GOLD][SPRITE.DAY].push(p(Fi(1.3, !1, ["#2b280a", "#ddcf8a", "#f4efc6"]))),
       sprite[SPRITE.GOLD][SPRITE.DAY].push(p(Fi(1.1, !1, ["#2b280a", "#ddcf8a", "#f4efc6"]))),
       sprite[SPRITE.GOLD][SPRITE.NIGHT].push(p(Fi(1.5, !1, ["#030d14", "#1b4444", "#16605a"]))),
       sprite[SPRITE.GOLD][SPRITE.NIGHT].push(p(Fi(1.3, !1, ["#030d14", "#1b4444", "#16605a"]))),
       sprite[SPRITE.GOLD][SPRITE.NIGHT].push(p(Fi(1.1, !1, ["#030d14", "#1b4444", "#16605a"]))),
       sprite[SPRITE.DIAMOND] = [],
       sprite[SPRITE.DIAMOND][SPRITE.DAY] = [],
       sprite[SPRITE.DIAMOND][SPRITE.NIGHT] = [],
       sprite[SPRITE.DIAMOND][SPRITE.DAY].push(p(xi(1.1, !1, ["#232828", "#3fc9c9", "#74ede6"]))),
       sprite[SPRITE.DIAMOND][SPRITE.DAY].push(p(xi(.9, !1, ["#232828", "#3fc9c9", "#74ede6"]))),
       sprite[SPRITE.DIAMOND][SPRITE.DAY].push(p(xi(.7, !1, ["#232828", "#3fc9c9", "#74ede6"]))),
       sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(p(xi(1.1, !1, ["#030d14", "#2b9390", "#57bcb5"]))),
       sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(p(xi(.9, !1, ["#030d14", "#2b9390", "#57bcb5"]))),
       sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(p(xi(.7, !1, ["#030d14", "#2b9390", "#57bcb5"]))),
       sprite[SPRITE.ALOE_VERA] = [],
       sprite[SPRITE.ALOE_VERA][SPRITE.DAY] = IMAGES.ALOE_VERAD,
       sprite[SPRITE.ALOE_VERA][SPRITE.NIGHT] = IMAGES.ALOE_VERAN,
       sprite[SPRITE.HAND_SHADOW] = [],
       sprite[SPRITE.HAND_SHADOW][SPRITE.DAY] = p(di(.6, ["#0d1b1c"])),
       sprite[SPRITE.HAND_SHADOW][SPRITE.NIGHT] = p(di(.6, ["#030d14"])),
       sprite[SPRITE.GLOVES_HOOD] = [],
       sprite[SPRITE.GLOVES_HOOD][SPRITE.DAY] = p(Ai(.6, ["#2a2938", "#242330"])),
       sprite[SPRITE.GLOVES_HOOD][SPRITE.NIGHT] = p(Ai(.6, ["#1b1e30", "#161921"])),
       sprite[SPRITE.ZOMBIE_BODY] = [],
       sprite[SPRITE.ZOMBIE_BODY][SPRITE.DAY] = p(me(.6, !0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"])),
       sprite[SPRITE.ZOMBIE_BODY][SPRITE.NIGHT] = p(me(.6, !0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"])),
       sprite[SPRITE.ZOMBIE_HEAD] = [],
       sprite[SPRITE.ZOMBIE_HEAD][SPRITE.DAY] = p(Pe(.6, !0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"])),
       sprite[SPRITE.ZOMBIE_HEAD][SPRITE.NIGHT] = p(Pe(.6, !0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"])),
       sprite[SPRITE.ZOMBIE_HAND] = [],
       sprite[SPRITE.ZOMBIE_HAND][SPRITE.DAY] = p(Ri(.4, ["#0d1b1c", "#759e6e", "#55604b"])),
       sprite[SPRITE.ZOMBIE_HAND][SPRITE.NIGHT] = p(Ri(.4, ["#030d14", "#11635e", "#02373e"])),
       sprite[SPRITE.ZOMBIE_HURT] = p(De(.6, ["#BB0000"])),
       sprite[SPRITE.ZOMBIE_HUNGER] = p(De(.6, ["#DBE71C"])),
       sprite[SPRITE.ZOMBIE_HEAL] = p(De(.6, ["#00BB00"])),
       sprite[SPRITE.TREE] = [],
       sprite[SPRITE.TREE][SPRITE.DAY] = [],
       sprite[SPRITE.TREE][SPRITE.NIGHT] = [],
       sprite[SPRITE.TREE][SPRITE.DAY].push(Si(1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], !1, 0)),
       sprite[SPRITE.TREE][SPRITE.DAY].push(Si(1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], !0, 0)),
       sprite[SPRITE.TREE][SPRITE.DAY].push(Si(.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], !1, 0)),
       sprite[SPRITE.TREE][SPRITE.DAY].push(Si(.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], !0, 0)),
       sprite[SPRITE.TREE][SPRITE.DAY].push(Si(.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], !1, 0)),
       sprite[SPRITE.TREE][SPRITE.DAY].push(Si(.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], !0, 0)),
       sprite[SPRITE.TREE][SPRITE.NIGHT].push(Si(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], !1, 0)),
       sprite[SPRITE.TREE][SPRITE.NIGHT].push(Si(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], !0, 0)),
       sprite[SPRITE.TREE][SPRITE.NIGHT].push(Si(.9, ["#030d14", "#0b3534", "#144443", "#174240"], !1, 0)),
       sprite[SPRITE.TREE][SPRITE.NIGHT].push(Si(.9, ["#030d14", "#0b3534", "#144443", "#174240"], !0, 0)),
       sprite[SPRITE.TREE][SPRITE.NIGHT].push(Si(.7, ["#030d14", "#082b29", "#073332", "#073332"], !1, 0)),
       sprite[SPRITE.TREE][SPRITE.NIGHT].push(Si(.7, ["#030d14", "#082b29", "#073332", "#073332"], !0, 0)),
       sprite[SPRITE.TREE_BRANCH] = [],
       sprite[SPRITE.TREE_BRANCH][SPRITE.DAY] = [],
       sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT] = [],
       sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(p(gi(Ci(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], !1), sprite[SPRITE.TREE][SPRITE.DAY][0]))),
       sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(p(gi(Ci(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], !0), sprite[SPRITE.TREE][SPRITE.DAY][1]))),
       sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(p(gi(Ci(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], !1), sprite[SPRITE.TREE][SPRITE.NIGHT][0]))),
       sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(p(gi(Ci(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], !0), sprite[SPRITE.TREE][SPRITE.NIGHT][1]))),
       sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(p(gi(Ci(.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], !1), sprite[SPRITE.TREE][SPRITE.DAY][2]))),
       sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(p(gi(Ci(.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], !0), sprite[SPRITE.TREE][SPRITE.DAY][2]))),
       sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(p(gi(Ci(.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], !1), sprite[SPRITE.TREE][SPRITE.NIGHT][2]))),
       sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(p(gi(Ci(.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], !0), sprite[SPRITE.TREE][SPRITE.NIGHT][3]))),
       sprite[SPRITE.TREE][SPRITE.DAY][5] = p(sprite[SPRITE.TREE][SPRITE.DAY][5]),
       sprite[SPRITE.TREE][SPRITE.DAY][4] = p(sprite[SPRITE.TREE][SPRITE.DAY][4]),
       sprite[SPRITE.TREE][SPRITE.DAY][3] = p(sprite[SPRITE.TREE][SPRITE.DAY][3]),
       sprite[SPRITE.TREE][SPRITE.DAY][2] = p(sprite[SPRITE.TREE][SPRITE.DAY][2]),
       sprite[SPRITE.TREE][SPRITE.DAY][1] = p(sprite[SPRITE.TREE][SPRITE.DAY][1]),
       sprite[SPRITE.TREE][SPRITE.DAY][0] = p(sprite[SPRITE.TREE][SPRITE.DAY][0]),
       sprite[SPRITE.TREE][SPRITE.NIGHT][5] = p(sprite[SPRITE.TREE][SPRITE.NIGHT][5]),
       sprite[SPRITE.TREE][SPRITE.NIGHT][4] = p(sprite[SPRITE.TREE][SPRITE.NIGHT][4]),
       sprite[SPRITE.TREE][SPRITE.NIGHT][3] = p(sprite[SPRITE.TREE][SPRITE.NIGHT][3]),
       sprite[SPRITE.TREE][SPRITE.NIGHT][2] = p(sprite[SPRITE.TREE][SPRITE.NIGHT][2]),
       sprite[SPRITE.TREE][SPRITE.NIGHT][1] = p(sprite[SPRITE.TREE][SPRITE.NIGHT][1]),
       sprite[SPRITE.TREE][SPRITE.NIGHT][0] = p(sprite[SPRITE.TREE][SPRITE.NIGHT][0]),
       sprite[SPRITE.PICK_WOOD] = [],
       sprite[SPRITE.PICK_WOOD][SPRITE.DAY] = p(he(4, bi(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]))),
       sprite[SPRITE.PICK_WOOD][SPRITE.NIGHT] = p(he(4, bi(.75, !0, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"]))),
       sprite[SPRITE.PICK] = [],
       sprite[SPRITE.PICK][SPRITE.DAY] = p(he(4, bi(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]))),
       sprite[SPRITE.PICK][SPRITE.NIGHT] = p(he(4, bi(.75, !0, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"]))),
       sprite[SPRITE.PICK_GOLD] = [],
       sprite[SPRITE.PICK_GOLD][SPRITE.DAY] = p(he(4, bi(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]))),
       sprite[SPRITE.PICK_GOLD][SPRITE.NIGHT] = p(he(4, bi(.75, !0, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"]))),
       sprite[SPRITE.PICK_DIAMOND] = [],
       sprite[SPRITE.PICK_DIAMOND][SPRITE.DAY] = p(he(4, bi(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]))),
       sprite[SPRITE.PICK_DIAMOND][SPRITE.NIGHT] = p(he(4, bi(.75, !0, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"]))),
       sprite[SPRITE.PICK_AMETHYST] = [],
       sprite[SPRITE.PICK_AMETHYST][SPRITE.DAY] = p(he(4, bi(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]))),
       sprite[SPRITE.PICK_AMETHYST][SPRITE.NIGHT] = p(he(4, bi(.75, !0, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"]))),
       sprite[SPRITE.PIRATE_SWORD] = [],
       sprite[SPRITE.PIRATE_SWORD][SPRITE.DAY] = p(he(3, pi(.17, !0, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]))),
       sprite[SPRITE.PIRATE_SWORD][SPRITE.NIGHT] = p(he(3, pi(.17, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"]))),
       sprite[SPRITE.SUGAR_CAN] = [],
       sprite[SPRITE.SUGAR_CAN][SPRITE.DAY] = p(he(3, zi(.32, !0, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]))),
       sprite[SPRITE.SUGAR_CAN][SPRITE.NIGHT] = p(he(3, zi(.42, !0, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"]))),
       sprite[SPRITE.SWORD_WOOD] = [],
       sprite[SPRITE.SWORD_WOOD][SPRITE.DAY] = p(he(3, Oi(.4, !0, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"]))),
       sprite[SPRITE.SWORD_WOOD][SPRITE.NIGHT] = p(he(3, Oi(.4, !0, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"]))),
       sprite[SPRITE.SWORD] = [],
       sprite[SPRITE.SWORD][SPRITE.DAY] = p(he(3, vi(.4, !0, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]))),
       sprite[SPRITE.SWORD][SPRITE.NIGHT] = p(he(3, vi(.4, !0, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"]))),
       sprite[SPRITE.SWORD_GOLD] = [],
       sprite[SPRITE.SWORD_GOLD][SPRITE.DAY] = p(he(3, Li(.4, !0, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]))),
       sprite[SPRITE.SWORD_GOLD][SPRITE.NIGHT] = p(he(3, Li(.4, !0, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"]))),
       sprite[SPRITE.SWORD_DIAMOND] = [],
       sprite[SPRITE.SWORD_DIAMOND][SPRITE.DAY] = p(he(3, fi(.4, !0, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]))),
       sprite[SPRITE.SWORD_DIAMOND][SPRITE.NIGHT] = p(he(3, fi(.4, !0, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"]))),
       sprite[SPRITE.SWORD_AMETHYST] = [],
       sprite[SPRITE.SWORD_AMETHYST][SPRITE.DAY] = p(he(3, Vi(.4, !0, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]))),
       sprite[SPRITE.SWORD_AMETHYST][SPRITE.NIGHT] = p(he(3, Vi(.4, !0, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"]))),
       sprite[SPRITE.HERB] = [],
       sprite[SPRITE.HERB][SPRITE.DAY] = [],
       sprite[SPRITE.HERB][SPRITE.NIGHT] = [],
       sprite[SPRITE.HERB][SPRITE.DAY].push(p(ji(.9, !1, ["#0d4f35"], 0))),
       sprite[SPRITE.HERB][SPRITE.DAY].push(p(ji(.9, !1, ["#0d4f35"], 1))),
       sprite[SPRITE.HERB][SPRITE.DAY].push(p(ji(.9, !1, ["#0d4f35"], 2))),
       sprite[SPRITE.HERB][SPRITE.NIGHT].push(p(ji(.9, !1, ["#053339"], 0))),
       sprite[SPRITE.HERB][SPRITE.NIGHT].push(p(ji(.9, !1, ["#053339"], 1))),
       sprite[SPRITE.HERB][SPRITE.NIGHT].push(p(ji(.9, !1, ["#053339"], 2))),
       sprite[SPRITE.HERB][SPRITE.DAY].push(p(qi(.8, ["#241301", "#ba6b0e", "#6d3f04"]))),
       sprite[SPRITE.HERB][SPRITE.DAY].push(p(qi(.8, ["#292002", "#ba930e", "#6d5704"]))),
       sprite[SPRITE.HERB][SPRITE.NIGHT].push(p(qi(.9, ["#052919", "#0a4738", "#06321f"]))),
       sprite[SPRITE.HERB][SPRITE.NIGHT].push(p(qi(.8, ["#052918", "#08491c", "#063417"]))),
       sprite[SPRITE.SIGN] = [],
       sprite[SPRITE.SIGN][SPRITE.DAY] = p(he(Math.PI / 2, qt(.25, !0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]))),
       sprite[SPRITE.SIGN][SPRITE.NIGHT] = p(he(Math.PI / 2, qt(.25, !0, ["#030d14", "#082b22", "#0a2f2b", "#072824"]))),
       sprite[SPRITE.SIGN_BUTTON] = [],
       sprite[SPRITE.SIGN_BUTTON].push(p(jt(.25, ["#44301b", "#57442a", "#523e26"], 0))),
       sprite[SPRITE.SIGN_BUTTON].push(p(jt(.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1))),
       sprite[SPRITE.SIGN_BUTTON].push(p(jt(.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2))),
       sprite[SPRITE.SYMBOLS] = [],
       sprite[SPRITE.SYMBOLS][SPRITE.DAY] = [],
       sprite[SPRITE.SYMBOLS][SPRITE.NIGHT] = [],
       sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(p(he(Math.PI / 2, Zt(.25, !1, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1)))),
       sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(p(he(Math.PI / 2, Zt(.25, !1, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1)))),
       sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(p(he(Math.PI / 2, Zt(.25, !1, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2)))),
       sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(p(he(Math.PI / 2, Zt(.25, !1, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2)))),
       sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(p(he(Math.PI / 2, Zt(.25, !1, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3)))),
       sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(p(he(Math.PI / 2, Zt(.25, !1, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3)))),
       sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(p(he(Math.PI / 2, Zt(.25, !1, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4)))),
       sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(p(he(Math.PI / 2, Zt(.25, !1, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4)))),
       sprite[SPRITE.PLANT] = [],
       sprite[SPRITE.PLANT][SPRITE.DAY] = [p(Ji(1.2, !0, ["#0e3022", "#0b8052", "#077b49"]))],
       sprite[SPRITE.PLANT][SPRITE.NIGHT] = [p(Ji(1.2, !0, ["#030d14", "#084442", "#0a4049"]))],
       sprite[SPRITE.DRIED_PLANT] = [],
       sprite[SPRITE.DRIED_PLANT][SPRITE.DAY] = p(Ji(.8, !0, ["#0e3022", "#68622D", "#665329"])),
       sprite[SPRITE.DRIED_PLANT][SPRITE.NIGHT] = p(Ji(.8, !0, ["#030d14", "#0F3A24", "#083326"])),
       sprite[SPRITE.PUMPKIN] = [],
       sprite[SPRITE.PUMPKIN][SPRITE.DAY] = p(Nn(.5, !0, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"])),
       sprite[SPRITE.PUMPKIN][SPRITE.NIGHT] = p(Nn(.5, !0, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"])),
       sprite[SPRITE.GARLIC] = [],
       sprite[SPRITE.GARLIC][SPRITE.DAY] = p(Ce(.5, !0, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"])),
       sprite[SPRITE.GARLIC][SPRITE.NIGHT] = p(Ce(.5, !0, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"])),
       sprite[SPRITE.THORNBUSH] = [],
       sprite[SPRITE.THORNBUSH][SPRITE.DAY] = p(Cn(.5, !0, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"])),
       sprite[SPRITE.THORNBUSH][SPRITE.NIGHT] = p(Cn(.5, !0, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"])),
       sprite[SPRITE.PLANT_MINI] = [],
       sprite[SPRITE.PLANT_MINI][SPRITE.DAY] = p(Ji(.8, !0, ["#1b170c", "#0b8052", "#077b49"])),
       sprite[SPRITE.PLANT_MINI][SPRITE.NIGHT] = p(Ji(.8, !0, ["#030d14", "#084442", "#0a4049"])),
       sprite[SPRITE.DRIED_PUMPKIN] = [],
       sprite[SPRITE.DRIED_PUMPKIN][SPRITE.DAY] = p(Nn(.5, !0, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"])),
       sprite[SPRITE.DRIED_PUMPKIN][SPRITE.NIGHT] = p(Nn(.5, !0, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"])),
       sprite[SPRITE.DRIED_GARLIC] = [],
       sprite[SPRITE.DRIED_GARLIC][SPRITE.DAY] = p(Ce(.5, !0, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"])),
       sprite[SPRITE.DRIED_GARLIC][SPRITE.NIGHT] = p(Ce(.5, !0, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"])),
       sprite[SPRITE.DRIED_THORNBUSH] = [],
       sprite[SPRITE.DRIED_THORNBUSH][SPRITE.DAY] = p(Cn(.5, !0, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"])),
       sprite[SPRITE.DRIED_THORNBUSH][SPRITE.NIGHT] = p(Cn(.5, !0, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"])),
       sprite[SPRITE.GIFT] = [],
       sprite[SPRITE.GIFT][SPRITE.DAY] = p(Kn(.45, !0, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"])),
       sprite[SPRITE.GIFT][SPRITE.NIGHT] = p(Kn(.45, !0, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"])),
       sprite[SPRITE.HURT_GIFT] = p(Kn(.65, !0, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"])),
       sprite[SPRITE.FRUIT] = [],
       sprite[SPRITE.FRUIT][SPRITE.DAY] = p(Xi(1.4, !1, ["#ac222a", "#e6636a"])),
       sprite[SPRITE.FRUIT][SPRITE.NIGHT] = p(Xi(1.4, !1, ["#46195e", "#744188"])),
       sprite[SPRITE.FIRE] = [],
       sprite[SPRITE.FIRE][SPRITE.DAY] = p(Ti(.9, !1, ["#efd435", "#ec8d35", "#e96132"])),
       sprite[SPRITE.FIRE][SPRITE.NIGHT] = p(Ti(.9, !1, ["#efdb7b", "#efe854", "#e8ef62"])),
       sprite[SPRITE.BIG_FIRE_WOOD] = [],
       sprite[SPRITE.BIG_FIRE_WOOD][SPRITE.DAY] = p(si(.9, !1, ["#4d2d14", "#432516"])),
       sprite[SPRITE.BIG_FIRE_WOOD][SPRITE.NIGHT] = p(si(.9, !1, ["#282404", "#0a0a01"])),
       sprite[SPRITE.WOOD_FIRE] = [],
       sprite[SPRITE.WOOD_FIRE][SPRITE.DAY] = p(Ii(.9, !1, ["#4d2d14", "#432516"])),
       sprite[SPRITE.WOOD_FIRE][SPRITE.NIGHT] = p(Ii(.9, !1, ["#282404", "#0a0a01"])),
       sprite[SPRITE.HALO_FIRE] = [],
       sprite[SPRITE.HALO_FIRE][SPRITE.DAY] = p(_i(.9, !1, ["#efd435"])),
       sprite[SPRITE.HALO_FIRE][SPRITE.NIGHT] = p(_i(.9, !1, ["#fffabb"])),
       sprite[SPRITE.GROUND_FIRE] = [],
       sprite[SPRITE.GROUND_FIRE][SPRITE.DAY] = p(Ei(.9, !1, ["#efd435"])),
       sprite[SPRITE.GROUND_FIRE][SPRITE.NIGHT] = p(Ei(.9, !1, ["#fffabb"])),
       sprite[SPRITE.HALO_FIRE_PUMPKIN] = [],
       sprite[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.DAY] = p(_i(.9, !1, ["#efd435"])),
       sprite[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.NIGHT] = p(_i(.9, !1, ["rgba(255, 84, 0, 1)"])),
       sprite[SPRITE.GROUND_FIRE_PUMPKIN] = [],
       sprite[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.DAY] = p(Ei(.9, !1, ["#efd435"])),
       sprite[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.NIGHT] = p(Ei(.9, !1, ["#ff5704"])),
       sprite[SPRITE.GEAR] = p(ze(1, "#ffffff", 1)),
       sprite[SPRITE.GEAR2] = p(ze(1.5, "#ffffff", 1)),
       sprite[SPRITE.YOUR_SCORE] = p(Yi(1, "Your score:", 15, "#FFF")),
       sprite[SPRITE.WINDMILL_CASES] = p(et(.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"])),
       sprite[SPRITE.EXTRACTOR_CASES] = IMAGES.EXTRACTOR_CASES,
       sprite[SPRITE.WINDMILL] = [],
       sprite[SPRITE.WINDMILL][SPRITE.DAY] = p(ei(1.5, !0, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"])),
       sprite[SPRITE.WINDMILL][SPRITE.NIGHT] = p(ei(1.5, !0, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"])),
       sprite[SPRITE.WINDMILL_WINGS] = [],
       sprite[SPRITE.WINDMILL_WINGS][SPRITE.DAY] = p(ii(2, !0, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"])),
       sprite[SPRITE.WINDMILL_WINGS][SPRITE.NIGHT] = p(ii(2, !0, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"])),
       sprite[SPRITE.WINDMILL_HEAD] = [],
       sprite[SPRITE.WINDMILL_HEAD][SPRITE.DAY] = p(ti(1.5, !0, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"])),
       sprite[SPRITE.WINDMILL_HEAD][SPRITE.NIGHT] = p(ti(1.5, !0, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"])),
       sprite[SPRITE.WILD_WHEAT] = [],
       sprite[SPRITE.WILD_WHEAT][SPRITE.DAY] = p($e(2.2, !0, ["#A89F67", "#9E8456"])),
       sprite[SPRITE.WILD_WHEAT][SPRITE.NIGHT] = p($e(2.2, !0, ["#0B4049", "#08383D"])),
       sprite[SPRITE.DRIED_WHEAT] = [],
       sprite[SPRITE.DRIED_WHEAT][SPRITE.DAY] = p($e(2.2, !0, ["#68622D", "#665329"])),
       sprite[SPRITE.DRIED_WHEAT][SPRITE.NIGHT] = p($e(2.2, !0, ["#0F3A24", "#083326"])),
       sprite[SPRITE.WHEAT_MOB] = [],
       sprite[SPRITE.WHEAT_MOB][SPRITE.DAY] = p(wi(.8, !0, ["#A89F67", "#9E8456"])),
       sprite[SPRITE.WHEAT_MOB][SPRITE.NIGHT] = p(wi(.8, !0, ["#15514F", "#0F3F3D"])),
       sprite[SPRITE.PUMPKIN_SEED_MOB] = [],
       sprite[SPRITE.PUMPKIN_SEED_MOB][SPRITE.DAY] = p(wi(.8, !0, ["#c67933", "#b17238"])),
       sprite[SPRITE.PUMPKIN_SEED_MOB][SPRITE.NIGHT] = p(wi(.8, !0, ["#043c37", "#032b23"])),
       sprite[SPRITE.ALOE_VERA_SEED_MOB] = [],
       sprite[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.DAY] = p(wi(.8, !0, ["#3a8214", "#4a9c1e"])),
       sprite[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.NIGHT] = p(wi(.8, !0, ["#032d29", "#044640"])),
       sprite[SPRITE.GARLIC_SEED_MOB] = [],
       sprite[SPRITE.GARLIC_SEED_MOB][SPRITE.DAY] = p(wi(.8, !0, ["#e8e8e8", "#bbbbbb"])),
       sprite[SPRITE.GARLIC_SEED_MOB][SPRITE.NIGHT] = p(wi(.8, !0, ["#1c6161", "#07413f"])),
       sprite[SPRITE.THORNBUSH_SEED_MOB] = [],
       sprite[SPRITE.THORNBUSH_SEED_MOB][SPRITE.DAY] = p(wi(.8, !0, ["#328a56", "#449573"])),
       sprite[SPRITE.THORNBUSH_SEED_MOB][SPRITE.NIGHT] = p(wi(.8, !0, ["#043c37", "#032b23"])),
       sprite[SPRITE.CARROT_SEED_MOB] = [],
       sprite[SPRITE.CARROT_SEED_MOB][SPRITE.DAY] = p(wi(.8, !0, ["#c98e2f", "#a36b11"])),
       sprite[SPRITE.CARROT_SEED_MOB][SPRITE.NIGHT] = p(wi(.8, !0, ["#043c37", "#032b23"])),
       sprite[SPRITE.TOMATO_SEED_MOB] = [],
       sprite[SPRITE.TOMATO_SEED_MOB][SPRITE.DAY] = p(wi(.8, !0, ["#b22419", "#99110e"])),
       sprite[SPRITE.TOMATO_SEED_MOB][SPRITE.NIGHT] = p(wi(.8, !0, ["#04323c", "#03222b"])),
       sprite[SPRITE.WATERMELON_SEED_MOB] = [],
       sprite[SPRITE.WATERMELON_SEED_MOB][SPRITE.DAY] = p(wi(.8, !0, ["#13a56d", "#098a58"])),
       sprite[SPRITE.WATERMELON_SEED_MOB][SPRITE.NIGHT] = p(wi(.8, !0, ["#043c37", "#032b23"])),
       sprite[SPRITE.WINDMILL_WHEAT_SEED] = oi(1, [{
           f: $e,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#A89F67", "#9E8456"]
       }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], .7),
       sprite[SPRITE.BREAD_OVEN_WOOD] = oi(1, [{
           f: Ii,
           x: 0,
           y: 0,
           a: 1,
           r: -Math.PI / 5,
           c: ["#4d2d14", "#432516"]
       }], .3, ["#d2c77b", "#e7dc8f", "#bfb360"], .7),
       sprite[SPRITE.BREAD_OVEN_BREAD] = oi(1, [{
           f: tn,
           x: 0,
           y: -5,
           a: 1,
           r: 0,
           c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
       }], .15, ["#d2c77b", "#e7dc8f", "#bfb360"], .7),
       sprite[SPRITE.EMPTY_SLOT] = oi(.9, [], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.PLANT_SEED] = [],
       sprite[SPRITE.PLANT_SEED][SPRITE.DAY] = p(Me(.9, !1, ["#7d613e", "#9e7e5a"])),
       sprite[SPRITE.PLANT_SEED][SPRITE.NIGHT] = p(Me(.9, !1, ["#084442", "#125e5a"])),
       sprite[SPRITE.WHEAT_SEED] = [],
       sprite[SPRITE.WHEAT_SEED][SPRITE.DAY] = p(Me(.9, !1, ["#9E8456", "#A89F67"])),
       sprite[SPRITE.WHEAT_SEED][SPRITE.NIGHT] = p(Me(.9, !1, ["#1b6f6a", "#0d4e4c"])),
       sprite[SPRITE.WHEAT_SEED_DRIED] = [],
       sprite[SPRITE.WHEAT_SEED_DRIED][SPRITE.DAY] = p(Me(.9, !1, ["#665329", "#68622D"])),
       sprite[SPRITE.WHEAT_SEED_DRIED][SPRITE.NIGHT] = p(Me(.9, !1, ["#083326", "#0F3A24"])),
       sprite[SPRITE.PLANT_PUMPKIN] = [],
       sprite[SPRITE.PLANT_PUMPKIN][SPRITE.DAY] = p(Me(.9, !1, ["#c67933", "#ec952d"])),
       sprite[SPRITE.PLANT_PUMPKIN][SPRITE.NIGHT] = p(Me(.9, !1, ["#0e6553", "#094437"])),
       sprite[SPRITE.PLANT_ALOE_VERA] = [],
       sprite[SPRITE.PLANT_ALOE_VERA][SPRITE.DAY] = p(Me(.9, !1, ["#375809", "#4b770e"])),
       sprite[SPRITE.PLANT_ALOE_VERA][SPRITE.NIGHT] = p(Me(.9, !1, ["#09542d", "#0d5d2f"])),
       sprite[SPRITE.PLANT_ALOE_VERA_DRIED] = [],
       sprite[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.DAY] = p(Me(.9, !1, ["#585809", "#72770e"])),
       sprite[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.NIGHT] = p(Me(.9, !1, ["#295209", "#305d0d"])),
       sprite[SPRITE.PLANT_GARLIC] = [],
       sprite[SPRITE.PLANT_GARLIC][SPRITE.DAY] = p(Me(.9, !1, ["#b9b094", "#e2d2c0"])),
       sprite[SPRITE.PLANT_GARLIC][SPRITE.NIGHT] = p(Me(.9, !1, ["#126366", "#0d484b"])),
       sprite[SPRITE.PLANT_THORNBUSH] = [],
       sprite[SPRITE.PLANT_THORNBUSH][SPRITE.DAY] = p(Me(.9, !1, ["#3f8662", "#30915d"])),
       sprite[SPRITE.PLANT_THORNBUSH][SPRITE.NIGHT] = p(Me(.9, !1, ["#0e6553", "#094437"])),
       sprite[SPRITE.PLANT_PUMPKIN_DRIED] = [],
       sprite[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.DAY] = p(Me(.9, !1, ["#c79153", "#dfa868"])),
       sprite[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.NIGHT] = p(Me(.9, !1, ["#073927", "#075040"])),
       sprite[SPRITE.PLANT_GARLIC_DRIED] = [],
       sprite[SPRITE.PLANT_GARLIC_DRIED][SPRITE.DAY] = p(Me(.9, !1, ["#768b5b", "#819984"])),
       sprite[SPRITE.PLANT_GARLIC_DRIED][SPRITE.NIGHT] = p(Me(.9, !1, ["#0c4540", "#0e5153"])),
       sprite[SPRITE.PLANT_THORNBUSH_DRIED] = [],
       sprite[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.DAY] = p(Me(.9, !1, ["#567465", "#627c6e"])),
       sprite[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.NIGHT] = p(Me(.9, !1, ["#073927", "#075040"])),
       sprite[SPRITE.PLANT_CARROT] = [],
       sprite[SPRITE.PLANT_CARROT][SPRITE.DAY] = p(Me(.9, !1, ["#996b3a", "#bf956b"])),
       sprite[SPRITE.PLANT_CARROT][SPRITE.NIGHT] = p(Me(.9, !1, ["#0e6553", "#094437"])),
       sprite[SPRITE.PLANT_CARROT_DRIED] = [],
       sprite[SPRITE.PLANT_CARROT_DRIED][SPRITE.DAY] = p(Me(.9, !1, ["#7a634a", "#a68f77"])),
       sprite[SPRITE.PLANT_CARROT_DRIED][SPRITE.NIGHT] = p(Me(.9, !1, ["#1e4d43", "#113c32"])),
       sprite[SPRITE.PLANT_TOMATO] = [],
       sprite[SPRITE.PLANT_TOMATO][SPRITE.DAY] = p(Me(.9, !1, ["#99403c", "#bc796c"])),
       sprite[SPRITE.PLANT_TOMATO][SPRITE.NIGHT] = p(Me(.9, !1, ["#1e434d", "#11303c"])),
       sprite[SPRITE.PLANT_TOMATO_DRIED] = [],
       sprite[SPRITE.PLANT_TOMATO_DRIED][SPRITE.DAY] = p(Me(.9, !1, ["#88504e", "#b3857c"])),
       sprite[SPRITE.PLANT_TOMATO_DRIED][SPRITE.NIGHT] = p(Me(.9, !1, ["#253b41", "#162930"])),
       sprite[SPRITE.PLANT_WATERMELON] = [],
       sprite[SPRITE.PLANT_WATERMELON][SPRITE.DAY] = p(Me(.9, !1, ["#0f8870", "#23af93"])),
       sprite[SPRITE.PLANT_WATERMELON][SPRITE.NIGHT] = p(Me(.9, !1, ["#032829", "#083233"])),
       sprite[SPRITE.PLANT_WATERMELON_DRIED] = [],
       sprite[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.DAY] = p(Me(.9, !1, ["#618a20", "#84a74e"])),
       sprite[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.NIGHT] = p(Me(.9, !1, ["#1f4632", "#335d47"])),
       sprite[SPRITE.WORKBENCH] = [],
       sprite[SPRITE.WORKBENCH][SPRITE.DAY] = p(we(1.2, !0, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"])),
       sprite[SPRITE.WORKBENCH][SPRITE.NIGHT] = p(we(1.2, !0, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"])),
       sprite[SPRITE.WALL] = [],
       sprite[SPRITE.WALL][SPRITE.DAY] = p(nt(1, !0, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"])),
       sprite[SPRITE.WALL][SPRITE.NIGHT] = p(nt(1, !0, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"])),
       sprite[SPRITE.DIAMOND_WALL] = [],
       sprite[SPRITE.DIAMOND_WALL][SPRITE.DAY] = p(at(1, !0, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"])),
       sprite[SPRITE.DIAMOND_WALL][SPRITE.NIGHT] = p(at(1, !0, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"])),
       sprite[SPRITE.AMETHYST_WALL] = [],
       sprite[SPRITE.AMETHYST_WALL][SPRITE.DAY] = p(It(1, !0, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"])),
       sprite[SPRITE.AMETHYST_WALL][SPRITE.NIGHT] = p(It(1, !0, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"])),
       sprite[SPRITE.STONE_WALL] = [],
       sprite[SPRITE.STONE_WALL][SPRITE.DAY] = p(It(1, !0, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"])),
       sprite[SPRITE.STONE_WALL][SPRITE.NIGHT] = p(It(1, !0, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"])),
       sprite[SPRITE.GOLD_WALL] = [],
       sprite[SPRITE.GOLD_WALL][SPRITE.DAY] = p(Et(1, !0, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"])),
       sprite[SPRITE.GOLD_WALL][SPRITE.NIGHT] = p(Et(1, !0, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"])),
       sprite[SPRITE.SPIKE] = [],
       sprite[SPRITE.SPIKE][SPRITE.DAY] = p(wt(.8, !0, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"])),
       sprite[SPRITE.SPIKE][SPRITE.NIGHT] = p(wt(.8, !0, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"])),
       sprite[SPRITE.GOLD_SPIKE] = [],
       sprite[SPRITE.GOLD_SPIKE][SPRITE.DAY] = p(Yt(.8, !0, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"])),
       sprite[SPRITE.GOLD_SPIKE][SPRITE.NIGHT] = p(Yt(.8, !0, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"])),
       sprite[SPRITE.DIAMOND_SPIKE] = [],
       sprite[SPRITE.DIAMOND_SPIKE][SPRITE.DAY] = p(Ut(.8, !0, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"])),
       sprite[SPRITE.DIAMOND_SPIKE][SPRITE.NIGHT] = p(Ut(.8, !0, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"])),
       sprite[SPRITE.STONE_SPIKE] = [],
       sprite[SPRITE.STONE_SPIKE][SPRITE.DAY] = p(Wt(.8, !0, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"])),
       sprite[SPRITE.STONE_SPIKE][SPRITE.NIGHT] = p(Wt(.8, !0, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"])),
       sprite[SPRITE.AMETHYST_SPIKE] = [],
       sprite[SPRITE.AMETHYST_SPIKE][SPRITE.DAY] = p(Wt(.8, !0, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"])),
       sprite[SPRITE.AMETHYST_SPIKE][SPRITE.NIGHT] = p(Wt(.8, !0, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"])),
       sprite[SPRITE.DOOR_WOOD_CLOSE] = [],
       sprite[SPRITE.DOOR_WOOD_CLOSE][SPRITE.DAY] = p(_t(1.5, !0, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"])),
       sprite[SPRITE.DOOR_WOOD_CLOSE][SPRITE.NIGHT] = p(_t(1.5, !0, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"])),
       sprite[SPRITE.DOOR_WOOD_OPEN] = [],
       sprite[SPRITE.DOOR_WOOD_OPEN][SPRITE.DAY] = p(_t(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])),
       sprite[SPRITE.DOOR_WOOD_OPEN][SPRITE.NIGHT] = p(_t(1, !1, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"])),
       sprite[SPRITE.DOOR_STONE_CLOSE] = [],
       sprite[SPRITE.DOOR_STONE_CLOSE][SPRITE.DAY] = p(ut(1.5, !0, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"])),
       sprite[SPRITE.DOOR_STONE_CLOSE][SPRITE.NIGHT] = p(ut(1.5, !0, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"])),
       sprite[SPRITE.DOOR_STONE_OPEN] = [],
       sprite[SPRITE.DOOR_STONE_OPEN][SPRITE.DAY] = p(ut(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])),
       sprite[SPRITE.DOOR_STONE_OPEN][SPRITE.NIGHT] = p(ut(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])),
       sprite[SPRITE.DOOR_AMETHYST_CLOSE] = [],
       sprite[SPRITE.DOOR_AMETHYST_CLOSE][SPRITE.DAY] = p(ut(1.5, !0, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"])),
       sprite[SPRITE.DOOR_AMETHYST_CLOSE][SPRITE.NIGHT] = p(ut(1.5, !0, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"])),
       sprite[SPRITE.DOOR_AMETHYST_OPEN] = [],
       sprite[SPRITE.DOOR_AMETHYST_OPEN][SPRITE.DAY] = p(ut(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])),
       sprite[SPRITE.DOOR_AMETHYST_OPEN][SPRITE.NIGHT] = p(ut(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])),
       sprite[SPRITE.DOOR_GOLD_CLOSE] = [],
       sprite[SPRITE.DOOR_GOLD_CLOSE][SPRITE.DAY] = p(ht(1.5, !0, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"])),
       sprite[SPRITE.DOOR_GOLD_CLOSE][SPRITE.NIGHT] = p(ht(1.5, !0, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"])),
       sprite[SPRITE.DOOR_GOLD_OPEN] = [],
       sprite[SPRITE.DOOR_GOLD_OPEN][SPRITE.DAY] = p(ht(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])),
       sprite[SPRITE.DOOR_GOLD_OPEN][SPRITE.NIGHT] = p(ht(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])),
       sprite[SPRITE.DOOR_DIAMOND_CLOSE] = [],
       sprite[SPRITE.DOOR_DIAMOND_CLOSE][SPRITE.DAY] = p(St(1.5, !0, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"])),
       sprite[SPRITE.DOOR_DIAMOND_CLOSE][SPRITE.NIGHT] = p(St(1.5, !0, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"])),
       sprite[SPRITE.DOOR_DIAMOND_OPEN] = [],
       sprite[SPRITE.DOOR_DIAMOND_OPEN][SPRITE.DAY] = p(St(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])),
       sprite[SPRITE.DOOR_DIAMOND_OPEN][SPRITE.NIGHT] = p(St(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])),
       sprite[SPRITE.CHEST] = [],
       sprite[SPRITE.CHEST][SPRITE.DAY] = p(ft(.5, !0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"])),
       sprite[SPRITE.CHEST][SPRITE.NIGHT] = p(ft(.5, !0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"])),
       sprite[SPRITE.CHEST][2] = p(ft(.5, !0, "#4d0000 #4d0000 #4d0000 #4d0000 #4d0000 #614627 #614627 #c4a23a #c4a23a #c4a23a".split(" "))),
       sprite[SPRITE.TREASURE_CHEST] = [],
       sprite[SPRITE.TREASURE_CHEST][SPRITE.DAY] = p(pn(.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"])),
       sprite[SPRITE.TREASURE_CHEST][SPRITE.NIGHT] = p(pn(.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"])),
       sprite[SPRITE.RABBIT] = [],
       sprite[SPRITE.RABBIT][SPRITE.DAY] = p(Ke(.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"])),
       sprite[SPRITE.RABBIT][SPRITE.NIGHT] = p(Ke(.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"])),
       sprite[SPRITE.SPIDER] = [],
       sprite[SPRITE.SPIDER][SPRITE.DAY] = p(he(Math.PI, xe(.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"]))),
       sprite[SPRITE.SPIDER][SPRITE.NIGHT] = p(he(Math.PI, xe(.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"]))),
       sprite[SPRITE.WEB] = p(Je(.6, ["#FFFFFF"])),
       sprite[SPRITE.WOLF] = [],
       sprite[SPRITE.WOLF][SPRITE.DAY] = p(Ue(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"])),
       sprite[SPRITE.WOLF][SPRITE.NIGHT] = p(Ue(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"])),
       sprite[SPRITE.EARMUFFS] = [],
       sprite[SPRITE.EARMUFFS][SPRITE.DAY] = p(yt(.6, !0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"])),
       sprite[SPRITE.EARMUFFS][SPRITE.NIGHT] = p(yt(.6, !0, ["#478e8b", "#327e73", "#073030", "#08403f"])),
       sprite[SPRITE.COAT] = [],
       sprite[SPRITE.COAT][SPRITE.DAY] = p(lt(.6, !0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"])),
       sprite[SPRITE.COAT][SPRITE.NIGHT] = p(lt(.6, !0, ["#073030", "#08403f", "#478e8b", "#327e73"])),
       sprite[SPRITE.CAP_SCARF] = [],
       sprite[SPRITE.CAP_SCARF][SPRITE.DAY] = p(Bt(.63, !0, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"])),
       sprite[SPRITE.CAP_SCARF][SPRITE.NIGHT] = p(Bt(.63, !0, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"])),
       sprite[SPRITE.CHRISTMAS_HAT] = [],
       sprite[SPRITE.CHRISTMAS_HAT][SPRITE.DAY] = p(hi(.6, !0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"])),
       sprite[SPRITE.CHRISTMAS_HAT][SPRITE.NIGHT] = p(hi(.6, !0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"])),
       sprite[SPRITE.ELF_HAT] = [],
       sprite[SPRITE.ELF_HAT][SPRITE.DAY] = p(ui(.6, !0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"])),
       sprite[SPRITE.ELF_HAT][SPRITE.NIGHT] = p(ui(.6, !0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"])),
       sprite[SPRITE.BREAD_OVEN_ON] = [],
       sprite[SPRITE.BREAD_OVEN_ON][SPRITE.DAY] = p(on(.42, !0, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"])),
       sprite[SPRITE.BREAD_OVEN_ON][SPRITE.NIGHT] = p(on(.42, !0, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"])),
       sprite[SPRITE.BREAD_LIGHT_UP] = [],
       sprite[SPRITE.BREAD_LIGHT_UP][SPRITE.DAY] = p(sn(.9, ["#e4c027"])),
       sprite[SPRITE.BREAD_LIGHT_UP][SPRITE.NIGHT] = p(sn(.9, ["#D8E57F"])),
       sprite[SPRITE.BREAD_OVEN_OFF] = [],
       sprite[SPRITE.BREAD_OVEN_OFF][SPRITE.DAY] = p(nn(.42, !0, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"])),
       sprite[SPRITE.BREAD_OVEN_OFF][SPRITE.NIGHT] = p(nn(.42, !0, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"])),
       sprite[SPRITE.BREAD_OVEN_UI] = p(ai(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"])),
       sprite[SPRITE.FURNACE_ON] = [],
       sprite[SPRITE.FURNACE_ON][SPRITE.DAY] = p(Rt(.5, !0, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"])),
       sprite[SPRITE.FURNACE_ON][SPRITE.NIGHT] = p(Rt(.5, !0, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"])),
       sprite[SPRITE.FURNACE_OFF] = [],
       sprite[SPRITE.FURNACE_OFF][SPRITE.DAY] = p(At(.5, !0, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"])),
       sprite[SPRITE.FURNACE_OFF][SPRITE.NIGHT] = p(At(.5, !0, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"])),
       sprite[SPRITE.FURNACE_SLOT] = p(dt(.8, !0, ["#5f6061", "#939393"])),
       sprite[SPRITE.FURNACE_BUTTON] = oi(1, [{
           f: Ii,
           x: 0,
           y: 0,
           a: 1,
           r: Math.PI / 2.5,
           c: ["#4d2d14", "#432516"]
       }], .3, ["#494949", "#5b5858", "#3d3b3b"], 1),
       sprite[SPRITE.BED] = [],
       sprite[SPRITE.BED][SPRITE.DAY] = p(gt(1, !0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"])),
       sprite[SPRITE.BED][SPRITE.NIGHT] = p(gt(1, !0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"])),
       sprite[SPRITE.BED_TOP] = [],
       sprite[SPRITE.BED_TOP][SPRITE.DAY] = p(bt(1, !0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"])),
       sprite[SPRITE.BED_TOP][SPRITE.NIGHT] = p(bt(1, !0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"])),
       sprite[SPRITE.CRAB_SPEAR] = [],
       sprite[SPRITE.CRAB_SPEAR][SPRITE.DAY] = p(he(3, Ot(.7, !0, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]))),
       sprite[SPRITE.CRAB_SPEAR][SPRITE.NIGHT] = p(he(3, Ot(.7, !0, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"]))),
       sprite[SPRITE.WOOD_SPEAR] = [],
       sprite[SPRITE.WOOD_SPEAR][SPRITE.DAY] = p(he(3, pt(.7, !0, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]))),
       sprite[SPRITE.WOOD_SPEAR][SPRITE.NIGHT] = p(he(3, pt(.7, !0, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"]))),
       sprite[SPRITE.SPEAR] = [],
       sprite[SPRITE.SPEAR][SPRITE.DAY] = p(he(3, ct(.65, !0, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]))),
       sprite[SPRITE.SPEAR][SPRITE.NIGHT] = p(he(3, ct(.65, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"]))),
       sprite[SPRITE.GOLD_SPEAR] = [],
       sprite[SPRITE.GOLD_SPEAR][SPRITE.DAY] = p(he(3, vt(.67, !0, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]))),
       sprite[SPRITE.GOLD_SPEAR][SPRITE.NIGHT] = p(he(3, vt(.67, !0, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"]))),
       sprite[SPRITE.DIAMOND_SPEAR] = [],
       sprite[SPRITE.DIAMOND_SPEAR][SPRITE.DAY] = p(he(3, Pt(.67, !0, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]))),
       sprite[SPRITE.DIAMOND_SPEAR][SPRITE.NIGHT] = p(he(3, Pt(.67, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"]))),
       sprite[SPRITE.AMETHYST_SPEAR] = [],
       sprite[SPRITE.AMETHYST_SPEAR][SPRITE.DAY] = p(he(3, mt(.67, !0, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]))),
       sprite[SPRITE.AMETHYST_SPEAR][SPRITE.NIGHT] = p(he(3, mt(.67, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"]))),
       sprite[SPRITE.DRAGON_SPEAR] = [],
       sprite[SPRITE.DRAGON_SPEAR][SPRITE.DAY] = p(he(3, Mt(1, !0, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]))),
       sprite[SPRITE.DRAGON_SPEAR][SPRITE.NIGHT] = p(he(3, Mt(1, !0, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"]))),
       sprite[SPRITE.HAMMER] = [],
       sprite[SPRITE.HAMMER][SPRITE.DAY] = p(he(3, kt(1, !0, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]))),
       sprite[SPRITE.HAMMER][SPRITE.NIGHT] = p(he(3, kt(1, !0, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"]))),
       sprite[SPRITE.SPANNER] = [],
       sprite[SPRITE.SPANNER][SPRITE.DAY] = p(he(3, wn(.5, !0, ["#0d1b1c", "#939393", "#5f6061"]))),
       sprite[SPRITE.SPANNER][SPRITE.NIGHT] = p(he(3, wn(.5, !0, ["#030d14", "#485e66", "#1f343f"]))),
       sprite[SPRITE.SUPER_HAMMER] = [],
       sprite[SPRITE.SUPER_HAMMER][SPRITE.DAY] = p(he(3, kr(1, !0, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"]))),
       sprite[SPRITE.SUPER_HAMMER][SPRITE.NIGHT] = p(he(3, kr(1, !0, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"]))),
       sprite[SPRITE.HAMMER_GOLD] = [],
       sprite[SPRITE.HAMMER_GOLD][SPRITE.DAY] = p(he(3, kt(1, !0, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]))),
       sprite[SPRITE.HAMMER_GOLD][SPRITE.NIGHT] = p(he(3, kt(1, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"]))),
       sprite[SPRITE.HAMMER_DIAMOND] = [],
       sprite[SPRITE.HAMMER_DIAMOND][SPRITE.DAY] = p(he(3, kt(1, !0, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]))),
       sprite[SPRITE.HAMMER_DIAMOND][SPRITE.NIGHT] = p(he(3, kt(1, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"]))),
       sprite[SPRITE.HAMMER_AMETHYST] = [],
       sprite[SPRITE.HAMMER_AMETHYST][SPRITE.DAY] = p(he(3, kt(1, !0, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]))),
       sprite[SPRITE.HAMMER_AMETHYST][SPRITE.NIGHT] = p(he(3, kt(1, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"]))),
       sprite[SPRITE.LOCK] = [],
       sprite[SPRITE.LOCK][SPRITE.DAY] = p(Mr(.55, !1, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])),
       sprite[SPRITE.LOCK][SPRITE.NIGHT] = p(Mr(.55, !1, ["#080707", "#133d3c", "#2b6664", "#1b2529"])),
       sprite[SPRITE.PADLOCK] = [],
       sprite[SPRITE.PADLOCK].push(p(Mr(.8, !1, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]))),
       sprite[SPRITE.PADLOCK].push(p(Mr(.8, !1, ["#141414", "#9f7d17", "#dab33c", "#474545"]))),
       sprite[SPRITE.PADLOCK].push(p(Mr(.8, !1, ["#141414", "#73590d", "#a88a2c", "#2a2828"]))),
       sprite[SPRITE.LOCKED] = [],
       sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]),
       sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]),
       sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]),
       sprite[SPRITE.LOCKPICK] = [],
       sprite[SPRITE.LOCKPICK][SPRITE.DAY] = p(Hr(.06, !1, ["#141414", "#c4a23a", "#816511"])),
       sprite[SPRITE.LOCKPICK][SPRITE.NIGHT] = p(Hr(.06, !1, ["#030d14", "#2b6664", "#133d3c"])),
       sprite[SPRITE.KEY] = [],
       sprite[SPRITE.KEY].push(p(Hr(.08, !1, ["#141414", "#c4a23a", "#816511"]))),
       sprite[SPRITE.KEY].push(p(Hr(.08, !1, ["#141414", "#e2bd4e", "#a38018"]))),
       sprite[SPRITE.KEY].push(p(Hr(.08, !1, ["#141414", "#b0902e", "#634d09"]))),
       sprite[SPRITE.DRAGON_HEART] = oi(1.5, [{
           f: Wr,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#141414", "#178a99", "#0a6372", "#03282e"]
       }], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9),
       sprite[SPRITE.RESURRECTION_GROUND] = [],
       sprite[SPRITE.RESURRECTION_GROUND][SPRITE.DAY] = p(yr(.8, !0, ["#347f93", "#54a4ba"])),
       sprite[SPRITE.RESURRECTION_GROUND][SPRITE.NIGHT] = p(yr(.8, !0, ["#98ede3", "#94f2e7"])),
       sprite[SPRITE.RESURRECTION_HOLE] = [],
       sprite[SPRITE.RESURRECTION_HOLE][SPRITE.DAY] = p(Br(.8, !0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"])),
       sprite[SPRITE.RESURRECTION_HOLE][SPRITE.NIGHT] = p(Br(.8, !0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"])),
       sprite[SPRITE.RESURRECTION_ROTATE] = [],
       sprite[SPRITE.RESURRECTION_ROTATE][SPRITE.DAY] = p(wr(.8, !0, ["#a9e4ed", "#86d4e0"])),
       sprite[SPRITE.RESURRECTION_ROTATE][SPRITE.NIGHT] = p(wr(.8, !0, ["#83ddd4", "#485e66"])),
       sprite[SPRITE.RESURRECTION] = [],
       sprite[SPRITE.RESURRECTION][SPRITE.DAY] = p(Kr(.8, !0, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"])),
       sprite[SPRITE.RESURRECTION][SPRITE.NIGHT] = p(Kr(.8, !0, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"])),
       sprite[SPRITE.EMERALD_MACHINE_GROUND] = [],
       sprite[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_GROUNDD,
       sprite[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_GROUNDN,
       sprite[SPRITE.EMERALD_MACHINE_HOLE] = [],
       sprite[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_HOLED,
       sprite[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_HOLEN,
       sprite[SPRITE.EMERALD_MACHINE_ROTATE] = [],
       sprite[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_ROTATED,
       sprite[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_ROTATEN,
       sprite[SPRITE.EMERALD_MACHINE] = [],
       sprite[SPRITE.EMERALD_MACHINE][SPRITE.DAY] = IMAGES.EMERALD_MACHINED,
       sprite[SPRITE.EMERALD_MACHINE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINEN,
       sprite[SPRITE.EXTRACTOR_MACHINE0_STONE] = [],
       sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_STONED,
       sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_STONEN,
       sprite[SPRITE.EXTRACTOR_MACHINE_STONE] = [],
       sprite[SPRITE.EXTRACTOR_MACHINE_STONE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_STONED,
       sprite[SPRITE.EXTRACTOR_MACHINE_STONE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_STONEN,
       sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD] = [],
       sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_GOLDD,
       sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_GOLDN,
       sprite[SPRITE.EXTRACTOR_MACHINE_GOLD] = [],
       sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_GOLDD,
       sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_GOLDN,
       sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND] = [],
       sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDD,
       sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDN,
       sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND] = [],
       sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_DIAMONDD,
       sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_DIAMONDN,
       sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST] = [],
       sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTD,
       sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTN,
       sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST] = [],
       sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTD,
       sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTN,
       sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE] = [],
       sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_REIDITED,
       sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_REIDITEN,
       sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE] = [],
       sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_REIDITED,
       sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_REIDITEN,
       sprite[SPRITE.FIREFLY] = [],
       sprite[SPRITE.FIREFLY][SPRITE.DAY] = IMAGES.FIREFLYD,
       sprite[SPRITE.FIREFLY][SPRITE.NIGHT] = IMAGES.FIREFLYN,
       sprite[SPRITE.HURT_FIREFLY] = IMAGES.HURT_FIREFLY,
       sprite[SPRITE.TOTEM] = [],
       sprite[SPRITE.TOTEM][SPRITE.DAY] = p(zr(.75, !0, ["#0d1b1c", "#4c3a15", "#634828", "#564021"])),
       sprite[SPRITE.TOTEM][SPRITE.NIGHT] = p(zr(.75, !0, ["#030d14", "#0d2e33", "#184747", "#123b3f"])),
       sprite[SPRITE.ICON_MEMBER] = p(fr(.3, ["#092813", "#1f773d"], 0)),
       sprite[SPRITE.ICON_LEADER] = p(fr(.3, ["#092813", "#1f773d"], 1)),
       sprite[SPRITE.VERIFIED] = p(Ht(.6, ["#092813", "#1f773d"])),
       sprite[SPRITE.TEAM_BUTTON] = [],
       sprite[SPRITE.TEAM_BUTTON].push(p(Vr(.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0))),
       sprite[SPRITE.TEAM_BUTTON].push(p(Vr(.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0))),
       sprite[SPRITE.TEAM_BUTTON].push(p(Vr(.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0))),
       sprite[SPRITE.FULL_TEAM_BUTTON] = [];
       var t = p(Vr(.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
       sprite[SPRITE.FULL_TEAM_BUTTON].push(t),
       sprite[SPRITE.FULL_TEAM_BUTTON].push(t),
       sprite[SPRITE.FULL_TEAM_BUTTON].push(t),
       sprite[SPRITE.MANAGE_TEAM_BUTTON] = [],
       sprite[SPRITE.MANAGE_TEAM_BUTTON].push(p(Vr(.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1))),
       sprite[SPRITE.MANAGE_TEAM_BUTTON].push(p(Vr(.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1))),
       sprite[SPRITE.MANAGE_TEAM_BUTTON].push(p(Vr(.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1))),
       sprite[SPRITE.DELAY_SPIKE] = p(Kt(.3, ["#FFFFFF"])),
       sprite[SPRITE.DELAY_WALL] = p(ot(.3, ["#FFFFFF"])),
       sprite[SPRITE.DELAY_TEAM] = p(fr(.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0)),
       sprite[SPRITE.DELAY_DRINK] = p(he(Math.PI / 5, mn(.2, ["#FFFFFF"]))),
       sprite[SPRITE.AMETHYST_HELMET] = [],
       sprite[SPRITE.AMETHYST_HELMET][SPRITE.DAY] = p(Pr(.85, !0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"])),
       sprite[SPRITE.AMETHYST_HELMET][SPRITE.NIGHT] = p(Pr(.85, !0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"])),
       sprite[SPRITE.SHOW_TEAM_BUTTON] = [],
       sprite[SPRITE.SHOW_TEAM_BUTTON].push(p(Vr(.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1))),
       sprite[SPRITE.SHOW_TEAM_BUTTON].push(p(Vr(.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1))),
       sprite[SPRITE.SHOW_TEAM_BUTTON].push(p(Vr(.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1))),
       sprite[SPRITE.HOOD] = [],
       sprite[SPRITE.HOOD][SPRITE.DAY] = p(gn(.37, !0, ["#2a2938", "#242330", "#313041"])),
       sprite[SPRITE.HOOD][SPRITE.NIGHT] = p(gn(.37, !0, ["#1b1e30", "#161921", "#252f3e"])),
       sprite[SPRITE.WINTER_HOOD] = [],
       sprite[SPRITE.WINTER_HOOD][SPRITE.DAY] = p(bn(.17, !0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"])),
       sprite[SPRITE.WINTER_HOOD][SPRITE.NIGHT] = p(bn(.17, !0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"])),
       sprite[SPRITE.WINTER_PEASANT] = [],
       sprite[SPRITE.WINTER_PEASANT][SPRITE.DAY] = p(On(.55, !0, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1)),
       sprite[SPRITE.WINTER_PEASANT][SPRITE.NIGHT] = p(On(.55, !0, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1)),
       sprite[SPRITE.PEASANT] = [],
       sprite[SPRITE.PEASANT][SPRITE.DAY] = p(On(.55, !0, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0)),
       sprite[SPRITE.PEASANT][SPRITE.NIGHT] = p(On(.55, !0, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0)),
       sprite[SPRITE.CROWN_GREEN] = [],
       sprite[SPRITE.CROWN_GREEN][SPRITE.DAY] = p(Wn(.2, !0, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"])),
       sprite[SPRITE.CROWN_GREEN][SPRITE.NIGHT] = p(Wn(.2, !0, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"])),
       sprite[SPRITE.CROWN_ORANGE] = [],
       sprite[SPRITE.CROWN_ORANGE][SPRITE.DAY] = p(Wn(.2, !0, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"])),
       sprite[SPRITE.CROWN_ORANGE][SPRITE.NIGHT] = p(Wn(.2, !0, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"])),
       sprite[SPRITE.CROWN_BLUE] = [],
       sprite[SPRITE.CROWN_BLUE][SPRITE.DAY] = p(Wn(.2, !0, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"])),
       sprite[SPRITE.CROWN_BLUE][SPRITE.NIGHT] = p(Wn(.2, !0, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"])),
       sprite[SPRITE.CROWN_CRAB] = [],
       sprite[SPRITE.CROWN_CRAB][SPRITE.DAY] = p(Nt(.24, !0, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"])),
       sprite[SPRITE.CROWN_CRAB][SPRITE.NIGHT] = p(Nt(.24, !0, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"])),
       sprite[SPRITE.DRAGON_HELMET] = [],
       sprite[SPRITE.DRAGON_HELMET][SPRITE.DAY] = p(Qt(.32, !0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"])),
       sprite[SPRITE.DRAGON_HELMET][SPRITE.NIGHT] = p(Qt(.32, !0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"])),
       sprite[SPRITE.DRAGON_SWORD] = [],
       sprite[SPRITE.DRAGON_SWORD][SPRITE.DAY] = p(he(3, Fr(.9, !0, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"]))),
       sprite[SPRITE.DRAGON_SWORD][SPRITE.NIGHT] = p(he(3, Fr(.9, !0, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"]))),
       sprite[SPRITE.DRAGON_SWORD_HALO] = [],
       sprite[SPRITE.DRAGON_SWORD_HALO][SPRITE.DAY] = p(he(3, Fr(1, !0, [void 0, void 0, void 0, "#c8efef", "#c8efef"]))),
       sprite[SPRITE.DRAGON_SWORD_HALO][SPRITE.NIGHT] = p(he(3, Fr(1, !0, [void 0, void 0, void 0, "#87d2e6", "#87d2e6"]))),
       sprite[SPRITE.QUEST_BUTTON] = [],
       sprite[SPRITE.QUEST_BUTTON].push(p(yn(.3, !0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0))),
       sprite[SPRITE.QUEST_BUTTON].push(p(yn(.3, !0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1))),
       sprite[SPRITE.QUEST_BUTTON].push(p(yn(.3, !0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1))),
       sprite[SPRITE.MARKET_BUTTON] = [],
       sprite[SPRITE.MARKET_BUTTON].push(p(Bn(.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0))),
       sprite[SPRITE.MARKET_BUTTON].push(p(Bn(.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1))),
       sprite[SPRITE.MARKET_BUTTON].push(p(Bn(.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1))),
       sprite[SPRITE.SOUND_BUTTON_ON] = [],
       sprite[SPRITE.SOUND_BUTTON_ON].push(p(li(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1))),
       sprite[SPRITE.SOUND_BUTTON_ON].push(p(li(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1))),
       sprite[SPRITE.SOUND_BUTTON_ON].push(p(li(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1))),
       sprite[SPRITE.SOUND_BUTTON_OFF] = [],
       sprite[SPRITE.SOUND_BUTTON_OFF].push(p(li(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0))),
       sprite[SPRITE.SOUND_BUTTON_OFF].push(p(li(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0))),
       sprite[SPRITE.SOUND_BUTTON_OFF].push(p(li(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0))),
       sprite[SPRITE.SHOVEL] = [],
       sprite[SPRITE.SHOVEL][SPRITE.DAY] = p(he(3, Gn(.7, !0, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]))),
       sprite[SPRITE.SHOVEL][SPRITE.NIGHT] = p(he(3, Gn(.7, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"]))),
       sprite[SPRITE.SHOVEL_GOLD] = [],
       sprite[SPRITE.SHOVEL_GOLD][SPRITE.DAY] = p(he(3, Gn(.7, !0, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"]))),
       sprite[SPRITE.SHOVEL_GOLD][SPRITE.NIGHT] = p(he(3, Gn(.7, !0, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"]))),
       sprite[SPRITE.SHOVEL_DIAMOND] = [],
       sprite[SPRITE.SHOVEL_DIAMOND][SPRITE.DAY] = p(he(3, Gn(.7, !0, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]))),
       sprite[SPRITE.SHOVEL_DIAMOND][SPRITE.NIGHT] = p(he(3, Gn(.7, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"]))),
       sprite[SPRITE.SHOVEL_AMETHYST] = [],
       sprite[SPRITE.SHOVEL_AMETHYST][SPRITE.DAY] = p(he(3, Gn(.7, !0, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"]))),
       sprite[SPRITE.SHOVEL_AMETHYST][SPRITE.NIGHT] = p(he(3, Gn(.7, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"]))),
       sprite[SPRITE.SHOP] = [],
       sprite[SPRITE.SHOP].push(p(Jr(.7, ["#3b330d", "#b5a118", "#c8ac16"], 0))),
       sprite[SPRITE.SHOP].push(p(Jr(.7, ["#524712", "#c7b11c", "#d9ba18"], 0))),
       sprite[SPRITE.SHOP].push(p(Jr(.7, ["#2a2409", "#9f8e14", "#ad9511"], 0))),
       sprite[SPRITE.HURT_WOLF] = p(Ye(1.1, ["#BB0000"])),
       sprite[SPRITE.HURT_SPIDER] = p(he(Math.PI, Fe(.9, "#BB0000"))),
       sprite[SPRITE.EXPLORER_HAT] = [],
       sprite[SPRITE.EXPLORER_HAT][SPRITE.DAY] = p(br(.55, !0, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"])),
       sprite[SPRITE.EXPLORER_HAT][SPRITE.NIGHT] = p(br(.55, !0, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"])),
       sprite[SPRITE.WOOD_HELMET] = [],
       sprite[SPRITE.WOOD_HELMET][SPRITE.DAY] = p(Or(.55, !0, ["#252525", "#73583e", "#573f29", "#7d6144"])),
       sprite[SPRITE.WOOD_HELMET][SPRITE.NIGHT] = p(Or(.55, !0, ["#0d3b39", "#144642", "#0b3230", "#154f4b"])),
       sprite[SPRITE.STONE_HELMET] = [],
       sprite[SPRITE.STONE_HELMET][SPRITE.DAY] = p(pr(.6, !0, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"])),
       sprite[SPRITE.STONE_HELMET][SPRITE.NIGHT] = p(pr(.6, !0, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"])),
       sprite[SPRITE.GOLD_HELMET] = [],
       sprite[SPRITE.GOLD_HELMET][SPRITE.DAY] = p(cr(.58, !0, ["#dbce71", "#b29c32", "#c4bc51"])),
       sprite[SPRITE.GOLD_HELMET][SPRITE.NIGHT] = p(cr(.58, !0, ["#2b7c57", "#15543c", "#1a7961"])),
       sprite[SPRITE.DIAMOND_HELMET] = [],
       sprite[SPRITE.DIAMOND_HELMET][SPRITE.DAY] = p(vr(.69, !0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"])),
       sprite[SPRITE.DIAMOND_HELMET][SPRITE.NIGHT] = p(vr(.69, !0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"])),
       sprite[SPRITE.FIR] = [],
       sprite[SPRITE.FIR][SPRITE.DAY] = [],
       sprite[SPRITE.FIR][SPRITE.NIGHT] = [],
       sprite[SPRITE.FIR][SPRITE.DAY].push(p(ir(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"]))),
       sprite[SPRITE.FIR][SPRITE.DAY].push(p(er(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"]))),
       sprite[SPRITE.FIR][SPRITE.DAY].push(p($t(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"]))),
       sprite[SPRITE.FIR][SPRITE.NIGHT].push(p(ir(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"]))),
       sprite[SPRITE.FIR][SPRITE.NIGHT].push(p(er(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"]))),
       sprite[SPRITE.FIR][SPRITE.NIGHT].push(p($t(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"]))),
       sprite[SPRITE.DRAGON] = [],
       sprite[SPRITE.DRAGON][SPRITE.DAY] = p(dr(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"])),
       sprite[SPRITE.DRAGON][SPRITE.NIGHT] = p(dr(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"])),
       sprite[SPRITE.WING_LEFT] = [],
       sprite[SPRITE.WING_LEFT][SPRITE.DAY] = p(lr(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"])),
       sprite[SPRITE.WING_LEFT][SPRITE.NIGHT] = p(lr(1, ["#050505", "#327570", "#021724", "#200333"])),
       sprite[SPRITE.WING_RIGHT] = [],
       sprite[SPRITE.WING_RIGHT][SPRITE.DAY] = p(Cr(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"])),
       sprite[SPRITE.WING_RIGHT][SPRITE.NIGHT] = p(Cr(1, ["#050505", "#327570", "#021724", "#200333"])),
       sprite[SPRITE.DECORATION] = [],
       sprite[SPRITE.DECORATION][SPRITE.DAY] = [],
       sprite[SPRITE.DECORATION][SPRITE.NIGHT] = [],
       sprite[SPRITE.DECORATION][SPRITE.DAY] = [IMAGES.DECORATION_0D, IMAGES.DECORATION_1D, IMAGES.DECORATION_2D, IMAGES.DECORATION_3D, IMAGES.DECORATION_4D, IMAGES.DECORATION_5D, IMAGES.DECORATION_6D, IMAGES.DECORATION_7D, IMAGES.DECORATION_8D, IMAGES.DECORATION_9D, IMAGES.DECORATION_10D, IMAGES.DECORATION_11D, IMAGES.DECORATION_12D, IMAGES.DECORATION_13D, IMAGES.DECORATION_14D, IMAGES.DECORATION_15D, IMAGES.DECORATION_16D, IMAGES.DECORATION_17D, IMAGES.DECORATION_18D, IMAGES.DECORATION_19D, IMAGES.DECORATION_20D, IMAGES.DECORATION_21D, IMAGES.DECORATION_22D, IMAGES.DECORATION_23D, IMAGES.DECORATION_24D, IMAGES.DECORATION_25D, IMAGES.DECORATION_26D, IMAGES.DECORATION_27D, IMAGES.DECORATION_28D, IMAGES.DECORATION_29D, IMAGES.DECORATION_30D, IMAGES.DECORATION_31D, IMAGES.DECORATION_32D, IMAGES.DECORATION_33D, IMAGES.DECORATION_34D, IMAGES.DECORATION_35D, IMAGES.DECORATION_36D, IMAGES.DECORATION_37D, IMAGES.DECORATION_38D, IMAGES.DECORATION_39D, IMAGES.DECORATION_40D, IMAGES.DECORATION_41D, IMAGES.DECORATION_42D, IMAGES.DECORATION_43D, IMAGES.DECORATION_44D, IMAGES.DECORATION_45D, IMAGES.DECORATION_46D, IMAGES.DECORATION_47D, IMAGES.DECORATION_48D, IMAGES.DECORATION_49D, IMAGES.DECORATION_50D, IMAGES.DECORATION_51D, IMAGES.DECORATION_52D, IMAGES.DECORATION_53D, IMAGES.DECORATION_54D, IMAGES.DECORATION_55D],
       sprite[SPRITE.DECORATION][SPRITE.NIGHT] = [IMAGES.DECORATION_0N, IMAGES.DECORATION_1N, IMAGES.DECORATION_2N, IMAGES.DECORATION_3N, IMAGES.DECORATION_4N, IMAGES.DECORATION_5N, IMAGES.DECORATION_6N, IMAGES.DECORATION_7N, IMAGES.DECORATION_8N, IMAGES.DECORATION_9N, IMAGES.DECORATION_10N, IMAGES.DECORATION_11N, IMAGES.DECORATION_12N, IMAGES.DECORATION_13N, IMAGES.DECORATION_14N, IMAGES.DECORATION_15N, IMAGES.DECORATION_16N, IMAGES.DECORATION_17N, IMAGES.DECORATION_18N, IMAGES.DECORATION_19N, IMAGES.DECORATION_20N, IMAGES.DECORATION_21N, IMAGES.DECORATION_22N, IMAGES.DECORATION_23N, IMAGES.DECORATION_24N, IMAGES.DECORATION_25N, IMAGES.DECORATION_26N, IMAGES.DECORATION_27N, IMAGES.DECORATION_28N, IMAGES.DECORATION_29N, IMAGES.DECORATION_30N, IMAGES.DECORATION_31N, IMAGES.DECORATION_32N, IMAGES.DECORATION_33N, IMAGES.DECORATION_34N, IMAGES.DECORATION_35N, IMAGES.DECORATION_36N, IMAGES.DECORATION_37N, IMAGES.DECORATION_38N, IMAGES.DECORATION_39N, IMAGES.DECORATION_40N, IMAGES.DECORATION_41N, IMAGES.DECORATION_42N, IMAGES.DECORATION_43N, IMAGES.DECORATION_44N, IMAGES.DECORATION_45N, IMAGES.DECORATION_46N, IMAGES.DECORATION_47N, IMAGES.DECORATION_48N, IMAGES.DECORATION_49N, IMAGES.DECORATION_50N, IMAGES.DECORATION_51N, IMAGES.DECORATION_52N, IMAGES.DECORATION_53N, IMAGES.DECORATION_54N, IMAGES.DECORATION_55N],
       sprite[SPRITE.CAVE_STONES] = [],
       sprite[SPRITE.CAVE_STONES][SPRITE.DAY] = [],
       sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT] = [],
       sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(p(ki(1.1, !1, ["#252B28", "#747471", "#83827e"], 0))),
       sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(p(ki(.9, !1, ["#252B28", "#747471", "#83827e"], 1))),
       sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(p(ki(1, !1, ["#252B28", "#747471", "#83827e"], 2))),
       sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(p(ki(.9, !1, ["#252B28", "#747471", "#83827e"], 2))),
       sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(p(ki(1.1, !1, ["#030d14", "#123335", "#183f3f"], 0))),
       sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(p(ki(.9, !1, ["#030d14", "#123335", "#183f3f"], 1))),
       sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(p(ki(1, !1, ["#030d14", "#123335", "#183f3f"], 2))),
       sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(p(ki(.9, !1, ["#030d14", "#123335", "#183f3f"], 2))),
       sprite[SPRITE.SHADOW_CAVE_STONES] = [],
       sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY] = [],
       sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT] = [],
       sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(p(ki(1.1, !0, ["#252B28", "#58645F", "#75827D"], 2))),
       sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(p(ki(.9, !0, ["#252B28", "#58645F", "#75827D"], 2))),
       sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(p(ki(1, !0, ["#252B28", "#58645F", "#75827D"], 2))),
       sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(p(ki(.9, !0, ["#252B28", "#58645F", "#75827D"], 2))),
       sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(p(ki(1.1, !0, ["#030d14", "#123335", "#183f3f"], 2))),
       sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(p(ki(.9, !0, ["#030d14", "#123335", "#183f3f"], 2))),
       sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(p(ki(1, !0, ["#030d14", "#123335", "#183f3f"], 2))),
       sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(p(ki(.9, !0, ["#030d14", "#123335", "#183f3f"], 2))),
       sprite[SPRITE.GOLD_WINTER] = [],
       sprite[SPRITE.GOLD_WINTER][SPRITE.DAY] = [],
       sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT] = [],
       sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(p(Fi(1.5, !1, ["#2b280a", "#ddcf8a", "#f4efc6"]))),
       sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(p(Fi(1.3, !1, ["#2b280a", "#ddcf8a", "#f4efc6"]))),
       sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(p(Fi(1.1, !1, ["#2b280a", "#ddcf8a", "#f4efc6"]))),
       sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(p(Fi(1.5, !1, ["#0a2728", "#3e8989", "#50a09c"]))),
       sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(p(Fi(1.3, !1, ["#0a2728", "#3e8989", "#50a09c"]))),
       sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(p(Fi(1.1, !1, ["#0a2728", "#3e8989", "#50a09c"]))),
       sprite[SPRITE.DIAMOND_WINTER] = [],
       sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY] = [],
       sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT] = [],
       sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(p(xi(1.1, !1, ["#123d38", "#70e0dd", "#95efea"]))),
       sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(p(xi(.9, !1, ["#123d38", "#70e0dd", "#95efea"]))),
       sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(p(xi(.7, !1, ["#123d38", "#70e0dd", "#95efea"]))),
       sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(p(xi(1.1, !1, ["#123d38", "#47b2ac", "#5cccc4"]))),
       sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(p(xi(.9, !1, ["#123d38", "#47b2ac", "#5cccc4"]))),
       sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(p(xi(.7, !1, ["#123d38", "#47b2ac", "#5cccc4"]))),
       sprite[SPRITE.AMETHYST] = [],
       sprite[SPRITE.AMETHYST][SPRITE.DAY] = [],
       sprite[SPRITE.AMETHYST][SPRITE.NIGHT] = [],
       sprite[SPRITE.AMETHYST][SPRITE.DAY].push(p(tr(1.7, !0, ["#1d051e", "#c27add", "#cd98e5"]))),
       sprite[SPRITE.AMETHYST][SPRITE.DAY].push(p(tr(1.5, !0, ["#1d051e", "#c27add", "#cd98e5"]))),
       sprite[SPRITE.AMETHYST][SPRITE.DAY].push(p(tr(1.3, !0, ["#1d051e", "#c27add", "#cd98e5"]))),
       sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(p(tr(1.7, !0, ["#1d051e", "#41aaa0", "#5cccc4"]))),
       sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(p(tr(1.5, !0, ["#1d051e", "#41aaa0", "#5cccc4"]))),
       sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(p(tr(1.3, !0, ["#1d051e", "#41aaa0", "#5cccc4"]))),
       sprite[SPRITE.WATERBLOCK] = [],
       sprite[SPRITE.WATERBLOCK][SPRITE.DAY] = [],
       sprite[SPRITE.WATERBLOCK][SPRITE.NIGHT] = [],
       sprite[SPRITE.WATERBLOCK][SPRITE.DAY].push(p(rr(1, ["#2d53c4"]))),
       sprite[SPRITE.WATERBLOCK][SPRITE.NIGHT].push(p(rr(1, ["#2d53c4"]))),
       sprite[SPRITE.ISLAND_BLOCK] = [],
       sprite[SPRITE.ISLAND_BLOCK][SPRITE.DAY] = [],
       sprite[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT] = [],
       sprite[SPRITE.ISLAND_BLOCK][SPRITE.DAY].push(p(rr(1, ["#c4912d"]))),
       sprite[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT].push(p(rr(1, ["#c4912d"]))),
       sprite[SPRITE.CAVE_STEP] = [],
       sprite[SPRITE.CAVE_STEP][SPRITE.DAY] = p(_r(1, ["#414040"])),
       sprite[SPRITE.CAVE_STEP][SPRITE.NIGHT] = p(_r(1, ["#153635"])),
       sprite[SPRITE.DOOR_WOOD_OPEN_WINTER] = [],
       sprite[SPRITE.DOOR_WOOD_OPEN_WINTER][SPRITE.DAY] = p(_t(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])),
       sprite[SPRITE.DOOR_WOOD_OPEN_WINTER][SPRITE.NIGHT] = p(_t(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])),
       sprite[SPRITE.DOOR_STONE_OPEN_WINTER] = [],
       sprite[SPRITE.DOOR_STONE_OPEN_WINTER][SPRITE.DAY] = p(ut(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])),
       sprite[SPRITE.DOOR_STONE_OPEN_WINTER][SPRITE.NIGHT] = p(ut(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])),
       sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER] = [],
       sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER][SPRITE.DAY] = p(ut(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])),
       sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER][SPRITE.NIGHT] = p(ut(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])),
       sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER] = [],
       sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER][SPRITE.DAY] = p(St(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])),
       sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER][SPRITE.NIGHT] = p(St(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])),
       sprite[SPRITE.DOOR_GOLD_OPEN_WINTER] = [],
       sprite[SPRITE.DOOR_GOLD_OPEN_WINTER][SPRITE.DAY] = p(ht(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])),
       sprite[SPRITE.DOOR_GOLD_OPEN_WINTER][SPRITE.NIGHT] = p(ht(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])),
       sprite[SPRITE.FOX] = [],
       sprite[SPRITE.FOX][SPRITE.DAY] = p(ur(.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"])),
       sprite[SPRITE.FOX][SPRITE.NIGHT] = p(ur(.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"])),
       sprite[SPRITE.BEAR] = [],
       sprite[SPRITE.BEAR][SPRITE.DAY] = p(Rr(.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"])),
       sprite[SPRITE.BEAR][SPRITE.NIGHT] = p(Rr(.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"])),
       sprite[SPRITE.MINIMAP] = [],
       sprite[SPRITE.MINIMAP_CTX] = [],
       sprite[SPRITE.BIGMAP] = [],
       sprite[SPRITE.BIGMAP_CTX] = [];
       for (i = 0; i < 2; i++)
           sprite[SPRITE.MINIMAP][i] = document.createElement("canvas"),
           sprite[SPRITE.MINIMAP][i].width = 193,
           sprite[SPRITE.MINIMAP][i].height = 193,
           sprite[SPRITE.MINIMAP_CTX][i] = sprite[SPRITE.MINIMAP][i].getContext("2d"),
           sprite[SPRITE.BIGMAP][i] = document.createElement("canvas"),
           sprite[SPRITE.BIGMAP][i].width = 600,
           sprite[SPRITE.BIGMAP][i].height = 600,
           sprite[SPRITE.BIGMAP_CTX][i] = sprite[SPRITE.BIGMAP][i].getContext("2d");
       sprite[SPRITE.SNOW_STEP] = [],
       sprite[SPRITE.SNOW_STEP][SPRITE.DAY] = p(_r(1, ["#c8e0de"])),
       sprite[SPRITE.SNOW_STEP][SPRITE.NIGHT] = p(_r(1, ["#147071"])),
       sprite[SPRITE.LAVA_STEP] = [],
       sprite[SPRITE.LAVA_STEP][SPRITE.DAY] = p(_r(1, ["#231912"])),
       sprite[SPRITE.LAVA_STEP][SPRITE.NIGHT] = p(_r(1, ["#021719"])),
       sprite[SPRITE.HURT_TREASURE_CHEST] = p(cn(.5, ["#BB0000"])),
       sprite[SPRITE.HURT_FOX] = p(hr(.9, "#BB0000")),
       sprite[SPRITE.HURT_BEAR] = p(Ar(.9, "#BB0000")),
       sprite[SPRITE.HURT_DRAGON] = p(Sr(1, ["#BB0000"])),
       sprite[SPRITE.HURT_WING_LEFT] = p(Nr(.8, "#BB0000")),
       sprite[SPRITE.HURT_WING_RIGHT] = p(gr(.8, "#BB0000")),
       sprite[SPRITE.HURT_RABBIT] = p(We(.9, "#BB0000")),
       sprite[SPRITE.HURT] = p(de(.6, "#BB0000")),
       sprite[SPRITE.COLD] = p(de(.6, "#1CE7E0")),
       sprite[SPRITE.HUNGER] = p(de(.6, "#DBE71C")),
       sprite[SPRITE.HEAL] = p(de(.6, "#00BB00")),
       sprite[SPRITE.SAND_STEP] = [],
       sprite[SPRITE.SAND_STEP][SPRITE.DAY] = p(_r(1, ["#dac291"])),
       sprite[SPRITE.SAND_STEP][SPRITE.NIGHT] = p(_r(1, ["#0D423D"])),
       sprite[SPRITE.ISLAND_STEP] = [],
       sprite[SPRITE.ISLAND_STEP][SPRITE.DAY] = p(_r(1, ["#dac291"])),
       sprite[SPRITE.ISLAND_STEP][SPRITE.NIGHT] = p(_r(1, ["#0D423D"])),
       sprite[SPRITE.WELL_FULL] = [],
       sprite[SPRITE.WELL_FULL][SPRITE.DAY] = p(En(.3, !0, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"])),
       sprite[SPRITE.WELL_FULL][SPRITE.NIGHT] = p(En(.3, !0, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"])),
       sprite[SPRITE.WELL_EMPTY] = [],
       sprite[SPRITE.WELL_EMPTY][SPRITE.DAY] = p(En(.3, !0, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"])),
       sprite[SPRITE.WELL_EMPTY][SPRITE.NIGHT] = p(En(.3, !0, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"])),
       sprite[SPRITE.BOTTLE_FULL] = [p(vn(1, !0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))],
       sprite[SPRITE.BOTTLE_EMPTY] = [p(vn(1, !0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))],
       sprite[SPRITE.OCEAN] = [],
       sprite[SPRITE.OCEAN][SPRITE.DAY] = [],
       sprite[SPRITE.OCEAN][SPRITE.NIGHT] = [],
       sprite[SPRITE.OCEAN][SPRITE.DAY].push(p(nr(1, ["#0B6A84"]))),
       sprite[SPRITE.OCEAN][SPRITE.DAY].push(p(or(1, ["#0B6A84"]))),
       sprite[SPRITE.OCEAN][SPRITE.DAY].push(p(ar(1, ["#0B6A84"]))),
       sprite[SPRITE.OCEAN][SPRITE.DAY].push(p(sr(1, ["#0B6A84"]))),
       sprite[SPRITE.OCEAN][SPRITE.DAY].push(p(Tr(1, ["#0B6A84"]))),
       sprite[SPRITE.OCEAN][SPRITE.DAY].push(p(Ir(1, ["#0B6A84"]))),
       sprite[SPRITE.OCEAN][SPRITE.DAY].push(p(Er(1, ["#0B6A84"]))),
       sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(p(nr(1, ["#09373F"]))),
       sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(p(or(1, ["#09373F"]))),
       sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(p(ar(1, ["#09373F"]))),
       sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(p(sr(1, ["#09373F"]))),
       sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(p(Tr(1, ["#09373F"]))),
       sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(p(Ir(1, ["#09373F"]))),
       sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(p(Er(1, ["#09373F"]))),
       sprite[SPRITE.ISLAND] = [],
       sprite[SPRITE.ISLAND][SPRITE.DAY] = [],
       sprite[SPRITE.ISLAND][SPRITE.NIGHT] = [],
       sprite[SPRITE.ISLAND][SPRITE.DAY].push(p(Xt(1.7, ["#FBEFBC"], 0))),
       sprite[SPRITE.ISLAND][SPRITE.DAY].push(p(Xt(1.9, ["#FBEFBC"], 1))),
       sprite[SPRITE.ISLAND][SPRITE.DAY].push(p(Xt(1.7, ["#FBEFBC"], 2))),
       sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(p(Xt(1.7, ["#0F4C48"], 0))),
       sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(p(Xt(1.9, ["#0F4C48"], 1))),
       sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(p(Xt(1.7, ["#0F4C48"], 2))),
       sprite[SPRITE.WAVE_ONE] = [],
       sprite[SPRITE.WAVE_ONE][SPRITE.DAY] = [],
       sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT] = [],
       sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(p(Xt(1.8, ["#A9D6D3"], 0))),
       sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(p(Xt(2, ["#A9D6D3"], 1))),
       sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(p(Xt(1.8, ["#A9D6D3"], 2))),
       sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(p(Xt(1.8, ["#115E60"], 0))),
       sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(p(Xt(2, ["#115E60"], 1))),
       sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(p(Xt(1.8, ["#115E60"], 2))),
       sprite[SPRITE.WAVE_TWO] = [],
       sprite[SPRITE.WAVE_TWO][SPRITE.DAY] = [],
       sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT] = [],
       sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(p(Xt(1.9, ["#2A8B9B"], 0))),
       sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(p(Xt(2.1, ["#2A8B9B"], 1))),
       sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(p(Xt(1.9, ["#2A8B9B"], 2))),
       sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(p(Xt(1.9, ["#0F464C"], 0))),
       sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(p(Xt(2.1, ["#0F464C"], 1))),
       sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(p(Xt(1.9, ["#0F464C"], 2))),
       sprite[SPRITE.PALM] = [],
       sprite[SPRITE.PALM][SPRITE.DAY] = [],
       sprite[SPRITE.PALM][SPRITE.NIGHT] = [],
       sprite[SPRITE.PALM][SPRITE.DAY].push(p(st(.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"]))),
       sprite[SPRITE.PALM][SPRITE.DAY].push(p(st(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"]))),
       sprite[SPRITE.PALM][SPRITE.DAY].push(p(st(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"]))),
       sprite[SPRITE.PALM][SPRITE.NIGHT].push(p(st(.8, ["#041e22", "#124949", "#0e3838", "#0a4049"]))),
       sprite[SPRITE.PALM][SPRITE.NIGHT].push(p(st(1, ["#041e22", "#124949", "#0e3838", "#0a4049"]))),
       sprite[SPRITE.PALM][SPRITE.NIGHT].push(p(st(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"]))),
       sprite[SPRITE.KRAKEN] = [],
       sprite[SPRITE.KRAKEN][SPRITE.DAY] = p(en(.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"])),
       sprite[SPRITE.KRAKEN][SPRITE.NIGHT] = p(en(.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"])),
       sprite[SPRITE.HURT_KRAKEN] = p(rn(.8, ["#B6222A"])),
       sprite[SPRITE.PIRANHA] = [],
       sprite[SPRITE.PIRANHA][SPRITE.DAY] = p(An(.8, !0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"])),
       sprite[SPRITE.PIRANHA][SPRITE.NIGHT] = p(An(.8, !0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"])),
       sprite[SPRITE.HURT_PIRANHA] = p(dn(.8, ["#B6222A"])),
       sprite[SPRITE.FISH1] = [],
       sprite[SPRITE.FISH1][SPRITE.DAY] = p(Ge(.4, !0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0)),
       sprite[SPRITE.FISH1][SPRITE.NIGHT] = p(Ge(.4, !0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0)),
       sprite[SPRITE.FISH2] = [],
       sprite[SPRITE.FISH2][SPRITE.DAY] = p(Ge(.4, !0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1)),
       sprite[SPRITE.FISH2][SPRITE.NIGHT] = p(Ge(.4, !0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1)),
       sprite[SPRITE.FISH3] = [],
       sprite[SPRITE.FISH3][SPRITE.DAY] = p(Ge(.4, !0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0)),
       sprite[SPRITE.FISH3][SPRITE.NIGHT] = p(Ge(.4, !0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0)),
       sprite[SPRITE.HURT_FISH1] = p(Le(.4, ["#B6222A"])),
       sprite[SPRITE.HURT_FISH2] = p(Le(.4, ["#B6222A"])),
       sprite[SPRITE.HURT_FISH3] = p(Le(.4, ["#B6222A"])),
       sprite[SPRITE.CRAB_LOOT] = p(Ct(.35, !0, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"], 1)),
       sprite[SPRITE.CRAB_STICK] = p(Gi(.35, !0, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"], 1)),
       sprite[SPRITE.CRAB_ATTACK] = [],
       sprite[SPRITE.CRAB_ATTACK][SPRITE.DAY] = p(Pi(.35, !0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1)),
       sprite[SPRITE.CRAB_ATTACK][SPRITE.NIGHT] = p(Pi(.35, !0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1)),
       sprite[SPRITE.CRAB] = [],
       sprite[SPRITE.CRAB][SPRITE.DAY] = p(Pi(.35, !0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0)),
       sprite[SPRITE.CRAB][SPRITE.NIGHT] = p(Pi(.35, !0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0)),
       sprite[SPRITE.CRAB_CLAW_LEFT] = [],
       sprite[SPRITE.CRAB_CLAW_LEFT][SPRITE.DAY] = p(Di(.35, !0, ["#1e2021", "#e45936", "#ffffff"])),
       sprite[SPRITE.CRAB_CLAW_LEFT][SPRITE.NIGHT] = p(Di(.35, !0, ["#0c0c0d", "#34255d", "#563f83"])),
       sprite[SPRITE.CRAB_CLAW_RIGHT] = [],
       sprite[SPRITE.CRAB_CLAW_RIGHT][SPRITE.DAY] = p(Mi(.42, !0, ["#1e2021", "#e45936", "#ffffff"])),
       sprite[SPRITE.CRAB_CLAW_RIGHT][SPRITE.NIGHT] = p(Mi(.42, !0, ["#0c0c0d", "#34255d", "#563f83"])),
       sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK] = [],
       sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.DAY] = p(Di(.35, !0, ["#1e2021", "#e45936", "#B6222A"])),
       sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.NIGHT] = p(Di(.35, !0, ["#0c0c0d", "#613577", "#462966"])),
       sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK] = [],
       sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.DAY] = p(Mi(.42, !0, ["#1e2021", "#e45936", "#B6222A"])),
       sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] = p(Mi(.42, !0, ["#0c0c0d", "#613577", "#462966"])),
       sprite[SPRITE.HURT_CRAB] = p(mi(.35, ["#B6222A"])),
       sprite[SPRITE.HURT_CRAB_CLAW_LEFT] = p(Di(.35, !0, [void 0, "#B6222A"])),
       sprite[SPRITE.HURT_CRAB_CLAW_RIGHT] = p(Mi(.35, !0, [void 0, "#B6222A"])),
       sprite[SPRITE.HEAL_CRAB] = p(mi(.35, ["#22E066"])),
       sprite[SPRITE.HEAL_CRAB_CLAW_LEFT] = p(Di(.35, !0, [void 0, "#22E066"])),
       sprite[SPRITE.HEAL_CRAB_CLAW_RIGHT] = p(Mi(.35, !0, [void 0, "#22E066"])),
       sprite[SPRITE.DIVING_MASK] = [],
       sprite[SPRITE.DIVING_MASK][SPRITE.DAY] = p(Qi(.3, !0, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"])),
       sprite[SPRITE.DIVING_MASK][SPRITE.NIGHT] = p(Qi(.3, !0, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"])),
       sprite[SPRITE.SUPER_DIVING_SUIT] = [],
       sprite[SPRITE.SUPER_DIVING_SUIT][SPRITE.DAY] = p($i(.45, !0, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"])),
       sprite[SPRITE.SUPER_DIVING_SUIT][SPRITE.NIGHT] = p($i(.45, !0, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"])),
       sprite[SPRITE.PLOT] = [],
       sprite[SPRITE.PLOT][SPRITE.DAY] = p(hn(.63, !0, ["#1e2021", "#352E1E", "#4C3B19", "#574122"])),
       sprite[SPRITE.PLOT][SPRITE.NIGHT] = p(hn(.63, !0, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"])),
       sprite[SPRITE.BRIDGE] = [],
       sprite[SPRITE.BRIDGE][SPRITE.DAY] = p(Tn(1, !0, ["#1e2021", "#332715", "#4C3B19", "#574122"])),
       sprite[SPRITE.BRIDGE][SPRITE.NIGHT] = p(Tn(1, !0, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"])),
       sprite[SPRITE.WOOD_TOWER] = [],
       sprite[SPRITE.WOOD_TOWER][SPRITE.DAY] = IMAGES.WOOD_TOWERD,
       sprite[SPRITE.WOOD_TOWER][SPRITE.NIGHT] = IMAGES.WOOD_TOWERN,
       sprite[SPRITE.ROOF] = [],
       sprite[SPRITE.ROOF][SPRITE.DAY] = p(pe(.59, !0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])),
       sprite[SPRITE.ROOF][SPRITE.NIGHT] = p(pe(.59, !0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"])),
       sprite[SPRITE.ROOFS] = [sprite[SPRITE.ROOF]],
       sprite[SPRITE.ROOFS][1] = [],
       sprite[SPRITE.ROOFS][2] = [],
       sprite[SPRITE.ROOFS][1][SPRITE.DAY] = p(ce(.59, !0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])),
       sprite[SPRITE.ROOFS][1][SPRITE.NIGHT] = p(ce(.59, !0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"])),
       sprite[SPRITE.ROOFS][2][SPRITE.DAY] = p(ve(.59, !0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])),
       sprite[SPRITE.ROOFS][2][SPRITE.NIGHT] = p(ve(.59, !0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"])),
       sprite[SPRITE.WATERING_CAN_FULL] = [],
       sprite[SPRITE.WATERING_CAN_FULL][SPRITE.DAY] = p(he(3 - Math.PI / 2, Rn(.6, !0, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]))),
       sprite[SPRITE.WATERING_CAN_FULL][SPRITE.NIGHT] = p(he(3 - Math.PI / 2, Rn(.6, !0, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"]))),
       sprite[SPRITE.DEAD_BOX] = [],
       sprite[SPRITE.DEAD_BOX][SPRITE.DAY] = p(Xe(.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0)),
       sprite[SPRITE.DEAD_BOX][SPRITE.NIGHT] = p(Xe(.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0)),
       sprite[SPRITE.DEAD_BOX_UI] = p(je(.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"])),
       sprite[SPRITE.HURT_DEAD_BOX] = p(qe(.3, ["#BB0000"])),
       sprite[SPRITE.WINDMILL_FLOUR] = oi(1, [{
           f: Sn,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
       }], .25, ["#d2c77b", "#e7dc8f", "#bfb360"], .7),
       sprite[SPRITE.LAVA_HEART] = oi(1.5, [{
           f: Wr,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#120202", "#750a0a", "#991616", "#120202"]
       }], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9),
       sprite[SPRITE.HEART_SYMBOL_HUD] = Ln(.35, ["#072428", "#67A242", "#67A242"], 0),
       sprite[SPRITE.COLD_SYMBOL_HUD] = Ln(.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1),
       sprite[SPRITE.FOOD_SYMBOL_HUD] = Ln(.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2),
       sprite[SPRITE.WATER_SYMBOL_HUD] = Ln(.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3),
       mobile ? sprite[SPRITE.LEADERBOARD] = p(create_leaderboard_mobile(1)) : sprite[SPRITE.LEADERBOARD] = p(ln(1)),
       mobile ? sprite[SPRITE.GAUGES] = p(create_gauges_mobile(.75)) : sprite[SPRITE.GAUGES] = p(Un(1)),
       mobile ? sprite[SPRITE.OXYGEN] = p(zn(.75)) : sprite[SPRITE.OXYGEN] = p(zn(1)),
       sprite[SPRITE.DELAY_HELMET] = p(pr(.16, !0, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])),
       sprite[SPRITE.DELAY_WEAPON] = p(he(5.8, ci(.15, !0, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]))),
       sprite[SPRITE.COUNTER] = [],
       sprite[SPRITE.SLOT_NUMBER] = [];
       for (i = 0; i < ET.WITH_BAG + 2; i++)
           sprite[SPRITE.SLOT_NUMBER][i] = Yi(1, "" + (i + 1), 12, "#FFF");
       sprite[SPRITE.RECIPE_BUTTON] = [],
       sprite[SPRITE.RECIPE_BUTTON].push(p(Hn(.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"]))),
       sprite[SPRITE.RECIPE_BUTTON].push(p(Hn(.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1))),
       sprite[SPRITE.RECIPE_BUTTON].push(p(Hn(.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1))),
       sprite[SPRITE.CLOCK] = [],
       sprite[SPRITE.CLOCK].push(p(Ft(.22))),
       sprite[SPRITE.CLOCK].push(p(xt(.22))),
       sprite[SPRITE.ARROW_CLOCK] = p(Jt(.22)),
       sprite[SPRITE.OPTION_BUTTON] = [],
       sprite[SPRITE.OPTION_BUTTON].push(p(He(1.5, ["#795026", "#654320", "#eda80d"], 0))),
       sprite[SPRITE.OPTION_BUTTON].push(p(He(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1))),
       sprite[SPRITE.OPTION_BUTTON].push(p(He(1.5, ["#67441f", "#573819", "#9c6e08"], 1))),
       sprite[SPRITE.AUTO_FEED] = IMAGES.AUTO_FEED,
       sprite[SPRITE.BANDAGE_ACTIVATED] = IMAGES.BANDAGE_ACTIVATED,
       sprite[SPRITE.STOP_REGENERATION] = IMAGES.STOP_REGENERATION,
       sprite[SPRITE.STOP_REGENERATION_BLIZZARD] = IMAGES.STOP_REGENERATION_BLIZZARD,
       sprite[SPRITE.SHOW_SPECTATORS] = Yi(1, "Show spectators", 25, "#FFF", void 0, void 0, "#000", 5, 220),
       sprite[SPRITE.RECONNECT] = Yi(1, "Reconnecting...", 30, "#FFF"),
       console.log("Load canvas", Date.now() - e)
   }
   function xn() {
       document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[KI.time],
       KI.items.push(new dT(hT.FIRE,0,0,0,0,Math.random() * Math.PI * 2,2,1)),
       KI.items.push(new dT(hT.FRUIT,0,0,0,0,0,0,5)),
       KI.items.push(new dT(hT.WORKBENCH,0,0,0,0,Math.PI / 4,0,0)),
       KI.items.push(new dT(hT.FRUIT,0,0,0,0,0,0,5))
   }
   function Jn() {
       var e = KI.time;
       if (sprite[SPRITE.HERB] && (u.drawImage(sprite[SPRITE.HERB][e][1], d + 480, S + 190),
       u.drawImage(sprite[SPRITE.HERB][e][2], d + 180, S - 430),
       u.drawImage(sprite[SPRITE.HERB][e][1], d - 855, S + 100),
       u.drawImage(sprite[SPRITE.HERB][e][0], d - 550, S - 300),
       u.drawImage(sprite[SPRITE.HERB][e][0], d - 1020, S - 520)),
       sprite[SPRITE.STONES] && (u.drawImage(sprite[SPRITE.STONES][e][1], d - 80, S - 640),
       u.drawImage(sprite[SPRITE.STONES][e][1], d + 80, S + 490),
       u.drawImage(sprite[SPRITE.STONES][e][2], d - 180, S - 700),
       u.drawImage(sprite[SPRITE.STONES][e][0], d + 550, S + 100),
       u.drawImage(sprite[SPRITE.STONES][e][1], d + 450, S + 300),
       u.drawImage(sprite[SPRITE.STONES][e][1], d + 780, S + 300),
       u.drawImage(sprite[SPRITE.STONES][e][2], d + 980, S + 200),
       u.drawImage(sprite[SPRITE.STONES][e][2], d + 680, S + 600),
       u.drawImage(sprite[SPRITE.STONES][e][2], d - 380, S + 100),
       u.drawImage(sprite[SPRITE.STONES][e][2], d + 280, S + 250)),
       sprite[SPRITE.PLANT] && (u.drawImage(sprite[SPRITE.PLANT][e][0], d - 590, S),
       u.drawImage(sprite[SPRITE.PLANT][e][0], d + 120, S - 390),
       u.drawImage(sprite[SPRITE.PLANT][e][0], d - 270, S + 340)),
       sprite[SPRITE.TREE] && (u.drawImage(sprite[SPRITE.TREE][e][4], d - 700, S - 600),
       u.drawImage(sprite[SPRITE.TREE][e][2], d - 970, S - 250),
       u.drawImage(sprite[SPRITE.TREE][e][5], d - 720, S - 200),
       u.drawImage(sprite[SPRITE.TREE][e][2], d - 1020, S + 340),
       u.drawImage(sprite[SPRITE.TREE][e][0], d - 1120, S - 0),
       u.drawImage(sprite[SPRITE.TREE][e][1], d - 650, S - 330),
       u.drawImage(sprite[SPRITE.TREE][e][4], d - 495, S - 90),
       u.drawImage(sprite[SPRITE.TREE][e][3], d - 520, S + 340),
       u.drawImage(sprite[SPRITE.TREE][e][2], d + 830, S - 520)),
       sprite[SPRITE.FIR],
       kI && UI) {
           var i = kI.cam.x
             , t = kI.cam.y;
           kI.cam.x = d,
           kI.cam.y = S;
           var r = UI.time;
           UI.time = KI.time;
           var n, o = KI.items;
           o[2].x = 400,
           o[2].y = 100,
           o[2].draw(SPRITE.WORKBENCH),
           (n = o[1]).x = -500,
           n.y = 100,
           n.fruits[0].x = n.x - 20.5,
           n.fruits[0].y = n.y - 22.5,
           n.fruits[1].x = n.x - 35.5,
           n.fruits[1].y = n.y + 7.5,
           n.fruits[2].x = n.x + 7.5,
           n.fruits[2].y = n.y - 30,
           n.fruits[3].x = n.x + 22.5,
           n.fruits[3].y = n.y,
           n.fruits[4].x = n.x - 7.5,
           n.fruits[4].y = n.y + 14.5;
           for (var a = 0; a < n.info; a++)
               n.fruits[a].draw(SPRITE.FRUIT);
           (n = o[3]).x = 210,
           n.y = -290,
           n.fruits[0].x = n.x - 20.5,
           n.fruits[0].y = n.y - 22.5,
           n.fruits[1].x = n.x - 35.5,
           n.fruits[1].y = n.y + 7.5,
           n.fruits[2].x = n.x + 7.5,
           n.fruits[2].y = n.y - 30,
           n.fruits[3].x = n.x + 22.5,
           n.fruits[3].y = n.y,
           n.fruits[4].x = n.x - 7.5,
           n.fruits[4].y = n.y + 14.5;
           for (a = 0; a < n.info; a++)
               n.fruits[a].draw(SPRITE.FRUIT);
           o[0].x = 450,
           o[0].y = -100,
           o[0].draw_bg(SPRITE.WOOD_FIRE),
           o[0].draw_fg(),
           kI.cam.x = i,
           kI.cam.y = t,
           UI.time = r
       }
   }
   function Xn() {
       sprite[SPRITE.INV_PUMPKIN] = oi(1, [{
           f: Nn,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
       }], .2, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CHEST_PUMPKIN] = sprite[SPRITE.INV_PUMPKIN],
       sprite[SPRITE.INV_CARROT] = [],
       sprite[SPRITE.INV_CARROT][0] = IMAGES.INV_CARROT_OUT,
       sprite[SPRITE.INV_CARROT][1] = IMAGES.INV_CARROT_IN,
       sprite[SPRITE.INV_CARROT][2] = IMAGES.INV_CARROT_CLICK,
       sprite[SPRITE.CHEST_CARROT] = sprite[SPRITE.INV_CARROT],
       sprite[SPRITE.INV_WATERMELON] = [],
       sprite[SPRITE.INV_WATERMELON][0] = IMAGES.INV_WATERMELON_OUT,
       sprite[SPRITE.INV_WATERMELON][1] = IMAGES.INV_WATERMELON_IN,
       sprite[SPRITE.INV_WATERMELON][2] = IMAGES.INV_WATERMELON_CLICK,
       sprite[SPRITE.CHEST_WATERMELON] = sprite[SPRITE.INV_WATERMELON],
       sprite[SPRITE.INV_ALOE_VERA] = [],
       sprite[SPRITE.INV_ALOE_VERA][0] = IMAGES.INV_ALOE_VERA_OUT,
       sprite[SPRITE.INV_ALOE_VERA][1] = IMAGES.INV_ALOE_VERA_IN,
       sprite[SPRITE.INV_ALOE_VERA][2] = IMAGES.INV_ALOE_VERA_CLICK,
       sprite[SPRITE.CHEST_ALOE_VERA] = sprite[SPRITE.INV_ALOE_VERA],
       sprite[SPRITE.INV_CACTUS] = [],
       sprite[SPRITE.INV_CACTUS][0] = IMAGES.INV_CACTUS_OUT,
       sprite[SPRITE.INV_CACTUS][1] = IMAGES.INV_CACTUS_IN,
       sprite[SPRITE.INV_CACTUS][2] = IMAGES.INV_CACTUS_CLICK,
       sprite[SPRITE.CHEST_CACTUS] = sprite[SPRITE.INV_CACTUS],
       sprite[SPRITE.INV_TOMATO] = [],
       sprite[SPRITE.INV_TOMATO][0] = IMAGES.INV_TOMATO_OUT,
       sprite[SPRITE.INV_TOMATO][1] = IMAGES.INV_TOMATO_IN,
       sprite[SPRITE.INV_TOMATO][2] = IMAGES.INV_TOMATO_CLICK,
       sprite[SPRITE.CHEST_TOMATO] = sprite[SPRITE.INV_TOMATO],
       sprite[SPRITE.INV_BOAT] = [],
       sprite[SPRITE.INV_BOAT][0] = IMAGES.INV_BOAT_OUT,
       sprite[SPRITE.INV_BOAT][1] = IMAGES.INV_BOAT_IN,
       sprite[SPRITE.INV_BOAT][2] = IMAGES.INV_BOAT_CLICK,
       sprite[SPRITE.CHEST_BOAT] = sprite[SPRITE.INV_BOAT],
       sprite[SPRITE.CRAFT_BOAT] = sprite[SPRITE.INV_BOAT],
       sprite[SPRITE.INV_MACHETE] = [],
       sprite[SPRITE.INV_MACHETE][0] = IMAGES.INV_MACHETE_OUT,
       sprite[SPRITE.INV_MACHETE][1] = IMAGES.INV_MACHETE_IN,
       sprite[SPRITE.INV_MACHETE][2] = IMAGES.INV_MACHETE_CLICK,
       sprite[SPRITE.CHEST_MACHETE] = sprite[SPRITE.INV_MACHETE],
       sprite[SPRITE.CRAFT_MACHETE] = sprite[SPRITE.INV_MACHETE],
       sprite[SPRITE.INV_SLED] = [],
       sprite[SPRITE.INV_SLED][0] = IMAGES.INV_SLED_OUT,
       sprite[SPRITE.INV_SLED][1] = IMAGES.INV_SLED_IN,
       sprite[SPRITE.INV_SLED][2] = IMAGES.INV_SLED_CLICK,
       sprite[SPRITE.CHEST_SLED] = sprite[SPRITE.INV_SLED],
       sprite[SPRITE.CRAFT_SLED] = sprite[SPRITE.INV_SLED],
       sprite[SPRITE.INV_PIRATE_HAT] = [],
       sprite[SPRITE.INV_PIRATE_HAT][0] = IMAGES.INV_PIRATE_HAT_OUT,
       sprite[SPRITE.INV_PIRATE_HAT][1] = IMAGES.INV_PIRATE_HAT_IN,
       sprite[SPRITE.INV_PIRATE_HAT][2] = IMAGES.INV_PIRATE_HAT_CLICK,
       sprite[SPRITE.CHEST_PIRATE_HAT] = sprite[SPRITE.INV_PIRATE_HAT],
       sprite[SPRITE.CRAFT_PIRATE_HAT] = sprite[SPRITE.INV_PIRATE_HAT],
       sprite[SPRITE.INV_FUR_MAMMOTH] = [],
       sprite[SPRITE.INV_FUR_MAMMOTH][0] = IMAGES.INV_FUR_MAMMOTH_OUT,
       sprite[SPRITE.INV_FUR_MAMMOTH][1] = IMAGES.INV_FUR_MAMMOTH_IN,
       sprite[SPRITE.INV_FUR_MAMMOTH][2] = IMAGES.INV_FUR_MAMMOTH_CLICK,
       sprite[SPRITE.CHEST_FUR_MAMMOTH] = sprite[SPRITE.INV_FUR_MAMMOTH],
       sprite[SPRITE.INV_FUR_HAT] = [],
       sprite[SPRITE.INV_FUR_HAT][0] = IMAGES.INV_FUR_HAT_OUT,
       sprite[SPRITE.INV_FUR_HAT][1] = IMAGES.INV_FUR_HAT_IN,
       sprite[SPRITE.INV_FUR_HAT][2] = IMAGES.INV_FUR_HAT_CLICK,
       sprite[SPRITE.CHEST_FUR_HAT] = sprite[SPRITE.INV_FUR_HAT],
       sprite[SPRITE.CRAFT_FUR_HAT] = sprite[SPRITE.INV_FUR_HAT],
       sprite[SPRITE.INV_WOOD_BOW] = [],
       sprite[SPRITE.INV_WOOD_BOW][0] = IMAGES.INV_WOOD_BOW_OUT,
       sprite[SPRITE.INV_WOOD_BOW][1] = IMAGES.INV_WOOD_BOW_IN,
       sprite[SPRITE.INV_WOOD_BOW][2] = IMAGES.INV_WOOD_BOW_CLICK,
       sprite[SPRITE.CHEST_WOOD_BOW] = sprite[SPRITE.INV_WOOD_BOW],
       sprite[SPRITE.CRAFT_WOOD_BOW] = sprite[SPRITE.INV_WOOD_BOW],
       sprite[SPRITE.INV_WOOD_ARROW] = [],
       sprite[SPRITE.INV_WOOD_ARROW][0] = IMAGES.INV_WOOD_ARROW_OUT,
       sprite[SPRITE.INV_WOOD_ARROW][1] = IMAGES.INV_WOOD_ARROW_IN,
       sprite[SPRITE.INV_WOOD_ARROW][2] = IMAGES.INV_WOOD_ARROW_CLICK,
       sprite[SPRITE.CHEST_WOOD_ARROW] = sprite[SPRITE.INV_WOOD_ARROW],
       sprite[SPRITE.CRAFT_WOOD_ARROW] = sprite[SPRITE.INV_WOOD_ARROW],
       sprite[SPRITE.INV_STONE_BOW] = [],
       sprite[SPRITE.INV_STONE_BOW][0] = IMAGES.INV_STONE_BOW_OUT,
       sprite[SPRITE.INV_STONE_BOW][1] = IMAGES.INV_STONE_BOW_IN,
       sprite[SPRITE.INV_STONE_BOW][2] = IMAGES.INV_STONE_BOW_CLICK,
       sprite[SPRITE.CHEST_STONE_BOW] = sprite[SPRITE.INV_STONE_BOW],
       sprite[SPRITE.CRAFT_STONE_BOW] = sprite[SPRITE.INV_STONE_BOW],
       sprite[SPRITE.INV_STONE_ARROW] = [],
       sprite[SPRITE.INV_STONE_ARROW][0] = IMAGES.INV_STONE_ARROW_OUT,
       sprite[SPRITE.INV_STONE_ARROW][1] = IMAGES.INV_STONE_ARROW_IN,
       sprite[SPRITE.INV_STONE_ARROW][2] = IMAGES.INV_STONE_ARROW_CLICK,
       sprite[SPRITE.CHEST_STONE_ARROW] = sprite[SPRITE.INV_STONE_ARROW],
       sprite[SPRITE.CRAFT_STONE_ARROW] = sprite[SPRITE.INV_STONE_ARROW],
       sprite[SPRITE.INV_GOLD_BOW] = [],
       sprite[SPRITE.INV_GOLD_BOW][0] = IMAGES.INV_GOLD_BOW_OUT,
       sprite[SPRITE.INV_GOLD_BOW][1] = IMAGES.INV_GOLD_BOW_IN,
       sprite[SPRITE.INV_GOLD_BOW][2] = IMAGES.INV_GOLD_BOW_CLICK,
       sprite[SPRITE.CHEST_GOLD_BOW] = sprite[SPRITE.INV_GOLD_BOW],
       sprite[SPRITE.CRAFT_GOLD_BOW] = sprite[SPRITE.INV_GOLD_BOW],
       sprite[SPRITE.INV_GOLD_ARROW] = [],
       sprite[SPRITE.INV_GOLD_ARROW][0] = IMAGES.INV_GOLD_ARROW_OUT,
       sprite[SPRITE.INV_GOLD_ARROW][1] = IMAGES.INV_GOLD_ARROW_IN,
       sprite[SPRITE.INV_GOLD_ARROW][2] = IMAGES.INV_GOLD_ARROW_CLICK,
       sprite[SPRITE.CHEST_GOLD_ARROW] = sprite[SPRITE.INV_GOLD_ARROW],
       sprite[SPRITE.CRAFT_GOLD_ARROW] = sprite[SPRITE.INV_GOLD_ARROW],
       sprite[SPRITE.INV_DIAMOND_BOW] = [],
       sprite[SPRITE.INV_DIAMOND_BOW][0] = IMAGES.INV_DIAMOND_BOW_OUT,
       sprite[SPRITE.INV_DIAMOND_BOW][1] = IMAGES.INV_DIAMOND_BOW_IN,
       sprite[SPRITE.INV_DIAMOND_BOW][2] = IMAGES.INV_DIAMOND_BOW_CLICK,
       sprite[SPRITE.CHEST_DIAMOND_BOW] = sprite[SPRITE.INV_DIAMOND_BOW],
       sprite[SPRITE.CRAFT_DIAMOND_BOW] = sprite[SPRITE.INV_DIAMOND_BOW],
       sprite[SPRITE.INV_DIAMOND_ARROW] = [],
       sprite[SPRITE.INV_DIAMOND_ARROW][0] = IMAGES.INV_DIAMOND_ARROW_OUT,
       sprite[SPRITE.INV_DIAMOND_ARROW][1] = IMAGES.INV_DIAMOND_ARROW_IN,
       sprite[SPRITE.INV_DIAMOND_ARROW][2] = IMAGES.INV_DIAMOND_ARROW_CLICK,
       sprite[SPRITE.CHEST_DIAMOND_ARROW] = sprite[SPRITE.INV_DIAMOND_ARROW],
       sprite[SPRITE.CRAFT_DIAMOND_ARROW] = sprite[SPRITE.INV_DIAMOND_ARROW],
       sprite[SPRITE.INV_AMETHYST_BOW] = [],
       sprite[SPRITE.INV_AMETHYST_BOW][0] = IMAGES.INV_AMETHYST_BOW_OUT,
       sprite[SPRITE.INV_AMETHYST_BOW][1] = IMAGES.INV_AMETHYST_BOW_IN,
       sprite[SPRITE.INV_AMETHYST_BOW][2] = IMAGES.INV_AMETHYST_BOW_CLICK,
       sprite[SPRITE.CHEST_AMETHYST_BOW] = sprite[SPRITE.INV_AMETHYST_BOW],
       sprite[SPRITE.CRAFT_AMETHYST_BOW] = sprite[SPRITE.INV_AMETHYST_BOW],
       sprite[SPRITE.INV_AMETHYST_ARROW] = [],
       sprite[SPRITE.INV_AMETHYST_ARROW][0] = IMAGES.INV_AMETHYST_ARROW_OUT,
       sprite[SPRITE.INV_AMETHYST_ARROW][1] = IMAGES.INV_AMETHYST_ARROW_IN,
       sprite[SPRITE.INV_AMETHYST_ARROW][2] = IMAGES.INV_AMETHYST_ARROW_CLICK,
       sprite[SPRITE.CHEST_AMETHYST_ARROW] = sprite[SPRITE.INV_AMETHYST_ARROW],
       sprite[SPRITE.CRAFT_AMETHYST_ARROW] = sprite[SPRITE.INV_AMETHYST_ARROW],
       sprite[SPRITE.INV_REIDITE_BOW] = [],
       sprite[SPRITE.INV_REIDITE_BOW][0] = IMAGES.INV_REIDITE_BOW_OUT,
       sprite[SPRITE.INV_REIDITE_BOW][1] = IMAGES.INV_REIDITE_BOW_IN,
       sprite[SPRITE.INV_REIDITE_BOW][2] = IMAGES.INV_REIDITE_BOW_CLICK,
       sprite[SPRITE.CHEST_REIDITE_BOW] = sprite[SPRITE.INV_REIDITE_BOW],
       sprite[SPRITE.CRAFT_REIDITE_BOW] = sprite[SPRITE.INV_REIDITE_BOW],
       sprite[SPRITE.INV_REIDITE_ARROW] = [],
       sprite[SPRITE.INV_REIDITE_ARROW][0] = IMAGES.INV_REIDITE_ARROW_OUT,
       sprite[SPRITE.INV_REIDITE_ARROW][1] = IMAGES.INV_REIDITE_ARROW_IN,
       sprite[SPRITE.INV_REIDITE_ARROW][2] = IMAGES.INV_REIDITE_ARROW_CLICK,
       sprite[SPRITE.CHEST_REIDITE_ARROW] = sprite[SPRITE.INV_REIDITE_ARROW],
       sprite[SPRITE.CRAFT_REIDITE_ARROW] = sprite[SPRITE.INV_REIDITE_ARROW],
       sprite[SPRITE.INV_DRAGON_BOW] = [],
       sprite[SPRITE.INV_DRAGON_BOW][0] = IMAGES.INV_DRAGON_BOW_OUT,
       sprite[SPRITE.INV_DRAGON_BOW][1] = IMAGES.INV_DRAGON_BOW_IN,
       sprite[SPRITE.INV_DRAGON_BOW][2] = IMAGES.INV_DRAGON_BOW_CLICK,
       sprite[SPRITE.CHEST_DRAGON_BOW] = sprite[SPRITE.INV_DRAGON_BOW],
       sprite[SPRITE.CRAFT_DRAGON_BOW] = sprite[SPRITE.INV_DRAGON_BOW],
       sprite[SPRITE.INV_DRAGON_ARROW] = [],
       sprite[SPRITE.INV_DRAGON_ARROW][0] = IMAGES.INV_DRAGON_ARROW_OUT,
       sprite[SPRITE.INV_DRAGON_ARROW][1] = IMAGES.INV_DRAGON_ARROW_IN,
       sprite[SPRITE.INV_DRAGON_ARROW][2] = IMAGES.INV_DRAGON_ARROW_CLICK,
       sprite[SPRITE.CHEST_DRAGON_ARROW] = sprite[SPRITE.INV_DRAGON_ARROW],
       sprite[SPRITE.CRAFT_DRAGON_ARROW] = sprite[SPRITE.INV_DRAGON_ARROW],
       sprite[SPRITE.INV_WOOD_SHIELD] = [],
       sprite[SPRITE.INV_WOOD_SHIELD][0] = IMAGES.INV_WOOD_SHIELD_OUT,
       sprite[SPRITE.INV_WOOD_SHIELD][1] = IMAGES.INV_WOOD_SHIELD_IN,
       sprite[SPRITE.INV_WOOD_SHIELD][2] = IMAGES.INV_WOOD_SHIELD_CLICK,
       sprite[SPRITE.CHEST_WOOD_SHIELD] = sprite[SPRITE.INV_WOOD_SHIELD],
       sprite[SPRITE.CRAFT_WOOD_SHIELD] = sprite[SPRITE.INV_WOOD_SHIELD],
       sprite[SPRITE.INV_STONE_SHIELD] = [],
       sprite[SPRITE.INV_STONE_SHIELD][0] = IMAGES.INV_STONE_SHIELD_OUT,
       sprite[SPRITE.INV_STONE_SHIELD][1] = IMAGES.INV_STONE_SHIELD_IN,
       sprite[SPRITE.INV_STONE_SHIELD][2] = IMAGES.INV_STONE_SHIELD_CLICK,
       sprite[SPRITE.CHEST_STONE_SHIELD] = sprite[SPRITE.INV_STONE_SHIELD],
       sprite[SPRITE.CRAFT_STONE_SHIELD] = sprite[SPRITE.INV_STONE_SHIELD],
       sprite[SPRITE.INV_GOLD_SHIELD] = [],
       sprite[SPRITE.INV_GOLD_SHIELD][0] = IMAGES.INV_GOLD_SHIELD_OUT,
       sprite[SPRITE.INV_GOLD_SHIELD][1] = IMAGES.INV_GOLD_SHIELD_IN,
       sprite[SPRITE.INV_GOLD_SHIELD][2] = IMAGES.INV_GOLD_SHIELD_CLICK,
       sprite[SPRITE.CHEST_GOLD_SHIELD] = sprite[SPRITE.INV_GOLD_SHIELD],
       sprite[SPRITE.CRAFT_GOLD_SHIELD] = sprite[SPRITE.INV_GOLD_SHIELD],
       sprite[SPRITE.INV_DIAMOND_SHIELD] = [],
       sprite[SPRITE.INV_DIAMOND_SHIELD][0] = IMAGES.INV_DIAMOND_SHIELD_OUT,
       sprite[SPRITE.INV_DIAMOND_SHIELD][1] = IMAGES.INV_DIAMOND_SHIELD_IN,
       sprite[SPRITE.INV_DIAMOND_SHIELD][2] = IMAGES.INV_DIAMOND_SHIELD_CLICK,
       sprite[SPRITE.CHEST_DIAMOND_SHIELD] = sprite[SPRITE.INV_DIAMOND_SHIELD],
       sprite[SPRITE.CRAFT_DIAMOND_SHIELD] = sprite[SPRITE.INV_DIAMOND_SHIELD],
       sprite[SPRITE.INV_AMETHYST_SHIELD] = [],
       sprite[SPRITE.INV_AMETHYST_SHIELD][0] = IMAGES.INV_AMETHYST_SHIELD_OUT,
       sprite[SPRITE.INV_AMETHYST_SHIELD][1] = IMAGES.INV_AMETHYST_SHIELD_IN,
       sprite[SPRITE.INV_AMETHYST_SHIELD][2] = IMAGES.INV_AMETHYST_SHIELD_CLICK,
       sprite[SPRITE.CHEST_AMETHYST_SHIELD] = sprite[SPRITE.INV_AMETHYST_SHIELD],
       sprite[SPRITE.CRAFT_AMETHYST_SHIELD] = sprite[SPRITE.INV_AMETHYST_SHIELD],
       sprite[SPRITE.INV_REIDITE_SHIELD] = [],
       sprite[SPRITE.INV_REIDITE_SHIELD][0] = IMAGES.INV_REIDITE_SHIELD_OUT,
       sprite[SPRITE.INV_REIDITE_SHIELD][1] = IMAGES.INV_REIDITE_SHIELD_IN,
       sprite[SPRITE.INV_REIDITE_SHIELD][2] = IMAGES.INV_REIDITE_SHIELD_CLICK,
       sprite[SPRITE.CHEST_REIDITE_SHIELD] = sprite[SPRITE.INV_REIDITE_SHIELD],
       sprite[SPRITE.CRAFT_REIDITE_SHIELD] = sprite[SPRITE.INV_REIDITE_SHIELD],
       sprite[SPRITE.INV_FLOWER_HAT] = [],
       sprite[SPRITE.INV_FLOWER_HAT][0] = IMAGES.INV_FLOWER_HAT_OUT,
       sprite[SPRITE.INV_FLOWER_HAT][1] = IMAGES.INV_FLOWER_HAT_IN,
       sprite[SPRITE.INV_FLOWER_HAT][2] = IMAGES.INV_FLOWER_HAT_CLICK,
       sprite[SPRITE.CHEST_FLOWER_HAT] = sprite[SPRITE.INV_FLOWER_HAT],
       sprite[SPRITE.CRAFT_FLOWER_HAT] = sprite[SPRITE.INV_FLOWER_HAT],
       sprite[SPRITE.INV_SANDWORM_JUICE] = [],
       sprite[SPRITE.INV_SANDWORM_JUICE][0] = IMAGES.INV_SANDWORM_JUICE_OUT,
       sprite[SPRITE.INV_SANDWORM_JUICE][1] = IMAGES.INV_SANDWORM_JUICE_IN,
       sprite[SPRITE.INV_SANDWORM_JUICE][2] = IMAGES.INV_SANDWORM_JUICE_CLICK,
       sprite[SPRITE.CHEST_SANDWORM_JUICE] = sprite[SPRITE.INV_SANDWORM_JUICE],
       sprite[SPRITE.CRAFT_SANDWORM_JUICE] = sprite[SPRITE.INV_SANDWORM_JUICE],
       sprite[SPRITE.INV_GARLIC] = oi(1, [{
           f: Ce,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
       }], .22, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CHEST_GARLIC] = sprite[SPRITE.INV_GARLIC],
       sprite[SPRITE.INV_THORNBUSH] = oi(1, [{
           f: Cn,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
       }], .2, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CHEST_THORNBUSH] = sprite[SPRITE.INV_THORNBUSH],
       sprite[SPRITE.INV_WINDMILL] = oi(1, [{
           f: ei,
           x: -1,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
       }, {
           f: ii,
           x: -1,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
       }, {
           f: ti,
           x: -1,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
       }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_WINDMILL] = sprite[SPRITE.INV_WINDMILL],
       sprite[SPRITE.INV_WILD_WHEAT] = oi(1, [{
           f: $e,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#A89F67", "#9E8456"]
       }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.INV_SIGN] = oi(1, [{
           f: qt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
       }], .14, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_SIGN] = sprite[SPRITE.INV_SIGN],
       sprite[SPRITE.INV_WHEAT_SEED] = oi(1, [{
           f: wi,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#A89F67", "#9E8456"]
       }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_WHEAT_SEED] = sprite[SPRITE.INV_WHEAT_SEED],
       sprite[SPRITE.INV_SEED] = oi(1, [{
           f: wi,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#493d36", "#332b28"]
       }], .7, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_SEED] = sprite[SPRITE.INV_SEED],
       sprite[SPRITE.INV_PUMPKIN_SEED] = oi(1, [{
           f: wi,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#c67933", "#b17238"]
       }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_PUMPKIN_SEED] = sprite[SPRITE.INV_PUMPKIN_SEED],
       sprite[SPRITE.INV_GARLIC_SEED] = oi(1, [{
           f: wi,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#e8e8e8", "#bbbbbb"]
       }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_GARLIC_SEED] = sprite[SPRITE.INV_GARLIC_SEED],
       sprite[SPRITE.INV_THORNBUSH_SEED] = oi(1, [{
           f: wi,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#328a56", "#449573"]
       }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_THORNBUSH_SEED] = sprite[SPRITE.INV_THORNBUSH_SEED],
       sprite[SPRITE.INV_CARROT_SEED] = oi(1, [{
           f: wi,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#c98e2f", "#a36b11"]
       }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_CARROT_SEED] = sprite[SPRITE.INV_CARROT_SEED],
       sprite[SPRITE.CHEST_CARROT_SEED] = sprite[SPRITE.INV_CARROT_SEED],
       sprite[SPRITE.INV_WATERMELON_SEED] = oi(1, [{
           f: wi,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#13a56d", "#098a58"]
       }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_WATERMELON_SEED] = sprite[SPRITE.INV_WATERMELON_SEED],
       sprite[SPRITE.CHEST_WATERMELON_SEED] = sprite[SPRITE.INV_WATERMELON_SEED],
       sprite[SPRITE.INV_ALOE_VERA_SEED] = oi(1, [{
           f: wi,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#3a8214", "#4a9c1e"]
       }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_ALOE_VERA_SEED] = sprite[SPRITE.INV_ALOE_VERA_SEED],
       sprite[SPRITE.CHEST_ALOE_VERA_SEED] = sprite[SPRITE.INV_ALOE_VERA_SEED],
       sprite[SPRITE.INV_TOMATO_SEED] = oi(1, [{
           f: wi,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#b22419", "#99110e"]
       }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_TOMATO_SEED] = sprite[SPRITE.INV_TOMATO_SEED],
       sprite[SPRITE.CHEST_TOMATO_SEED] = sprite[SPRITE.INV_TOMATO_SEED],
       sprite[SPRITE.INV_FIRE] = oi(1, [{
           f: Ii,
           x: -2,
           y: -2,
           a: 1,
           r: -Math.PI / 7,
           c: ["#4d2d14", "#432516"]
       }, {
           f: Ti,
           x: -2,
           y: -2,
           a: 1,
           r: -Math.PI / 7,
           c: ["#efd435", "#ec8d35", "#e96132"]
       }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_FIRE] = sprite[SPRITE.INV_FIRE],
       sprite[SPRITE.INV_BIG_FIRE] = oi(1, [{
           f: si,
           x: -2,
           y: -1,
           a: 1,
           r: -Math.PI / 7,
           c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
       }, {
           f: Ti,
           x: -2,
           y: -1,
           a: 1,
           r: -Math.PI / 7,
           c: ["#efd435", "#ec8d35", "#e96132"]
       }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_BIG_FIRE] = sprite[SPRITE.INV_BIG_FIRE],
       sprite[SPRITE.INV_PIRATE_SWORD] = oi(1, [{
           f: pi,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
       }], .1, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.INV_SUGAR_CAN] = oi(1, [{
           f: zi,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
       }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.INV_SWORD_WOOD] = oi(1, [{
           f: Oi,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
       }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.INV_SWORD] = oi(1, [{
           f: vi,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
       }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.INV_SWORD_GOLD] = oi(1, [{
           f: Li,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
       }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.INV_SWORD_DIAMOND] = oi(1, [{
           f: fi,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
       }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.INV_SWORD_AMETHYST] = oi(1, [{
           f: Vi,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
       }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.INV_PICK_WOOD] = oi(1, [{
           f: bi,
           x: -2,
           y: 5,
           a: 1,
           r: -Math.PI / 5,
           c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
       }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.INV_PICK] = oi(1, [{
           f: bi,
           x: -2,
           y: 5,
           a: 1,
           r: -Math.PI / 5,
           c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
       }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.INV_PICK_GOLD] = oi(1, [{
           f: bi,
           x: -2,
           y: 5,
           a: 1,
           r: -Math.PI / 5,
           c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
       }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.INV_PICK_DIAMOND] = oi(1, [{
           f: bi,
           x: -2,
           y: 5,
           a: 1,
           r: -Math.PI / 5,
           c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
       }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.INV_PICK_AMETHYST] = oi(1, [{
           f: bi,
           x: -2,
           y: 5,
           a: 1,
           r: -Math.PI / 5,
           c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
       }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.INV_PICK_REIDITE] = [],
       sprite[SPRITE.INV_PICK_REIDITE][0] = IMAGES.INV_PICK_REIDITE_OUT,
       sprite[SPRITE.INV_PICK_REIDITE][1] = IMAGES.INV_PICK_REIDITE_IN,
       sprite[SPRITE.INV_PICK_REIDITE][2] = IMAGES.INV_PICK_REIDITE_CLICK,
       sprite[SPRITE.CRAFT_PICK_REIDITE] = sprite[SPRITE.INV_PICK_REIDITE],
       sprite[SPRITE.CHEST_PICK_REIDITE] = sprite[SPRITE.INV_PICK_REIDITE],
       sprite[SPRITE.INV_STONE] = oi(1, [{
           f: Ui,
           x: -5,
           y: -5,
           a: 1,
           r: 0,
           c: ["#252B28", "#58645F", "#75827D"]
       }], .23, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_GOLD] = oi(1, [{
           f: Fi,
           x: -5,
           y: -5,
           a: 1,
           r: 0,
           c: ["#282823", "#877c2d", "#c4bc51"]
       }], .43, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_DIAMOND] = oi(1, [{
           f: xi,
           x: -5,
           y: -5,
           a: 1,
           r: 0,
           c: ["#232828", "#3fc9c9", "#74ede6"]
       }], .33, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_WOOD] = oi(1, [{
           f: Ii,
           x: 0,
           y: -5,
           a: 1,
           r: Math.PI / 2.5,
           c: ["#4d2d14", "#432516"]
       }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.CRAFT_SWORD_WOOD] = sprite[SPRITE.INV_SWORD_WOOD],
       sprite[SPRITE.CRAFT_SWORD] = sprite[SPRITE.INV_SWORD],
       sprite[SPRITE.CRAFT_SWORD_GOLD] = sprite[SPRITE.INV_SWORD_GOLD],
       sprite[SPRITE.CRAFT_SWORD_DIAMOND] = sprite[SPRITE.INV_SWORD_DIAMOND],
       sprite[SPRITE.CRAFT_SWORD_AMETHYST] = sprite[SPRITE.INV_SWORD_AMETHYST],
       sprite[SPRITE.CRAFT_PICK_WOOD] = sprite[SPRITE.INV_PICK_WOOD],
       sprite[SPRITE.CRAFT_PICK] = sprite[SPRITE.INV_PICK],
       sprite[SPRITE.CRAFT_PICK_GOLD] = sprite[SPRITE.INV_PICK_GOLD],
       sprite[SPRITE.CRAFT_PICK_DIAMOND] = sprite[SPRITE.INV_PICK_DIAMOND],
       sprite[SPRITE.CRAFT_PICK_AMETHYST] = sprite[SPRITE.INV_PICK_AMETHYST],
       sprite[SPRITE.INV_PLANT] = oi(1, [{
           f: Ve,
           x: 0,
           y: 0,
           a: 1,
           r: 0
       }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.INV_WORK] = oi(1, [{
           f: we,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
       }], .45, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_WORK] = sprite[SPRITE.INV_WORK],
       sprite[SPRITE.INV_STONE_WALL] = oi(1, [{
           f: It,
           x: -2,
           y: -2,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
       }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_STONE_WALL] = sprite[SPRITE.INV_STONE_WALL],
       sprite[SPRITE.INV_DIAMOND_WALL] = oi(1, [{
           f: at,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
       }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_DIAMOND_WALL] = sprite[SPRITE.INV_DIAMOND_WALL],
       sprite[SPRITE.INV_AMETHYST_WALL] = oi(1, [{
           f: It,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
       }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_AMETHYST_WALL] = sprite[SPRITE.INV_AMETHYST_WALL],
       sprite[SPRITE.INV_GOLD_WALL] = oi(1, [{
           f: Et,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
       }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_GOLD_WALL] = sprite[SPRITE.INV_GOLD_WALL],
       sprite[SPRITE.INV_WALL] = oi(1, [{
           f: nt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
       }], .45, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_WALL] = sprite[SPRITE.INV_WALL],
       sprite[SPRITE.INV_SPIKE] = oi(1, [{
           f: wt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
       }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_SPIKE] = sprite[SPRITE.INV_SPIKE],
       sprite[SPRITE.INV_GOLD_SPIKE] = oi(1, [{
           f: Yt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
       }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_GOLD_SPIKE] = sprite[SPRITE.INV_GOLD_SPIKE],
       sprite[SPRITE.INV_DIAMOND_SPIKE] = oi(1, [{
           f: Yt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
       }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_DIAMOND_SPIKE] = sprite[SPRITE.INV_DIAMOND_SPIKE],
       sprite[SPRITE.INV_STONE_SPIKE] = oi(1, [{
           f: Wt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
       }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_STONE_SPIKE] = sprite[SPRITE.INV_STONE_SPIKE],
       sprite[SPRITE.INV_AMETHYST_SPIKE] = oi(1, [{
           f: Wt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
       }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_AMETHYST_SPIKE] = sprite[SPRITE.INV_AMETHYST_SPIKE],
       sprite[SPRITE.INV_DOOR_WOOD_CLOSE] = oi(1, [{
           f: _t,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
       }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_DOOR_WOOD_CLOSE] = sprite[SPRITE.INV_DOOR_WOOD_CLOSE],
       sprite[SPRITE.INV_DOOR_STONE_CLOSE] = oi(1, [{
           f: ut,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
       }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_DOOR_STONE_CLOSE] = sprite[SPRITE.INV_DOOR_STONE_CLOSE],
       sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE] = oi(1, [{
           f: ut,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
       }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_DOOR_AMETHYST_CLOSE] = sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE],
       sprite[SPRITE.INV_DOOR_GOLD_CLOSE] = oi(1, [{
           f: ht,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
       }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_DOOR_GOLD_CLOSE] = sprite[SPRITE.INV_DOOR_GOLD_CLOSE],
       sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE] = oi(1, [{
           f: St,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
       }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_DOOR_DIAMOND_CLOSE] = sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE],
       sprite[SPRITE.INV_CHEST] = oi(1, [{
           f: ft,
           x: 0,
           y: 2,
           a: 1,
           r: 0,
           c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
       }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_CHEST] = sprite[SPRITE.INV_CHEST],
       sprite[SPRITE.INV_MEAT] = oi(1, [{
           f: ke,
           x: 0,
           y: -3,
           a: 1,
           r: 0,
           c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
       }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.INV_COOKED_MEAT] = oi(1, [{
           f: ke,
           x: 0,
           y: -3,
           a: 1,
           r: 0,
           c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
       }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_COOKED_MEAT] = sprite[SPRITE.INV_COOKED_MEAT],
       sprite[SPRITE.INV_CORD] = oi(1, [{
           f: ri,
           x: -3,
           y: -3,
           a: 1,
           r: 0,
           c: ["#cec0c4", "#ffffff", "#6d6768"]
       }], .9, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.INV_BLUE_CORD] = oi(1, [{
           f: ri,
           x: -3,
           y: -3,
           a: 1,
           r: 0,
           c: ["#d4e9ec", "#37b1d7", "#506c71"]
       }], .9, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_BLUE_CORD] = sprite[SPRITE.INV_BLUE_CORD],
       sprite[SPRITE.INV_FUR] = oi(1, [{
           f: zt,
           x: -3,
           y: -3,
           a: 1,
           r: 0,
           c: ["#ef96be", "#ffffff"]
       }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_FUR_BOAR] = oi(1, [{
           f: zt,
           x: -3,
           y: -3,
           a: 1,
           r: 0,
           c: ["#55423e", "#ffffff"]
       }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_SPECIAL_FUR] = oi(1, [{
           f: Tt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
       }], .25, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_SPECIAL_FUR_2] = oi(1, [{
           f: Tt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
       }], .25, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_KRAKEN_SKIN] = oi(1, [{
           f: zt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#201851", "#b6222a"]
       }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_FUR_WOLF] = oi(1, [{
           f: zt,
           x: -3,
           y: -3,
           a: 1,
           r: 0,
           c: ["#231f20", "#b6222a"]
       }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_FUR_WINTER] = oi(1, [{
           f: zt,
           x: -3,
           y: -3,
           a: 1,
           r: 0,
           c: ["#ffffff", "#b6222a"]
       }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_EARMUFFS] = oi(1, [{
           f: yt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
       }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_EARMUFFS] = sprite[SPRITE.INV_EARMUFFS],
       sprite[SPRITE.INV_COAT] = oi(1, [{
           f: lt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
       }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_COAT] = sprite[SPRITE.INV_COAT],
       sprite[SPRITE.INV_CAP_SCARF] = oi(1, [{
           f: Bt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
       }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_CAP_SCARF] = sprite[SPRITE.INV_CAP_SCARF],
       sprite[SPRITE.INV_CHRISTMAS_HAT] = oi(1, [{
           f: hi,
           x: 0,
           y: 5,
           a: 1,
           r: 0,
           c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
       }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CHEST_CHRISTMAS_HAT] = sprite[SPRITE.INV_CHRISTMAS_HAT],
       sprite[SPRITE.INV_ELF_HAT] = oi(1, [{
           f: ui,
           x: 0,
           y: 5,
           a: 1,
           r: 0,
           c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
       }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CHEST_ELF_HAT] = sprite[SPRITE.INV_ELF_HAT],
       sprite[SPRITE.INV_BANDAGE] = oi(1, [{
           f: ni,
           x: -2,
           y: -2,
           a: 1,
           r: 0,
           c: ["#ffffff", "#cec0c4"]
       }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_BANDAGE] = sprite[SPRITE.INV_BANDAGE],
       sprite[SPRITE.INV_BAG] = [],
       sprite[SPRITE.INV_BAG][0] = IMAGES.INV_BAG_OUT,
       sprite[SPRITE.INV_BAG][1] = IMAGES.INV_BAG_IN,
       sprite[SPRITE.INV_BAG][2] = IMAGES.INV_BAG_CLICK,
       sprite[SPRITE.CRAFT_BAG] = sprite[SPRITE.INV_BAG],
       sprite[SPRITE.INV_PITCHFORK] = [],
       sprite[SPRITE.INV_PITCHFORK][0] = IMAGES.INV_PITCHFORK_OUT,
       sprite[SPRITE.INV_PITCHFORK][1] = IMAGES.INV_PITCHFORK_IN,
       sprite[SPRITE.INV_PITCHFORK][2] = IMAGES.INV_PITCHFORK_CLICK,
       sprite[SPRITE.CRAFT_PITCHFORK] = sprite[SPRITE.INV_PITCHFORK],
       sprite[SPRITE.CHEST_PITCHFORK] = sprite[SPRITE.INV_PITCHFORK],
       sprite[SPRITE.INV_PITCHFORK2] = [],
       sprite[SPRITE.INV_PITCHFORK2][0] = IMAGES.INV_PITCHFORK2_OUT,
       sprite[SPRITE.INV_PITCHFORK2][1] = IMAGES.INV_PITCHFORK2_IN,
       sprite[SPRITE.INV_PITCHFORK2][2] = IMAGES.INV_PITCHFORK2_CLICK,
       sprite[SPRITE.CRAFT_PITCHFORK2] = sprite[SPRITE.INV_PITCHFORK2],
       sprite[SPRITE.CHEST_PITCHFORK2] = sprite[SPRITE.INV_PITCHFORK2],
       sprite[SPRITE.INV_PITCHFORK_PART] = [],
       sprite[SPRITE.INV_PITCHFORK_PART][0] = IMAGES.INV_PITCHFORK_PART_CLICK,
       sprite[SPRITE.INV_PITCHFORK_PART][1] = IMAGES.INV_PITCHFORK_PART_CLICK,
       sprite[SPRITE.INV_PITCHFORK_PART][2] = IMAGES.INV_PITCHFORK_PART_CLICK,
       sprite[SPRITE.CHEST_PITCHFORK_PART] = sprite[SPRITE.INV_PITCHFORK_PART],
       sprite[SPRITE.INV_PILOT_HELMET] = [],
       sprite[SPRITE.INV_PILOT_HELMET][0] = IMAGES.INV_PILOT_HELMET_OUT,
       sprite[SPRITE.INV_PILOT_HELMET][1] = IMAGES.INV_PILOT_HELMET_IN,
       sprite[SPRITE.INV_PILOT_HELMET][2] = IMAGES.INV_PILOT_HELMET_CLICK,
       sprite[SPRITE.CRAFT_PILOT_HELMET] = sprite[SPRITE.INV_PILOT_HELMET],
       sprite[SPRITE.CHEST_PILOT_HELMET] = sprite[SPRITE.INV_PILOT_HELMET],
       sprite[SPRITE.INV_PILOT_GLASSES] = [],
       sprite[SPRITE.INV_PILOT_GLASSES][0] = IMAGES.INV_PILOT_GLASSES_CLICK,
       sprite[SPRITE.INV_PILOT_GLASSES][1] = IMAGES.INV_PILOT_GLASSES_CLICK,
       sprite[SPRITE.INV_PILOT_GLASSES][2] = IMAGES.INV_PILOT_GLASSES_CLICK,
       sprite[SPRITE.CHEST_PILOT_GLASSES] = sprite[SPRITE.INV_PILOT_GLASSES],
       sprite[SPRITE.INV_WOOD_TOWER] = [],
       sprite[SPRITE.INV_WOOD_TOWER][0] = IMAGES.INV_WOOD_TOWER_OUT,
       sprite[SPRITE.INV_WOOD_TOWER][1] = IMAGES.INV_WOOD_TOWER_IN,
       sprite[SPRITE.INV_WOOD_TOWER][2] = IMAGES.INV_WOOD_TOWER_CLICK,
       sprite[SPRITE.CRAFT_WOOD_TOWER] = sprite[SPRITE.INV_WOOD_TOWER],
       sprite[SPRITE.CHEST_WOOD_TOWER] = sprite[SPRITE.INV_WOOD_TOWER],
       sprite[SPRITE.INV_WOOD_DOOR_SPIKE] = [],
       sprite[SPRITE.INV_WOOD_DOOR_SPIKE][0] = IMAGES.INV_WOOD_DOOR_SPIKE_OUT,
       sprite[SPRITE.INV_WOOD_DOOR_SPIKE][1] = IMAGES.INV_WOOD_DOOR_SPIKE_IN,
       sprite[SPRITE.INV_WOOD_DOOR_SPIKE][2] = IMAGES.INV_WOOD_DOOR_SPIKE_CLICK,
       sprite[SPRITE.CRAFT_WOOD_DOOR_SPIKE] = sprite[SPRITE.INV_WOOD_DOOR_SPIKE],
       sprite[SPRITE.CHEST_WOOD_DOOR_SPIKE] = sprite[SPRITE.INV_WOOD_DOOR_SPIKE],
       sprite[SPRITE.INV_STONE_DOOR_SPIKE] = [],
       sprite[SPRITE.INV_STONE_DOOR_SPIKE][0] = IMAGES.INV_STONE_DOOR_SPIKE_OUT,
       sprite[SPRITE.INV_STONE_DOOR_SPIKE][1] = IMAGES.INV_STONE_DOOR_SPIKE_IN,
       sprite[SPRITE.INV_STONE_DOOR_SPIKE][2] = IMAGES.INV_STONE_DOOR_SPIKE_CLICK,
       sprite[SPRITE.CRAFT_STONE_DOOR_SPIKE] = sprite[SPRITE.INV_STONE_DOOR_SPIKE],
       sprite[SPRITE.CHEST_STONE_DOOR_SPIKE] = sprite[SPRITE.INV_STONE_DOOR_SPIKE],
       sprite[SPRITE.INV_GOLD_DOOR_SPIKE] = [],
       sprite[SPRITE.INV_GOLD_DOOR_SPIKE][0] = IMAGES.INV_GOLD_DOOR_SPIKE_OUT,
       sprite[SPRITE.INV_GOLD_DOOR_SPIKE][1] = IMAGES.INV_GOLD_DOOR_SPIKE_IN,
       sprite[SPRITE.INV_GOLD_DOOR_SPIKE][2] = IMAGES.INV_GOLD_DOOR_SPIKE_CLICK,
       sprite[SPRITE.CRAFT_GOLD_DOOR_SPIKE] = sprite[SPRITE.INV_GOLD_DOOR_SPIKE],
       sprite[SPRITE.CHEST_GOLD_DOOR_SPIKE] = sprite[SPRITE.INV_GOLD_DOOR_SPIKE],
       sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE] = [],
       sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][0] = IMAGES.INV_DIAMOND_DOOR_SPIKE_OUT,
       sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][1] = IMAGES.INV_DIAMOND_DOOR_SPIKE_IN,
       sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][2] = IMAGES.INV_DIAMOND_DOOR_SPIKE_CLICK,
       sprite[SPRITE.CRAFT_DIAMOND_DOOR_SPIKE] = sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE],
       sprite[SPRITE.CHEST_DIAMOND_DOOR_SPIKE] = sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE],
       sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE] = [],
       sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][0] = IMAGES.INV_AMETHYST_DOOR_SPIKE_OUT,
       sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][1] = IMAGES.INV_AMETHYST_DOOR_SPIKE_IN,
       sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][2] = IMAGES.INV_AMETHYST_DOOR_SPIKE_CLICK,
       sprite[SPRITE.CRAFT_AMETHYST_DOOR_SPIKE] = sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE],
       sprite[SPRITE.CHEST_AMETHYST_DOOR_SPIKE] = sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE],
       sprite[SPRITE.INV_REIDITE_DOOR_SPIKE] = [],
       sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][0] = IMAGES.INV_REIDITE_DOOR_SPIKE_OUT,
       sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][1] = IMAGES.INV_REIDITE_DOOR_SPIKE_IN,
       sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][2] = IMAGES.INV_REIDITE_DOOR_SPIKE_CLICK,
       sprite[SPRITE.CRAFT_REIDITE_DOOR_SPIKE] = sprite[SPRITE.INV_REIDITE_DOOR_SPIKE],
       sprite[SPRITE.CHEST_REIDITE_DOOR_SPIKE] = sprite[SPRITE.INV_REIDITE_DOOR_SPIKE],
       sprite[SPRITE.INV_REIDITE_DOOR] = [],
       sprite[SPRITE.INV_REIDITE_DOOR][0] = IMAGES.INV_REIDITE_DOOR_OUT,
       sprite[SPRITE.INV_REIDITE_DOOR][1] = IMAGES.INV_REIDITE_DOOR_IN,
       sprite[SPRITE.INV_REIDITE_DOOR][2] = IMAGES.INV_REIDITE_DOOR_CLICK,
       sprite[SPRITE.CRAFT_REIDITE_DOOR] = sprite[SPRITE.INV_REIDITE_DOOR],
       sprite[SPRITE.CHEST_REIDITE_DOOR] = sprite[SPRITE.INV_REIDITE_DOOR],
       sprite[SPRITE.INV_REIDITE_SPIKE] = [],
       sprite[SPRITE.INV_REIDITE_SPIKE][0] = IMAGES.INV_REIDITE_SPIKE_OUT,
       sprite[SPRITE.INV_REIDITE_SPIKE][1] = IMAGES.INV_REIDITE_SPIKE_IN,
       sprite[SPRITE.INV_REIDITE_SPIKE][2] = IMAGES.INV_REIDITE_SPIKE_CLICK,
       sprite[SPRITE.CRAFT_REIDITE_SPIKE] = sprite[SPRITE.INV_REIDITE_SPIKE],
       sprite[SPRITE.CHEST_REIDITE_SPIKE] = sprite[SPRITE.INV_REIDITE_SPIKE],
       sprite[SPRITE.INV_REIDITE_WALL] = [],
       sprite[SPRITE.INV_REIDITE_WALL][0] = IMAGES.INV_REIDITE_WALL_OUT,
       sprite[SPRITE.INV_REIDITE_WALL][1] = IMAGES.INV_REIDITE_WALL_IN,
       sprite[SPRITE.INV_REIDITE_WALL][2] = IMAGES.INV_REIDITE_WALL_CLICK,
       sprite[SPRITE.CRAFT_REIDITE_WALL] = sprite[SPRITE.INV_REIDITE_WALL],
       sprite[SPRITE.CHEST_REIDITE_WALL] = sprite[SPRITE.INV_REIDITE_WALL],
       sprite[SPRITE.INV_PENGUIN_FEATHER] = [],
       sprite[SPRITE.INV_PENGUIN_FEATHER][0] = IMAGES.INV_PENGUIN_FEATHER,
       sprite[SPRITE.INV_PENGUIN_FEATHER][1] = IMAGES.INV_PENGUIN_FEATHER,
       sprite[SPRITE.INV_PENGUIN_FEATHER][2] = IMAGES.INV_PENGUIN_FEATHER,
       sprite[SPRITE.CRAFT_PENGUIN_FEATHER] = sprite[SPRITE.INV_PENGUIN_FEATHER],
       sprite[SPRITE.CHEST_PENGUIN_FEATHER] = sprite[SPRITE.INV_PENGUIN_FEATHER],
       sprite[SPRITE.INV_HAWK_FEATHER] = [],
       sprite[SPRITE.INV_HAWK_FEATHER][0] = IMAGES.INV_HAWK_FEATHER,
       sprite[SPRITE.INV_HAWK_FEATHER][1] = IMAGES.INV_HAWK_FEATHER,
       sprite[SPRITE.INV_HAWK_FEATHER][2] = IMAGES.INV_HAWK_FEATHER,
       sprite[SPRITE.CRAFT_HAWK_FEATHER] = sprite[SPRITE.INV_HAWK_FEATHER],
       sprite[SPRITE.CHEST_HAWK_FEATHER] = sprite[SPRITE.INV_HAWK_FEATHER],
       sprite[SPRITE.INV_VULTURE_FEATHER] = [],
       sprite[SPRITE.INV_VULTURE_FEATHER][0] = IMAGES.INV_VULTURE_FEATHER,
       sprite[SPRITE.INV_VULTURE_FEATHER][1] = IMAGES.INV_VULTURE_FEATHER,
       sprite[SPRITE.INV_VULTURE_FEATHER][2] = IMAGES.INV_VULTURE_FEATHER,
       sprite[SPRITE.CRAFT_VULTURE_FEATHER] = sprite[SPRITE.INV_VULTURE_FEATHER],
       sprite[SPRITE.CHEST_VULTURE_FEATHER] = sprite[SPRITE.INV_VULTURE_FEATHER],
       sprite[SPRITE.INV_EMERALD] = [],
       sprite[SPRITE.INV_EMERALD][0] = IMAGES.INV_EMERALD,
       sprite[SPRITE.INV_EMERALD][1] = IMAGES.INV_EMERALD,
       sprite[SPRITE.INV_EMERALD][2] = IMAGES.INV_EMERALD,
       sprite[SPRITE.CHEST_EMERALD] = sprite[SPRITE.INV_EMERALD],
       sprite[SPRITE.INV_SADDLE] = [],
       sprite[SPRITE.INV_SADDLE][0] = IMAGES.INV_SADDLE_OUT,
       sprite[SPRITE.INV_SADDLE][1] = IMAGES.INV_SADDLE_IN,
       sprite[SPRITE.INV_SADDLE][2] = IMAGES.INV_SADDLE_CLICK,
       sprite[SPRITE.CRAFT_SADDLE] = sprite[SPRITE.INV_SADDLE],
       sprite[SPRITE.CHEST_SADDLE] = sprite[SPRITE.INV_SADDLE],
       sprite[SPRITE.INV_WAND1] = [],
       sprite[SPRITE.INV_WAND1][0] = IMAGES.INV_WAND1_OUT,
       sprite[SPRITE.INV_WAND1][1] = IMAGES.INV_WAND1_IN,
       sprite[SPRITE.INV_WAND1][2] = IMAGES.INV_WAND1_CLICK,
       sprite[SPRITE.CRAFT_WAND1] = sprite[SPRITE.INV_WAND1],
       sprite[SPRITE.CHEST_WAND1] = sprite[SPRITE.INV_WAND1],
       sprite[SPRITE.INV_WAND2] = [],
       sprite[SPRITE.INV_WAND2][0] = IMAGES.INV_WAND2_OUT,
       sprite[SPRITE.INV_WAND2][1] = IMAGES.INV_WAND2_IN,
       sprite[SPRITE.INV_WAND2][2] = IMAGES.INV_WAND2_CLICK,
       sprite[SPRITE.CRAFT_WAND2] = sprite[SPRITE.INV_WAND2],
       sprite[SPRITE.CHEST_WAND2] = sprite[SPRITE.INV_WAND2],
       sprite[SPRITE.INV_MOUNT_BOAR] = [],
       sprite[SPRITE.INV_MOUNT_BOAR][0] = IMAGES.INV_MOUNT_BOAR_OUT,
       sprite[SPRITE.INV_MOUNT_BOAR][1] = IMAGES.INV_MOUNT_BOAR_IN,
       sprite[SPRITE.INV_MOUNT_BOAR][2] = IMAGES.INV_MOUNT_BOAR_CLICK,
       sprite[SPRITE.CRAFT_MOUNT_BOAR] = sprite[SPRITE.INV_MOUNT_BOAR],
       sprite[SPRITE.CHEST_MOUNT_BOAR] = sprite[SPRITE.INV_MOUNT_BOAR],
       sprite[SPRITE.INV_CRAB_BOSS] = [],
       sprite[SPRITE.INV_CRAB_BOSS][0] = IMAGES.INV_CRAB_BOSS_OUT,
       sprite[SPRITE.INV_CRAB_BOSS][1] = IMAGES.INV_CRAB_BOSS_IN,
       sprite[SPRITE.INV_CRAB_BOSS][2] = IMAGES.INV_CRAB_BOSS_CLICK,
       sprite[SPRITE.CRAFT_CRAB_BOSS] = sprite[SPRITE.INV_CRAB_BOSS],
       sprite[SPRITE.CHEST_CRAB_BOSS] = sprite[SPRITE.INV_CRAB_BOSS],
       sprite[SPRITE.INV_HAWK] = [],
       sprite[SPRITE.INV_HAWK][0] = IMAGES.INV_HAWK_OUT,
       sprite[SPRITE.INV_HAWK][1] = IMAGES.INV_HAWK_IN,
       sprite[SPRITE.INV_HAWK][2] = IMAGES.INV_HAWK_CLICK,
       sprite[SPRITE.CRAFT_HAWK] = sprite[SPRITE.INV_HAWK],
       sprite[SPRITE.CHEST_HAWK] = sprite[SPRITE.INV_HAWK],
       sprite[SPRITE.INV_VULTURE] = [],
       sprite[SPRITE.INV_VULTURE][0] = IMAGES.INV_VULTURE_OUT,
       sprite[SPRITE.INV_VULTURE][1] = IMAGES.INV_VULTURE_IN,
       sprite[SPRITE.INV_VULTURE][2] = IMAGES.INV_VULTURE_CLICK,
       sprite[SPRITE.CRAFT_VULTURE] = sprite[SPRITE.INV_VULTURE],
       sprite[SPRITE.CHEST_VULTURE] = sprite[SPRITE.INV_VULTURE],
       sprite[SPRITE.INV_TURBAN1] = [],
       sprite[SPRITE.INV_TURBAN1][0] = IMAGES.INV_TURBAN1_OUT,
       sprite[SPRITE.INV_TURBAN1][1] = IMAGES.INV_TURBAN1_IN,
       sprite[SPRITE.INV_TURBAN1][2] = IMAGES.INV_TURBAN1_CLICK,
       sprite[SPRITE.CRAFT_TURBAN1] = sprite[SPRITE.INV_TURBAN1],
       sprite[SPRITE.CHEST_TURBAN1] = sprite[SPRITE.INV_TURBAN1],
       sprite[SPRITE.INV_TURBAN2] = [],
       sprite[SPRITE.INV_TURBAN2][0] = IMAGES.INV_TURBAN2_OUT,
       sprite[SPRITE.INV_TURBAN2][1] = IMAGES.INV_TURBAN2_IN,
       sprite[SPRITE.INV_TURBAN2][2] = IMAGES.INV_TURBAN2_CLICK,
       sprite[SPRITE.CRAFT_TURBAN2] = sprite[SPRITE.INV_TURBAN2],
       sprite[SPRITE.CHEST_TURBAN2] = sprite[SPRITE.INV_TURBAN2],
       sprite[SPRITE.INV_PLANE] = [],
       sprite[SPRITE.INV_PLANE][0] = IMAGES.INV_PLANE_OUT,
       sprite[SPRITE.INV_PLANE][1] = IMAGES.INV_PLANE_IN,
       sprite[SPRITE.INV_PLANE][2] = IMAGES.INV_PLANE_CLICK,
       sprite[SPRITE.CRAFT_PLANE] = sprite[SPRITE.INV_PLANE],
       sprite[SPRITE.CHEST_PLANE] = sprite[SPRITE.INV_PLANE],
       sprite[SPRITE.INV_BABY_DRAGON] = [],
       sprite[SPRITE.INV_BABY_DRAGON][0] = IMAGES.INV_BABY_DRAGON_OUT,
       sprite[SPRITE.INV_BABY_DRAGON][1] = IMAGES.INV_BABY_DRAGON_IN,
       sprite[SPRITE.INV_BABY_DRAGON][2] = IMAGES.INV_BABY_DRAGON_CLICK,
       sprite[SPRITE.CRAFT_BABY_DRAGON] = sprite[SPRITE.INV_BABY_DRAGON],
       sprite[SPRITE.CHEST_BABY_DRAGON] = sprite[SPRITE.INV_BABY_DRAGON],
       sprite[SPRITE.INV_BABY_MAMMOTH] = [],
       sprite[SPRITE.INV_BABY_MAMMOTH][0] = IMAGES.INV_BABY_MAMMOTH_OUT,
       sprite[SPRITE.INV_BABY_MAMMOTH][1] = IMAGES.INV_BABY_MAMMOTH_IN,
       sprite[SPRITE.INV_BABY_MAMMOTH][2] = IMAGES.INV_BABY_MAMMOTH_CLICK,
       sprite[SPRITE.CRAFT_BABY_MAMMOTH] = sprite[SPRITE.INV_BABY_MAMMOTH],
       sprite[SPRITE.CHEST_BABY_MAMMOTH] = sprite[SPRITE.INV_BABY_MAMMOTH],
       sprite[SPRITE.INV_BABY_LAVA] = [],
       sprite[SPRITE.INV_BABY_LAVA][0] = IMAGES.INV_BABY_LAVA_OUT,
       sprite[SPRITE.INV_BABY_LAVA][1] = IMAGES.INV_BABY_LAVA_IN,
       sprite[SPRITE.INV_BABY_LAVA][2] = IMAGES.INV_BABY_LAVA_CLICK,
       sprite[SPRITE.CRAFT_BABY_LAVA] = sprite[SPRITE.INV_BABY_LAVA],
       sprite[SPRITE.CHEST_BABY_LAVA] = sprite[SPRITE.INV_BABY_LAVA],
       sprite[SPRITE.INV_BREAD_OVEN] = oi(1, [{
           f: on,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
       }, {
           f: sn,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#e4c027"]
       }], .14, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_BREAD_OVEN] = sprite[SPRITE.INV_BREAD_OVEN],
       sprite[SPRITE.INV_FURNACE] = oi(1, [{
           f: Rt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
       }], .18, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_FURNACE] = sprite[SPRITE.INV_FURNACE],
       sprite[SPRITE.INV_BED] = oi(1, [{
           f: gt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
       }], .32, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_BED] = sprite[SPRITE.INV_BED],
       sprite[SPRITE.CHEST_BED] = sprite[SPRITE.INV_BED],
       sprite[SPRITE.INV_CRAB_LOOT] = oi(1, [{
           f: Ct,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
       }], .17, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CHEST_CRAB_LOOT] = sprite[SPRITE.INV_CRAB_LOOT],
       sprite[SPRITE.INV_CRAB_SPEAR] = oi(1, [{
           f: Ot,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
       }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_CRAB_SPEAR] = sprite[SPRITE.INV_CRAB_SPEAR],
       sprite[SPRITE.CHEST_CRAB_SPEAR] = sprite[SPRITE.INV_CRAB_SPEAR],
       sprite[SPRITE.INV_WOOD_SPEAR] = oi(1, [{
           f: pt,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
       }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_WOOD_SPEAR] = sprite[SPRITE.INV_WOOD_SPEAR],
       sprite[SPRITE.INV_SPEAR] = oi(1, [{
           f: ct,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
       }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_SPEAR] = sprite[SPRITE.INV_SPEAR],
       sprite[SPRITE.INV_GOLD_SPEAR] = oi(1, [{
           f: vt,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
       }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_GOLD_SPEAR] = sprite[SPRITE.INV_GOLD_SPEAR],
       sprite[SPRITE.INV_DIAMOND_SPEAR] = oi(1, [{
           f: Pt,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
       }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_DIAMOND_SPEAR] = sprite[SPRITE.INV_DIAMOND_SPEAR],
       sprite[SPRITE.INV_AMETHYST_SPEAR] = oi(1, [{
           f: mt,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
       }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_AMETHYST_SPEAR] = sprite[SPRITE.INV_AMETHYST_SPEAR],
       sprite[SPRITE.INV_DRAGON_SPEAR] = oi(1, [{
           f: Mt,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
       }], .38, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR],
       sprite[SPRITE.CHEST_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR],
       sprite[SPRITE.INV_HAMMER] = oi(1, [{
           f: kt,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
       }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_HAMMER] = sprite[SPRITE.INV_HAMMER],
       sprite[SPRITE.INV_SPANNER] = oi(1, [{
           f: wn,
           x: 0,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#939393", "#5f6061"]
       }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_SPANNER] = sprite[SPRITE.INV_SPANNER],
       sprite[SPRITE.INV_SUPER_HAMMER] = oi(1, [{
           f: kr,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
       }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_SUPER_HAMMER] = sprite[SPRITE.INV_SUPER_HAMMER],
       sprite[SPRITE.INV_HAMMER_GOLD] = oi(1, [{
           f: kt,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
       }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_HAMMER_GOLD] = sprite[SPRITE.INV_HAMMER_GOLD],
       sprite[SPRITE.INV_HAMMER_DIAMOND] = oi(1, [{
           f: kt,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
       }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_HAMMER_DIAMOND] = sprite[SPRITE.INV_HAMMER_DIAMOND],
       sprite[SPRITE.INV_HAMMER_AMETHYST] = oi(1, [{
           f: kt,
           x: 2,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
       }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_HAMMER_AMETHYST] = sprite[SPRITE.INV_HAMMER_AMETHYST],
       sprite[SPRITE.INV_HAMMER_REIDITE] = [],
       sprite[SPRITE.INV_HAMMER_REIDITE][0] = IMAGES.INV_HAMMER_REIDITE_OUT,
       sprite[SPRITE.INV_HAMMER_REIDITE][1] = IMAGES.INV_HAMMER_REIDITE_IN,
       sprite[SPRITE.INV_HAMMER_REIDITE][2] = IMAGES.INV_HAMMER_REIDITE_CLICK,
       sprite[SPRITE.CHEST_HAMMER_REIDITE] = sprite[SPRITE.INV_HAMMER_REIDITE],
       sprite[SPRITE.CRAFT_HAMMER_REIDITE] = sprite[SPRITE.INV_HAMMER_REIDITE],
       sprite[SPRITE.INV_EMERALD_MACHINE] = [],
       sprite[SPRITE.INV_EMERALD_MACHINE][0] = IMAGES.INV_EMERALD_MACHINE_OUT,
       sprite[SPRITE.INV_EMERALD_MACHINE][1] = IMAGES.INV_EMERALD_MACHINE_IN,
       sprite[SPRITE.INV_EMERALD_MACHINE][2] = IMAGES.INV_EMERALD_MACHINE_CLICK,
       sprite[SPRITE.CHEST_EMERALD_MACHINE] = sprite[SPRITE.INV_EMERALD_MACHINE],
       sprite[SPRITE.CRAFT_EMERALD_MACHINE] = sprite[SPRITE.INV_EMERALD_MACHINE],
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE] = [],
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][0] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_OUT,
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][1] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_IN,
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][2] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_CLICK,
       sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_STONE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE],
       sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE],
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD] = [],
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][0] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_OUT,
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][1] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_IN,
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][2] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_CLICK,
       sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_GOLD] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD],
       sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD],
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND] = [],
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][0] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_OUT,
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][1] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_IN,
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][2] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_CLICK,
       sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_DIAMOND] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND],
       sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND],
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST] = [],
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][0] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_OUT,
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][1] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_IN,
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][2] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_CLICK,
       sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_AMETHYST] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST],
       sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST],
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE] = [],
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][0] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_OUT,
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][1] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_IN,
       sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][2] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_CLICK,
       sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_REIDITE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE],
       sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE],
       sprite[SPRITE.INV_LOCK] = oi(1, [{
           f: Mr,
           x: -2,
           y: -2,
           a: 1,
           r: 0,
           c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
       }], .8, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.CRAFT_LOCK] = sprite[SPRITE.INV_LOCK],
       sprite[SPRITE.INV_LOCKPICK] = oi(1, [{
           f: Hr,
           x: -2,
           y: -2,
           a: 1,
           r: -Math.PI / 5,
           c: ["#141414", "#c4a23a", "#816511"]
       }], .08, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.CRAFT_LOCKPICK] = sprite[SPRITE.INV_LOCKPICK],
       sprite[SPRITE.INV_DRAGON_HEART] = oi(1, [{
           f: Wr,
           x: -2,
           y: -2,
           a: 1,
           r: 0,
           c: ["#141414", "#178a99", "#0a6372", "#03282e"]
       }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .7),
       sprite[SPRITE.INV_LAVA_HEART] = oi(1, [{
           f: Wr,
           x: -2,
           y: -2,
           a: 1,
           r: 0,
           c: ["#120202", "#991616", "#750a0a", "#120202"]
       }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .7),
       sprite[SPRITE.INV_RESURRECTION] = oi(1, [{
           f: yr,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#347f93", "#54a4ba"]
       }, {
           f: Kr,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
       }, {
           f: wr,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#a9e4ed", "#86d4e0"]
       }, {
           f: Br,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
       }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_RESURRECTION] = sprite[SPRITE.INV_RESURRECTION],
       sprite[SPRITE.INV_TOTEM] = oi(1, [{
           f: Lr,
           x: 45,
           y: 70,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
       }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_TOTEM] = sprite[SPRITE.INV_TOTEM],
       sprite[SPRITE.INV_AMETHYST_HELMET] = oi(1, [{
           f: Pr,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
       }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_AMETHYST_HELMET] = sprite[SPRITE.INV_AMETHYST_HELMET],
       sprite[SPRITE.INV_WINTER_HOOD] = oi(1, [{
           f: bn,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
       }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_WINTER_HOOD] = sprite[SPRITE.INV_WINTER_HOOD],
       sprite[SPRITE.INV_HOOD] = oi(1, [{
           f: gn,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#2a2938", "#242330", "#313041"]
       }], .25, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_HOOD] = sprite[SPRITE.INV_HOOD],
       sprite[SPRITE.INV_WINTER_PEASANT] = oi(1, [{
           f: On,
           x: 0,
           y: 3,
           a: 1,
           r: 0,
           c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
       }], .39, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_WINTER_PEASANT] = sprite[SPRITE.INV_WINTER_PEASANT],
       sprite[SPRITE.INV_PEASANT] = oi(1, [{
           f: On,
           x: 0,
           y: 3,
           a: 1,
           r: 0,
           c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
       }], .39, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_PEASANT] = sprite[SPRITE.INV_PEASANT],
       sprite[SPRITE.INV_CROWN_GREEN] = oi(1, [{
           f: Wn,
           x: 0,
           y: 10,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
       }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_CROWN_GREEN] = sprite[SPRITE.INV_CROWN_GREEN],
       sprite[SPRITE.INV_CROWN_ORANGE] = oi(1, [{
           f: Wn,
           x: 0,
           y: 10,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
       }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_CROWN_ORANGE] = sprite[SPRITE.INV_CROWN_ORANGE],
       sprite[SPRITE.INV_CROWN_BLUE] = oi(1, [{
           f: Wn,
           x: 0,
           y: 10,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
       }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_CROWN_BLUE] = sprite[SPRITE.INV_CROWN_BLUE],
       sprite[SPRITE.INV_CROWN_CRAB] = oi(1, [{
           f: Nt,
           x: -1,
           y: 0,
           a: 1,
           r: 0,
           c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
       }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_CROWN_CRAB] = sprite[SPRITE.INV_CROWN_CRAB],
       sprite[SPRITE.CHEST_CROWN_CRAB] = sprite[SPRITE.INV_CROWN_CRAB],
       sprite[SPRITE.INV_DRAGON_HELMET] = oi(1, [{
           f: Qt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
       }], .2, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_DRAGON_HELMET] = sprite[SPRITE.INV_DRAGON_HELMET],
       sprite[SPRITE.INV_DRAGON_SWORD] = oi(1, [{
           f: Fr,
           x: 0,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
       }], .75, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_DRAGON_SWORD] = sprite[SPRITE.INV_DRAGON_SWORD],
       sprite[SPRITE.INV_DRAGON_CUBE] = oi(1, [{
           f: qr,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
       }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_DRAGON_ORB] = oi(1, [{
           f: Xr,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
       }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_LAVA_CUBE] = oi(1, [{
           f: qr,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
       }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_LAVA_ORB] = oi(1, [{
           f: Xr,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
       }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_GEMME_GREEN] = oi(1, [{
           f: Ur,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
       }], .35, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_GEMME_ORANGE] = oi(1, [{
           f: Ur,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
       }], .35, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_GEMME_BLUE] = oi(1, [{
           f: Ur,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
       }], .35, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_SHOVEL] = oi(1, [{
           f: Gn,
           x: 0,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
       }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_SHOVEL] = sprite[SPRITE.INV_SHOVEL],
       sprite[SPRITE.INV_SHOVEL_GOLD] = oi(1, [{
           f: Gn,
           x: 0,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
       }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_SHOVEL_GOLD] = sprite[SPRITE.INV_SHOVEL_GOLD],
       sprite[SPRITE.INV_SHOVEL_DIAMOND] = oi(1, [{
           f: Gn,
           x: 0,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
       }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_SHOVEL_DIAMOND] = sprite[SPRITE.INV_SHOVEL_DIAMOND],
       sprite[SPRITE.INV_SHOVEL_AMETHYST] = oi(1, [{
           f: Gn,
           x: 0,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
       }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_SHOVEL_AMETHYST] = sprite[SPRITE.INV_SHOVEL_AMETHYST],
       sprite[SPRITE.INV_EXPLORER_HAT] = oi(1, [{
           f: br,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
       }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_EXPLORER_HAT] = sprite[SPRITE.INV_EXPLORER_HAT],
       sprite[SPRITE.INV_WOOD_HELMET] = oi(1, [{
           f: Or,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#252525", "#73583e", "#493425", "#7d6144"]
       }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_WOOD_HELMET] = sprite[SPRITE.INV_WOOD_HELMET],
       sprite[SPRITE.INV_STONE_HELMET] = oi(1, [{
           f: pr,
           x: 0,
           y: -2,
           a: 1,
           r: 0,
           c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
       }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_STONE_HELMET] = sprite[SPRITE.INV_STONE_HELMET],
       sprite[SPRITE.INV_GOLD_HELMET] = oi(1, [{
           f: cr,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#dbce71", "#b29c32", "#c4bc51"]
       }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_GOLD_HELMET] = sprite[SPRITE.INV_GOLD_HELMET],
       sprite[SPRITE.INV_DIAMOND_HELMET] = oi(1, [{
           f: vr,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
       }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_DIAMOND_HELMET] = sprite[SPRITE.INV_DIAMOND_HELMET],
       sprite[SPRITE.INV_BOOK] = oi(1, [{
           f: mr,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
       }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_BOOK] = sprite[SPRITE.INV_BOOK],
       sprite[SPRITE.INV_PAPER] = oi(1, [{
           f: Dr,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#221e1b", "#ffffff", "#f6f0e7"]
       }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.CRAFT_PAPER] = sprite[SPRITE.INV_PAPER],
       sprite[SPRITE.INV_AMETHYST] = oi(1, [{
           f: tr,
           x: -5,
           y: -5,
           a: 1,
           r: 0,
           c: ["#1d051e", "#c27add", "#cd98e5"]
       }], .31, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_SAND] = oi(1, [{
           f: _n,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#D7C393", "#a48c6c"]
       }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_ICE] = oi(1, [{
           f: un,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#93CBCE", "#E9F6F6"]
       }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.INV_GROUND] = oi(1, [{
           f: _n,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#866432", "#6b4f25"]
       }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_BUCKET_FULL] = oi(1, [{
           f: Mn,
           x: 3,
           y: 2,
           a: 1,
           r: 0,
           c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
       }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_BUCKET_EMPTY] = oi(1, [{
           f: Dn,
           x: 3,
           y: 2,
           a: 1,
           r: 0,
           c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
       }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.CRAFT_BUCKET_FULL] = sprite[SPRITE.INV_BUCKET_FULL],
       sprite[SPRITE.CRAFT_BUCKET_EMPTY] = sprite[SPRITE.INV_BUCKET_EMPTY],
       sprite[SPRITE.INV_WELL] = oi(1, [{
           f: En,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
       }], .1, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_WELL] = sprite[SPRITE.INV_WELL],
       sprite[SPRITE.INV_BOTTLE_FULL] = oi(1, [{
           f: vn,
           x: 0,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
       }], .18, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.INV_BOTTLE_EMPTY] = oi(1, [{
           f: Pn,
           x: 0,
           y: 0,
           a: 1,
           r: Math.PI / 5,
           c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
       }], .18, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.CRAFT_BOTTLE_FULL] = sprite[SPRITE.INV_BOTTLE_FULL],
       sprite[SPRITE.CRAFT_BOTTLE_EMPTY] = sprite[SPRITE.INV_BOTTLE_EMPTY],
       sprite[SPRITE.INV_COOKIE] = oi(1, [{
           f: Hi,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
       }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_COOKIE] = sprite[SPRITE.INV_COOKIE],
       sprite[SPRITE.INV_CANDY] = oi(1, [{
           f: yi,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
       }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.INV_FERRERO] = oi(1, [{
           f: Bi,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
       }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.INV_BREAD] = oi(1, [{
           f: tn,
           x: 0,
           y: -2,
           a: 1,
           r: 0,
           c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
       }], .17, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_BREAD] = sprite[SPRITE.INV_BREAD],
       sprite[SPRITE.INV_FOODFISH] = oi(1, [{
           f: tt,
           x: -3,
           y: -5,
           a: 1,
           r: 0,
           c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
       }], .23, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.INV_FOODFISH_COOKED] = oi(1, [{
           f: rt,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#1d051e", "#42261A", "#281818"]
       }], .23, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_FOODFISH_COOKED] = sprite[SPRITE.INV_FOODFISH_COOKED],
       sprite[SPRITE.INV_DIVING_MASK] = oi(1, [{
           f: Qi,
           x: -3,
           y: 0,
           a: 1,
           r: 0,
           c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
       }], .2, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_DIVING_MASK] = sprite[SPRITE.INV_DIVING_MASK],
       sprite[SPRITE.INV_SCALES] = oi(1, [{
           f: Qe,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
       }], .15, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_SUPER_DIVING_SUIT] = oi(1, [{
           f: $i,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
       }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
       sprite[SPRITE.CRAFT_SUPER_DIVING_SUIT] = sprite[SPRITE.INV_SUPER_DIVING_SUIT],
       sprite[SPRITE.INV_PLOT] = oi(1, [{
           f: hn,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
       }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_PLOT] = sprite[SPRITE.INV_PLOT],
       sprite[SPRITE.INV_GARLAND] = oi(1, [{
           f: ge,
           x: -5,
           y: -5,
           a: 1,
           r: 0,
           c: ["#e2d63b", "#ee71a9", "#42b672"]
       }], 1, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CHEST_GARLAND] = sprite[SPRITE.INV_GARLAND],
       sprite[SPRITE.INV_BRIDGE] = oi(1, [{
           f: Tn,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
       }], .5, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_BRIDGE] = sprite[SPRITE.INV_BRIDGE],
       sprite[SPRITE.INV_ROOF] = oi(1, [{
           f: pe,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
       }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_ROOF] = sprite[SPRITE.INV_ROOF],
       sprite[SPRITE.INV_WATERING_CAN_FULL] = oi(1, [{
           f: Rn,
           x: -1,
           y: 0,
           a: 1,
           r: -Math.PI / 5,
           c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
       }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .7),
       sprite[SPRITE.CRAFT_WATERING_CAN_FULL] = sprite[SPRITE.INV_WATERING_CAN_FULL],
       sprite[SPRITE.INV_WATERING_CAN] = oi(1, [{
           f: Rn,
           x: -1,
           y: 0,
           a: 1,
           r: -Math.PI / 5,
           c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
       }], .4, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.CRAFT_WATERING_CAN] = sprite[SPRITE.INV_WATERING_CAN],
       sprite[SPRITE.INV_FLOUR] = oi(1, [{
           f: Sn,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
       }], .25, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
       sprite[SPRITE.INV_CRAB_STICK] = oi(1, [{
           f: Gi,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
       }], .2, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CHEST_CRAB_STICK] = sprite[SPRITE.INV_CRAB_STICK],
       sprite[SPRITE.INV_CAKE] = oi(1, [{
           f: it,
           x: 0,
           y: 0,
           a: 1,
           r: 0,
           c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
       }], .25, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_CAKE] = sprite[SPRITE.INV_CAKE],
       sprite[SPRITE.INV_SANDWICH] = oi(1, [{
           f: Ze,
           x: -2,
           y: -8,
           a: 1,
           r: 0,
           c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
       }], .25, ["#3ba578", "#4eb687", "#3da34d"], .5),
       sprite[SPRITE.CRAFT_SANDWICH] = sprite[SPRITE.INV_SANDWICH],
       sprite[SPRITE.INV_LAVA_SWORD] = [],
       sprite[SPRITE.INV_LAVA_SWORD][0] = IMAGES.INV_LAVA_SWORD_OUT,
       sprite[SPRITE.INV_LAVA_SWORD][1] = IMAGES.INV_LAVA_SWORD_IN,
       sprite[SPRITE.INV_LAVA_SWORD][2] = IMAGES.INV_LAVA_SWORD_CLICK,
       sprite[SPRITE.CRAFT_LAVA_SWORD] = sprite[SPRITE.INV_LAVA_SWORD],
       sprite[SPRITE.CHEST_LAVA_SWORD] = sprite[SPRITE.INV_LAVA_SWORD],
       sprite[SPRITE.INV_LAVA_SPEAR] = [],
       sprite[SPRITE.INV_LAVA_SPEAR][0] = IMAGES.INV_LAVA_SPEAR_OUT,
       sprite[SPRITE.INV_LAVA_SPEAR][1] = IMAGES.INV_LAVA_SPEAR_IN,
       sprite[SPRITE.INV_LAVA_SPEAR][2] = IMAGES.INV_LAVA_SPEAR_CLICK,
       sprite[SPRITE.CRAFT_LAVA_SPEAR] = sprite[SPRITE.INV_LAVA_SPEAR],
       sprite[SPRITE.CHEST_LAVA_SPEAR] = sprite[SPRITE.INV_LAVA_SPEAR],
       sprite[SPRITE.CRAFT_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD],
       sprite[SPRITE.CHEST_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD],
       sprite[SPRITE.INV_REIDITE_SWORD] = [],
       sprite[SPRITE.INV_REIDITE_SWORD][0] = IMAGES.INV_REIDITE_SWORD_OUT,
       sprite[SPRITE.INV_REIDITE_SWORD][1] = IMAGES.INV_REIDITE_SWORD_IN,
       sprite[SPRITE.INV_REIDITE_SWORD][2] = IMAGES.INV_REIDITE_SWORD_CLICK,
       sprite[SPRITE.CRAFT_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD],
       sprite[SPRITE.CHEST_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD],
       sprite[SPRITE.INV_REIDITE_SPEAR] = [],
       sprite[SPRITE.INV_REIDITE_SPEAR][0] = IMAGES.INV_REIDITE_SPEAR_OUT,
       sprite[SPRITE.INV_REIDITE_SPEAR][1] = IMAGES.INV_REIDITE_SPEAR_IN,
       sprite[SPRITE.INV_REIDITE_SPEAR][2] = IMAGES.INV_REIDITE_SPEAR_CLICK,
       sprite[SPRITE.CRAFT_REIDITE_SPEAR] = sprite[SPRITE.INV_REIDITE_SPEAR],
       sprite[SPRITE.CHEST_REIDITE_SPEAR] = sprite[SPRITE.INV_REIDITE_SPEAR],
       sprite[SPRITE.INV_DIAMOND_PROTECTION] = [],
       sprite[SPRITE.INV_DIAMOND_PROTECTION][0] = IMAGES.INV_DIAMOND_PROTECTION_OUT,
       sprite[SPRITE.INV_DIAMOND_PROTECTION][1] = IMAGES.INV_DIAMOND_PROTECTION_IN,
       sprite[SPRITE.INV_DIAMOND_PROTECTION][2] = IMAGES.INV_DIAMOND_PROTECTION_CLICK,
       sprite[SPRITE.CRAFT_DIAMOND_PROTECTION] = sprite[SPRITE.INV_DIAMOND_PROTECTION],
       sprite[SPRITE.CHEST_DIAMOND_PROTECTION] = sprite[SPRITE.INV_DIAMOND_PROTECTION],
       sprite[SPRITE.INV_AMETHYST_PROTECTION] = [],
       sprite[SPRITE.INV_AMETHYST_PROTECTION][0] = IMAGES.INV_AMETHYST_PROTECTION_OUT,
       sprite[SPRITE.INV_AMETHYST_PROTECTION][1] = IMAGES.INV_AMETHYST_PROTECTION_IN,
       sprite[SPRITE.INV_AMETHYST_PROTECTION][2] = IMAGES.INV_AMETHYST_PROTECTION_CLICK,
       sprite[SPRITE.CRAFT_AMETHYST_PROTECTION] = sprite[SPRITE.INV_AMETHYST_PROTECTION],
       sprite[SPRITE.CHEST_AMETHYST_PROTECTION] = sprite[SPRITE.INV_AMETHYST_PROTECTION],
       sprite[SPRITE.INV_REIDITE_PROTECTION] = [],
       sprite[SPRITE.INV_REIDITE_PROTECTION][0] = IMAGES.INV_REIDITE_PROTECTION_OUT,
       sprite[SPRITE.INV_REIDITE_PROTECTION][1] = IMAGES.INV_REIDITE_PROTECTION_IN,
       sprite[SPRITE.INV_REIDITE_PROTECTION][2] = IMAGES.INV_REIDITE_PROTECTION_CLICK,
       sprite[SPRITE.CRAFT_REIDITE_PROTECTION] = sprite[SPRITE.INV_REIDITE_PROTECTION],
       sprite[SPRITE.CHEST_REIDITE_PROTECTION] = sprite[SPRITE.INV_REIDITE_PROTECTION],
       sprite[SPRITE.INV_REIDITE_HELMET] = [],
       sprite[SPRITE.INV_REIDITE_HELMET][0] = IMAGES.INV_REIDITE_HELMET_OUT,
       sprite[SPRITE.INV_REIDITE_HELMET][1] = IMAGES.INV_REIDITE_HELMET_IN,
       sprite[SPRITE.INV_REIDITE_HELMET][2] = IMAGES.INV_REIDITE_HELMET_CLICK,
       sprite[SPRITE.CRAFT_REIDITE_HELMET] = sprite[SPRITE.INV_REIDITE_HELMET],
       sprite[SPRITE.CHEST_REIDITE_HELMET] = sprite[SPRITE.INV_REIDITE_HELMET],
       sprite[SPRITE.INV_LAVA_HELMET] = [],
       sprite[SPRITE.INV_LAVA_HELMET][0] = IMAGES.INV_LAVA_HELMET_OUT,
       sprite[SPRITE.INV_LAVA_HELMET][1] = IMAGES.INV_LAVA_HELMET_IN,
       sprite[SPRITE.INV_LAVA_HELMET][2] = IMAGES.INV_LAVA_HELMET_CLICK,
       sprite[SPRITE.CRAFT_LAVA_HELMET] = sprite[SPRITE.INV_LAVA_HELMET],
       sprite[SPRITE.CHEST_LAVA_HELMET] = sprite[SPRITE.INV_LAVA_HELMET],
       sprite[SPRITE.INV_FIREFLY] = [],
       sprite[SPRITE.INV_FIREFLY][0] = IMAGES.INV_FIREFLY_OUT,
       sprite[SPRITE.INV_FIREFLY][1] = IMAGES.INV_FIREFLY_IN,
       sprite[SPRITE.INV_FIREFLY][2] = IMAGES.INV_FIREFLY_CLICK,
       sprite[SPRITE.CRAFT_FIREFLY] = sprite[SPRITE.INV_FIREFLY],
       sprite[SPRITE.CHEST_FIREFLY] = sprite[SPRITE.INV_FIREFLY],
       sprite[SPRITE.INV_WITCH] = [],
       sprite[SPRITE.INV_WITCH][0] = IMAGES.INV_WITCH_OUT,
       sprite[SPRITE.INV_WITCH][1] = IMAGES.INV_WITCH_IN,
       sprite[SPRITE.INV_WITCH][2] = IMAGES.INV_WITCH_CLICK,
       sprite[SPRITE.CRAFT_WITCH] = sprite[SPRITE.INV_WITCH],
       sprite[SPRITE.CHEST_WITCH] = sprite[SPRITE.INV_WITCH],
       sprite[SPRITE.INV_NIMBUS] = [],
       sprite[SPRITE.INV_NIMBUS][0] = IMAGES.INV_NIMBUS_OUT,
       sprite[SPRITE.INV_NIMBUS][1] = IMAGES.INV_NIMBUS_IN,
       sprite[SPRITE.INV_NIMBUS][2] = IMAGES.INV_NIMBUS_CLICK,
       sprite[SPRITE.CRAFT_NIMBUS] = sprite[SPRITE.INV_NIMBUS],
       sprite[SPRITE.CHEST_NIMBUS] = sprite[SPRITE.INV_NIMBUS],
       sprite[SPRITE.INV_REIDITE] = [],
       sprite[SPRITE.INV_REIDITE][0] = IMAGES.INV_REIDITE_OUT,
       sprite[SPRITE.INV_REIDITE][1] = IMAGES.INV_REIDITE_IN,
       sprite[SPRITE.INV_REIDITE][2] = IMAGES.INV_REIDITE_CLICK,
       sprite[SPRITE.CHEST_REIDITE] = sprite[SPRITE.INV_REIDITE],
       sprite[SPRITE.INV_FLAME] = [],
       sprite[SPRITE.INV_FLAME][0] = IMAGES.INV_FLAME_OUT,
       sprite[SPRITE.INV_FLAME][1] = IMAGES.INV_FLAME_IN,
       sprite[SPRITE.INV_FLAME][2] = IMAGES.INV_FLAME_CLICK,
       sprite[SPRITE.CHEST_FLAME] = sprite[SPRITE.INV_FLAME],
       sprite[SPRITE.CHEST_SHOVEL] = sprite[SPRITE.INV_SHOVEL],
       sprite[SPRITE.CHEST_SHOVEL_GOLD] = sprite[SPRITE.INV_SHOVEL_GOLD],
       sprite[SPRITE.CHEST_SHOVEL_DIAMOND] = sprite[SPRITE.INV_SHOVEL_DIAMOND],
       sprite[SPRITE.CHEST_SHOVEL_AMETHYST] = sprite[SPRITE.INV_SHOVEL_AMETHYST],
       sprite[SPRITE.CHEST_SEED] = sprite[SPRITE.INV_SEED],
       sprite[SPRITE.CHEST_WHEAT_SEED] = sprite[SPRITE.INV_WHEAT_SEED],
       sprite[SPRITE.CHEST_WINDMILL] = sprite[SPRITE.INV_WINDMILL],
       sprite[SPRITE.CHEST_WILD_WHEAT] = sprite[SPRITE.INV_WILD_WHEAT],
       sprite[SPRITE.CHEST_FIRE] = sprite[SPRITE.INV_FIRE],
       sprite[SPRITE.CHEST_DRAGON_ORB] = sprite[SPRITE.INV_DRAGON_ORB],
       sprite[SPRITE.CHEST_DRAGON_CUBE] = sprite[SPRITE.INV_DRAGON_CUBE],
       sprite[SPRITE.CHEST_LAVA_ORB] = sprite[SPRITE.INV_LAVA_ORB],
       sprite[SPRITE.CHEST_LAVA_CUBE] = sprite[SPRITE.INV_LAVA_CUBE];
       sprite[SPRITE.CHEST_BIG_FIRE] = sprite[SPRITE.INV_BIG_FIRE],
       sprite[SPRITE.CHEST_SUGAR_CAN] = sprite[SPRITE.INV_SUGAR_CAN],
       sprite[SPRITE.CHEST_PIRATE_SWORD] = sprite[SPRITE.INV_PIRATE_SWORD],
       sprite[SPRITE.CHEST_SWORD_WOOD] = sprite[SPRITE.INV_SWORD_WOOD],
       sprite[SPRITE.CHEST_SWORD] = sprite[SPRITE.INV_SWORD],
       sprite[SPRITE.CHEST_CURSED_SWORD] = sprite[SPRITE.INV_CURSED_SWORD],
       sprite[SPRITE.CHEST_SWORD_GOLD] = sprite[SPRITE.INV_SWORD_GOLD],
       sprite[SPRITE.CHEST_SWORD_DIAMOND] = sprite[SPRITE.INV_SWORD_DIAMOND],
       sprite[SPRITE.CHEST_SWORD_AMETHYST] = sprite[SPRITE.INV_SWORD_AMETHYST],
       sprite[SPRITE.CHEST_PICK_WOOD] = sprite[SPRITE.INV_PICK_WOOD],
       sprite[SPRITE.CHEST_PICK] = sprite[SPRITE.INV_PICK],
       sprite[SPRITE.CHEST_PICK_GOLD] = sprite[SPRITE.INV_PICK_GOLD],
       sprite[SPRITE.CHEST_PICK_DIAMOND] = sprite[SPRITE.INV_PICK_DIAMOND],
       sprite[SPRITE.CHEST_PICK_AMETHYST] = sprite[SPRITE.INV_PICK_AMETHYST],
       sprite[SPRITE.CHEST_STONE] = sprite[SPRITE.INV_STONE],
       sprite[SPRITE.CHEST_GOLD] = sprite[SPRITE.INV_GOLD],
       sprite[SPRITE.CHEST_DIAMOND] = sprite[SPRITE.INV_DIAMOND],
       sprite[SPRITE.CHEST_WOOD] = sprite[SPRITE.INV_WOOD],
       sprite[SPRITE.CHEST_PLANT] = sprite[SPRITE.INV_PLANT],
       sprite[SPRITE.CHEST_WORKBENCH] = sprite[SPRITE.INV_WORK],
       sprite[SPRITE.CHEST_STONE_WALL] = sprite[SPRITE.INV_STONE_WALL],
       sprite[SPRITE.CHEST_DIAMOND_WALL] = sprite[SPRITE.INV_DIAMOND_WALL],
       sprite[SPRITE.CHEST_GOLD_WALL] = sprite[SPRITE.INV_GOLD_WALL],
       sprite[SPRITE.CHEST_AMETHYST_WALL] = sprite[SPRITE.INV_AMETHYST_WALL],
       sprite[SPRITE.CHEST_WALL] = sprite[SPRITE.INV_WALL],
       sprite[SPRITE.CHEST_SPIKE] = sprite[SPRITE.INV_SPIKE],
       sprite[SPRITE.CHEST_MEAT] = sprite[SPRITE.INV_MEAT],
       sprite[SPRITE.CHEST_COOKED_MEAT] = sprite[SPRITE.INV_COOKED_MEAT],
       sprite[SPRITE.CHEST_CORD] = sprite[SPRITE.INV_CORD],
       sprite[SPRITE.CHEST_BLUE_CORD] = sprite[SPRITE.INV_BLUE_CORD],
       sprite[SPRITE.CHEST_BANDAGE] = sprite[SPRITE.INV_BANDAGE],
       sprite[SPRITE.CHEST_LOCK] = sprite[SPRITE.INV_LOCK],
       sprite[SPRITE.CHEST_LOCKPICK] = sprite[SPRITE.INV_LOCKPICK],
       sprite[SPRITE.CHEST_RESURRECTION] = sprite[SPRITE.INV_RESURRECTION],
       sprite[SPRITE.CHEST_DRAGON_HEART] = sprite[SPRITE.INV_DRAGON_HEART],
       sprite[SPRITE.CHEST_LAVA_HEART] = sprite[SPRITE.INV_LAVA_HEART],
       sprite[SPRITE.CHEST_DRAGON_SWORD] = sprite[SPRITE.INV_DRAGON_SWORD],
       sprite[SPRITE.CHEST_TOTEM] = sprite[SPRITE.INV_TOTEM],
       sprite[SPRITE.CHEST_DOOR_WOOD_CLOSE] = sprite[SPRITE.INV_DOOR_WOOD_CLOSE],
       sprite[SPRITE.CHEST_CHEST] = sprite[SPRITE.INV_CHEST],
       sprite[SPRITE.CHEST_SLOT] = p(Lt(.8, !0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"])),
       sprite[SPRITE.CHEST_PLUS] = oi(.5, [{
           f: Gt,
           x: 0,
           y: 2,
           a: 1,
           r: 0,
           c: ["#ffffff"]
       }], .16, ["#c4a23a", "#d0ad41", "#b89733"], .9),
       sprite[SPRITE.CHEST_STONE_SPIKE] = sprite[SPRITE.INV_STONE_SPIKE],
       sprite[SPRITE.CHEST_GOLD_SPIKE] = sprite[SPRITE.INV_GOLD_SPIKE],
       sprite[SPRITE.CHEST_DIAMOND_SPIKE] = sprite[SPRITE.INV_DIAMOND_SPIKE],
       sprite[SPRITE.CHEST_AMETHYST_SPIKE] = sprite[SPRITE.INV_AMETHYST_SPIKE],
       sprite[SPRITE.CHEST_BAG] = sprite[SPRITE.INV_BAG],
       sprite[SPRITE.CHEST_SPECIAL_FUR] = sprite[SPRITE.INV_SPECIAL_FUR],
       sprite[SPRITE.CHEST_SPECIAL_FUR_2] = sprite[SPRITE.INV_SPECIAL_FUR_2],
       sprite[SPRITE.CHEST_FUR] = sprite[SPRITE.INV_FUR],
       sprite[SPRITE.CHEST_KRAKEN_SKIN] = sprite[SPRITE.INV_KRAKEN_SKIN],
       sprite[SPRITE.CHEST_FUR_WOLF] = sprite[SPRITE.INV_FUR_WOLF],
       sprite[SPRITE.CHEST_FUR_BOAR] = sprite[SPRITE.INV_FUR_BOAR],
       sprite[SPRITE.CHEST_FUR_WINTER] = sprite[SPRITE.INV_FUR_WINTER],
       sprite[SPRITE.CHEST_EARMUFFS] = sprite[SPRITE.INV_EARMUFFS],
       sprite[SPRITE.CHEST_CAP_SCARF] = sprite[SPRITE.INV_CAP_SCARF],
       sprite[SPRITE.CHEST_DOOR_STONE_CLOSE] = sprite[SPRITE.INV_DOOR_STONE_CLOSE],
       sprite[SPRITE.CHEST_DOOR_GOLD_CLOSE] = sprite[SPRITE.INV_DOOR_GOLD_CLOSE],
       sprite[SPRITE.CHEST_DOOR_DIAMOND_CLOSE] = sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE],
       sprite[SPRITE.CHEST_DOOR_AMETHYST_CLOSE] = sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE],
       sprite[SPRITE.CHEST_COAT] = sprite[SPRITE.INV_COAT],
       sprite[SPRITE.CHEST_WOOD_SPEAR] = sprite[SPRITE.INV_WOOD_SPEAR],
       sprite[SPRITE.CHEST_SPEAR] = sprite[SPRITE.INV_SPEAR],
       sprite[SPRITE.CHEST_GOLD_SPEAR] = sprite[SPRITE.INV_GOLD_SPEAR],
       sprite[SPRITE.CHEST_DIAMOND_SPEAR] = sprite[SPRITE.INV_DIAMOND_SPEAR],
       sprite[SPRITE.CHEST_AMETHYST_SPEAR] = sprite[SPRITE.INV_AMETHYST_SPEAR],
       sprite[SPRITE.CHEST_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR],
       sprite[SPRITE.CHEST_SUPER_HAMMER] = sprite[SPRITE.INV_SUPER_HAMMER],
       sprite[SPRITE.CHEST_SPANNER] = sprite[SPRITE.INV_SPANNER],
       sprite[SPRITE.CHEST_HAMMER] = sprite[SPRITE.INV_HAMMER],
       sprite[SPRITE.CHEST_HAMMER_GOLD] = sprite[SPRITE.INV_HAMMER_GOLD],
       sprite[SPRITE.CHEST_HAMMER_DIAMOND] = sprite[SPRITE.INV_HAMMER_DIAMOND],
       sprite[SPRITE.CHEST_HAMMER_AMETHYST] = sprite[SPRITE.INV_HAMMER_AMETHYST],
       sprite[SPRITE.CHEST_FURNACE] = sprite[SPRITE.INV_FURNACE],
       sprite[SPRITE.CHEST_BREAD_OVEN] = sprite[SPRITE.INV_BREAD_OVEN],
       sprite[SPRITE.CHEST_EXPLORER_HAT] = sprite[SPRITE.INV_EXPLORER_HAT],
       sprite[SPRITE.CHEST_STONE_HELMET] = sprite[SPRITE.INV_STONE_HELMET],
       sprite[SPRITE.CHEST_GOLD_HELMET] = sprite[SPRITE.INV_GOLD_HELMET],
       sprite[SPRITE.CHEST_DIAMOND_HELMET] = sprite[SPRITE.INV_DIAMOND_HELMET],
       sprite[SPRITE.CHEST_AMETHYST_HELMET] = sprite[SPRITE.INV_AMETHYST_HELMET],
       sprite[SPRITE.CHEST_DRAGON_HELMET] = sprite[SPRITE.INV_DRAGON_HELMET],
       sprite[SPRITE.CHEST_BOOK] = sprite[SPRITE.INV_BOOK],
       sprite[SPRITE.CHEST_PAPER] = sprite[SPRITE.INV_PAPER],
       sprite[SPRITE.CHEST_AMETHYST] = sprite[SPRITE.INV_AMETHYST],
       sprite[SPRITE.CHEST_BRIDGE] = sprite[SPRITE.INV_BRIDGE],
       sprite[SPRITE.CHEST_ROOF] = sprite[SPRITE.INV_ROOF],
       sprite[SPRITE.CHEST_PLOT] = sprite[SPRITE.INV_PLOT],
       sprite[SPRITE.CHEST_SAND] = sprite[SPRITE.INV_SAND],
       sprite[SPRITE.CHEST_BREAD] = sprite[SPRITE.INV_BREAD],
       sprite[SPRITE.CHEST_ICE] = sprite[SPRITE.INV_ICE],
       sprite[SPRITE.CHEST_GROUND] = sprite[SPRITE.INV_GROUND],
       sprite[SPRITE.CHEST_BOTTLE_FULL] = sprite[SPRITE.INV_BOTTLE_FULL],
       sprite[SPRITE.CHEST_BOTTLE_EMPTY] = sprite[SPRITE.INV_BOTTLE_EMPTY],
       sprite[SPRITE.CHEST_WATERING_CAN] = sprite[SPRITE.INV_WATERING_CAN],
       sprite[SPRITE.CHEST_FLOUR] = sprite[SPRITE.INV_FLOUR],
       sprite[SPRITE.CHEST_COOKIE] = sprite[SPRITE.INV_COOKIE],
       sprite[SPRITE.CHEST_CANDY] = sprite[SPRITE.INV_CANDY],
       sprite[SPRITE.CHEST_FERRERO] = sprite[SPRITE.INV_FERRERO],
       sprite[SPRITE.CHEST_SUPER_DIVING_SUIT] = sprite[SPRITE.INV_SUPER_DIVING_SUIT],
       sprite[SPRITE.CHEST_DIVING_MASK] = sprite[SPRITE.INV_DIVING_MASK],
       sprite[SPRITE.CHEST_WATERING_CAN_FULL] = sprite[SPRITE.INV_WATERING_CAN_FULL],
       sprite[SPRITE.CHEST_CAKE] = sprite[SPRITE.INV_CAKE],
       sprite[SPRITE.CHEST_CRAB_STICK] = sprite[SPRITE.INV_CRAB_STICK],
       sprite[SPRITE.CHEST_FOODFISH] = sprite[SPRITE.INV_FOODFISH],
       sprite[SPRITE.CHEST_FOODFISH_COOKED] = sprite[SPRITE.INV_FOODFISH_COOKED],
       sprite[SPRITE.CHEST_SCALES] = sprite[SPRITE.INV_SCALES],
       sprite[SPRITE.CHEST_SANDWICH] = sprite[SPRITE.INV_SANDWICH],
       sprite[SPRITE.CHEST_CROWN_GREEN] = sprite[SPRITE.INV_CROWN_GREEN],
       sprite[SPRITE.CHEST_GEMME_GREEN] = sprite[SPRITE.INV_GEMME_GREEN],
       sprite[SPRITE.CHEST_CROWN_ORANGE] = sprite[SPRITE.INV_CROWN_ORANGE],
       sprite[SPRITE.CHEST_GEMME_ORANGE] = sprite[SPRITE.INV_GEMME_ORANGE],
       sprite[SPRITE.CHEST_CROWN_BLUE] = sprite[SPRITE.INV_CROWN_BLUE],
       sprite[SPRITE.CHEST_GEMME_BLUE] = sprite[SPRITE.INV_GEMME_BLUE],
       sprite[SPRITE.CHEST_HOOD] = sprite[SPRITE.INV_HOOD],
       sprite[SPRITE.CHEST_PEASANT] = sprite[SPRITE.INV_PEASANT],
       sprite[SPRITE.CHEST_WINTER_PEASANT] = sprite[SPRITE.INV_WINTER_PEASANT],
       sprite[SPRITE.CHEST_WINTER_HOOD] = sprite[SPRITE.INV_WINTER_HOOD],
       sprite[SPRITE.CHEST_BUCKET_EMPTY] = sprite[SPRITE.INV_BUCKET_EMPTY],
       sprite[SPRITE.CHEST_BUCKET_FULL] = sprite[SPRITE.INV_BUCKET_FULL],
       sprite[SPRITE.CHEST_WELL] = sprite[SPRITE.INV_WELL],
       sprite[SPRITE.CHEST_SIGN] = sprite[SPRITE.INV_SIGN],
       sprite[SPRITE.CHEST_PUMPKIN_SEED] = sprite[SPRITE.INV_PUMPKIN_SEED],
       sprite[SPRITE.CHEST_GARLIC_SEED] = sprite[SPRITE.INV_GARLIC_SEED],
       sprite[SPRITE.CHEST_THORNBUSH_SEED] = sprite[SPRITE.INV_THORNBUSH_SEED],
       sprite[SPRITE.CHEST_WOOD_HELMET] = sprite[SPRITE.INV_WOOD_HELMET]
   }
   function qn(e, i, t, r, n, o, a, s, T, I) {
       void 0 !== i.tryLoad && 1 !== i.tryLoad() || (void 0 !== I ? e.drawImage(i, t, r, Math.max(1, n), Math.max(1, o), a, s, T, I) : void 0 !== o ? e.drawImage(i, t, r, n, o) : e.drawImage(i, t, r))
   }
   function jn() {
       var e = xI.info_box
         , i = e.id;
       1 === e.activated && 1 === e.display && (void 0 === INFO_BOX[i] && (INFO_BOX[i] = Ki(i)),
       1 === e.craft ? qn(u, INFO_BOX[i], e.x, e.y) : e.x - 80 + INFO_BOX[i].width > R ? qn(u, INFO_BOX[i], R - INFO_BOX[i].width - 10, e.y - INFO_BOX[i].height - 10) : qn(u, INFO_BOX[i], e.x - 80, e.y - INFO_BOX[i].height - 10))
   }
   function Zn(e, i, t) {
       var r = sprite[SPRITE.SLOT_NUMBER][e]
         , n = i.info.translate.x + 5 * C
         , o = i.info.translate.y + 5 * C;
       (i.info.state == Xs || t) && (o += 5 * C),
       qn(u, r, n, o)
   }
   function Qn(e, i) {
       sprite[SPRITE.COUNTER][e] || (sprite[SPRITE.COUNTER][e] = Yi(C, "x" + e, 17, "#FFF"));
       var t = sprite[SPRITE.COUNTER][e]
         , r = i.info.translate.x + i.info.img[0].width - t.width - 14 * C
         , n = i.info.translate.y + i.info.img[0].height - t.height - 19 * C;
       i.info.state == Xs && (n += 5 * C),
       qn(u, t, r, n)
   }
   function $n() {
       if (!(kI.chest.open || kI.furnace.open || kI.windmill.open || kI.bread_oven.open || kI.extractor.open)) {
           kI.well.open = !1;
           var e = UI.fast_units[kI.uid]
             , i = ET.DIST_WELL;
           if (e)
               for (var t = 0; t < UI.units[hT.WELL].length; t++) {
                   var r = UI.units[hT.WELL][t]
                     , n = s.dist(r, e);
                   n < i && (i = n,
                   kI.well.open = !0,
                   kI.well.pid = r.pid,
                   kI.well.iid = r.id)
               }
       }
   }
   function eo() {
       if (!(kI.chest.open || kI.furnace.open || kI.windmill.open || kI.bread_oven.open || kI.extractor.open)) {
           kI.sign.open = !1;
           var e = UI.fast_units[kI.uid]
             , i = ET.DIST_SIGN;
           if (e) {
               for (var t = 0; t < UI.units[hT.SIGN].length; t++) {
                   var r = UI.units[hT.SIGN][t]
                     , n = s.dist(r, e);
                   n < i && 0 === r.info && r.pid === kI.id && (kI.sign.open = !0,
                   i = n,
                   kI.sign.iid = r.id)
               }
               if (i < ET.DIST_SIGN)
                   xI.sign.button.draw(u)
           }
       }
   }
   function io() {
       if (!(kI.chest.open || kI.furnace.open || kI.windmill.open || kI.extractor.open)) {
           kI.bread_oven.open = !1;
           var e = UI.fast_units[kI.uid]
             , i = ET.DIST_BREAD_OVEN;
           if (e) {
               for (var t = 0; t < UI.units[hT.BREAD_OVEN].length; t++) {
                   var r = UI.units[hT.BREAD_OVEN][t]
                     , n = s.dist(r, e);
                   n < i && (i = n,
                   kI.bread_oven.open = !0,
                   kI.bread_oven.amount_wood = 31 & r.info,
                   kI.bread_oven.amount_flour = (992 & r.info) >> 5,
                   kI.bread_oven.amount_bread = (31744 & r.info) >> 10,
                   kI.bread_oven.pid = r.pid,
                   kI.bread_oven.iid = r.id)
               }
               if (i < ET.DIST_BREAD_OVEN) {
                   var o = sprite[SPRITE.BREAD_OVEN_UI]
                     , a = (T = xI.bread_oven_wood_button).info.translate.x - 32;
                   if (qn(u, o, a, 0),
                   kI.bread_oven.amount_wood > 0)
                       T.draw(u),
                       (I = kI.bread_oven.amount_wood) > 1 && Qn(I, T);
                   var T = xI.bread_oven_bread_button;
                   if (kI.bread_oven.amount_bread > 0)
                       T.draw(u),
                       (I = kI.bread_oven.amount_bread) > 1 && Qn(I, T);
                   var I;
                   T = xI.bread_oven_flour_button;
                   if (kI.bread_oven.amount_flour > 0)
                       T.draw(u),
                       (I = kI.bread_oven.amount_flour) > 1 && Qn(I, T)
               }
           }
       }
   }
   function to() {
       if (!kI.chest.open && !kI.furnace.open) {
           kI.extractor.open = !1;
           var e = UI.fast_units[kI.uid]
             , i = ET.DIST_EXTRACTOR_MACHINE;
           if (e) {
               for (var t = 0; t < RT.length; t++)
                   for (var r = RT[t][0], n = RT[t][1], o = 0; o < UI.units[r].length; o++) {
                       var a = UI.units[r][o]
                         , T = s.dist(a, e);
                       T < i && (i = T,
                       kI.extractor.mineral = n,
                       kI.extractor.type = r,
                       kI.extractor.open = !0,
                       kI.extractor.amount_wood = 255 & a.info,
                       kI.extractor.amount_mineral = (65280 & a.info) >> 8,
                       kI.extractor.pid = a.pid,
                       kI.extractor.iid = a.id)
                   }
               if (i < ET.DIST_EXTRACTOR_MACHINE) {
                   var I, E = sprite[SPRITE.EXTRACTOR_CASES], _ = (h = xI.extractor_wood_button).info.translate.x - 33;
                   if (qn(u, E, _, 0),
                   kI.extractor.amount_wood > 0)
                       h.draw(u),
                       (I = kI.extractor.amount_wood) > 1 && Qn(I, h);
                   switch (kI.extractor.mineral) {
                   case INV.STONE:
                       var h = xI.extractor_stone_button;
                       break;
                   case INV.GOLD:
                       h = xI.extractor_gold_button;
                       break;
                   case INV.DIAMOND:
                       h = xI.extractor_diamond_button;
                       break;
                   case INV.AMETHYST:
                       h = xI.extractor_amethyst_button;
                       break;
                   case INV.REIDITE:
                       h = xI.extractor_reidite_button
                   }
                   if (kI.extractor.amount_mineral > 0)
                       h.draw(u),
                       (I = kI.extractor.amount_mineral) > 1 && Qn(I, h)
               }
           }
       }
   }
   function ro() {
       if (!kI.chest.open && !kI.furnace.open) {
           kI.windmill.open = !1;
           var e = UI.fast_units[kI.uid]
             , i = ET.DIST_WINDMILL;
           if (e) {
               for (var t = 0; t < UI.units[hT.WINDMILL].length; t++) {
                   var r = UI.units[hT.WINDMILL][t]
                     , n = s.dist(r, e);
                   n < i && (i = n,
                   kI.windmill.open = !0,
                   kI.windmill.amount_wheat = 255 & r.info,
                   kI.windmill.amount_flour = (65280 & r.info) >> 8,
                   kI.windmill.pid = r.pid,
                   kI.windmill.iid = r.id)
               }
               if (i < ET.DIST_WINDMILL) {
                   var o = sprite[SPRITE.WINDMILL_CASES]
                     , a = (I = xI.windmill_wheat_button).info.translate.x - 33;
                   if (qn(u, o, a, 0),
                   kI.windmill.amount_wheat > 0)
                       I.draw(u),
                       (T = kI.windmill.amount_wheat) > 1 && Qn(T, I);
                   var T, I = xI.windmill_flour_button;
                   if (kI.windmill.amount_flour > 0)
                       I.draw(u),
                       (T = kI.windmill.amount_flour) > 1 && Qn(T, I)
               }
           }
       }
   }
   function no() {
       if (!kI.chest.open) {
           kI.furnace.amount = 0,
           kI.furnace.open = !1;
           var e = UI.fast_units[kI.uid]
             , i = ET.DIST_FURNACE;
           if (e) {
               for (var t = 0; t < UI.units[hT.FURNACE].length; t++) {
                   var r = UI.units[hT.FURNACE][t]
                     , n = s.dist(r, e);
                   n < i && (i = n,
                   kI.furnace.open = !0,
                   kI.furnace.amount = r.info,
                   kI.furnace.pid = r.pid,
                   kI.furnace.iid = r.id)
               }
               if (i < ET.DIST_FURNACE) {
                   var o = sprite[SPRITE.FURNACE_SLOT]
                     , a = xI.furnace_button
                     , T = Math.floor(a.info.translate.x + (a.info.img[0].width - o.width) / 2)
                     , I = Math.floor(a.info.translate.y + (a.info.img[0].height - o.height) / 2) + 3;
                   if (qn(u, o, T, I),
                   kI.furnace.amount > 0) {
                       a.draw(u);
                       var E = kI.furnace.amount;
                       E > 1 && Qn(E, a)
                   }
               }
           }
       }
   }
   function oo() {
       kI.resurrection.open = !1;
       var e = UI.fast_units[kI.uid]
         , i = ET.DIST_RESURRECTION;
       if (e) {
           for (var t = 0; t < UI.units[hT.RESURRECTION].length; t++) {
               var r = UI.units[hT.RESURRECTION][t]
                 , n = s.dist(r, e);
               n < i && (i = n,
               kI.resurrection.open = !0,
               kI.resurrection.pid = r.pid,
               kI.resurrection.iid = r.id)
           }
           i < ET.DIST_RESURRECTION && xI.resurrection.draw(u)
       }
   }
   function ao() {
       if (kI.totem.id = -1,
       kI.totem.pid = -1,
       !(kI.spectator || kI.totem.wait || kI.zombie)) {
           var e = UI.fast_units[kI.uid]
             , i = ET.DIST_TOTEM;
           if (e)
               for (var t = 0; t < UI.units[hT.TOTEM].length; t++) {
                   var r = UI.units[hT.TOTEM][t]
                     , n = s.dist(r, e);
                   n < i && (i = n,
                   kI.totem.id = r.id,
                   kI.totem.pid = r.pid,
                   kI.totem.info = r.info,
                   kI.totem.lock = r.extra)
               }
           var o = xI.team_buttons_id;
           xI.team_buttons_id = -1,
           -1 == kI.totem.pid || 0 != kI.team.length && kI.id != kI.totem.pid ? 0 != kI.team.length && kI.team[0] != kI.id ? xI.team_buttons_id = IT.TEAM_LEAVE : 0 != kI.team.length && kI.team[0] == kI.id ? xI.team_buttons_id = IT.TEAM_SHOW : 0 != kI.team.length && (xI.team_buttons_id = IT.TEAM_JOIN) : 0 == kI.team.length && kI.totem.info >= 8 || 0 == kI.team.length && kI.totem.lock ? xI.team_buttons_id = IT.TEAM_FULL : 0 == kI.team.length ? xI.team_buttons_id = IT.TEAM_JOIN : xI.team_buttons_id = IT.TEAM_MANAGE,
           -1 != xI.team_buttons_id && xI.team_buttons[xI.team_buttons_id].button.draw(u);
           var a = document.getElementById("team_box").style;
           -1 != xI.team_buttons_id && xI.team_buttons_id != o && "inline-block" == a.display && xI.team_buttons[xI.team_buttons_id].action()
       }
   }
   function so() {
       kI.chest.id = -1,
       kI.chest.lock = !1,
       kI.chest.locked = !1,
       kI.chest.lockpick = !1,
       kI.chest.padlock = !1,
       kI.chest.open = !1;
       var e = UI.fast_units[kI.uid]
         , i = ET.DIST_CHEST;
       if (e) {
           for (var t = 0; t < UI.units[hT.CHEST].length; t++) {
               var r = UI.units[hT.CHEST][t]
                 , n = s.dist(r, e);
               n < i && (i = n,
               kI.chest.open = !0,
               kI.chest.id = 1024 == r.extra ? -1 : r.extra,
               kI.chest.amount = r.info,
               kI.chest.pid = r.pid,
               kI.chest.iid = r.id,
               kI.chest.locked = r.lock,
               kI.chest.lock = !(!r.lock || kI.id == r.pid || kI.in_team(r.pid)),
               kI.chest.padlock = r.pid === kI.id && !kI.chest.locked && -1 != kI.inv.find_item(INV.LOCK),
               kI.chest.locked && -1 != kI.inv.find_item(INV.LOCKPICK) && (kI.chest.lockpick = !0))
           }
           if (i < ET.DIST_CHEST) {
               var o = sprite[SPRITE.CHEST_SLOT]
                 , a = xI.chest_buttons[0]
                 , T = Math.floor(a.info.translate.x + (a.info.img[0].width - o.width) / 2)
                 , I = Math.floor(a.info.translate.y + (a.info.img[0].height - o.height) / 2) + 3;
               if (qn(u, o, T, I),
               (!kI.chest.lock || kI.chest.pid === kI.id) && kI.chest.id >= 0) {
                   (a = xI.chest_buttons[kI.chest.id]).draw(u);
                   var E = kI.chest.amount;
                   E > 1 && Qn(E, a)
               }
               kI.chest.lock ? xI.chest_locked.draw(u) : kI.chest.padlock && xI.chest_padlock.draw(u),
               kI.chest.lockpick && xI.chest_lockpick.draw(u)
           }
       }
   }
   function To() {
       if (kI.bigmap) {
           u.globalAlpha = .5,
           u.fillStyle = "#000",
           u.fillRect(0, 0, R, A),
           u.globalAlpha = .8;
           var e = sprite[SPRITE.BIGMAP][UI.time]
             , i = d - e.width / 2
             , t = S - e.height / 2;
           qn(u, e, i, t),
           u.globalAlpha = 1,
           xI.minimap.marker.x > -1 && (u.fillStyle = "#660000",
           Ee(u, i + 3 * xI.minimap.marker.x * C, t + 3 * xI.minimap.marker.y * C, 14 * C),
           u.fill());
           for (var r = xI.minimap.players, n = 0; n < r.length; n++) {
               var o = r[n];
               u.fillStyle = (UI.time,
               "#ff0000"),
               Ee(u, i + o.x / (100 * UI.nw) * 600 * C, t + o.y / (100 * UI.nh) * 600 * C, 6 * C),
               u.fill()
           }
           var a = UI.fast_units[kI.uid];
           a && (u.fillStyle = UI.time ? "#fff" : "#e39716",
           Ee(u, i + a.x / (100 * UI.nw) * 600 * C, t + a.y / (100 * UI.nh) * 600 * C, 12 * C),
           u.fill())
       }
   }
   function Io() {
       if (kI.reconnect.enabled) {
           u.globalAlpha = .9,
           u.fillStyle = "#000",
           Te(u, d - 150, S - 90, 300, 180, 15),
           u.fill(),
           u.globalAlpha = 1;
           var e = sprite[SPRITE.GEAR2];
           u.save(),
           kI.reconnect.rotate = (kI.reconnect.rotate + 2 * jI) % (2 * Math.PI),
           u.translate(R / 2, A / 2 - 25),
           u.rotate(kI.reconnect.rotate),
           qn(u, e, -e.width / 2, -e.height / 2),
           u.restore();
           e = sprite[SPRITE.RECONNECT];
           qn(u, e, (R - e.width) / 2, (A - e.height) / 2 + 25)
       }
   }
   function Eo() {
       if (kI.inv.can_select.length > 0)
           var e = {
               x: xI.minimap.translate.x,
               y: xI.minimap.translate.y - 120 * C
           };
       else
           e = {
               x: xI.minimap.translate.x,
               y: xI.minimap.translate.y - 50 * C
           };
       u.globalAlpha = .8;
       var i = sprite[SPRITE.MINIMAP][UI.time];
       qn(u, i, e.x, e.y),
       u.globalAlpha = 1,
       xI.minimap.marker.x > -1 && (u.fillStyle = "#660000",
       Ee(u, e.x + xI.minimap.marker.x * C, e.y + xI.minimap.marker.y * C, 5 * C),
       u.fill());
       for (var t = C, r = xI.minimap.players, n = 0; n < r.length; n++) {
           var o = r[n];
           u.fillStyle = (UI.time,
           "#ff0000"),
           Ee(u, e.x + o.x / (100 * UI.nw) * 193 * C, e.y + o.y / (100 * UI.nh) * 193 * C, 2 * C),
           u.fill()
       }
       var a = UI.fast_units[kI.uid];
       a && (u.fillStyle = UI.time ? "#fff" : "#e39716",
       Ee(u, e.x + a.x / (100 * UI.nw) * 193 * C, e.y + a.y / (100 * UI.nh) * 193 * C, 4 * C),
       u.fill()),
       C = t
   }
   render_minimap = function() {
       for (var e = 0; e < 2; e++) {
           sprite[SPRITE.MINIMAP_CTX][e].clearRect(0, 0, 193, 193),
           sprite[SPRITE.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.MAP[e], 0, 0, 193, 193),
           sprite[SPRITE.BIGMAP_CTX][e].clearRect(0, 0, 600, 600),
           sprite[SPRITE.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.MAP[e], 0, 0, 600, 600);
           for (var i = UI.biomes.length - 1; i >= 0; i--) {
               var t = UI.biomes[i]
                 , r = 193 * t.x1 / (100 * UI.nw)
                 , n = 193 * t.y1 / (100 * UI.nh)
                 , o = 193 * t.w / (100 * UI.nw)
                 , a = 193 * t.h / (100 * UI.nh)
                 , s = 600 * t.x1 / (100 * UI.nw)
                 , T = 600 * t.y1 / (100 * UI.nh)
                 , I = 600 * t.w / (100 * UI.nw)
                 , E = 600 * t.h / (100 * UI.nh);
               t.t === UI.BIOME_FOREST && (sprite[SPRITE.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.FOREST[e], r, n, o, a),
               sprite[SPRITE.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.FOREST[e], s, T, I, E)),
               t.t === UI.BIOME_WINTER && (sprite[SPRITE.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.WINTER[e], r, n, o, a),
               sprite[SPRITE.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.WINTER[e], s, T, I, E)),
               t.t === UI.BIOME_LAVA && (sprite[SPRITE.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.LAVA[e], r, n, o, a),
               sprite[SPRITE.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.LAVA[e], s, T, I, E)),
               t.t === UI.BIOME_DRAGON && (sprite[SPRITE.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.CAVE[e], r, n, o, a),
               sprite[SPRITE.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.CAVE[e], s, T, I, E)),
               t.t === UI.BIOME_DESERT && (sprite[SPRITE.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.DESERT[e], r, n, o, a),
               sprite[SPRITE.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.DESERT[e], s, T, I, E))
           }
       }
   }
   ,
   render_cosmetics = function() {
       COSMETICS = {
           SKIN: [{
               id: 0,
               day: IMAGES.PLAYER0D,
               night: IMAGES.PLAYER0N,
               dayHand: IMAGES.HAND0D,
               nightHand: IMAGES.HAND0N,
               rarity: RARITY.FREE,
               author: "Starve.io",
               name: "Starver"
           }, {
               id: 3,
               day: IMAGES.PLAYER3D,
               night: IMAGES.PLAYER3N,
               dayHand: IMAGES.HAND3D,
               nightHand: IMAGES.HAND3N,
               rarity: RARITY.FREE,
               author: "Starve.io",
               name: "Angry"
           }, {
               id: 2,
               day: IMAGES.PLAYER2D,
               night: IMAGES.PLAYER2N,
               dayHand: IMAGES.HAND2D,
               nightHand: IMAGES.HAND2N,
               rarity: RARITY.FREE,
               author: "Starve.io",
               name: "Sad"
           }, {
               id: 9,
               day: IMAGES.PLAYER9D,
               night: IMAGES.PLAYER9N,
               dayHand: IMAGES.HAND9D,
               nightHand: IMAGES.HAND9N,
               rarity: RARITY.FREE,
               author: "Starve.io",
               name: "Happy 1"
           }, {
               id: 1,
               day: IMAGES.PLAYER1D,
               night: IMAGES.PLAYER1N,
               dayHand: IMAGES.HAND1D,
               nightHand: IMAGES.HAND1N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "What?"
           }, {
               id: 4,
               day: IMAGES.PLAYER4D,
               night: IMAGES.PLAYER4N,
               dayHand: IMAGES.HAND4D,
               nightHand: IMAGES.HAND4N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Suspicious"
           }, {
               id: 5,
               day: IMAGES.PLAYER5D,
               night: IMAGES.PLAYER5N,
               dayHand: IMAGES.HAND5D,
               nightHand: IMAGES.HAND5N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Scar"
           }, {
               id: 6,
               day: IMAGES.PLAYER6D,
               night: IMAGES.PLAYER6N,
               dayHand: IMAGES.HAND6D,
               nightHand: IMAGES.HAND6N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "In Trouble"
           }, {
               id: 7,
               day: IMAGES.PLAYER7D,
               night: IMAGES.PLAYER7N,
               dayHand: IMAGES.HAND7D,
               nightHand: IMAGES.HAND7N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Cute"
           }, {
               id: 8,
               day: IMAGES.PLAYER8D,
               night: IMAGES.PLAYER8N,
               dayHand: IMAGES.HAND8D,
               nightHand: IMAGES.HAND8N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Bored 1"
           }, {
               id: 10,
               day: IMAGES.PLAYER10D,
               night: IMAGES.PLAYER10N,
               dayHand: IMAGES.HAND10D,
               nightHand: IMAGES.HAND10N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Happy 2"
           }, {
               id: 11,
               day: IMAGES.PLAYER11D,
               night: IMAGES.PLAYER11N,
               dayHand: IMAGES.HAND11D,
               nightHand: IMAGES.HAND11N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Crazy"
           }, {
               id: 12,
               day: IMAGES.PLAYER12D,
               night: IMAGES.PLAYER12N,
               dayHand: IMAGES.HAND12D,
               nightHand: IMAGES.HAND12N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Happy 3"
           }, {
               id: 13,
               day: IMAGES.PLAYER13D,
               night: IMAGES.PLAYER13N,
               dayHand: IMAGES.HAND13D,
               nightHand: IMAGES.HAND13N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Very Cute"
           }, {
               id: 14,
               day: IMAGES.PLAYER14D,
               night: IMAGES.PLAYER14N,
               dayHand: IMAGES.HAND14D,
               nightHand: IMAGES.HAND14N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Curious"
           }, {
               id: 15,
               day: IMAGES.PLAYER15D,
               night: IMAGES.PLAYER15N,
               dayHand: IMAGES.HAND15D,
               nightHand: IMAGES.HAND15N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Bored 2"
           }, {
               id: 16,
               day: IMAGES.PLAYER16D,
               night: IMAGES.PLAYER16N,
               dayHand: IMAGES.HAND16D,
               nightHand: IMAGES.HAND16N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Happy 4"
           }, {
               id: 17,
               day: IMAGES.PLAYER17D,
               night: IMAGES.PLAYER17N,
               dayHand: IMAGES.HAND17D,
               nightHand: IMAGES.HAND17N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Scar 2"
           }, {
               id: 18,
               day: IMAGES.PLAYER18D,
               night: IMAGES.PLAYER18N,
               dayHand: IMAGES.HAND18D,
               nightHand: IMAGES.HAND18N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Sick"
           }, {
               id: 19,
               day: IMAGES.PLAYER19D,
               night: IMAGES.PLAYER19N,
               dayHand: IMAGES.HAND19D,
               nightHand: IMAGES.HAND19N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Somnambule"
           }, {
               id: 24,
               day: IMAGES.SKIN7D,
               night: IMAGES.SKIN7N,
               dayHand: IMAGES.HAND_SKIN7D,
               nightHand: IMAGES.HAND_SKIN7N,
               rarity: RARITY.WOOD,
               author: "Pixelbitie",
               name: "Feel Bad"
           }, {
               id: 23,
               day: IMAGES.SKIN0D,
               night: IMAGES.SKIN0N,
               dayHand: IMAGES.HAND_SKIN0D,
               nightHand: IMAGES.HAND_SKIN0N,
               rarity: RARITY.WOOD,
               author: "Pixelbitie",
               name: "Mmmh."
           }, {
               id: 103,
               day: IMAGES.SKIN78D,
               night: IMAGES.SKIN78N,
               dayHand: IMAGES.HAND_SKIN78D,
               nightHand: IMAGES.HAND_SKIN78N,
               rarity: RARITY.WOOD,
               author: "pizza wa",
               name: "Panic"
           }, {
               id: 105,
               day: IMAGES.SKIN80D,
               night: IMAGES.SKIN80N,
               dayHand: IMAGES.HAND_SKIN80D,
               nightHand: IMAGES.HAND_SKIN80N,
               rarity: RARITY.WOOD,
               author: "pizza wa",
               name: "Hypnotic"
           }, {
               id: 106,
               day: IMAGES.SKIN81D,
               night: IMAGES.SKIN81N,
               dayHand: IMAGES.HAND_SKIN81D,
               nightHand: IMAGES.HAND_SKIN81N,
               rarity: RARITY.WOOD,
               author: "pizza wa",
               name: "Stars in the eyes"
           }, {
               id: 104,
               day: IMAGES.SKIN79D,
               night: IMAGES.SKIN79N,
               dayHand: IMAGES.HAND_SKIN79D,
               nightHand: IMAGES.HAND_SKIN79N,
               rarity: RARITY.STONE,
               author: "pizza wa",
               name: "Scared at night"
           }, {
               id: 20,
               day: IMAGES.SKIN_VAMPIRED,
               night: IMAGES.SKIN_VAMPIREN,
               dayHand: IMAGES.HAND_VAMPIRED,
               nightHand: IMAGES.HAND_VAMPIREN,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Vampire"
           }, {
               id: 21,
               day: IMAGES.SKIN_ZOMBIED,
               night: IMAGES.SKIN_ZOMBIEN,
               dayHand: IMAGES.HAND_ZOMBIED,
               nightHand: IMAGES.HAND_ZOMBIEN,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Zombie"
           }, {
               id: 22,
               day: IMAGES.SKIN_DEVASTD,
               night: IMAGES.SKIN_DEVASTN,
               dayHand: IMAGES.HAND_DEVASTD,
               nightHand: IMAGES.HAND_DEVASTN,
               rarity: RARITY.STONE,
               author: "Pixelbitie",
               name: "Devaster"
           }, {
               id: 116,
               day: IMAGES.SKIN91D,
               night: IMAGES.SKIN91N,
               dayHand: IMAGES.HAND_SKIN91D,
               nightHand: IMAGES.HAND_SKIN91N,
               rarity: RARITY.STONE,
               author: "Fukss",
               name: "Dead Devaster"
           }, {
               id: 27,
               day: IMAGES.SKIN19D,
               night: IMAGES.SKIN19N,
               dayHand: IMAGES.HAND_SKIN19D,
               nightHand: IMAGES.HAND_SKIN19N,
               rarity: RARITY.STONE,
               author: "Winter",
               name: "Cactus"
           }, {
               id: 28,
               day: IMAGES.SKIN20D,
               night: IMAGES.SKIN20N,
               dayHand: IMAGES.HAND_SKIN20D,
               nightHand: IMAGES.HAND_SKIN20N,
               rarity: RARITY.STONE,
               author: "pizza wa",
               name: "Bee"
           }, {
               id: 49,
               day: IMAGES.SKIN24D,
               night: IMAGES.SKIN24N,
               dayHand: IMAGES.HAND_SKIN24D,
               nightHand: IMAGES.HAND_SKIN24N,
               rarity: RARITY.STONE,
               author: "Taco4Life",
               name: "Camo Skin"
           }, {
               id: 58,
               day: IMAGES.SKIN34D,
               night: IMAGES.SKIN34N,
               dayHand: IMAGES.HAND_SKIN34D,
               nightHand: IMAGES.HAND_SKIN34N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Blue Limax Skin"
           }, {
               id: 59,
               day: IMAGES.SKIN33D,
               night: IMAGES.SKIN33N,
               dayHand: IMAGES.HAND_SKIN33D,
               nightHand: IMAGES.HAND_SKIN33N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Red Limax Skin"
           }, {
               id: 94,
               day: IMAGES.SKIN69D,
               night: IMAGES.SKIN69N,
               dayHand: IMAGES.HAND_SKIN69D,
               nightHand: IMAGES.HAND_SKIN69N,
               rarity: RARITY.STONE,
               author: "Taco4Life",
               name: "Mr. Pumpkin"
           }, {
               id: 109,
               day: IMAGES.SKIN84D,
               night: IMAGES.SKIN84N,
               dayHand: IMAGES.HAND_SKIN84D,
               nightHand: IMAGES.HAND_SKIN84N,
               rarity: RARITY.STONE,
               author: "pizza wa",
               name: "Wood"
           }, {
               id: 114,
               day: IMAGES.SKIN89D,
               night: IMAGES.SKIN89N,
               dayHand: IMAGES.HAND_SKIN89D,
               nightHand: IMAGES.HAND_SKIN89N,
               rarity: RARITY.STONE,
               author: "pizza wa",
               name: "Zebra"
           }, {
               id: 120,
               day: IMAGES.SKIN95D,
               night: IMAGES.SKIN95N,
               dayHand: IMAGES.HAND_SKIN95D,
               nightHand: IMAGES.HAND_SKIN95N,
               rarity: RARITY.STONE,
               author: "CrysTal",
               name: "Tiger"
           }, {
               id: 134,
               day: IMAGES.SKIN109D,
               night: IMAGES.SKIN109N,
               dayHand: IMAGES.HAND_SKIN109D,
               nightHand: IMAGES.HAND_SKIN109N,
               rarity: RARITY.STONE,
               author: "Franchestcreator",
               name: "Day or Night"
           }, {
               id: 135,
               day: IMAGES.SKIN110D,
               night: IMAGES.SKIN110N,
               dayHand: IMAGES.HAND_SKIN110D,
               nightHand: IMAGES.HAND_SKIN110N,
               rarity: RARITY.STONE,
               author: "Poinet",
               name: "Square Starver"
           }, {
               id: 136,
               day: IMAGES.SKIN111D,
               night: IMAGES.SKIN111N,
               dayHand: IMAGES.HAND_SKIN111D,
               nightHand: IMAGES.HAND_SKIN111N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Voodoo Doll"
           }, {
               id: 137,
               day: IMAGES.SKIN112D,
               night: IMAGES.SKIN112N,
               dayHand: IMAGES.HAND_SKIN112D,
               nightHand: IMAGES.HAND_SKIN112N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Frankenstein"
           }, {
               id: 138,
               day: IMAGES.SKIN114D,
               night: IMAGES.SKIN114N,
               dayHand: IMAGES.HAND_SKIN114D,
               nightHand: IMAGES.HAND_SKIN114N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Old Mummy"
           }, {
               id: 139,
               day: IMAGES.SKIN115D,
               night: IMAGES.SKIN115N,
               dayHand: IMAGES.HAND_SKIN115D,
               nightHand: IMAGES.HAND_SKIN115N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Werewolf"
           }, {
               id: 140,
               day: IMAGES.SKIN116D,
               night: IMAGES.SKIN116N,
               dayHand: IMAGES.HAND_SKIN116D,
               nightHand: IMAGES.HAND_SKIN116N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Old Cthulhu"
           }, {
               id: 141,
               day: IMAGES.SKIN117D,
               night: IMAGES.SKIN117N,
               dayHand: IMAGES.HAND_SKIN117D,
               nightHand: IMAGES.HAND_SKIN117N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Sea Man"
           }, {
               id: 142,
               day: IMAGES.SKIN118D,
               night: IMAGES.SKIN118N,
               dayHand: IMAGES.HAND_SKIN118D,
               nightHand: IMAGES.HAND_SKIN118N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Old Pumpkin"
           }, {
               id: 148,
               day: IMAGES.SKIN124D,
               night: IMAGES.SKIN124N,
               dayHand: IMAGES.HAND_SKIN124D,
               nightHand: IMAGES.HAND_SKIN124N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Old Snowman"
           }, {
               id: 149,
               day: IMAGES.SKIN125D,
               night: IMAGES.SKIN125N,
               dayHand: IMAGES.HAND_SKIN125D,
               nightHand: IMAGES.HAND_SKIN125N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Old Christmas Tree Man"
           }, {
               id: 150,
               day: IMAGES.SKIN126D,
               night: IMAGES.SKIN126N,
               dayHand: IMAGES.HAND_SKIN126D,
               nightHand: IMAGES.HAND_SKIN126N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Old Mrs Bell"
           }, {
               id: 151,
               day: IMAGES.SKIN127D,
               night: IMAGES.SKIN127N,
               dayHand: IMAGES.HAND_SKIN127D,
               nightHand: IMAGES.HAND_SKIN127N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Old Elfy"
           }, {
               id: 152,
               day: IMAGES.SKIN128D,
               night: IMAGES.SKIN128N,
               dayHand: IMAGES.HAND_SKIN128D,
               nightHand: IMAGES.HAND_SKIN128N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Old Mr Present"
           }, {
               id: 153,
               day: IMAGES.SKIN129D,
               night: IMAGES.SKIN129N,
               dayHand: IMAGES.HAND_SKIN129D,
               nightHand: IMAGES.HAND_SKIN129N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "My Dear Old Deer"
           }, {
               id: 154,
               day: IMAGES.SKIN130D,
               night: IMAGES.SKIN130N,
               dayHand: IMAGES.HAND_SKIN130D,
               nightHand: IMAGES.HAND_SKIN130N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Mr Angel"
           }, {
               id: 155,
               day: IMAGES.SKIN131D,
               night: IMAGES.SKIN131N,
               dayHand: IMAGES.HAND_SKIN131D,
               nightHand: IMAGES.HAND_SKIN131N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Mr Ice Cube"
           }, {
               id: 156,
               day: IMAGES.SKIN132D,
               night: IMAGES.SKIN132N,
               dayHand: IMAGES.HAND_SKIN132D,
               nightHand: IMAGES.HAND_SKIN132N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Mr Snowman"
           }, {
               id: 159,
               day: IMAGES.SKIN135D,
               night: IMAGES.SKIN135N,
               dayHand: IMAGES.HAND_SKIN135D,
               nightHand: IMAGES.HAND_SKIN135N,
               rarity: RARITY.STONE,
               author: "CrysTal",
               name: "Crystal Sky Skin"
           }, {
               id: 167,
               day: IMAGES.SKIN143D,
               night: IMAGES.SKIN143N,
               dayHand: IMAGES.HAND_SKIN143D,
               nightHand: IMAGES.HAND_SKIN143N,
               rarity: RARITY.STONE,
               author: "Franchestcreator",
               name: "Radioactive Starver"
           }, {
               id: 169,
               day: IMAGES.SKIN146D,
               night: IMAGES.SKIN146N,
               dayHand: IMAGES.HAND_SKIN146D,
               nightHand: IMAGES.HAND_SKIN146N,
               rarity: RARITY.STONE,
               author: "TheScaryBlaze",
               name: "Eaten Cookie"
           }, {
               id: 170,
               day: IMAGES.SKIN147D,
               night: IMAGES.SKIN147N,
               dayHand: IMAGES.HAND_SKIN147D,
               nightHand: IMAGES.HAND_SKIN147N,
               rarity: RARITY.STONE,
               author: "aloner",
               name: "Blob Thing"
           }, {
               id: 172,
               day: IMAGES.SKIN149D,
               night: IMAGES.SKIN149N,
               dayHand: IMAGES.HAND_SKIN149D,
               nightHand: IMAGES.HAND_SKIN149N,
               rarity: RARITY.STONE,
               author: "aloner",
               name: "Machine Mask"
           }, {
               id: 29,
               day: IMAGES.SKIN2D,
               night: IMAGES.SKIN2N,
               dayHand: IMAGES.HAND_SKIN2D,
               nightHand: IMAGES.HAND_SKIN2N,
               rarity: RARITY.GOLD,
               author: "Pixelbitie",
               name: "Lollipop 1"
           }, {
               id: 30,
               day: IMAGES.SKIN3D,
               night: IMAGES.SKIN3N,
               dayHand: IMAGES.HAND_SKIN3D,
               nightHand: IMAGES.HAND_SKIN3N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Lollipop 2"
           }, {
               id: 31,
               day: IMAGES.SKIN4D,
               night: IMAGES.SKIN4N,
               dayHand: IMAGES.HAND_SKIN4D,
               nightHand: IMAGES.HAND_SKIN4N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Lollipop 3"
           }, {
               id: 32,
               day: IMAGES.SKIN5D,
               night: IMAGES.SKIN5N,
               dayHand: IMAGES.HAND_SKIN5D,
               nightHand: IMAGES.HAND_SKIN5N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Lollipop 4"
           }, {
               id: 33,
               day: IMAGES.SKIN8D,
               night: IMAGES.SKIN8N,
               dayHand: IMAGES.HAND_SKIN8D,
               nightHand: IMAGES.HAND_SKIN8N,
               rarity: RARITY.GOLD,
               author: "Sushui",
               name: "Yellow Bird"
           }, {
               id: 34,
               day: IMAGES.SKIN9D,
               night: IMAGES.SKIN9N,
               dayHand: IMAGES.HAND_SKIN9D,
               nightHand: IMAGES.HAND_SKIN9N,
               rarity: RARITY.GOLD,
               author: "Sushui",
               name: "Red Bird"
           }, {
               id: 35,
               day: IMAGES.SKIN10D,
               night: IMAGES.SKIN10N,
               dayHand: IMAGES.HAND_SKIN10D,
               nightHand: IMAGES.HAND_SKIN10N,
               rarity: RARITY.GOLD,
               author: "Sushui",
               name: "Blue Bird"
           }, {
               id: 37,
               day: IMAGES.SKIN17D,
               night: IMAGES.SKIN17N,
               dayHand: IMAGES.HAND_SKIN17D,
               nightHand: IMAGES.HAND_SKIN17N,
               rarity: RARITY.GOLD,
               author: "Winter",
               name: "Owl"
           }, {
               id: 52,
               day: IMAGES.SKIN27D,
               night: IMAGES.SKIN27N,
               dayHand: IMAGES.HAND_SKIN27D,
               nightHand: IMAGES.HAND_SKIN27N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Nemo"
           }, {
               id: 53,
               day: IMAGES.SKIN28D,
               night: IMAGES.SKIN28N,
               dayHand: IMAGES.HAND_SKIN28D,
               nightHand: IMAGES.HAND_SKIN28N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Mr. Bread"
           }, {
               id: 74,
               day: IMAGES.SKIN49D,
               night: IMAGES.SKIN49N,
               dayHand: IMAGES.HAND_SKIN49D,
               nightHand: IMAGES.HAND_SKIN49N,
               rarity: RARITY.GOLD,
               author: "Communist & Taco4Life",
               name: "Mr. Bread 2"
           }, {
               id: 75,
               day: IMAGES.SKIN50D,
               night: IMAGES.SKIN50N,
               dayHand: IMAGES.HAND_SKIN50D,
               nightHand: IMAGES.HAND_SKIN50N,
               rarity: RARITY.GOLD,
               author: "Communist & Taco4Life",
               name: "Mr. Bread 3"
           }, {
               id: 60,
               day: IMAGES.SKIN35D,
               night: IMAGES.SKIN35N,
               dayHand: IMAGES.HAND_SKIN35D,
               nightHand: IMAGES.HAND_SKIN35N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Red Berry"
           }, {
               id: 61,
               day: IMAGES.SKIN36D,
               night: IMAGES.SKIN36N,
               dayHand: IMAGES.HAND_SKIN36D,
               nightHand: IMAGES.HAND_SKIN36N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Old Berry"
           }, {
               id: 70,
               day: IMAGES.SKIN45D,
               night: IMAGES.SKIN45N,
               dayHand: IMAGES.HAND_SKIN45D,
               nightHand: IMAGES.HAND_SKIN45N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Cake"
           }, {
               id: 71,
               day: IMAGES.SKIN46D,
               night: IMAGES.SKIN46N,
               dayHand: IMAGES.HAND_SKIN46D,
               nightHand: IMAGES.HAND_SKIN46N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Christmas Cake"
           }, {
               id: 77,
               day: IMAGES.SKIN52D,
               night: IMAGES.SKIN52N,
               dayHand: IMAGES.HAND_SKIN52D,
               nightHand: IMAGES.HAND_SKIN52N,
               rarity: RARITY.GOLD,
               author: "Pancakez",
               name: "Mr. Pancake"
           }, {
               id: 87,
               day: IMAGES.SKIN62D,
               night: IMAGES.SKIN62N,
               dayHand: IMAGES.HAND_SKIN62D,
               nightHand: IMAGES.HAND_SKIN62N,
               rarity: RARITY.GOLD,
               author: "Taco4Life",
               name: "Mr. Taco"
           }, {
               id: 78,
               day: IMAGES.SKIN53D,
               night: IMAGES.SKIN53N,
               dayHand: IMAGES.HAND_SKIN53D,
               nightHand: IMAGES.HAND_SKIN53N,
               rarity: RARITY.GOLD,
               author: "Taco4Life",
               name: "Mr. Bottle"
           }, {
               id: 79,
               day: IMAGES.SKIN54D,
               night: IMAGES.SKIN54N,
               dayHand: IMAGES.HAND_SKIN54D,
               nightHand: IMAGES.HAND_SKIN54N,
               rarity: RARITY.GOLD,
               author: "Taco4Life",
               name: "Mr. Bottle 2"
           }, {
               id: 97,
               day: IMAGES.SKIN71D,
               night: IMAGES.SKIN71N,
               dayHand: IMAGES.HAND_SKIN71D,
               nightHand: IMAGES.HAND_SKIN71N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Pink Rabbit"
           }, {
               id: 102,
               day: IMAGES.SKIN77D,
               night: IMAGES.SKIN77N,
               dayHand: IMAGES.HAND_SKIN77D,
               nightHand: IMAGES.HAND_SKIN77N,
               rarity: RARITY.GOLD,
               author: "pizza wa",
               name: "Marshmallow"
           }, {
               id: 107,
               day: IMAGES.SKIN82D,
               night: IMAGES.SKIN82N,
               dayHand: IMAGES.HAND_SKIN82D,
               nightHand: IMAGES.HAND_SKIN82N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Fox"
           }, {
               id: 132,
               day: IMAGES.SKIN107D,
               night: IMAGES.SKIN107N,
               dayHand: IMAGES.HAND_SKIN107D,
               nightHand: IMAGES.HAND_SKIN107N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Raccoon"
           }, {
               id: 111,
               day: IMAGES.SKIN86D,
               night: IMAGES.SKIN86N,
               dayHand: IMAGES.HAND_SKIN86D,
               nightHand: IMAGES.HAND_SKIN86N,
               rarity: RARITY.GOLD,
               author: "pizza wa",
               name: "Cloud"
           }, {
               id: 113,
               day: IMAGES.SKIN88D,
               night: IMAGES.SKIN88N,
               dayHand: IMAGES.HAND_SKIN88D,
               nightHand: IMAGES.HAND_SKIN88N,
               rarity: RARITY.GOLD,
               author: "pizza wa",
               name: "Moon"
           }, {
               id: 117,
               day: IMAGES.SKIN92D,
               night: IMAGES.SKIN92N,
               dayHand: IMAGES.HAND_SKIN92D,
               nightHand: IMAGES.HAND_SKIN92N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Mr. Panda"
           }, {
               id: 118,
               day: IMAGES.SKIN93D,
               night: IMAGES.SKIN93N,
               dayHand: IMAGES.HAND_SKIN93D,
               nightHand: IMAGES.HAND_SKIN93N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Mr. Strawberry"
           }, {
               id: 119,
               day: IMAGES.SKIN94D,
               night: IMAGES.SKIN94N,
               dayHand: IMAGES.HAND_SKIN94D,
               nightHand: IMAGES.HAND_SKIN94N,
               rarity: RARITY.GOLD,
               author: "eogito & Sushuui",
               name: "Mummy"
           }, {
               id: 122,
               day: IMAGES.SKIN97D,
               night: IMAGES.SKIN97N,
               dayHand: IMAGES.HAND_SKIN97D,
               nightHand: IMAGES.HAND_SKIN97N,
               rarity: RARITY.GOLD,
               author: "Taco4Life",
               name: "Dino"
           }, {
               id: 127,
               day: IMAGES.SKIN102D,
               night: IMAGES.SKIN102N,
               dayHand: IMAGES.HAND_SKIN102D,
               nightHand: IMAGES.HAND_SKIN102N,
               rarity: RARITY.GOLD,
               author: "MADBalgouthi",
               name: "Mr. Koala"
           }, {
               id: 160,
               day: IMAGES.SKIN136D,
               night: IMAGES.SKIN136N,
               dayHand: IMAGES.HAND_SKIN136D,
               nightHand: IMAGES.HAND_SKIN136N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Bottle Protection"
           }, {
               id: 162,
               day: IMAGES.SKIN138D,
               night: IMAGES.SKIN138N,
               dayHand: IMAGES.HAND_SKIN138D,
               nightHand: IMAGES.HAND_SKIN138N,
               rarity: RARITY.GOLD,
               author: "CrysTal",
               name: "Leaf Man"
           }, {
               id: 166,
               day: IMAGES.SKIN142D,
               night: IMAGES.SKIN142N,
               dayHand: IMAGES.HAND_SKIN142D,
               nightHand: IMAGES.HAND_SKIN142N,
               rarity: RARITY.GOLD,
               author: "pizza wa",
               name: "Bubble"
           }, {
               id: 174,
               day: IMAGES.SKIN145D,
               night: IMAGES.SKIN145N,
               dayHand: IMAGES.HAND_SKIN145D,
               nightHand: IMAGES.HAND_SKIN145N,
               rarity: RARITY.GOLD,
               author: "upfiz",
               name: "Potato"
           }, {
               id: 171,
               day: IMAGES.SKIN148D,
               night: IMAGES.SKIN148N,
               dayHand: IMAGES.HAND_SKIN148D,
               nightHand: IMAGES.HAND_SKIN148N,
               rarity: RARITY.GOLD,
               author: "aloner",
               name: "Axolotl"
           }, {
               id: 25,
               day: IMAGES.SKIN6D,
               night: IMAGES.SKIN6N,
               dayHand: IMAGES.HAND_SKIN6D,
               nightHand: IMAGES.HAND_SKIN0N,
               rarity: RARITY.DIAMOND,
               author: "Pixelbitie",
               name: "Test Dummy"
           }, {
               id: 41,
               day: IMAGES.SKIN_STARD,
               night: IMAGES.SKIN_STARN,
               dayHand: IMAGES.HAND_STARD,
               nightHand: IMAGES.HAND_STARN,
               rarity: RARITY.DIAMOND,
               author: "pizza wa",
               name: "Star-ver"
           }, {
               id: 43,
               day: IMAGES.SKIN11D,
               night: IMAGES.SKIN11N,
               dayHand: IMAGES.HAND_SKIN11D,
               nightHand: IMAGES.HAND_SKIN11N,
               rarity: RARITY.DIAMOND,
               author: "Communist",
               name: "Starver Chest"
           }, {
               id: 88,
               day: IMAGES.SKIN63D,
               night: IMAGES.SKIN63N,
               dayHand: IMAGES.HAND_SKIN63D,
               nightHand: IMAGES.HAND_SKIN63N,
               rarity: RARITY.DIAMOND,
               author: "Communist",
               name: "Starver Workbench"
           }, {
               id: 121,
               day: IMAGES.SKIN96D,
               night: IMAGES.SKIN96N,
               dayHand: IMAGES.HAND_SKIN96D,
               nightHand: IMAGES.HAND_SKIN96N,
               rarity: RARITY.DIAMOND,
               author: "MADBalgouthi",
               name: "Fish"
           }, {
               id: 39,
               day: IMAGES.SKIN22D,
               night: IMAGES.SKIN22N,
               dayHand: IMAGES.HAND_SKIN22D,
               nightHand: IMAGES.HAND_SKIN22N,
               rarity: RARITY.DIAMOND,
               author: "Negligent4Dia",
               name: "Crab"
           }, {
               id: 40,
               day: IMAGES.SKIN23D,
               night: IMAGES.SKIN23N,
               dayHand: IMAGES.HAND_SKIN23D,
               nightHand: IMAGES.HAND_SKIN23N,
               rarity: RARITY.DIAMOND,
               author: "Negligent4Dia",
               name: "Piranha"
           }, {
               id: 36,
               day: IMAGES.SKIN16D,
               night: IMAGES.SKIN16N,
               dayHand: IMAGES.HAND_SKIN16D,
               nightHand: IMAGES.HAND_SKIN16N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Winter Fox"
           }, {
               id: 69,
               day: IMAGES.SKIN44D,
               night: IMAGES.SKIN44N,
               dayHand: IMAGES.HAND_SKIN44D,
               nightHand: IMAGES.HAND_SKIN44N,
               rarity: RARITY.DIAMOND,
               author: "Zed",
               name: "Baby Foxy"
           }, {
               id: 51,
               day: IMAGES.SKIN26D,
               night: IMAGES.SKIN26N,
               dayHand: IMAGES.HAND_SKIN26D,
               nightHand: IMAGES.HAND_SKIN26N,
               rarity: RARITY.DIAMOND,
               author: "HOWI",
               name: "Winter Bear"
           }, {
               id: 133,
               day: IMAGES.SKIN108D,
               night: IMAGES.SKIN108N,
               dayHand: IMAGES.HAND_SKIN108D,
               nightHand: IMAGES.HAND_SKIN108N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Hawk"
           }, {
               id: 55,
               day: IMAGES.SKIN30D,
               night: IMAGES.SKIN30N,
               dayHand: IMAGES.HAND_SKIN30D,
               nightHand: IMAGES.HAND_SKIN30N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Nice Little Yuki"
           }, {
               id: 68,
               day: IMAGES.SKIN43D,
               night: IMAGES.SKIN43N,
               dayHand: IMAGES.HAND_SKIN43D,
               nightHand: IMAGES.HAND_SKIN43N,
               rarity: RARITY.DIAMOND,
               author: "Taco4Life",
               name: "Baby Yuki"
           }, {
               id: 62,
               day: IMAGES.SKIN37D,
               night: IMAGES.SKIN37N,
               dayHand: IMAGES.HAND_SKIN37D,
               nightHand: IMAGES.HAND_SKIN37N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Mr. Carrot"
           }, {
               id: 56,
               day: IMAGES.SKIN31D,
               night: IMAGES.SKIN31N,
               dayHand: IMAGES.HAND_SKIN31D,
               nightHand: IMAGES.HAND_SKIN31N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Bat Limax"
           }, {
               id: 72,
               day: IMAGES.SKIN47D,
               night: IMAGES.SKIN47N,
               dayHand: IMAGES.HAND_SKIN47D,
               nightHand: IMAGES.HAND_SKIN47N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Mr. Crate"
           }, {
               id: 73,
               day: IMAGES.SKIN48D,
               night: IMAGES.SKIN48N,
               dayHand: IMAGES.HAND_SKIN48D,
               nightHand: IMAGES.HAND_SKIN48N,
               rarity: RARITY.DIAMOND,
               author: "Taco4Life & eogito",
               name: "Mr. Spider"
           }, {
               id: 93,
               day: IMAGES.SKIN68D,
               night: IMAGES.SKIN68N,
               dayHand: IMAGES.HAND_SKIN68D,
               nightHand: IMAGES.HAND_SKIN68N,
               rarity: RARITY.DIAMOND,
               author: "Anyone want to play?",
               name: "Mr. Spider 2"
           }, {
               id: 82,
               day: IMAGES.SKIN57D,
               night: IMAGES.SKIN57N,
               dayHand: IMAGES.HAND_SKIN57D,
               nightHand: IMAGES.HAND_SKIN57N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Mr. Blue Starfish"
           }, {
               id: 83,
               day: IMAGES.SKIN58D,
               night: IMAGES.SKIN58N,
               dayHand: IMAGES.HAND_SKIN58D,
               nightHand: IMAGES.HAND_SKIN58N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Mr. Orange Starfish"
           }, {
               id: 84,
               day: IMAGES.SKIN59D,
               night: IMAGES.SKIN59N,
               dayHand: IMAGES.HAND_SKIN59D,
               nightHand: IMAGES.HAND_SKIN59N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Mr. Pink Starfish"
           }, {
               id: 85,
               day: IMAGES.SKIN60D,
               night: IMAGES.SKIN60N,
               dayHand: IMAGES.HAND_SKIN60D,
               nightHand: IMAGES.HAND_SKIN60N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Mr. ShellMauve"
           }, {
               id: 86,
               day: IMAGES.SKIN61D,
               night: IMAGES.SKIN61N,
               dayHand: IMAGES.HAND_SKIN61D,
               nightHand: IMAGES.HAND_SKIN61N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Mr. Shell Bead"
           }, {
               id: 96,
               day: IMAGES.SKIN72D,
               night: IMAGES.SKIN72N,
               dayHand: IMAGES.HAND_SKIN72D,
               nightHand: IMAGES.HAND_SKIN72N,
               rarity: RARITY.DIAMOND,
               author: "Fukss",
               name: "Angry Crab"
           }, {
               id: 98,
               day: IMAGES.SKIN73D,
               night: IMAGES.SKIN73N,
               dayHand: IMAGES.HAND_SKIN73D,
               nightHand: IMAGES.HAND_SKIN73N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Penguin"
           }, {
               id: 126,
               day: IMAGES.SKIN101D,
               night: IMAGES.SKIN101N,
               dayHand: IMAGES.HAND_SKIN101D,
               nightHand: IMAGES.HAND_SKIN101N,
               rarity: RARITY.DIAMOND,
               author: "Anyone want to play?",
               name: "Mr. Boar"
           }, {
               id: 145,
               day: IMAGES.SKIN121D,
               night: IMAGES.SKIN121N,
               dayHand: IMAGES.HAND_SKIN121D,
               nightHand: IMAGES.HAND_SKIN121N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "I saw you"
           }, {
               id: 146,
               day: IMAGES.SKIN122D,
               night: IMAGES.SKIN122N,
               dayHand: IMAGES.HAND_SKIN122D,
               nightHand: IMAGES.HAND_SKIN122N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "It was funny"
           }, {
               id: 147,
               day: IMAGES.SKIN123D,
               night: IMAGES.SKIN123N,
               dayHand: IMAGES.HAND_SKIN123D,
               nightHand: IMAGES.HAND_SKIN123N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "You can scream"
           }, {
               id: 158,
               day: IMAGES.SKIN134D,
               night: IMAGES.SKIN134N,
               dayHand: IMAGES.HAND_SKIN134D,
               nightHand: IMAGES.HAND_SKIN134N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Mr. Book"
           }, {
               id: 163,
               day: IMAGES.SKIN139D,
               night: IMAGES.SKIN139N,
               dayHand: IMAGES.HAND_SKIN139D,
               nightHand: IMAGES.HAND_SKIN139N,
               rarity: RARITY.DIAMOND,
               author: "Anyone want to play?",
               name: "Mr. Mammoth"
           }, {
               id: 164,
               day: IMAGES.SKIN140D,
               night: IMAGES.SKIN140N,
               dayHand: IMAGES.HAND_SKIN140D,
               nightHand: IMAGES.HAND_SKIN140N,
               rarity: RARITY.DIAMOND,
               author: "SoOw",
               name: "Mr. Mammoth 2"
           }, {
               id: 161,
               day: IMAGES.SKIN137D,
               night: IMAGES.SKIN137N,
               dayHand: IMAGES.HAND_SKIN137D,
               nightHand: IMAGES.HAND_SKIN137N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Nightmare"
           }, {
               id: 168,
               day: IMAGES.SKIN144D,
               night: IMAGES.SKIN144N,
               dayHand: IMAGES.HAND_SKIN144D,
               nightHand: IMAGES.HAND_SKIN144N,
               rarity: RARITY.DIAMOND,
               author: "pizza wa",
               name: "Shiny Crystal"
           }, {
               id: 173,
               day: IMAGES.SKIN150D,
               night: IMAGES.SKIN150N,
               dayHand: IMAGES.HAND_SKIN150D,
               nightHand: IMAGES.HAND_SKIN150N,
               rarity: RARITY.DIAMOND,
               author: "pizza wa",
               name: "Water skin"
           }, {
               id: 42,
               day: IMAGES.SKIN14D,
               night: IMAGES.SKIN14N,
               dayHand: IMAGES.HAND_SKIN14D,
               nightHand: IMAGES.HAND_SKIN14N,
               rarity: RARITY.AMETHYST,
               author: "Winter",
               name: "Will-O'-The-Wisp"
           }, {
               id: 91,
               day: IMAGES.SKIN66D,
               night: IMAGES.SKIN66N,
               dayHand: IMAGES.HAND_SKIN66D,
               nightHand: IMAGES.HAND_SKIN66N,
               rarity: RARITY.AMETHYST,
               author: "ExpertyAnimations",
               name: "Flame"
           }, {
               id: 26,
               day: IMAGES.SKIN15D,
               night: IMAGES.SKIN15N,
               dayHand: IMAGES.HAND_SKIN15D,
               nightHand: IMAGES.HAND_SKIN15N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Be a Tree"
           }, {
               id: 38,
               day: IMAGES.SKIN18D,
               night: IMAGES.SKIN18N,
               dayHand: IMAGES.HAND_SKIN18D,
               nightHand: IMAGES.HAND_SKIN18N,
               rarity: RARITY.AMETHYST,
               author: "Winter",
               name: "Toxic Mutant"
           }, {
               id: 50,
               day: IMAGES.SKIN25D,
               night: IMAGES.SKIN25N,
               dayHand: IMAGES.HAND_SKIN25D,
               nightHand: IMAGES.HAND_SKIN25N,
               rarity: RARITY.AMETHYST,
               author: "Communist",
               name: "Mr. Tomato"
           }, {
               id: 54,
               day: IMAGES.SKIN29D,
               night: IMAGES.SKIN29N,
               dayHand: IMAGES.HAND_SKIN29D,
               nightHand: IMAGES.HAND_SKIN29N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Mr. Mauve, the Lapa"
           }, {
               id: 57,
               day: IMAGES.SKIN32D,
               night: IMAGES.SKIN32N,
               dayHand: IMAGES.HAND_SKIN32D,
               nightHand: IMAGES.HAND_SKIN32N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Golden Fish"
           }, {
               id: 64,
               day: IMAGES.SKIN39D,
               night: IMAGES.SKIN39N,
               dayHand: IMAGES.HAND_SKIN39D,
               nightHand: IMAGES.HAND_SKIN39N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "LapaMauve"
           }, {
               id: 65,
               day: IMAGES.SKIN40D,
               night: IMAGES.SKIN40N,
               dayHand: IMAGES.HAND_SKIN40D,
               nightHand: IMAGES.HAND_SKIN40N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "LapaMauve "
           }, {
               id: 92,
               day: IMAGES.SKIN67D,
               night: IMAGES.SKIN67N,
               dayHand: IMAGES.HAND_SKIN67D,
               nightHand: IMAGES.HAND_SKIN67N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Mr. Burger"
           }, {
               id: 66,
               day: IMAGES.SKIN41D,
               night: IMAGES.SKIN41N,
               dayHand: IMAGES.HAND_SKIN41D,
               nightHand: IMAGES.HAND_SKIN41N,
               rarity: RARITY.AMETHYST,
               author: "pizza wa",
               name: "Tropical Starver"
           }, {
               id: 80,
               day: IMAGES.SKIN55D,
               night: IMAGES.SKIN55N,
               dayHand: IMAGES.HAND_SKIN55D,
               nightHand: IMAGES.HAND_SKIN55N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Mr. ShellPink"
           }, {
               id: 81,
               day: IMAGES.SKIN56D,
               night: IMAGES.SKIN56N,
               dayHand: IMAGES.HAND_SKIN56D,
               nightHand: IMAGES.HAND_SKIN56N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Mr. OranShell"
           }, {
               id: 99,
               day: IMAGES.SKIN74D,
               night: IMAGES.SKIN74N,
               dayHand: IMAGES.HAND_SKIN74D,
               nightHand: IMAGES.HAND_SKIN74N,
               rarity: RARITY.AMETHYST,
               author: "eogito",
               name: "Pepe"
           }, {
               id: 100,
               day: IMAGES.SKIN75D,
               night: IMAGES.SKIN75N,
               dayHand: IMAGES.HAND_SKIN75D,
               nightHand: IMAGES.HAND_SKIN75N,
               rarity: RARITY.AMETHYST,
               author: "fatant",
               name: "Mr. Ant"
           }, {
               id: 115,
               day: IMAGES.SKIN90D,
               night: IMAGES.SKIN90N,
               dayHand: IMAGES.HAND_SKIN90D,
               nightHand: IMAGES.HAND_SKIN90N,
               rarity: RARITY.AMETHYST,
               author: "MADBalgouthi",
               name: "Mr. Watermelon"
           }, {
               id: 101,
               day: IMAGES.SKIN76D,
               night: IMAGES.SKIN76N,
               dayHand: IMAGES.HAND_SKIN76D,
               nightHand: IMAGES.HAND_SKIN76N,
               rarity: RARITY.AMETHYST,
               author: "Taco4Life",
               name: "Mr. Thornbush"
           }, {
               id: 131,
               day: IMAGES.SKIN106D,
               night: IMAGES.SKIN106N,
               dayHand: IMAGES.HAND_SKIN106D,
               nightHand: IMAGES.HAND_SKIN106N,
               rarity: RARITY.AMETHYST,
               author: "Taco4Life",
               name: "Cthulhu"
           }, {
               id: 143,
               day: IMAGES.SKIN119D,
               night: IMAGES.SKIN119N,
               dayHand: IMAGES.HAND_SKIN119D,
               nightHand: IMAGES.HAND_SKIN119N,
               rarity: RARITY.AMETHYST,
               author: "eogito",
               name: "Mr. Cactus"
           }, {
               id: 144,
               day: IMAGES.SKIN120D,
               night: IMAGES.SKIN120N,
               dayHand: IMAGES.HAND_SKIN120D,
               nightHand: IMAGES.HAND_SKIN120N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Momo"
           }, {
               id: 95,
               day: IMAGES.SKIN70D,
               night: IMAGES.SKIN70N,
               dayHand: IMAGES.HAND_SKIN70D,
               nightHand: IMAGES.HAND_SKIN70N,
               rarity: RARITY.REIDITE,
               author: "Taco4Life",
               name: "Mr. Garlic"
           }, {
               id: 76,
               day: IMAGES.SKIN51D,
               night: IMAGES.SKIN51N,
               dayHand: IMAGES.HAND_SKIN51D,
               nightHand: IMAGES.HAND_SKIN51N,
               rarity: RARITY.REIDITE,
               author: "Winter",
               name: "Robot Dragon"
           }, {
               id: 44,
               day: IMAGES.SKIN1D,
               night: IMAGES.SKIN1N,
               dayHand: IMAGES.HAND_SKIN1D,
               nightHand: IMAGES.HAND_SKIN1N,
               rarity: RARITY.REIDITE,
               author: "Winter",
               name: "Lava Dragon Version 1"
           }, {
               id: 90,
               day: IMAGES.SKIN65D,
               night: IMAGES.SKIN65N,
               dayHand: IMAGES.HAND_SKIN65D,
               nightHand: IMAGES.HAND_SKIN65N,
               rarity: RARITY.REIDITE,
               author: "ExpertyAnimations",
               name: "Lava Dragon Version 2"
           }, {
               id: 124,
               day: IMAGES.SKIN99D,
               night: IMAGES.SKIN99N,
               dayHand: IMAGES.HAND_SKIN99D,
               nightHand: IMAGES.HAND_SKIN99N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Lava Dragon Version 3"
           }, {
               id: 45,
               day: IMAGES.SKIN12D,
               night: IMAGES.SKIN12N,
               dayHand: IMAGES.HAND_SKIN12D,
               nightHand: IMAGES.HAND_SKIN12N,
               rarity: RARITY.REIDITE,
               author: "Sushui",
               name: "Ice Dragon Version 1"
           }, {
               id: 46,
               day: IMAGES.SKIN13D,
               night: IMAGES.SKIN13N,
               dayHand: IMAGES.HAND_SKIN13D,
               nightHand: IMAGES.HAND_SKIN13N,
               rarity: RARITY.REIDITE,
               author: "Winter",
               name: "Ice Dragon Version 2"
           }, {
               id: 108,
               day: IMAGES.SKIN83D,
               night: IMAGES.SKIN83N,
               dayHand: IMAGES.HAND_SKIN83D,
               nightHand: IMAGES.HAND_SKIN83N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Ice Dragon Version 3"
           }, {
               id: 123,
               day: IMAGES.SKIN98D,
               night: IMAGES.SKIN98N,
               dayHand: IMAGES.HAND_SKIN98D,
               nightHand: IMAGES.HAND_SKIN98N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Baby Dragon Version 1"
           }, {
               id: 128,
               day: IMAGES.SKIN103D,
               night: IMAGES.SKIN103N,
               dayHand: IMAGES.HAND_SKIN103D,
               nightHand: IMAGES.HAND_SKIN103N,
               rarity: RARITY.REIDITE,
               author: "MADBalgouthi",
               name: "Baby Dragon Version 2"
           }, {
               id: 125,
               day: IMAGES.SKIN100D,
               night: IMAGES.SKIN100N,
               dayHand: IMAGES.HAND_SKIN100D,
               nightHand: IMAGES.HAND_SKIN100N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Baby Lava"
           }, {
               id: 47,
               day: IMAGES.SKIN21D,
               night: IMAGES.SKIN21N,
               dayHand: IMAGES.HAND_SKIN21D,
               nightHand: IMAGES.HAND_SKIN21N,
               rarity: RARITY.REIDITE,
               author: "Taco4Life",
               name: "Kraken"
           }, {
               id: 129,
               day: IMAGES.SKIN104D,
               night: IMAGES.SKIN104N,
               dayHand: IMAGES.HAND_SKIN104D,
               nightHand: IMAGES.HAND_SKIN104N,
               rarity: RARITY.REIDITE,
               author: "Taco4Life",
               name: "Sandworm"
           }, {
               id: 63,
               day: IMAGES.SKIN38D,
               night: IMAGES.SKIN38N,
               dayHand: IMAGES.HAND_SKIN38D,
               nightHand: IMAGES.HAND_SKIN38N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Mr. Golden Bread"
           }, {
               id: 67,
               day: IMAGES.SKIN42D,
               night: IMAGES.SKIN42N,
               dayHand: IMAGES.HAND_SKIN42D,
               nightHand: IMAGES.HAND_SKIN42N,
               rarity: RARITY.REIDITE,
               author: "ForgottenHeroe",
               name: "Starver Ores"
           }, {
               id: 130,
               day: IMAGES.SKIN105D,
               night: IMAGES.SKIN105N,
               dayHand: IMAGES.HAND_SKIN105D,
               nightHand: IMAGES.HAND_SKIN105N,
               rarity: RARITY.REIDITE,
               author: "Taco4Life",
               name: "Poo"
           }, {
               id: 89,
               day: IMAGES.SKIN64D,
               night: IMAGES.SKIN64N,
               dayHand: IMAGES.HAND_SKIN64D,
               nightHand: IMAGES.HAND_SKIN64N,
               rarity: RARITY.REIDITE,
               author: "Poinet",
               name: "Volcano Starver"
           }, {
               id: 112,
               day: IMAGES.SKIN87D,
               night: IMAGES.SKIN87N,
               dayHand: IMAGES.HAND_SKIN87D,
               nightHand: IMAGES.HAND_SKIN87N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Lava Starver"
           }, {
               id: 48,
               day: IMAGES.SKIN_ROBOTD,
               night: IMAGES.SKIN_ROBOTN,
               dayHand: IMAGES.HAND_ROBOTD,
               nightHand: IMAGES.HAND_ROBOTN,
               rarity: RARITY.SPECIAL,
               author: "eogito",
               name: "Robot"
           }, {
               id: 110,
               day: IMAGES.SKIN85D,
               night: IMAGES.SKIN85N,
               dayHand: IMAGES.HAND_SKIN85D,
               nightHand: IMAGES.HAND_SKIN85N,
               rarity: RARITY.SPECIAL,
               author: "pizza wa",
               name: "Blue Butterfly"
           }, {
               id: 157,
               day: IMAGES.SKIN133D,
               night: IMAGES.SKIN133N,
               dayHand: IMAGES.HAND_SKIN133D,
               nightHand: IMAGES.HAND_SKIN133N,
               rarity: RARITY.SPECIAL,
               author: "eogito",
               name: "Yrifox"
           }, {
               id: 165,
               day: IMAGES.SKIN141D,
               night: IMAGES.SKIN141N,
               dayHand: IMAGES.HAND_SKIN141D,
               nightHand: IMAGES.HAND_SKIN141N,
               rarity: RARITY.SPECIAL,
               author: "OmarJr13",
               name: "Blob Skin"
           }],
           BAG: [{
               id: 0,
               day: IMAGES.BAGD,
               night: IMAGES.BAGN,
               rarity: RARITY.FREE,
               author: "Starve.io",
               name: "Bag 1"
           }, {
               id: 1,
               day: IMAGES.BAG0D,
               night: IMAGES.BAG0N,
               rarity: RARITY.FREE,
               author: "Starve.io",
               name: "Old Bag"
           }, {
               id: 2,
               day: IMAGES.BAG4D,
               night: IMAGES.BAG4N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Bag 2"
           }, {
               id: 3,
               day: IMAGES.BAG5D,
               night: IMAGES.BAG5N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Bag 3"
           }, {
               id: 4,
               day: IMAGES.BAG6D,
               night: IMAGES.BAG6N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Bag 4"
           }, {
               id: 5,
               day: IMAGES.BAG7D,
               night: IMAGES.BAG7N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Bag 5"
           }, {
               id: 11,
               day: IMAGES.BAG23D,
               night: IMAGES.BAG23N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Wood Pickaxe Bag"
           }, {
               id: 19,
               day: IMAGES.BAG16D,
               night: IMAGES.BAG16N,
               rarity: RARITY.WOOD,
               author: "Starve.io ",
               name: "Wood Carrier"
           }, {
               id: 37,
               day: IMAGES.BAG36D,
               night: IMAGES.BAG36N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Bag 6"
           }, {
               id: 39,
               day: IMAGES.BAG38D,
               night: IMAGES.BAG38N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Bag with Wooden Swords"
           }, {
               id: 44,
               day: IMAGES.BAG43D,
               night: IMAGES.BAG43N,
               rarity: RARITY.WOOD,
               author: "Communist",
               name: "Big Bag"
           }, {
               id: 7,
               day: IMAGES.BAG14D,
               night: IMAGES.BAG14N,
               rarity: RARITY.STONE,
               author: "Communist",
               name: "Bag 6"
           }, {
               id: 8,
               day: IMAGES.BAG_EASTERD,
               night: IMAGES.BAG_EASTERN,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Easter Bag"
           }, {
               id: 9,
               day: IMAGES.BAG_STARD,
               night: IMAGES.BAG_STARN,
               rarity: RARITY.STONE,
               author: "pizza wa",
               name: "Star Bag"
           }, {
               id: 10,
               day: IMAGES.BAG9D,
               night: IMAGES.BAG9N,
               rarity: RARITY.STONE,
               author: "eogito",
               name: "Winter Bag"
           }, {
               id: 20,
               day: IMAGES.BAG17D,
               night: IMAGES.BAG17N,
               rarity: RARITY.STONE,
               author: "Starve.io ",
               name: "Stone Carrier"
           }, {
               id: 24,
               day: IMAGES.BAG24D,
               night: IMAGES.BAG24N,
               rarity: RARITY.STONE,
               author: "eogito",
               name: "Stone Pickaxe Bag"
           }, {
               id: 6,
               day: IMAGES.BAG13D,
               night: IMAGES.BAG13N,
               rarity: RARITY.STONE,
               author: "Communist",
               name: "Bag Camouflage"
           }, {
               id: 38,
               day: IMAGES.BAG37D,
               night: IMAGES.BAG37N,
               rarity: RARITY.STONE,
               author: "eogito",
               name: "Bag with Stone Swords"
           }, {
               id: 54,
               day: IMAGES.BAG53D,
               night: IMAGES.BAG53N,
               rarity: RARITY.STONE,
               author: "eogito",
               name: "Cow Bag"
           }, {
               id: 59,
               day: IMAGES.BAG58D,
               night: IMAGES.BAG58N,
               rarity: RARITY.STONE,
               author: "CrysTal",
               name: "Starver Bag"
           }, {
               id: 62,
               day: IMAGES.BAG61D,
               night: IMAGES.BAG61N,
               rarity: RARITY.STONE,
               author: "CrysTal",
               name: "Crystal Sky Bag"
           }, {
               id: 13,
               day: IMAGES.BAG10D,
               night: IMAGES.BAG10N,
               rarity: RARITY.GOLD,
               author: "pizza wa",
               name: "Honey Pot"
           }, {
               id: 21,
               day: IMAGES.BAG18D,
               night: IMAGES.BAG18N,
               rarity: RARITY.GOLD,
               author: "Starve.io ",
               name: "Gold Carrier"
           }, {
               id: 30,
               day: IMAGES.BAG25D,
               night: IMAGES.BAG25N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Gold Pickaxe Bag"
           }, {
               id: 29,
               day: IMAGES.BAG31D,
               night: IMAGES.BAG31N,
               rarity: RARITY.GOLD,
               author: "Ariel",
               name: "Mr and Mrs Bakers"
           }, {
               id: 41,
               day: IMAGES.BAG40D,
               night: IMAGES.BAG40N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Bag with Golden Swords"
           }, {
               id: 47,
               day: IMAGES.BAG46D,
               night: IMAGES.BAG46N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Explorer Bag"
           }, {
               id: 51,
               day: IMAGES.BAG50D,
               night: IMAGES.BAG50N,
               rarity: RARITY.GOLD,
               author: "pizza wa",
               name: "Bamboo Bag"
           }, {
               id: 53,
               day: IMAGES.BAG52D,
               night: IMAGES.BAG52N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Mummy Bag"
           }, {
               id: 58,
               day: IMAGES.BAG57D,
               night: IMAGES.BAG57N,
               rarity: RARITY.GOLD,
               author: "MADBalgouthi",
               name: "Watermelon Bag"
           }, {
               id: 60,
               day: IMAGES.BAG59D,
               night: IMAGES.BAG60N,
               rarity: RARITY.GOLD,
               author: "Taco4Life",
               name: "Garlic Bag"
           }, {
               id: 61,
               day: IMAGES.BAG60D,
               night: IMAGES.BAG59N,
               rarity: RARITY.GOLD,
               author: "Taco4Life",
               name: "Pumpkin Bag"
           }, {
               id: 64,
               day: IMAGES.BAG63D,
               night: IMAGES.BAG63N,
               rarity: RARITY.GOLD,
               author: "upfiz",
               name: "Oil Barel bag"
           }, {
               id: 67,
               day: IMAGES.BAG68D,
               night: IMAGES.BAG68N,
               rarity: RARITY.GOLD,
               author: "pizza wa",
               name: "Tree Bag"
           }, {
               id: 14,
               day: IMAGES.BAG1D,
               night: IMAGES.BAG1N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "a Rabbit in my Bag"
           }, {
               id: 15,
               day: IMAGES.BAG2D,
               night: IMAGES.BAG2N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Bird's nest"
           }, {
               id: 16,
               day: IMAGES.BAG3D,
               night: IMAGES.BAG3N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "a Fish on your Back"
           }, {
               id: 17,
               day: IMAGES.BAG8D,
               night: IMAGES.BAG8N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "a Squirrel in my Bag"
           }, {
               id: 22,
               day: IMAGES.BAG19D,
               night: IMAGES.BAG19N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io ",
               name: "Diamond Carrier"
           }, {
               id: 12,
               day: IMAGES.BAG22D,
               night: IMAGES.BAG22N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Resources Bag"
           }, {
               id: 32,
               day: IMAGES.BAG26D,
               night: IMAGES.BAG26N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Diamond Pickaxe Bag"
           }, {
               id: 40,
               day: IMAGES.BAG39D,
               night: IMAGES.BAG39N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Bag with Diamond Swords"
           }, {
               id: 45,
               day: IMAGES.BAG44D,
               night: IMAGES.BAG44N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "My Cake Bag"
           }, {
               id: 46,
               day: IMAGES.BAG45D,
               night: IMAGES.BAG45N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "My Christmas Cake Bag"
           }, {
               id: 52,
               day: IMAGES.BAG51D,
               night: IMAGES.BAG51N,
               rarity: RARITY.DIAMOND,
               author: "MADBalgouthi",
               name: "Fish Bag"
           }, {
               id: 65,
               day: IMAGES.BAG64D,
               night: IMAGES.BAG64N,
               rarity: RARITY.DIAMOND,
               author: "pizza wa",
               name: "Cloud Bag"
           }, {
               id: 68,
               day: IMAGES.BAG66D,
               night: IMAGES.BAG66N,
               rarity: RARITY.DIAMOND,
               author: "pizza wa",
               name: "Bee Bag"
           }, {
               id: 48,
               day: IMAGES.BAG47D,
               night: IMAGES.BAG47N,
               rarity: RARITY.AMETHYST,
               author: "fatant",
               name: "Natural Bag"
           }, {
               id: 23,
               day: IMAGES.BAG20D,
               night: IMAGES.BAG20N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io ",
               name: "Amethyst Carrier"
           }, {
               id: 25,
               day: IMAGES.BAG27D,
               night: IMAGES.BAG27N,
               rarity: RARITY.AMETHYST,
               author: "eogito",
               name: "Amethyst Pickaxe Bag"
           }, {
               id: 28,
               day: IMAGES.BAG30D,
               night: IMAGES.BAG30N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Your Baby"
           }, {
               id: 33,
               day: IMAGES.BAG32D,
               night: IMAGES.BAG32N,
               rarity: RARITY.AMETHYST,
               author: "pizza wa",
               name: "Tropical Bag"
           }, {
               id: 43,
               day: IMAGES.BAG42D,
               night: IMAGES.BAG42N,
               rarity: RARITY.AMETHYST,
               author: "eogito",
               name: "Bag with Amethyst Swords"
           }, {
               id: 35,
               day: IMAGES.BAG34D,
               night: IMAGES.BAG34N,
               rarity: RARITY.AMETHYST,
               author: "eogito",
               name: "Ice Bag"
           }, {
               id: 50,
               day: IMAGES.BAG49D,
               night: IMAGES.BAG49N,
               rarity: RARITY.AMETHYST,
               author: "Taco4Life",
               name: "Thornbush Bag"
           }, {
               id: 56,
               day: IMAGES.BAG55D,
               night: IMAGES.BAG55N,
               rarity: RARITY.AMETHYST,
               author: "eogito",
               name: "Autumn Bag"
           }, {
               id: 57,
               day: IMAGES.BAG56D,
               night: IMAGES.BAG56N,
               rarity: RARITY.AMETHYST,
               author: "Taco4Life",
               name: "Dino Egg Bag"
           }, {
               id: 66,
               day: IMAGES.BAG65D,
               night: IMAGES.BAG65N,
               rarity: RARITY.AMETHYST,
               author: "pizza wa",
               name: "Magic Cloud Bag"
           }, {
               id: 69,
               day: IMAGES.BAG67D,
               night: IMAGES.BAG67N,
               rarity: RARITY.AMETHYST,
               author: "pizza wa",
               name: "Chest Bag"
           }, {
               id: 31,
               day: IMAGES.BAG21D,
               night: IMAGES.BAG21N,
               rarity: RARITY.REIDITE,
               author: "Starve.io ",
               name: "Reidite Carrier"
           }, {
               id: 18,
               day: IMAGES.BAG11D,
               night: IMAGES.BAG11N,
               rarity: RARITY.REIDITE,
               author: "Winter",
               name: "Lava Bag"
           }, {
               id: 49,
               day: IMAGES.BAG48D,
               night: IMAGES.BAG48N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Lava Bag 2"
           }, {
               id: 36,
               day: IMAGES.BAG35D,
               night: IMAGES.BAG35N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Dragon Bag"
           }, {
               id: 55,
               day: IMAGES.BAG54D,
               night: IMAGES.BAG54N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Winter Ice Bag"
           }, {
               id: 26,
               day: IMAGES.BAG28D,
               night: IMAGES.BAG28N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Reidite Pickaxe Bag"
           }, {
               id: 27,
               day: IMAGES.BAG29D,
               night: IMAGES.BAG29N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Octopus Bowl"
           }, {
               id: 34,
               day: IMAGES.BAG33D,
               night: IMAGES.BAG33N,
               rarity: RARITY.REIDITE,
               author: "Taco4Life",
               name: "Cave Bag"
           }, {
               id: 42,
               day: IMAGES.BAG41D,
               night: IMAGES.BAG41N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Bag with Reidite Swords"
           }, {
               id: 63,
               day: IMAGES.BAG62D,
               night: IMAGES.BAG62N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Engineer Bag"
           }],
           CRATE: [{
               id: 0,
               day: IMAGES.CRATE7D,
               night: IMAGES.CRATE7N,
               rarity: RARITY.FREE,
               author: "eogito",
               name: "Wooden Dead Box"
           }, {
               id: 1,
               day: IMAGES.CRATE6D,
               night: IMAGES.CRATE6N,
               rarity: RARITY.FREE,
               author: "eogito",
               name: "Hidden item"
           }, {
               id: 2,
               day: IMAGES.CRATE1D,
               night: IMAGES.CRATE1N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Wooden Box 1"
           }, {
               id: 3,
               day: IMAGES.CRATE2D,
               night: IMAGES.CRATE2N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Wooden Box 2"
           }, {
               id: 4,
               day: IMAGES.CRATE3D,
               night: IMAGES.CRATE3N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Wooden Box 3"
           }, {
               id: 5,
               day: IMAGES.CRATE4D,
               night: IMAGES.CRATE4N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Broken Wooden Box"
           }, {
               id: 6,
               day: IMAGES.CRATE5D,
               night: IMAGES.CRATE5N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Wooden Box"
           }, {
               id: 7,
               day: IMAGES.CRATE8D,
               night: IMAGES.CRATE8N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Wooden Battle Box"
           }, {
               id: 8,
               day: IMAGES.CRATE9D,
               night: IMAGES.CRATE9N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Wooden Box with a Cross"
           }, {
               id: 9,
               day: IMAGES.CRATE10D,
               night: IMAGES.CRATE10N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Wooden Box with Bubbles"
           }, {
               id: 10,
               day: IMAGES.CRATE11D,
               night: IMAGES.CRATE11N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Wooden Box with Eyes"
           }, {
               id: 11,
               day: IMAGES.CRATE12D,
               night: IMAGES.CRATE12N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Dark Wooden Box"
           }, {
               id: 38,
               day: IMAGES.CRATE39D,
               night: IMAGES.CRATE39N,
               rarity: RARITY.WOOD,
               author: "Weddlz",
               name: "Noob Box"
           }, {
               id: 12,
               day: IMAGES.CRATE13D,
               night: IMAGES.CRATE13N,
               rarity: RARITY.STONE,
               author: "eogito",
               name: "Wooden and Stone Box"
           }, {
               id: 14,
               day: IMAGES.CRATE19D,
               night: IMAGES.CRATE19N,
               rarity: RARITY.STONE,
               author: "pizza wa",
               name: "Star Box 1"
           }, {
               id: 15,
               day: IMAGES.CRATE20D,
               night: IMAGES.CRATE20N,
               rarity: RARITY.STONE,
               author: "pizza wa",
               name: "Star Box 2"
           }, {
               id: 27,
               day: IMAGES.CRATE29D,
               night: IMAGES.CRATE29N,
               rarity: RARITY.STONE,
               author: "eogito",
               name: "Flower Box"
           }, {
               id: 46,
               day: IMAGES.CRATE47D,
               night: IMAGES.CRATE47N,
               rarity: RARITY.STONE,
               author: "MADBalgouthi",
               name: "Blue Box"
           }, {
               id: 19,
               day: IMAGES.CRATE21D,
               night: IMAGES.CRATE21N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Beehive"
           }, {
               id: 13,
               day: IMAGES.CRATE14D,
               night: IMAGES.CRATE14N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Wooden and Golden Box"
           }, {
               id: 21,
               day: IMAGES.CRATE22D,
               night: IMAGES.CRATE22N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Gravestone"
           }, {
               id: 25,
               day: IMAGES.CRATE26D,
               night: IMAGES.CRATE26N,
               rarity: RARITY.GOLD,
               author: "Communist",
               name: "Sky Box"
           }, {
               id: 29,
               day: IMAGES.CRATE30D,
               night: IMAGES.CRATE30N,
               rarity: RARITY.GOLD,
               author: "Winter",
               name: "Golden Box"
           }, {
               id: 34,
               day: IMAGES.CRATE35D,
               night: IMAGES.CRATE35N,
               rarity: RARITY.GOLD,
               author: "Communist",
               name: "Water Crate"
           }, {
               id: 35,
               day: IMAGES.CRATE36D,
               night: IMAGES.CRATE36N,
               rarity: RARITY.GOLD,
               author: "Communist",
               name: "Glass Crate"
           }, {
               id: 16,
               day: IMAGES.CRATE15D,
               night: IMAGES.CRATE15N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Wooden and Diamond Box"
           }, {
               id: 18,
               day: IMAGES.CRATE18D,
               night: IMAGES.CRATE18N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Don't Hit Me"
           }, {
               id: 26,
               day: IMAGES.CRATE27D,
               night: IMAGES.CRATE27N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Underwater Box"
           }, {
               id: 31,
               day: IMAGES.CRATE32D,
               night: IMAGES.CRATE32N,
               rarity: RARITY.DIAMOND,
               author: "Communist",
               name: "Items Pile"
           }, {
               id: 32,
               day: IMAGES.CRATE33D,
               night: IMAGES.CRATE33N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Cake Box"
           }, {
               id: 33,
               day: IMAGES.CRATE34D,
               night: IMAGES.CRATE34N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Christmas Cake Box"
           }, {
               id: 36,
               day: IMAGES.CRATE37D,
               night: IMAGES.CRATE37N,
               rarity: RARITY.DIAMOND,
               author: "Fukss",
               name: "Crab Box"
           }, {
               id: 42,
               day: IMAGES.CRATE43D,
               night: IMAGES.CRATE43N,
               rarity: RARITY.DIAMOND,
               author: "MADBalgouthi",
               name: "Fishing Box"
           }, {
               id: 22,
               day: IMAGES.CRATE23D,
               night: IMAGES.CRATE23N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Let me out of here"
           }, {
               id: 17,
               day: IMAGES.CRATE16D,
               night: IMAGES.CRATE16N,
               rarity: RARITY.AMETHYST,
               author: "eogito",
               name: "Wooden and Amethyst Box"
           }, {
               id: 24,
               day: IMAGES.CRATE25D,
               night: IMAGES.CRATE25N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Aquarium"
           }, {
               id: 28,
               day: IMAGES.CRATE28D,
               night: IMAGES.CRATE28N,
               rarity: RARITY.AMETHYST,
               author: "eogito",
               name: "Gift Box"
           }, {
               id: 40,
               day: IMAGES.CRATE41D,
               night: IMAGES.CRATE41N,
               rarity: RARITY.AMETHYST,
               author: "MADBalgouthi",
               name: "Open Watermelon Box"
           }, {
               id: 41,
               day: IMAGES.CRATE42D,
               night: IMAGES.CRATE42N,
               rarity: RARITY.AMETHYST,
               author: "MADBalgouthi",
               name: "Watermelon Box"
           }, {
               id: 39,
               day: IMAGES.CRATE40D,
               night: IMAGES.CRATE40N,
               rarity: RARITY.AMETHYST,
               author: "Taco4Life",
               name: "Thornbush Box"
           }, {
               id: 43,
               day: IMAGES.CRATE44D,
               night: IMAGES.CRATE44N,
               rarity: RARITY.AMETHYST,
               author: "eogito",
               name: "Rabbit in the Box"
           }, {
               id: 47,
               day: IMAGES.CRATE48D,
               night: IMAGES.CRATE48N,
               rarity: RARITY.AMETHYST,
               author: "Taco4Life",
               name: "Garlic Plot"
           }, {
               id: 48,
               day: IMAGES.CRATE49D,
               night: IMAGES.CRATE49N,
               rarity: RARITY.AMETHYST,
               author: "Taco4Life",
               name: "Pumpkin Plot"
           }, {
               id: 45,
               day: IMAGES.CRATE46D,
               night: IMAGES.CRATE46N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Autumn Box"
           }, {
               id: 44,
               day: IMAGES.CRATE45D,
               night: IMAGES.CRATE45N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Winter Box"
           }, {
               id: 20,
               day: IMAGES.CRATE17D,
               night: IMAGES.CRATE17N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Metal and Reidite Box"
           }, {
               id: 23,
               day: IMAGES.CRATE24D,
               night: IMAGES.CRATE24N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Kraken Box"
           }, {
               id: 30,
               day: IMAGES.CRATE31D,
               night: IMAGES.CRATE31N,
               rarity: RARITY.REIDITE,
               author: "Winter",
               name: "Lava Box"
           }, {
               id: 37,
               day: IMAGES.CRATE38D,
               night: IMAGES.CRATE38N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Lava Box 2"
           }, {
               id: 49,
               day: IMAGES.CRATE50D,
               night: IMAGES.CRATE50N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Rabbit"
           }, {
               id: 50,
               day: IMAGES.CRATE51D,
               night: IMAGES.CRATE51N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Wolf"
           }, {
               id: 51,
               day: IMAGES.CRATE52D,
               night: IMAGES.CRATE52N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Spider"
           }, {
               id: 52,
               day: IMAGES.CRATE53D,
               night: IMAGES.CRATE53N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Hawk"
           }, {
               id: 53,
               day: IMAGES.CRATE54D,
               night: IMAGES.CRATE54N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Bear"
           }, {
               id: 54,
               day: IMAGES.CRATE55D,
               night: IMAGES.CRATE55N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Fox"
           }, {
               id: 55,
               day: IMAGES.CRATE56D,
               night: IMAGES.CRATE56N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Baby Mammoth"
           }, {
               id: 56,
               day: IMAGES.CRATE57D,
               night: IMAGES.CRATE57N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Mammoth"
           }, {
               id: 57,
               day: IMAGES.CRATE58D,
               night: IMAGES.CRATE58N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Sandworm"
           }, {
               id: 58,
               day: IMAGES.CRATE59D,
               night: IMAGES.CRATE59N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Vulture"
           }, {
               id: 59,
               day: IMAGES.CRATE60D,
               night: IMAGES.CRATE60N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Kraken"
           }, {
               id: 60,
               day: IMAGES.CRATE61D,
               night: IMAGES.CRATE61N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Piranha"
           }, {
               id: 61,
               day: IMAGES.CRATE62D,
               night: IMAGES.CRATE62N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Baby Dragon"
           }, {
               id: 62,
               day: IMAGES.CRATE63D,
               night: IMAGES.CRATE63N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Baby Lava"
           }, {
               id: 63,
               day: IMAGES.CRATE64D,
               night: IMAGES.CRATE64N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Dragon"
           }, {
               id: 64,
               day: IMAGES.CRATE65D,
               night: IMAGES.CRATE65N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Penguin"
           }, {
               id: 65,
               day: IMAGES.CRATE66D,
               night: IMAGES.CRATE66N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Lava Dragon"
           }, {
               id: 66,
               day: IMAGES.CRATE67D,
               night: IMAGES.CRATE67N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Boar"
           }, {
               id: 67,
               day: IMAGES.CRATE68D,
               night: IMAGES.CRATE68N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Fire mob"
           }, {
               id: 68,
               day: IMAGES.CRATE69D,
               night: IMAGES.CRATE69N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the Crab"
           }, {
               id: 69,
               day: IMAGES.CRATE70D,
               night: IMAGES.CRATE70N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Box of the King Crab"
           }, {
               id: 70,
               day: IMAGES.CRATE71D,
               night: IMAGES.CRATE71N,
               rarity: RARITY.GOLD,
               author: "CrysTal",
               name: "Crystal Sky Box"
           }, {
               id: 71,
               day: IMAGES.CRATE72D,
               night: IMAGES.CRATE72N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Dragon Box"
           }],
           BOOK: [{
               id: 0,
               day: IMAGES.BOOK0D,
               night: IMAGES.BOOK0N,
               rarity: RARITY.FREE,
               author: "Starve.io",
               name: "Book 1"
           }, {
               id: 1,
               day: IMAGES.BOOK3D,
               night: IMAGES.BOOK3N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Book 2"
           }, {
               id: 2,
               day: IMAGES.BOOK4D,
               night: IMAGES.BOOK4N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Book 3"
           }, {
               id: 3,
               day: IMAGES.BOOK5D,
               night: IMAGES.BOOK5N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Book 4"
           }, {
               id: 4,
               day: IMAGES.BOOK6D,
               night: IMAGES.BOOK6N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Damaged Book 1"
           }, {
               id: 18,
               day: IMAGES.BOOK18D,
               night: IMAGES.BOOK18N,
               rarity: RARITY.WOOD,
               author: "SeveR",
               name: "Damaged Book 2"
           }, {
               id: 5,
               day: IMAGES.BOOK1D,
               night: IMAGES.BOOK1N,
               rarity: RARITY.STONE,
               author: "Doctorpus",
               name: "Scroll"
           }, {
               id: 6,
               day: IMAGES.BOOK2D,
               night: IMAGES.BOOK2N,
               rarity: RARITY.STONE,
               author: "Doctorpus",
               name: "Clipboard"
           }, {
               id: 7,
               day: IMAGES.BOOK7D,
               night: IMAGES.BOOK7N,
               rarity: RARITY.STONE,
               author: "eogito",
               name: "Seed Book"
           }, {
               id: 20,
               day: IMAGES.BOOK20D,
               night: IMAGES.BOOK20N,
               rarity: RARITY.STONE,
               author: "Taco4Life",
               name: "Camo Book"
           }, {
               id: 24,
               day: IMAGES.BOOK24D,
               night: IMAGES.BOOK24N,
               rarity: RARITY.STONE,
               author: "Communist",
               name: "Stone Tablet"
           }, {
               id: 10,
               day: IMAGES.BOOK13D,
               night: IMAGES.BOOK13N,
               rarity: RARITY.GOLD,
               author: "pizza wa",
               name: "Star Book"
           }, {
               id: 8,
               day: IMAGES.BOOK9D,
               night: IMAGES.BOOK9N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Gold Book"
           }, {
               id: 15,
               day: IMAGES.BOOK15D,
               night: IMAGES.BOOK15N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Old Mysterious Paper"
           }, {
               id: 17,
               day: IMAGES.BOOK17D,
               night: IMAGES.BOOK17N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Gold Engraving"
           }, {
               id: 25,
               day: IMAGES.BOOK25D,
               night: IMAGES.BOOK25N,
               rarity: RARITY.GOLD,
               author: "fatant",
               name: "Ant Book"
           }, {
               id: 32,
               day: IMAGES.BOOK32D,
               night: IMAGES.BOOK32N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Mummy Book"
           }, {
               id: 37,
               day: IMAGES.BOOK39D,
               night: IMAGES.BOOK39N,
               rarity: RARITY.GOLD,
               author: "Taco4Life",
               name: "Garlic Book"
           }, {
               id: 38,
               day: IMAGES.BOOK38D,
               night: IMAGES.BOOK38N,
               rarity: RARITY.GOLD,
               author: "Taco4Life",
               name: "Pumpkin Book"
           }, {
               id: 39,
               day: IMAGES.BOOK40D,
               night: IMAGES.BOOK40N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Christmas Tree Book"
           }, {
               id: 11,
               day: IMAGES.BOOK10D,
               night: IMAGES.BOOK10N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Diamond Book"
           }, {
               id: 9,
               day: IMAGES.BOOK8D,
               night: IMAGES.BOOK8N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Obscure Book"
           }, {
               id: 16,
               day: IMAGES.BOOK16D,
               night: IMAGES.BOOK16N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Rolled Parchment"
           }, {
               id: 22,
               day: IMAGES.BOOK22D,
               night: IMAGES.BOOK22N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Cake Book"
           }, {
               id: 23,
               day: IMAGES.BOOK23D,
               night: IMAGES.BOOK23N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Christmas Cake Book"
           }, {
               id: 30,
               day: IMAGES.BOOK30D,
               night: IMAGES.BOOK30N,
               rarity: RARITY.DIAMOND,
               author: "MADBalgouthi",
               name: "Fish Book"
           }, {
               id: 31,
               day: IMAGES.BOOK31D,
               night: IMAGES.BOOK31N,
               rarity: RARITY.DIAMOND,
               author: "CrysTal",
               name: "Once upon a time"
           }, {
               id: 13,
               day: IMAGES.BOOK11D,
               night: IMAGES.BOOK11N,
               rarity: RARITY.AMETHYST,
               author: "eogito",
               name: "Amethyst Book"
           }, {
               id: 28,
               day: IMAGES.BOOK28D,
               night: IMAGES.BOOK28N,
               rarity: RARITY.AMETHYST,
               author: "eogito",
               name: "Paint Pallet"
           }, {
               id: 29,
               day: IMAGES.BOOK29D,
               night: IMAGES.BOOK29N,
               rarity: RARITY.AMETHYST,
               author: "CrysTal",
               name: "Watermelon Book"
           }, {
               id: 27,
               day: IMAGES.BOOK27D,
               night: IMAGES.BOOK27N,
               rarity: RARITY.AMETHYST,
               author: "Taco4Life",
               name: "Thornbush Book"
           }, {
               id: 35,
               day: IMAGES.BOOK35D,
               night: IMAGES.BOOK35N,
               rarity: RARITY.AMETHYST,
               author: "Taco4Life",
               name: "Menu"
           }, {
               id: 36,
               day: IMAGES.BOOK36D,
               night: IMAGES.BOOK36N,
               rarity: RARITY.AMETHYST,
               author: "CrysTal",
               name: "Lover Letter"
           }, {
               id: 40,
               day: IMAGES.BOOK41D,
               night: IMAGES.BOOK41N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Fresh-Baked Cookies"
           }, {
               id: 41,
               day: IMAGES.BOOK42D,
               night: IMAGES.BOOK42N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Inside, there is just a book."
           }, {
               id: 33,
               day: IMAGES.BOOK33D,
               night: IMAGES.BOOK33N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Winter Book"
           }, {
               id: 34,
               day: IMAGES.BOOK34D,
               night: IMAGES.BOOK34N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Autumn Book"
           }, {
               id: 14,
               day: IMAGES.BOOK12D,
               night: IMAGES.BOOK12N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Reidite Book"
           }, {
               id: 12,
               day: IMAGES.BOOK14D,
               night: IMAGES.BOOK14N,
               rarity: RARITY.REIDITE,
               author: "Winter",
               name: "Lava Book"
           }, {
               id: 26,
               day: IMAGES.BOOK26D,
               night: IMAGES.BOOK26N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Lava Book 2"
           }, {
               id: 19,
               day: IMAGES.BOOK19D,
               night: IMAGES.BOOK19N,
               rarity: RARITY.REIDITE,
               author: "Winter",
               name: "Ocean Mystery"
           }, {
               id: 21,
               day: IMAGES.BOOK21D,
               night: IMAGES.BOOK21N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Dragon Book"
           }, {
               id: 42,
               day: IMAGES.BOOK43D,
               night: IMAGES.BOOK43N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Engineer Book"
           }, {
               id: 43,
               day: IMAGES.BOOK44D,
               night: IMAGES.BOOK44N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Nightmare Book"
           }, {
               id: 44,
               day: IMAGES.BOOK45D,
               night: IMAGES.BOOK45N,
               rarity: RARITY.REIDITE,
               author: "aloner",
               name: "Mystery Book"
           }],
           ACCESSORY: [{
               id: 0,
               day: IMAGES.ACCESSORY0D,
               night: IMAGES.ACCESSORY0D,
               rarity: RARITY.FREE,
               author: "Starve.io",
               name: "Nothing"
           }, {
               id: 2,
               day: IMAGES.ACCESSORY4D,
               night: IMAGES.ACCESSORY4N,
               rarity: RARITY.FREE,
               author: "Starve.io",
               name: "Pink Cheeks"
           }, {
               id: 3,
               day: IMAGES.ACCESSORY5D,
               night: IMAGES.ACCESSORY5N,
               rarity: RARITY.FREE,
               author: "Starve.io",
               name: "Heart"
           }, {
               id: 1,
               day: IMAGES.ACCESSORY3D,
               night: IMAGES.ACCESSORY3N,
               rarity: RARITY.FREE,
               author: "Starve.io",
               name: "Bandage 1"
           }, {
               id: 4,
               day: IMAGES.ACCESSORY6D,
               night: IMAGES.ACCESSORY6N,
               rarity: RARITY.FREE,
               author: "Starve.io",
               name: "Flower 1"
           }, {
               id: 5,
               day: IMAGES.ACCESSORY8D,
               night: IMAGES.ACCESSORY8N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Bow 1"
           }, {
               id: 6,
               day: IMAGES.ACCESSORY9D,
               night: IMAGES.ACCESSORY9N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Bandage 2"
           }, {
               id: 7,
               day: IMAGES.ACCESSORY15D,
               night: IMAGES.ACCESSORY15N,
               rarity: RARITY.WOOD,
               author: "Starve.io",
               name: "Flower 2"
           }, {
               id: 8,
               day: IMAGES.ACCESSORY10D,
               night: IMAGES.ACCESSORY10N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Bandage 3"
           }, {
               id: 36,
               day: IMAGES.ACCESSORY36D,
               night: IMAGES.ACCESSORY36N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Foliage"
           }, {
               id: 59,
               day: IMAGES.ACCESSORY47D,
               night: IMAGES.ACCESSORY47N,
               rarity: RARITY.WOOD,
               author: "eogito",
               name: "Peaceful"
           }, {
               id: 67,
               day: IMAGES.ACCESSORY55D,
               night: IMAGES.ACCESSORY55N,
               rarity: RARITY.WOOD,
               author: "pizza wa",
               name: "Sparkles"
           }, {
               id: 68,
               day: IMAGES.ACCESSORY56D,
               night: IMAGES.ACCESSORY56N,
               rarity: RARITY.WOOD,
               author: "pizza wa",
               name: "Luxury"
           }, {
               id: 69,
               day: IMAGES.ACCESSORY57D,
               night: IMAGES.ACCESSORY57N,
               rarity: RARITY.WOOD,
               author: "pizza wa",
               name: "Snow Flakes Crown"
           }, {
               id: 17,
               day: IMAGES.ACCESSORY17D,
               night: IMAGES.ACCESSORY17N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Glasses 1"
           }, {
               id: 10,
               day: IMAGES.ACCESSORY7D,
               night: IMAGES.ACCESSORY7N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Bow 2"
           }, {
               id: 11,
               day: IMAGES.ACCESSORY13D,
               night: IMAGES.ACCESSORY13N,
               rarity: RARITY.STONE,
               author: "pizza wa",
               name: "Little Stars"
           }, {
               id: 12,
               day: IMAGES.ACCESSORY11D,
               night: IMAGES.ACCESSORY11N,
               rarity: RARITY.STONE,
               author: "eogito",
               name: "Pirate Eye Patch 1"
           }, {
               id: 44,
               day: IMAGES.ACCESSORY44D,
               night: IMAGES.ACCESSORY44N,
               rarity: RARITY.STONE,
               author: "Taco4Life",
               name: "Pirate Eye Patch 2"
           }, {
               id: 23,
               day: IMAGES.ACCESSORY23D,
               night: IMAGES.ACCESSORY23N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Clown nose"
           }, {
               id: 16,
               day: IMAGES.ACCESSORY2D,
               night: IMAGES.ACCESSORY2N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Eye Patch"
           }, {
               id: 30,
               day: IMAGES.ACCESSORY30D,
               night: IMAGES.ACCESSORY30N,
               rarity: RARITY.STONE,
               author: "eogito",
               name: "Flower 3"
           }, {
               id: 38,
               day: IMAGES.ACCESSORY38D,
               night: IMAGES.ACCESSORY38N,
               rarity: RARITY.STONE,
               author: "Winter",
               name: "False Nose"
           }, {
               id: 74,
               day: IMAGES.ACCESSORY62D,
               night: IMAGES.ACCESSORY62N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Red Cloth"
           }, {
               id: 75,
               day: IMAGES.ACCESSORY63D,
               night: IMAGES.ACCESSORY63N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Blue Cloth"
           }, {
               id: 79,
               day: IMAGES.ACCESSORY67D,
               night: IMAGES.ACCESSORY67N,
               rarity: RARITY.STONE,
               author: "Starve.io",
               name: "Transparent Mask"
           }, {
               id: 89,
               day: IMAGES.ACCESSORY77D,
               night: IMAGES.ACCESSORY77N,
               rarity: RARITY.STONE,
               author: "Anyone want to play?",
               name: "Starve.io Anime"
           }, {
               id: 94,
               day: IMAGES.ACCESSORY78D,
               night: IMAGES.ACCESSORY78N,
               rarity: RARITY.STONE,
               author: "Ant",
               name: "Hero Mask"
           }, {
               id: 15,
               day: IMAGES.ACCESSORY16D,
               night: IMAGES.ACCESSORY16N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Star Glasses"
           }, {
               id: 21,
               day: IMAGES.ACCESSORY21D,
               night: IMAGES.ACCESSORY21N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Great-aunt's Glasses"
           }, {
               id: 24,
               day: IMAGES.ACCESSORY24D,
               night: IMAGES.ACCESSORY24N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Little Starver"
           }, {
               id: 22,
               day: IMAGES.ACCESSORY22D,
               night: IMAGES.ACCESSORY22N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Little Glasses"
           }, {
               id: 13,
               day: IMAGES.ACCESSORY14D,
               night: IMAGES.ACCESSORY14N,
               rarity: RARITY.GOLD,
               author: "Starve.io",
               name: "Flower Chain"
           }, {
               id: 29,
               day: IMAGES.ACCESSORY29D,
               night: IMAGES.ACCESSORY29N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Horns"
           }, {
               id: 31,
               day: IMAGES.ACCESSORY31D,
               night: IMAGES.ACCESSORY31N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Golden Flower"
           }, {
               id: 40,
               day: IMAGES.ACCESSORY40D,
               night: IMAGES.ACCESSORY40N,
               rarity: RARITY.GOLD,
               author: "pizza wa",
               name: "Sleeping Mask"
           }, {
               id: 57,
               day: IMAGES.ACCESSORY50D,
               night: IMAGES.ACCESSORY50N,
               rarity: RARITY.GOLD,
               author: "Taco4Life",
               name: "Fish on your head"
           }, {
               id: 58,
               day: IMAGES.ACCESSORY46D,
               night: IMAGES.ACCESSORY46N,
               rarity: RARITY.GOLD,
               author: "eogito",
               name: "Rose"
           }, {
               id: 91,
               day: IMAGES.ACCESSORY80D,
               night: IMAGES.ACCESSORY80N,
               rarity: RARITY.GOLD,
               author: "upfiz",
               name: "Grey Scarf"
           }, {
               id: 92,
               day: IMAGES.ACCESSORY81D,
               night: IMAGES.ACCESSORY81N,
               rarity: RARITY.GOLD,
               author: "upfiz",
               name: "Black Scarf"
           }, {
               id: 93,
               day: IMAGES.ACCESSORY82D,
               night: IMAGES.ACCESSORY82N,
               rarity: RARITY.GOLD,
               author: "upfiz",
               name: "Skull Mask"
           }, {
               id: 9,
               day: IMAGES.ACCESSORY1D,
               night: IMAGES.ACCESSORY1N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Fancy Glasses"
           }, {
               id: 25,
               day: IMAGES.ACCESSORY25D,
               night: IMAGES.ACCESSORY25N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Medecin Mask"
           }, {
               id: 14,
               day: IMAGES.ACCESSORY12D,
               night: IMAGES.ACCESSORY12N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Mr. Mayor"
           }, {
               id: 19,
               day: IMAGES.ACCESSORY19D,
               night: IMAGES.ACCESSORY19N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Sunglasses 2"
           }, {
               id: 28,
               day: IMAGES.ACCESSORY28D,
               night: IMAGES.ACCESSORY28N,
               rarity: RARITY.DIAMOND,
               author: "pizza wa",
               name: "Starfish"
           }, {
               id: 37,
               day: IMAGES.ACCESSORY37D,
               night: IMAGES.ACCESSORY37N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Berry"
           }, {
               id: 39,
               day: IMAGES.ACCESSORY39D,
               night: IMAGES.ACCESSORY39N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Flake"
           }, {
               id: 43,
               day: IMAGES.ACCESSORY43D,
               night: IMAGES.ACCESSORY43N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Leaf "
           }, {
               id: 61,
               day: IMAGES.ACCESSORY49D,
               night: IMAGES.ACCESSORY49N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "A sword in your head"
           }, {
               id: 62,
               day: IMAGES.ACCESSORY51D,
               night: IMAGES.ACCESSORY51N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Winter Scarf"
           }, {
               id: 64,
               day: IMAGES.ACCESSORY53D,
               night: IMAGES.ACCESSORY53N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Winter Scarf 2"
           }, {
               id: 66,
               day: IMAGES.ACCESSORY54D,
               night: IMAGES.ACCESSORY54N,
               rarity: RARITY.DIAMOND,
               author: "eogito",
               name: "Winter Scarf 3"
           }, {
               id: 70,
               day: IMAGES.ACCESSORY58D,
               night: IMAGES.ACCESSORY58N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Mask with animal tracks"
           }, {
               id: 71,
               day: IMAGES.ACCESSORY59D,
               night: IMAGES.ACCESSORY59N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Spring Mask"
           }, {
               id: 72,
               day: IMAGES.ACCESSORY60D,
               night: IMAGES.ACCESSORY60N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Pink Mask"
           }, {
               id: 73,
               day: IMAGES.ACCESSORY61D,
               night: IMAGES.ACCESSORY61N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Blue Mask"
           }, {
               id: 76,
               day: IMAGES.ACCESSORY64D,
               night: IMAGES.ACCESSORY64N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Military Mask"
           }, {
               id: 77,
               day: IMAGES.ACCESSORY65D,
               night: IMAGES.ACCESSORY65N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Orange Mask"
           }, {
               id: 78,
               day: IMAGES.ACCESSORY66D,
               night: IMAGES.ACCESSORY66N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "White and Red Points Mask"
           }, {
               id: 80,
               day: IMAGES.ACCESSORY68D,
               night: IMAGES.ACCESSORY68N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Stick out your tongue Mask"
           }, {
               id: 81,
               day: IMAGES.ACCESSORY69D,
               night: IMAGES.ACCESSORY69N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Two Teeth Mask"
           }, {
               id: 82,
               day: IMAGES.ACCESSORY70D,
               night: IMAGES.ACCESSORY70N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Make-up Mask"
           }, {
               id: 83,
               day: IMAGES.ACCESSORY71D,
               night: IMAGES.ACCESSORY71N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Sad Mask"
           }, {
               id: 84,
               day: IMAGES.ACCESSORY72D,
               night: IMAGES.ACCESSORY72N,
               rarity: RARITY.DIAMOND,
               author: "Starve.io",
               name: "Happy Mask"
           }, {
               id: 90,
               day: IMAGES.ACCESSORY79D,
               night: IMAGES.ACCESSORY79N,
               rarity: RARITY.DIAMOND,
               author: "aloner",
               name: "Blood"
           }, {
               id: 27,
               day: IMAGES.ACCESSORY27D,
               night: IMAGES.ACCESSORY27N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Clown Face"
           }, {
               id: 20,
               day: IMAGES.ACCESSORY20D,
               night: IMAGES.ACCESSORY20N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Sunglasses 3"
           }, {
               id: 32,
               day: IMAGES.ACCESSORY32D,
               night: IMAGES.ACCESSORY32N,
               rarity: RARITY.AMETHYST,
               author: "eogito",
               name: "Engineer's Glasses"
           }, {
               id: 33,
               day: IMAGES.ACCESSORY33D,
               night: IMAGES.ACCESSORY33N,
               rarity: RARITY.AMETHYST,
               author: "eogito",
               name: "Engineer's Monocle"
           }, {
               id: 34,
               day: IMAGES.ACCESSORY34D,
               night: IMAGES.ACCESSORY34N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Mauve's butt"
           }, {
               id: 41,
               day: IMAGES.ACCESSORY41D,
               night: IMAGES.ACCESSORY41N,
               rarity: RARITY.AMETHYST,
               author: "eogito",
               name: "Lapa Head"
           }, {
               id: 42,
               day: IMAGES.ACCESSORY42D,
               night: IMAGES.ACCESSORY42N,
               rarity: RARITY.AMETHYST,
               author: "eogito",
               name: "Lapa Head "
           }, {
               id: 85,
               day: IMAGES.ACCESSORY73D,
               night: IMAGES.ACCESSORY73N,
               rarity: RARITY.AMETHYST,
               author: "Starve.io",
               name: "Mask and Glasses"
           }, {
               id: 60,
               day: IMAGES.ACCESSORY48D,
               night: IMAGES.ACCESSORY48N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Jason"
           }, {
               id: 26,
               day: IMAGES.ACCESSORY26D,
               night: IMAGES.ACCESSORY26N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Devil Horns"
           }, {
               id: 18,
               day: IMAGES.ACCESSORY18D,
               night: IMAGES.ACCESSORY18N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Big Boss"
           }, {
               id: 35,
               day: IMAGES.ACCESSORY35D,
               night: IMAGES.ACCESSORY35N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Baby Kraken"
           }, {
               id: 63,
               day: IMAGES.ACCESSORY52D,
               night: IMAGES.ACCESSORY52N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Deer Antlers"
           }, {
               id: 65,
               day: IMAGES.ACCESSORY45D,
               night: IMAGES.ACCESSORY45N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Baby Dragon on your head"
           }, {
               id: 86,
               day: IMAGES.ACCESSORY74D,
               night: IMAGES.ACCESSORY74N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Gaz Mask and Glasses"
           }, {
               id: 87,
               day: IMAGES.ACCESSORY75D,
               night: IMAGES.ACCESSORY75N,
               rarity: RARITY.REIDITE,
               author: "Starve.io",
               name: "Pink Gaz Mask and Glasses"
           }, {
               id: 88,
               day: IMAGES.ACCESSORY76D,
               night: IMAGES.ACCESSORY76N,
               rarity: RARITY.REIDITE,
               author: "eogito",
               name: "Engineer Glasses"
           }, {
               id: 45,
               day: IMAGES.LEVEL5D,
               night: IMAGES.LEVEL5N,
               rarity: RARITY.LEVEL,
               author: "Starve.io",
               name: "More than Level 5",
               level: 5
           }, {
               id: 46,
               day: IMAGES.LEVEL10D,
               night: IMAGES.LEVEL10N,
               rarity: RARITY.LEVEL,
               author: "Starve.io",
               name: "More than Level 10",
               level: 10
           }, {
               id: 47,
               day: IMAGES.LEVEL15D,
               night: IMAGES.LEVEL15N,
               rarity: RARITY.LEVEL,
               author: "Starve.io",
               name: "More than Level 15",
               level: 15
           }, {
               id: 48,
               day: IMAGES.LEVEL20D,
               night: IMAGES.LEVEL20N,
               rarity: RARITY.LEVEL,
               author: "Starve.io",
               name: "More than Level 20",
               level: 20
           }, {
               id: 49,
               day: IMAGES.LEVEL25D,
               night: IMAGES.LEVEL25N,
               rarity: RARITY.LEVEL,
               author: "Starve.io",
               name: "More than Level 25",
               level: 25
           }, {
               id: 50,
               day: IMAGES.LEVEL30D,
               night: IMAGES.LEVEL30N,
               rarity: RARITY.LEVEL,
               author: "Starve.io",
               name: "More than Level 30",
               level: 30
           }, {
               id: 51,
               day: IMAGES.LEVEL35D,
               night: IMAGES.LEVEL35N,
               rarity: RARITY.LEVEL,
               author: "Starve.io",
               name: "More than Level 35",
               level: 35
           }, {
               id: 52,
               day: IMAGES.LEVEL40D,
               night: IMAGES.LEVEL40N,
               rarity: RARITY.LEVEL,
               author: "Starve.io",
               name: "More than Level 40",
               level: 40
           }, {
               id: 53,
               day: IMAGES.LEVEL45D,
               night: IMAGES.LEVEL45N,
               rarity: RARITY.LEVEL,
               author: "Starve.io",
               name: "More than Level 45",
               level: 45
           }, {
               id: 54,
               day: IMAGES.LEVEL50D,
               night: IMAGES.LEVEL50N,
               rarity: RARITY.LEVEL,
               author: "Starve.io",
               name: "More than Level 50",
               level: 50
           }, {
               id: 55,
               day: IMAGES.LEVEL55D,
               night: IMAGES.LEVEL55N,
               rarity: RARITY.LEVEL,
               author: "Starve.io",
               name: "More than Level 55",
               level: 55
           }, {
               id: 56,
               day: IMAGES.LEVEL60D,
               night: IMAGES.LEVEL60N,
               rarity: RARITY.LEVEL,
               author: "Starve.io",
               name: "More than Level 60",
               level: 60
           }]
       },
       ET.ZOMBIE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 21),
       ET.VAMPIRE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 20),
       sprite[SPRITE.BODY] = [],
       sprite[SPRITE.HAND] = [],
       sprite[SPRITE.CRATE] = [],
       sprite[SPRITE.BOOK] = [],
       sprite[SPRITE.BAG] = [],
       sprite[SPRITE.ACCESSORY] = [];
       for (var e = 0; e < COSMETICS.SKIN.length; e++)
           sprite[SPRITE.BODY][e] = [COSMETICS.SKIN[e].day, COSMETICS.SKIN[e].night],
           sprite[SPRITE.HAND][e] = [COSMETICS.SKIN[e].dayHand, COSMETICS.SKIN[e].nightHand];
       for (e = 0; e < COSMETICS.BOOK.length; e++)
           sprite[SPRITE.BOOK][e] = [COSMETICS.BOOK[e].day, COSMETICS.BOOK[e].night];
       for (e = 0; e < COSMETICS.CRATE.length; e++)
           sprite[SPRITE.CRATE][e] = [COSMETICS.CRATE[e].day, COSMETICS.CRATE[e].night];
       for (e = 0; e < COSMETICS.BAG.length; e++)
           sprite[SPRITE.BAG][e] = [COSMETICS.BAG[e].day, COSMETICS.BAG[e].night];
       for (e = 0; e < COSMETICS.ACCESSORY.length; e++)
           sprite[SPRITE.ACCESSORY][e] = [COSMETICS.ACCESSORY[e].day, COSMETICS.ACCESSORY[e].night]
   }
   ,
   INFO_BOX = [],
   PLAYER_LEVEL = [];
   var _o = [];
   function uo() {
       var e = -8;
       if (kI.auto_feed.enabled) {
           var i = sprite[SPRITE.AUTO_FEED];
           qn(u, i, kI.auto_feed.translate.x, kI.auto_feed.translate.y + e),
           e += 70
       }
       if (1 === kI.blizzard) {
           i = sprite[SPRITE.STOP_REGENERATION_BLIZZARD];
           qn(u, i, kI.auto_feed.translate.x, kI.auto_feed.translate.y + e),
           e += 70
       } else if (kI.gauges.cold.x < .25 || kI.gauges.hunger.x < .25 || kI.gauges.thirst.x < .25 || kI.gauges.oxygen.x < .25 || kI.gauges.warm.x < .25) {
           i = sprite[SPRITE.STOP_REGENERATION];
           qn(u, i, kI.auto_feed.translate.x, kI.auto_feed.translate.y + e),
           e += 70
       }
       if (kI.bandage > 0) {
           i = sprite[SPRITE.BANDAGE_ACTIVATED];
           qn(u, i, kI.auto_feed.translate.x, kI.auto_feed.translate.y + e);
           var t = _o[kI.bandage];
           void 0 === t && (t = Yi(C, kI.bandage + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6),
           _o[kI.bandage] = t),
           kI.bandage < 9 ? qn(u, t, kI.auto_feed.translate.x - 39, kI.auto_feed.translate.y + e + 20) : qn(u, t, kI.auto_feed.translate.x - 46, kI.auto_feed.translate.y + e + 20)
       }
   }
   function ho() {
       var e = kI.ldb
         , i = xI.leaderboard;
       if (e.update) {
           e.update = !1;
           var t = e.ids
             , r = i.can.width
             , n = i.can.height
             , o = i.ctx
             , a = UI.players
             , T = !1;
           o.clearRect(0, 0, r, n),
           o.drawImage(i.img, 0, 0);
           for (var I = 0; I < t.length; I++) {
               var E = a[t[I]];
               UI.mode === ET.MODE_HUNGER_GAMES && "spectator" === E.nickname || (UI.mode === ET.MODE_ZOMBIES && E.skin === ET.ZOMBIE_SKIN || (t[I] == kI.id ? (T = !0,
               UI.mode === ET.MODE_VAMPIRES && E.skin === ET.VAMPIRE_SKIN ? color = "#FF0000" : color = "#FFF") : UI.mode === ET.MODE_VAMPIRES && E.skin === ET.VAMPIRE_SKIN ? color = "#990000" : color = "#A1BDCD",
               o.drawImage(Yi(C, "" + (I + 1), 15 * C, color), 20 * C, (40 + 22 * I) * C),
               E.ldb_label || (E.ldb_label = Yi(C, E.nickname, 15 * C, color, void 0, void 0, void 0, void 0, 110 * C)),
               o.drawImage(E.ldb_label, 39 * C, (40 + 22 * I) * C),
               o.drawImage(Yi(C, s.simplify_number(E.score), 15 * C, color), 156 * C, (40 + 22 * I) * C)))
           }
           T || (UI.mode === ET.MODE_PVP || UI.mode === ET.MODE_VAMPIRES || UI.mode === ET.MODE_LEGACY || UI.mode === ET.MODE_BR || UI.mode === ET.MODE_EXPERIMENTAL || UI.mode === ET.MODE_HUNGER_GAMES && !kI.spectator || UI.mode === ET.MODE_ZOMBIES && !kI.zombie) && (o.drawImage(sprite[SPRITE.YOUR_SCORE], 15 * C, (46 + 22 * I) * C),
           o.drawImage(Yi(C, s.simplify_number(UI.players[kI.id].score), 15 * C, "#FFF"), 100 * C, (46 + 22 * I) * C))
       }
       qn(u, i.can, i.translate.x, i.translate.y)
   }
   function Ro() {
       var e = kI.totem;
       if (e.wait) {
           var i = e.timeout.update();
           u.save();
           var t = sprite[SPRITE.DELAY_TEAM]
             , r = sprite[SPRITE.DELAY_WEAPON].height + 25 * C;
           u.translate(t.width, xI.gauges.translate.y - 188 * C - r);
           var n = -t.width / 2 - 2
             , o = -t.height / 2 - 4;
           qn(u, t, n + 2, o),
           u.beginPath(),
           u.lineWidth = 5 * C,
           u.strokeStyle = SPRITE.WEAPON_LOADING[UI.time],
           u.lineCap = "round",
           u.arc(0, o + t.height / 2, 25 * C, 0, 2 * Math.PI * e.timeout.v),
           u.stroke(),
           u.restore(),
           i && (e.wait = !1,
           e.timeout.v = 0,
           e.timeout.o = !1)
       }
   }
   function Ao() {
       var e = UI.clock
         , i = sprite[SPRITE.CLOCK][UI.time];
       qn(u, i, e.translate.x, e.translate.y),
       u.save(),
       u.translate(e.translate.x + i.width / 2, e.translate.y + i.height / 2),
       UI.clock.now = ((new Date).getTime() - e.init + e.hour) % ET.DAY;
       var t = 2 * Math.PI * UI.clock.now / ET.DAY - Math.PI / 2;
       u.rotate(t),
       qn(u, sprite[SPRITE.ARROW_CLOCK], -i.width / 2, -i.height / 2),
       u.restore()
   }
   function So() {
       var e = kI.build;
       if (e.wait) {
           var i = e.timeout.update();
           u.save();
           var t = sprite[SPRITE.DELAY_WALL];
           u.translate(t.width - 12 * C, xI.gauges.translate.y - 190 * C);
           var r = -t.width / 2 + 9
             , n = -t.height / 2 - 4;
           qn(u, t, r, n),
           u.beginPath(),
           u.lineWidth = 5 * C,
           u.strokeStyle = SPRITE.HELMET_LOADING[UI.time],
           u.lineCap = "round",
           u.arc(9, n + t.height / 2, 25 * C, 0, 2 * Math.PI * e.timeout.v),
           u.stroke(),
           u.restore(),
           i && (e.wait = !1,
           e.timeout.v = 0,
           e.timeout.o = !1)
       }
   }
   function lo() {
       var e = kI.helmet;
       if (e.wait) {
           var i = e.timeout.update();
           u.save();
           var t = sprite[SPRITE.DELAY_HELMET];
           u.translate(t.width - 2 * C, xI.gauges.translate.y - 125 * C);
           var r = -t.width / 2 + 10
             , n = -t.height / 2 - 4;
           qn(u, t, r, n),
           u.beginPath(),
           u.lineWidth = 5 * C,
           u.strokeStyle = SPRITE.HELMET_LOADING[UI.time],
           u.lineCap = "round",
           u.arc(9, n + t.height / 2, 25 * C, 0, 2 * Math.PI * e.timeout.v),
           u.stroke(),
           u.restore(),
           i && (e.wait = !1,
           e.timeout.v = 0,
           e.timeout.o = !1)
       }
   }
   function No() {
       var e = kI.weapon;
       if (e.wait) {
           var i = e.timeout.update();
           u.save();
           var t = sprite[SPRITE.DELAY_WEAPON];
           u.translate(t.width - 2 * C, xI.gauges.translate.y - 60 * C);
           var r = -t.width / 2 - 2
             , n = -t.height / 2 - 4;
           qn(u, t, r, n),
           u.beginPath(),
           u.lineWidth = 5 * C,
           u.strokeStyle = SPRITE.WEAPON_LOADING[UI.time],
           u.lineCap = "round",
           u.arc(0, n + t.height / 2, 25 * C, 0, 2 * Math.PI * e.timeout.v),
           u.stroke(),
           u.restore(),
           i && (e.wait = !1,
           e.timeout.v = 0,
           e.timeout.o = !1)
       }
   }
   function Co() {
       var e = kI.craft;
       if (e.crafting) {
           var i = UI.fast_units[kI.uid];
           u.save(),
           u.translate(kI.cam.x + i.x, kI.cam.y + i.y);
           var t = sprite[SPRITE.GEAR]
             , r = -t.width / 2
             , n = -t.height / 2 - 125 * C;
           qn(u, t, r, n),
           u.beginPath(),
           u.lineWidth = 5 * C,
           u.strokeStyle = SPRITE.CRAFT_LOADING[UI.time],
           u.lineCap = "round",
           u.arc(0, n + t.height / 2, 25 * C, 0, 2 * Math.PI * e.timeout.v),
           u.stroke(),
           u.restore()
       }
   }
   function go() {
       var e = kI.craft;
       if (!e.crafting && e.preview > 0) {
           var i = UI.fast_units[kI.uid];
           if (!i)
               return;
           if (u.save(),
           0 === INV_INFOS[e.preview].grid && 0 === e.mode)
               u.translate(kI.cam.x + i.x, kI.cam.y + i.y),
               u.rotate(i.angle),
               u.translate(120, 0);
           else {
               var t = Math.floor(i.x + 120 * Math.cos(i.angle))
                 , r = Math.floor(i.y + 120 * Math.sin(i.angle));
               t = kI.cam.x + (t - t % 100 + 50),
               r = kI.cam.y + (r - r % 100 + 50),
               u.translate(t, r)
           }
           var n = sprite[e.preview][UI.time];
           if (u.globalAlpha = .5,
           qn(u, n, -n.width / 2, -n.height / 2),
           u.globalAlpha = 1,
           u.restore(),
           0 === INV_INFOS[e.preview].grid) {
               e.label[e.mode] || (0 === e.mode ? e.label[0] = Yi(C, q[TEXT.MODE_FREE], 20, "#e2c340") : e.label[1] = Yi(C, q[TEXT.MODE_GRID], 20, "#e2c340"));
               n = e.label[e.mode];
               qn(u, n, d + -n.width / 2, xI.gauges.y - 26)
           }
       }
       if (e.crafting) {
           for (var o = e.timeout.update(), a = 0; a < e.can_craft.length; a++) {
               var s = e.can_craft[a];
               if (e.id == s.id) {
                   var T = 42 * C
                     , I = 17 * C;
                   Te(u, s.info.translate.x, s.info.translate.y + T * (1 - e.timeout.v), s.info.width, T * e.timeout.v + I, 10 * C),
                   u.fillStyle = "#55B973",
                   u.fill(),
                   u.globalAlpha = .8,
                   s.draw(u)
               } else
                   u.globalAlpha = .5,
                   s.draw(u);
               u.globalAlpha = 1
           }
           return o && (e.crafting = !1,
           e.timeout.v = 0,
           e.timeout.o = !1,
           kI.craft.id = -1),
           !0
       }
       for (a = 0; a < e.can_craft.length; a++)
           e.can_craft[a].draw(u);
       return !1
   }
   function bo() {
       for (var e = UI.units[hT.PLAYERS], i = 0; i < e.length; i++)
           e[i].draw_text()
   }
   function Oo() {
       for (var e = kI.inv, i = UI.fast_units[kI.uid], t = 0; t < e.can_select.length; t++) {
           var r = e.can_select[t]
             , n = !1;
           (i = UI.fast_units[kI.uid]) && (i.right == r.id || i.clothe == r.id && i.clothe > 0) ? (n = !0,
           qn(u, r.info.img[2], r.info.translate.x, r.info.translate.y, r.info.width, r.info.height)) : r.draw(u);
           var o = kI.inv.n[r.id];
           o > 1 && Qn(o, r),
           o > 0 && Zn(t, r, n);
           var a = kI.chest;
           !a.open || !(a.id < 0 || a.id == r.id) || a.lock && a.pid != kI.id || xI.plus_buttons[r.id].draw(u),
           kI.furnace.open && INV.WOOD == r.id && xI.plus_buttons[r.id].draw(u),
           kI.well.open && INV.BUCKET_FULL == r.id && xI.plus_buttons[r.id].draw(u),
           kI.windmill.open && INV.WILD_WHEAT == r.id && xI.plus_buttons[r.id].draw(u),
           kI.extractor.open && INV.WOOD == r.id && xI.plus_buttons[r.id].draw(u),
           !kI.bread_oven.open || INV.WOOD != r.id && INV.FLOUR != r.id || xI.plus_buttons[r.id].draw(u)
       }
       if (r && t < e.max) {
           var s = sprite[SPRITE.EMPTY_SLOT][2];
           for (x = r.info.translate.x,
           y = r.info.translate.y,
           j = 1; t < e.max; t++,
           j++)
               qn(u, s, x + j * (s.width + 5), y)
       }
   }
   function po() {
       u.save();
       var e = C;
       kI.gauges.life.x < .25 && (u.globalAlpha = kI.gauges.warn_life.v);
       var i = kI.inv.can_select.length > 0 ? -70 : 0;
       if ((kI.chest.open || kI.furnace.open && -1 != kI.inv.find_item(INV.WOOD) || kI.windmill.open && -1 != kI.inv.find_item(INV.WILD_WHEAT) || kI.extractor.open && -1 != kI.inv.find_item(INV.WOOD) || kI.well.open && -1 != kI.inv.find_item(INV.BUCKET_FULL) || kI.bread_oven.open && (-1 != kI.inv.find_item(INV.WOOD) || -1 != kI.inv.find_item(INV.FLOUR))) && (i -= 50 * C),
       u.translate((R - 950 * C) / 2, i),
       u.fillStyle = "#69A148",
       u.fillRect(this.translate.x + 37 * C, this.translate.y + 17 * C, 178 * kI.gauges.life.x * C, 18 * C),
       u.globalAlpha = 1,
       kI.gauges.hunger.x < .35 && (u.fillStyle = "#8F050A",
       u.globalAlpha = kI.gauges.warn_hunger.v,
       u.fillRect(this.translate.x + 277 * C, this.translate.y + 17 * C, 178 * C, 18 * C),
       u.globalAlpha = 1),
       u.fillStyle = "#AF352A",
       u.fillRect(this.translate.x + 277 * C, this.translate.y + 17 * C, 178 * kI.gauges.hunger.x * C, 18 * C),
       kI.gauges.cold.x < .35 && (u.fillStyle = "#366B91",
       u.globalAlpha = kI.gauges.warn_cold.v,
       u.fillRect(this.translate.x + 517 * C, this.translate.y + 17 * C, 178 * C, 18 * C),
       u.globalAlpha = 1),
       u.fillStyle = "#669BB1",
       u.fillRect(this.translate.x + 517 * C, this.translate.y + 17 * C, 178 * kI.gauges.cold.x * C, 18 * C),
       kI.gauges.cold.x > .99 && (kI.gauges.warm.x < .35 && (u.fillStyle = "#6C4036",
       u.globalAlpha = kI.gauges.warn_warm.v,
       u.fillRect(this.translate.x + 517 * C, this.translate.y + 17 * C, 178 * C, 18 * C),
       u.globalAlpha = 1),
       u.fillStyle = "#9C4036",
       u.fillRect(this.translate.x + 517 * C, this.translate.y + 17 * C, 178 * (1 - kI.gauges.warm.x) * C, 18 * C)),
       kI.gauges.thirst.x < .35 && (u.fillStyle = "#001A57",
       u.globalAlpha = kI.gauges.warn_thirst.v,
       u.fillRect(this.translate.x + 757 * C, this.translate.y + 17 * C, 178 * C, 18 * C),
       u.globalAlpha = 1),
       u.fillStyle = "#074A87",
       u.fillRect(this.translate.x + 757 * C, this.translate.y + 17 * C, 178 * kI.gauges.thirst.x * C, 18 * C),
       C = e,
       qn(u, this.img, this.translate.x, this.translate.y),
       this.y = this.translate.y + i,
       u.restore(),
       kI.gauges.oxygen.x < .99) {
           var t = Math.floor(d - sprite[SPRITE.OXYGEN].width / 2);
           i += this.translate.y - sprite[SPRITE.OXYGEN].height - 5 * C,
           u.fillStyle = "#BBE8EF",
           u.fillRect(t + 5, i + 5 * C, 588 * C * kI.gauges.oxygen.x, 10 * C),
           kI.gauges.oxygen.x < .35 && (u.fillStyle = "#9BA8AF",
           u.globalAlpha = kI.gauges.warn_oxygen.v,
           u.fillRect(t + 5, i + 5, 588 * C, 10 * C),
           u.globalAlpha = 1),
           qn(u, sprite[SPRITE.OXYGEN], t, i),
           this.y = i
       }
   }
   function co(e) {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var i = (1 - this.hit.anim.v) * jI * 600 * C
             , t = Math.cos(this.hit.angle - this.angle) * i
             , r = Math.sin(this.hit.angle - this.angle) * i
       } else
           t = 0,
           r = 0;
       var n = sprite[e][UI.time];
       w = -n.width,
       h = -n.height,
       qn(u, n, -w / 2 + t, -h / 2 + r, w, h),
       u.restore()
   }
   function vo() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       img = sprite[SPRITE.CHEST][UI.time],
       w = -img.width,
       h = -img.height,
       qn(u, img, -w / 2 + i, -h / 2 + t, w, h),
       this.lock && (img = sprite[SPRITE.LOCK][UI.time],
       w = -img.width,
       h = -img.height,
       qn(u, img, -w / 2 + i - 1 * C, -h / 2 + t, w, h)),
       u.restore()
   }
   function Po() {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       img = sprite[SPRITE.THORNBUSH_SEED_MOB][UI.time],
       w = -img.width,
       h = -img.height,
       qn(u, img, -w / 2, -h / 2, w, h),
       u.restore()
   }
   function mo() {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       img = sprite[SPRITE.GARLIC_SEED_MOB][UI.time],
       w = -img.width,
       h = -img.height,
       qn(u, img, -w / 2, -h / 2, w, h),
       u.restore()
   }
   function Do() {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       img = sprite[SPRITE.PUMPKIN_SEED_MOB][UI.time],
       w = -img.width,
       h = -img.height,
       qn(u, img, -w / 2, -h / 2, w, h),
       u.restore()
   }
   function Mo() {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       img = sprite[SPRITE.ALOE_VERA][UI.time],
       w = -img.width,
       h = -img.height,
       qn(u, img, -w / 2, -h / 2, w, h),
       u.restore()
   }
   function Go() {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       img = sprite[SPRITE.WHEAT_MOB][UI.time],
       w = -img.width,
       h = -img.height,
       qn(u, img, -w / 2, -h / 2, w, h),
       u.restore()
   }
   function Lo(e) {
       if (!((e = e / 100) > .8 || e <= 0)) {
           if (u.save(),
           u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
           u.rotate(this.angle),
           this.hit.update) {
               this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
               var i = (1 - this.hit.anim.v) * jI * 600 * C
                 , t = Math.cos(this.hit.angle - this.angle) * i
                 , r = Math.sin(this.hit.angle - this.angle) * i
           } else
               t = 0,
               r = 0;
           u.globalAlpha = .5,
           _e(u, t, r, 18 * C, e),
           se(u, null, "#000000", 18 * C),
           u.globalAlpha = 1,
           _e(u, t, r, 18 * C, e),
           se(u, null, SPRITE.BROWN_LIFE[UI.time], 6 * C),
           u.restore()
       }
   }
   function fo(e) {
       if (!((e = e / 100) > .95)) {
           if (u.save(),
           u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
           u.rotate(this.angle),
           this.hit.update) {
               this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
               var i = (1 - this.hit.anim.v) * jI * 600 * C
                 , t = Math.cos(this.hit.angle - this.angle) * i
                 , r = Math.sin(this.hit.angle - this.angle) * i
           } else
               t = 0,
               r = 0;
           u.globalAlpha = .5,
           _e(u, t, r, 28 * C, e),
           se(u, null, "#000000", 18 * C),
           u.globalAlpha = 1,
           _e(u, t, r, 28 * C, e),
           se(u, null, SPRITE.CRAFT_LOADING[UI.time], 6 * C),
           u.restore()
       }
   }
   function Vo() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       var r = sprite[SPRITE.ROOFS].length;
       img = sprite[SPRITE.ROOFS][(this.j + this.i % 2) % r][UI.time],
       w = -img.width,
       h = -img.height;
       var n = UI.fast_units[kI.uid];
       n && (kI.id === this.pid || kI.in_team(this.pid)) ? s.dist(this, n) < 550 ? this.opacity = Math.max(this.opacity - jI, .3) : this.opacity = Math.min(this.opacity + jI, 1) : n && s.dist(this, UI.fast_units[kI.uid]) < 150 ? this.opacity = Math.max(this.opacity - jI, .3) : this.opacity = Math.min(this.opacity + jI, 1);
       var o = u.globalAlpha;
       u.globalAlpha *= this.opacity,
       qn(u, img, -w / 2 + i, -h / 2 + t, w, h),
       u.globalAlpha = o,
       u.restore()
   }
   function zo() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       this.halo.update() && (this.color += .2 + .3 * Math.random()),
       img = sprite[SPRITE.GARLANDS][Math.floor(this.id + this.color) % 5][UI.time],
       w = -img.width * this.halo.v,
       h = -img.height * this.halo.v,
       qn(u, img, -w / 2 + i, -h / 2 + t, w, h),
       u.restore()
   }
   function Ho(e) {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var i = (1 - this.hit.anim.v) * jI * 600 * C
             , t = Math.cos(this.hit.angle - this.angle) * i
             , r = Math.sin(this.hit.angle - this.angle) * i
       } else
           t = 0,
           r = 0;
       if (e === SPRITE.BED_TOP && !UI.transition) {
           for (var n = 0, o = UI.units[hT.PLAYERS], a = 0; a < o.length; a++) {
               var T = s.dist(o[a], this);
               if (T < 140 && T > 35) {
                   n = 0;
                   break
               }
               T <= 35 && (n = 1)
           }
           this.opacity = 0 === n ? Math.max(.5, this.opacity - jI / 1.5) : Math.min(1, this.opacity + jI / 1.5),
           u.globalAlpha = this.opacity
       }
       img = sprite[e][UI.time],
       w = -img.width,
       h = -img.height,
       qn(u, img, -w / 2 + t, -h / 2 + r, w, h),
       u.globalAlpha = 1,
       u.restore()
   }
   function yo(e) {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var i = (1 - this.hit.anim.v) * jI * 600 * C
             , t = Math.cos(this.hit.angle - this.angle) * i
             , r = Math.sin(this.hit.angle - this.angle) * i
       } else
           t = 0,
           r = 0;
       img = sprite[e][UI.time],
       w = -img.width,
       h = -img.height,
       qn(u, img, -w / 2 + t, -h / 2 + r, w, h),
       u.restore()
   }
   var Bo = 0;
   function wo(e, i, t, r, n, o, a, s) {
       void 0 === s && (s = 0);
       for (var T = e; T <= i; T++)
           for (var I = t; I <= r; I++) {
               var E = wI.tiles[T][I];
               if (void 0 !== E && void 0 !== E[o]) {
                   var _ = E[o]
                     , h = sprite[n][UI.time][_.river];
                   if (qn(u, h, kI.cam.x + _.x - h.width / (4 * _scale_object), kI.cam.y + _.y - h.height / (4 * _scale_object), h.width / (2 * _scale_object), h.height / (2 * _scale_object)),
                   YI.quality) {
                       var R = 2147483648
                         , A = (1103515245 * (1e3 * T + I) + 12345) % R / R;
                       if (A < .2) {
                           A = Math.floor(sprite[SPRITE.RIVER_DECO][UI.time][_.river].length * (5 * A));
                           h = sprite[SPRITE.RIVER_DECO][UI.time][_.river][A];
                           qn(u, h, kI.cam.x + _.x - h.width / (4 * _scale_object), kI.cam.y + _.y - h.height / (4 * _scale_object), h.width / (2 * _scale_object), h.height / (2 * _scale_object))
                       } else if (0 !== _.current) {
                           h = sprite[SPRITE.RIVER_WAVE][UI.time];
                           var d = (Bo + T % 2 * 30) % 60;
                           u.globalAlpha = d < 30 ? d / 30 : 1 - (d - 30) / 30,
                           qn(u, h, kI.cam.x + _.x - h.width / (4 * _scale_object), kI.cam.y + _.y - h.height / (4 * _scale_object) - 30 + d, h.width / (2 * _scale_object), h.height / (2 * _scale_object)),
                           u.globalAlpha = 1
                       }
                   }
               }
           }
   }
   function Ko() {
       if (1 == (1 & this.info))
           this.dig = Math.min(this.dig + jI, 2.2);
       else if (this.dig = Math.max(this.dig - jI, 0),
       this.groundTimer += jI,
       this.groundTimer > .1) {
           this.groundTimer = 0;
           var e = {
               x: this.x + 60 * Math.random() - 30,
               y: this.y + 60 * Math.random() - 30,
               a: 0,
               r: 30 * Math.random() + 30
           };
           this.ground.push(e)
       }
       for (var i = 0; i < this.ground.length; i++) {
           e = this.ground[i];
           u.save(),
           u.translate(kI.cam.x + e.x, kI.cam.y + e.y),
           e.a = Math.min(1, e.a + jI / 2);
           var t = e.a;
           t < .2 ? t *= 5 : t = t > .8 ? 5 * (1 - t) : 1,
           u.globalAlpha = .8 * t,
           Ee(u, 0, 0, e.r),
           se(u, SPRITE.SAND_WORM_GROUND[UI.time]),
           u.restore(),
           1 === e.a && (this.ground.splice(i, 1),
           i--)
       }
   }
   function Wo() {
       var e = void 0
         , i = void 0;
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.breath.update(),
       this.rotate.update(),
       this.dig >= .1 && this.dig <= 1.1) {
           (t = Math.max(0, Math.min(1, this.dig - .1))) < .2 ? t *= 5 : t = t > .8 ? 5 * (1 - t) : 1;
           e = sprite[SPRITE.SAND_WORM1][UI.time];
           w = -e.width * this.breath.v,
           h = -e.height * this.breath.v,
           u.globalAlpha = t,
           qn(u, e, -w / 4, -h / 4, w / 2, h / 2);
           i = sprite[SPRITE.HURT_SAND_WORM1]
       }
       if (this.dig >= .9) {
           var t;
           (t = Math.max(0, Math.min(1, this.dig - .9))) < .2 ? t *= 5 : t = 1;
           e = sprite[SPRITE.SAND_WORM2][UI.time];
           w = -e.width * this.breath.v,
           h = -e.height * this.breath.v,
           u.globalAlpha = t,
           qn(u, e, -w / 4, -h / 4, w / 2, h / 2);
           i = sprite[SPRITE.HURT_SAND_WORM2]
       }
       this.action & sT.HURT && void 0 !== i && (this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
       u.globalAlpha = (.6 - this.hit.v) * t,
       w = -i.width * this.breath.v,
       h = -i.height * this.breath.v,
       qn(u, i, -w / 4, -h / 4, w / 2, h / 2)),
       u.globalAlpha = 1,
       u.restore()
   }
   function Yo() {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle);
       var e = s.dist(this, this.r);
       if (this.scale = e > 350 ? Math.min(this.scale + jI / 2, 1.8) : Math.max(this.scale - jI, 1),
       this.breath.update(),
       this.rotate.update(),
       this._alpha = e < 350 ? Math.max(0, this._alpha - 2.2 * jI) : Math.min(1, this._alpha + 2.2 * jI),
       i = sprite[SPRITE.VULTURE_GROUND_ATTACK][UI.time],
       w = -i.width * this.breath.v * this.scale,
       h = -i.height * this.breath.v * this.scale,
       u.globalAlpha = 1 - this._alpha,
       qn(u, i, -w / 4, -h / 4, w / 2, h / 2),
       i = sprite[SPRITE.VULTURE_ATTACK][UI.time],
       w = -i.width * this.breath.v * this.scale,
       h = -i.height * this.breath.v * this.scale,
       u.globalAlpha = this._alpha,
       qn(u, i, -w / 4, -h / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
           u.globalAlpha = (.6 - this.hit.v) * (1 - this._alpha);
           var i = sprite[SPRITE.HURT_VULTURE_GROUND];
           w = -i.width * this.breath.v * this.scale,
           h = -i.height * this.breath.v * this.scale,
           qn(u, i, -w / 4, -h / 4, w / 2, h / 2),
           u.globalAlpha = (.6 - this.hit.v) * this._alpha;
           i = sprite[SPRITE.HURT_VULTURE];
           w = -i.width * this.breath.v * this.scale,
           h = -i.height * this.breath.v * this.scale,
           qn(u, i, -w / 4, -h / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       if (i = sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][UI.time],
       w = -i.width * this.breath.v * this.scale,
       h = -i.height * this.breath.v * this.scale,
       u.save(),
       u.translate(-40 * C, 80 * C),
       u.rotate(this.rotate.v),
       u.globalAlpha = this._alpha,
       qn(u, i, -w * C / 4, -h * C / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           u.globalAlpha = (.6 - this.hit.v) * this._alpha;
           i = sprite[SPRITE.HURT_VULTURE_WING_LEFT];
           qn(u, i, -w * C / 4, -h * C / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       if (u.restore(),
       i = sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][UI.time],
       u.save(),
       u.translate(40 * C, 80 * C),
       u.rotate(-this.rotate.v),
       u.globalAlpha = this._alpha,
       qn(u, i, -w * C / 4, -h * C / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           u.globalAlpha = (.6 - this.hit.v) * this._alpha;
           i = sprite[SPRITE.HURT_VULTURE_WING_RIGHT];
           qn(u, i, -w * C / 4, -h * C / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       u.globalAlpha = 1,
       u.restore(),
       u.restore()
   }
   function Uo() {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle);
       var e = s.dist(this, this.r);
       if (this.scale = e > 350 ? Math.min(this.scale + jI / 2, 1.8) : Math.max(this.scale - jI, 1),
       this.breath.update(),
       this.rotate.update(),
       this._alpha = e < 350 ? Math.max(0, this._alpha - 2.2 * jI) : Math.min(1, this._alpha + 2.2 * jI),
       i = 0 == (1 & this.info) ? sprite[SPRITE.HAWK_GROUND][UI.time] : sprite[SPRITE.HAWK_GROUND_ATTACK][UI.time],
       w = -i.width * this.breath.v * this.scale,
       h = -i.height * this.breath.v * this.scale,
       u.globalAlpha = 1 - this._alpha,
       qn(u, i, -w / 4, -h / 4, w / 2, h / 2),
       i = 0 == (1 & this.info) ? sprite[SPRITE.HAWK][UI.time] : sprite[SPRITE.HAWK_ATTACK][UI.time],
       w = -i.width * this.breath.v * this.scale,
       h = -i.height * this.breath.v * this.scale,
       u.globalAlpha = this._alpha,
       qn(u, i, -w / 4, -h / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
           u.globalAlpha = (.6 - this.hit.v) * (1 - this._alpha);
           var i = sprite[SPRITE.HURT_HAWK_GROUND];
           w = -i.width * this.breath.v * this.scale,
           h = -i.height * this.breath.v * this.scale,
           qn(u, i, -w / 4, -h / 4, w / 2, h / 2),
           u.globalAlpha = (.6 - this.hit.v) * this._alpha;
           i = sprite[SPRITE.HURT_HAWK];
           w = -i.width * this.breath.v * this.scale,
           h = -i.height * this.breath.v * this.scale,
           qn(u, i, -w / 4, -h / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       if (i = 0 == (1 & this.info) ? sprite[SPRITE.HAWK_WING_LEFT][UI.time] : sprite[SPRITE.HAWK_WING_LEFT_ATTACK][UI.time],
       w = -i.width * this.breath.v * this.scale,
       h = -i.height * this.breath.v * this.scale,
       u.save(),
       u.translate(-20 * C, 0 * C),
       u.rotate(this.rotate.v),
       u.globalAlpha = this._alpha,
       qn(u, i, -w * C / 4, -h * C / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           u.globalAlpha = (.6 - this.hit.v) * this._alpha;
           i = sprite[SPRITE.HURT_HAWK_WING_LEFT];
           qn(u, i, -w * C / 4, -h * C / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       if (u.restore(),
       i = 0 == (1 & this.info) ? sprite[SPRITE.HAWK_WING_RIGHT][UI.time] : sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][UI.time],
       u.save(),
       u.translate(20 * C, 0 * C),
       u.rotate(-this.rotate.v),
       u.globalAlpha = this._alpha,
       qn(u, i, -w * C / 4, -h * C / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           u.globalAlpha = (.6 - this.hit.v) * this._alpha;
           i = sprite[SPRITE.HURT_HAWK_WING_RIGHT];
           qn(u, i, -w * C / 4, -h * C / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       u.globalAlpha = 1,
       u.restore(),
       u.restore()
   }
   function ko() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       s.dist(this, this.r) > 300 ? this.scale = Math.min(this.scale + jI / 2, 1.8) : this.scale = Math.max(this.scale - jI, 1),
       this.breath.update(),
       this.rotate.update(),
       e = 0 === this.info ? sprite[SPRITE.BABY_LAVA][UI.time] : sprite[SPRITE.BABY_LAVA_ATTACK][UI.time],
       w = -e.width * this.breath.v * this.scale,
       h = -e.height * this.breath.v * this.scale,
       qn(u, e, -w / 4, -h / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
           u.globalAlpha = .6 - this.hit.v;
           var e = sprite[SPRITE.HURT_BABY_LAVA];
           qn(u, e, -w / 4, -h / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       if (e = 0 === this.info ? sprite[SPRITE.BABY_LAVA_WING_LEFT][UI.time] : sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][UI.time],
       w = -e.width * this.breath.v * this.scale,
       h = -e.height * this.breath.v * this.scale,
       u.save(),
       u.translate(-40 * C, 10 * C),
       u.rotate(this.rotate.v),
       qn(u, e, -w * C / 4, -h * C / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           u.globalAlpha = .6 - this.hit.v;
           e = sprite[SPRITE.HURT_BABY_LAVA_WING_LEFT];
           qn(u, e, -w * C / 4, -h * C / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       if (u.restore(),
       e = 0 === this.info ? sprite[SPRITE.BABY_LAVA_WING_RIGHT][UI.time] : sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][UI.time],
       u.save(),
       u.translate(40 * C, 10 * C),
       u.rotate(-this.rotate.v),
       qn(u, e, -w * C / 4, -h * C / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           u.globalAlpha = .6 - this.hit.v;
           e = sprite[SPRITE.HURT_BABY_LAVA_WING_RIGHT];
           qn(u, e, -w * C / 4, -h * C / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       u.restore(),
       u.restore()
   }
   function Fo() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       s.dist(this, this.r) > 300 ? this.scale = Math.min(this.scale + jI / 2, 1.8) : this.scale = Math.max(this.scale - jI, 1),
       this.breath.update(),
       this.rotate.update(),
       e = 0 === this.info ? sprite[SPRITE.BABY_DRAGON][UI.time] : sprite[SPRITE.BABY_DRAGON_ATTACK][UI.time],
       w = -e.width * this.breath.v * this.scale,
       h = -e.height * this.breath.v * this.scale,
       qn(u, e, -w / 4, -h / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
           u.globalAlpha = .6 - this.hit.v;
           var e = sprite[SPRITE.HURT_BABY_DRAGON];
           qn(u, e, -w / 4, -h / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       if (e = 0 === this.info ? sprite[SPRITE.BABY_DRAGON_WING_LEFT][UI.time] : sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][UI.time],
       w = -e.width * this.breath.v * this.scale,
       h = -e.height * this.breath.v * this.scale,
       u.save(),
       u.translate(-40 * C, 10 * C),
       u.rotate(this.rotate.v),
       qn(u, e, -w * C / 4, -h * C / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           u.globalAlpha = .6 - this.hit.v;
           e = sprite[SPRITE.HURT_BABY_DRAGON_WING_LEFT];
           qn(u, e, -w * C / 4, -h * C / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       if (u.restore(),
       e = 0 === this.info ? sprite[SPRITE.BABY_DRAGON_WING_RIGHT][UI.time] : sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][UI.time],
       u.save(),
       u.translate(40 * C, 10 * C),
       u.rotate(-this.rotate.v),
       qn(u, e, -w * C / 4, -h * C / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           u.globalAlpha = .6 - this.hit.v;
           e = sprite[SPRITE.HURT_BABY_DRAGON_WING_RIGHT];
           qn(u, e, -w * C / 4, -h * C / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       u.restore(),
       u.restore()
   }
   function xo() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       s.dist(this, this.r) > 300 ? this.scale = Math.min(this.scale + jI / 2, 1.8) : this.scale = Math.max(this.scale - jI, 1),
       this.breath.update(),
       this.rotate.update(),
       e = sprite[SPRITE.LAVA_DRAGON][UI.time],
       w = -e.width * this.breath.v * this.scale,
       h = -e.height * this.breath.v * this.scale,
       qn(u, e, -w / 4, -h / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
           u.globalAlpha = .6 - this.hit.v;
           var e = sprite[SPRITE.HURT_LAVA_DRAGON];
           qn(u, e, -w / 4, -h / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       if (e = sprite[SPRITE.LAVA_WING_LEFT][UI.time],
       w = -e.width * this.breath.v * this.scale,
       h = -e.height * this.breath.v * this.scale,
       u.save(),
       u.translate(-60 * C, 20 * C),
       u.rotate(this.rotate.v),
       qn(u, e, -w * C / 4, -h * C / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           u.globalAlpha = .6 - this.hit.v;
           e = sprite[SPRITE.HURT_LAVA_WING_LEFT];
           qn(u, e, -w * C / 4, -h * C / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       if (u.restore(),
       e = sprite[SPRITE.LAVA_WING_RIGHT][UI.time],
       u.save(),
       u.translate(60 * C, 20 * C),
       u.rotate(-this.rotate.v),
       qn(u, e, -w * C / 4, -h * C / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           u.globalAlpha = .6 - this.hit.v;
           e = sprite[SPRITE.HURT_LAVA_WING_RIGHT];
           qn(u, e, -w * C / 4, -h * C / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       u.restore(),
       u.restore()
   }
   function Jo() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       s.dist(this, this.r) > 300 ? this.scale = Math.min(this.scale + jI / 2, 1.8) : this.scale = Math.max(this.scale - jI, 1),
       this.breath.update(),
       this.rotate.update(),
       e = sprite[SPRITE.DRAGON][UI.time],
       w = -e.width * this.breath.v * this.scale,
       h = -e.height * this.breath.v * this.scale,
       qn(u, e, -w / 2, -h / 2, w, h),
       this.action & sT.HURT) {
           this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
           u.globalAlpha = .6 - this.hit.v;
           var e = sprite[SPRITE.HURT_DRAGON];
           qn(u, e, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       if (e = sprite[SPRITE.WING_LEFT][UI.time],
       w = -e.width * this.breath.v * this.scale,
       h = -e.height * this.breath.v * this.scale,
       u.save(),
       u.translate(-30 * C, 70 * C),
       u.rotate(this.rotate.v),
       qn(u, e, -10 * C, -40 * C, w, h),
       this.action & sT.HURT) {
           u.globalAlpha = .6 - this.hit.v;
           e = sprite[SPRITE.HURT_WING_LEFT];
           qn(u, e, -10 * C, -40 * C, w, h),
           u.globalAlpha = 1
       }
       if (u.restore(),
       e = sprite[SPRITE.WING_RIGHT][UI.time],
       u.save(),
       u.translate(30 * C, 70 * C),
       u.rotate(-this.rotate.v),
       qn(u, e, 10 * C - w, -40 * C, w, h),
       this.action & sT.HURT) {
           u.globalAlpha = .6 - this.hit.v;
           e = sprite[SPRITE.HURT_WING_RIGHT];
           qn(u, e, 10 * C - w, -40 * C, w, h),
           u.globalAlpha = 1
       }
       u.restore(),
       u.restore()
   }
   function Xo(e) {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       e === SPRITE.GIFT && (e = SPRITE.CRATE,
       this.info = 36),
       img = sprite[e][this.info][UI.time],
       w = -img.width / 2,
       h = -img.height / 2,
       qn(u, img, -w / 2, -h / 2, w, h),
       this.action & sT.HURT) {
           this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
           u.globalAlpha = .6 - this.hit.v;
           var i = Ka(this.info, img, __EFFECT_BOX__);
           qn(u, i, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       u.restore()
   }
   function qo(e, i) {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       t = sprite[e][UI.time],
       w = -t.width,
       h = -t.height,
       qn(u, t, -w / 2, -h / 2, w, h),
       this.action & sT.HURT) {
           this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
           u.globalAlpha = .6 - this.hit.v;
           var t = sprite[i];
           qn(u, t, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       u.restore()
   }
   function jo() {
       if (this.breath.update(),
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       e = 0 === this.info ? sprite[SPRITE.BABY_MAMMOTH][UI.time] : sprite[SPRITE.BABY_MAMMOTH_ATTACK][UI.time],
       w = -e.width * this.breath.v,
       h = -e.height * this.breath.v,
       qn(u, e, -w / 2, -h / 2, w, h),
       this.action & sT.HURT) {
           this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
           u.globalAlpha = .6 - this.hit.v;
           var e = sprite[SPRITE.HURT_BABY_MAMMOTH];
           qn(u, e, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       u.restore()
   }
   function Zo() {
       if (this.breath.update(),
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       e = 0 === this.info ? sprite[SPRITE.BOAR][UI.time] : sprite[SPRITE.BOAR_ATTACK][UI.time],
       w = -e.width * this.breath.v,
       h = -e.height * this.breath.v,
       qn(u, e, -w / 2, -h / 2, w, h),
       this.action & sT.HURT) {
           this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
           u.globalAlpha = .6 - this.hit.v;
           var e = sprite[SPRITE.HURT_BOAR];
           qn(u, e, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       u.restore()
   }
   function Qo() {
       var e = Math.PI / 2
         , i = Math.PI / 4;
       if (this.breath.update(),
       this.breathl.update(),
       this.breathr.update(),
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       t = 0 === this.info ? sprite[SPRITE.CRAB_BOSS][UI.time] : sprite[SPRITE.CRAB_BOSS_ATTACK][UI.time],
       w = -t.width * this.breath.v,
       h = -t.height * this.breath.v,
       qn(u, t, -w / 2, -h / 2, w, h),
       this.action & sT.HURT) {
           this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
           u.globalAlpha = .6 - this.hit.v;
           var t = sprite[SPRITE.HURT_CRAB_BOSS];
           qn(u, t, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       if (this.action & sT.COLD) {
           this.heal.update() && 0 == this.heal.o && (this.action -= sT.COLD),
           u.globalAlpha = .6 - this.heal.v;
           t = sprite[SPRITE.HEAL_CRAB_BOSS];
           qn(u, t, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       if (u.restore(),
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle + i),
       u.translate(100, 0),
       u.rotate(e),
       t = 0 === this.info ? sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][UI.time] : sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][UI.time],
       w = -t.width * this.breathl.v,
       h = -t.height * this.breathl.v,
       qn(u, t, -w / 2, -h / 2, w, h),
       this.action & sT.HURT) {
           u.globalAlpha = .6 - this.hit.v;
           t = sprite[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT];
           qn(u, t, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       if (this.action & sT.COLD) {
           u.globalAlpha = .6 - this.heal.v;
           t = sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT];
           qn(u, t, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       if (u.restore(),
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle + e + i),
       u.translate(100, 0),
       u.rotate(e),
       t = 0 === this.info ? sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][UI.time] : sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][UI.time],
       w = -t.width * this.breathr.v,
       h = -t.height * this.breathr.v,
       qn(u, t, -w / 2, -h / 2, w, h),
       this.action & sT.HURT) {
           u.globalAlpha = .6 - this.hit.v;
           t = sprite[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT];
           qn(u, t, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       if (this.action & sT.COLD) {
           u.globalAlpha = .6 - this.heal.v;
           t = sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT];
           qn(u, t, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       u.restore()
   }
   function $o() {
       var e = Math.PI / 2
         , i = Math.PI / 4;
       if (this.breath.update(),
       this.breathl.update(),
       this.breathr.update(),
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       t = 0 === this.info ? sprite[SPRITE.CRAB][UI.time] : sprite[SPRITE.CRAB_ATTACK][UI.time],
       w = -t.width * this.breath.v,
       h = -t.height * this.breath.v,
       qn(u, t, -w / 2, -h / 2, w, h),
       this.action & sT.HURT) {
           this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
           u.globalAlpha = .6 - this.hit.v;
           var t = sprite[SPRITE.HURT_CRAB];
           qn(u, t, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       if (this.action & sT.COLD) {
           this.heal.update() && 0 == this.heal.o && (this.action -= sT.COLD),
           u.globalAlpha = .6 - this.heal.v;
           t = sprite[SPRITE.HEAL_CRAB];
           qn(u, t, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       if (u.restore(),
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle + i),
       u.translate(55, 0),
       u.rotate(e),
       t = 0 === this.info ? sprite[SPRITE.CRAB_CLAW_LEFT][UI.time] : sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][UI.time],
       w = -t.width * this.breathl.v,
       h = -t.height * this.breathl.v,
       qn(u, t, -w / 2, -h / 2, w, h),
       this.action & sT.HURT) {
           u.globalAlpha = .6 - this.hit.v;
           t = sprite[SPRITE.HURT_CRAB_CLAW_LEFT];
           qn(u, t, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       if (this.action & sT.COLD) {
           u.globalAlpha = .6 - this.heal.v;
           t = sprite[SPRITE.HEAL_CRAB_CLAW_LEFT];
           qn(u, t, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       if (u.restore(),
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle + e + i),
       u.translate(55, 0),
       u.rotate(e),
       t = 0 === this.info ? sprite[SPRITE.CRAB_CLAW_RIGHT][UI.time] : sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][UI.time],
       w = -t.width * this.breathr.v,
       h = -t.height * this.breathr.v,
       qn(u, t, -w / 2, -h / 2, w, h),
       this.action & sT.HURT) {
           u.globalAlpha = .6 - this.hit.v;
           t = sprite[SPRITE.HURT_CRAB_CLAW_RIGHT];
           qn(u, t, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       if (this.action & sT.COLD) {
           u.globalAlpha = .6 - this.heal.v;
           t = sprite[SPRITE.HEAL_CRAB_CLAW_RIGHT];
           qn(u, t, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       u.restore()
   }
   function ea() {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.born = Math.min(1, this.born + 2 * jI),
       u.globalAlpha = Math.min(1, Math.max(0, s.dist(this, this.r) / 80)) * this.born,
       this.breath.update(),
       img = sprite[SPRITE.SPELL][UI.time][this.spell],
       this.spell < 2 ? (w = -img.width * this.breath.v,
       h = -img.height * this.breath.v) : 0 === this.fly ? (w = -img.width,
       h = -img.height) : (w = 1.35 * -img.width,
       h = 1.35 * -img.height),
       qn(u, img, -w / 2, -h / 2, w, h),
       u.globalAlpha = 1,
       u.restore()
   }
   function ia(e, i) {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.breath.update(),
       t = sprite[e][UI.time],
       w = -t.width * this.breath.v,
       h = -t.height * this.breath.v,
       qn(u, t, -w / 2, -h / 2, w, h),
       this.action & sT.HURT) {
           this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
           u.globalAlpha = .6 - this.hit.v;
           var t = sprite[i];
           qn(u, t, -w / 2, -h / 2, w, h),
           u.globalAlpha = 1
       }
       u.restore()
   }
   function ta(e, i) {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.breath.update(),
       t = sprite[e][UI.time],
       w = -t.width * this.breath.v,
       h = -t.height * this.breath.v,
       qn(u, t, -w / 4, -h / 4, w / 2, h / 2),
       this.action & sT.HURT) {
           this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
           u.globalAlpha = .6 - this.hit.v;
           var t = sprite[i];
           qn(u, t, -w / 4, -h / 4, w / 2, h / 2),
           u.globalAlpha = 1
       }
       u.restore()
   }
   function ra(e, i, t) {
       u.save(),
       u.translate(kI.cam.x + i, kI.cam.y + t),
       u.rotate(this.angle),
       u.translate(this.x - i, this.y - t),
       this.breath.update(),
       img = sprite[e][UI.time],
       w = -img.width * this.breath.v,
       h = -img.height * this.breath.v,
       qn(u, img, -w / 2, -h / 2, w, h),
       u.restore()
   }
   function na(e) {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.breath.update(),
       img = sprite[e][UI.time],
       w = -img.width * this.breath.v,
       h = -img.height * this.breath.v,
       qn(u, img, -w / 2, -h / 2, w, h),
       u.restore()
   }
   function oa() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       var r = 15 & this.info;
       if (10 === this.info || 0 === r) {
           if (u.rotate(this.angle),
           this.ground.update(),
           16 & this.info)
               var n = sprite[SPRITE.PLANT_THORNBUSH_DRIED][UI.time];
           else
               n = sprite[SPRITE.PLANT_THORNBUSH][UI.time];
           var o = -n.width * this.ground.v
             , a = -n.height * this.ground.v;
           qn(u, n, -o / 2 + i, -a / 2 + t, o, a)
       } else {
           if (16 & this.info)
               n = sprite[SPRITE.DRIED_THORNBUSH][UI.time];
           else
               n = sprite[SPRITE.THORNBUSH][UI.time];
           u.translate(0, n.height / 2),
           qn(u, n, i - n.width / 2, -n.height + t)
       }
       u.restore()
   }
   function aa() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       var r = 15 & this.info;
       if (10 === this.info || 0 === r) {
           if (u.rotate(this.angle),
           this.ground.update(),
           16 & this.info)
               var n = sprite[SPRITE.PLANT_GARLIC_DRIED][UI.time];
           else
               n = sprite[SPRITE.PLANT_GARLIC][UI.time];
           var o = -n.width * this.ground.v
             , a = -n.height * this.ground.v;
           qn(u, n, -o / 2 + i, -a / 2 + t, o, a)
       } else {
           if (16 & this.info)
               n = sprite[SPRITE.DRIED_GARLIC][UI.time];
           else
               n = sprite[SPRITE.GARLIC][UI.time];
           u.translate(0, n.height / 2),
           qn(u, n, i - n.width / 2, -n.height + t)
       }
       u.restore()
   }
   function sa() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       var r = 15 & this.info;
       if (10 === this.info || 0 === r) {
           if (u.rotate(this.angle),
           this.ground.update(),
           16 & this.info)
               var n = sprite[SPRITE.PLANT_ALOE_VERA_DRIED][UI.time];
           else
               n = sprite[SPRITE.PLANT_ALOE_VERA][UI.time];
           var o = -n.width * this.ground.v
             , a = -n.height * this.ground.v;
           qn(u, n, -o / 2 + i, -a / 2 + t, o, a)
       } else {
           if (16 & this.info)
               n = sprite[SPRITE.DRIED_ALOE_VERA][UI.time];
           else
               n = sprite[SPRITE.ALOE_VERA_GROWN][UI.time];
           u.translate(0, n.height / 2),
           qn(u, n, i - n.width / 2, -n.height + t)
       }
       u.restore()
   }
   function Ta() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       var r = 15 & this.info;
       if (10 === this.info || 0 === r) {
           if (u.rotate(this.angle),
           this.ground.update(),
           16 & this.info)
               var n = sprite[SPRITE.PLANT_WATERMELON_DRIED][UI.time];
           else
               n = sprite[SPRITE.PLANT_WATERMELON][UI.time];
           var o = -n.width * this.ground.v
             , a = -n.height * this.ground.v;
           qn(u, n, -o / 2 + i, -a / 2 + t, o, a)
       } else {
           if (16 & this.info)
               n = sprite[SPRITE.DRIED_WATERMELON][UI.time];
           else
               n = sprite[SPRITE.WATERMELON][UI.time];
           u.translate(0, n.height / 2),
           qn(u, n, i - n.width / 2, -n.height + t)
       }
       u.restore()
   }
   function Ia() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       var r = 15 & this.info;
       if (10 === this.info || 0 === r) {
           if (u.rotate(this.angle),
           this.ground.update(),
           16 & this.info)
               var n = sprite[SPRITE.PLANT_CARROT_DRIED][UI.time];
           else
               n = sprite[SPRITE.PLANT_CARROT][UI.time];
           var o = -n.width * this.ground.v
             , a = -n.height * this.ground.v;
           qn(u, n, -o / 2 + i, -a / 2 + t, o, a)
       } else {
           if (16 & this.info)
               n = sprite[SPRITE.DRIED_CARROT][UI.time];
           else
               n = sprite[SPRITE.CARROT][UI.time];
           u.translate(0, n.height / 2),
           qn(u, n, i - n.width / 2, -n.height + t)
       }
       u.restore()
   }
   function Ea() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       var r = 15 & this.info;
       if (10 === this.info || 0 === r) {
           if (u.rotate(this.angle),
           this.ground.update(),
           16 & this.info)
               var n = sprite[SPRITE.PLANT_PUMPKIN_DRIED][UI.time];
           else
               n = sprite[SPRITE.PLANT_PUMPKIN][UI.time];
           var o = -n.width * this.ground.v
             , a = -n.height * this.ground.v;
           qn(u, n, -o / 2 + i, -a / 2 + t, o, a)
       } else {
           if (16 & this.info)
               n = sprite[SPRITE.DRIED_PUMPKIN][UI.time];
           else
               n = sprite[SPRITE.PUMPKIN][UI.time];
           u.translate(0, n.height / 2),
           qn(u, n, i - n.width / 2, -n.height + t)
       }
       u.restore()
   }
   function _a() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       var r = 15 & this.info;
       if (10 === this.info || 0 === r) {
           if (u.rotate(this.angle),
           this.ground.update(),
           16 & this.info)
               var n = sprite[SPRITE.WHEAT_SEED_DRIED][UI.time];
           else
               n = sprite[SPRITE.WHEAT_SEED][UI.time];
           var o = -n.width * this.ground.v
             , a = -n.height * this.ground.v;
           qn(u, n, -o / 2 + i, -a / 2 + t, o, a)
       } else {
           if (this.wind.update(),
           16 & this.info)
               n = sprite[SPRITE.DRIED_WHEAT][UI.time];
           else
               n = sprite[SPRITE.WILD_WHEAT][UI.time];
           u.translate(0, n.height / 2),
           u.rotate(this.wind.v),
           qn(u, n, i - n.width / 2, -n.height + t)
       }
       u.restore()
   }
   function ua() {
       if (!(this.info < 10)) {
           if (u.save(),
           u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
           u.rotate(this.angle),
           this.hit.update) {
               this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
               var e = (1 - this.hit.anim.v) * jI * 600 * C
                 , i = Math.cos(this.hit.angle - this.angle) * e
                 , t = Math.sin(this.hit.angle - this.angle) * e
           } else
               i = 0,
               t = 0;
           this.ground.update();
           var r = sprite[SPRITE.PLANT_SEED][UI.time]
             , n = -r.width * this.ground.v
             , o = -r.height * this.ground.v;
           qn(u, r, -n / 2 + i, -o / 2 + t, n, o),
           u.restore()
       }
   }
   function ha() {
       if (10 !== this.info) {
           if (u.save(),
           u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
           u.rotate(this.angle),
           this.hit.update) {
               this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
               var e = (1 - this.hit.anim.v) * jI * 600 * C
                 , i = Math.cos(this.hit.angle - this.angle) * e
                 , t = Math.sin(this.hit.angle - this.angle) * e
           } else
               i = 0,
               t = 0;
           if (16 & this.info)
               var r = sprite[SPRITE.DRIED_PLANT][UI.time];
           else
               r = sprite[SPRITE.PLANT_MINI][UI.time];
           qn(u, r, -r.width / 2 + i, -r.width / 2 + t),
           u.restore();
           for (var n = 15 & this.info, o = 0; o < n; o++)
               this.fruits[o].draw(SPRITE.FRUIT)
       }
   }
   function Ra() {
       if (!(this.info < 10)) {
           if (u.save(),
           u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
           u.rotate(this.angle),
           this.hit.update) {
               this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
               var e = (1 - this.hit.anim.v) * jI * 600 * C
                 , i = Math.cos(this.hit.angle - this.angle) * e
                 , t = Math.sin(this.hit.angle - this.angle) * e
           } else
               i = 0,
               t = 0;
           this.ground.update();
           var r = sprite[SPRITE.PLANT_TOMATO][UI.time]
             , n = -r.width * this.ground.v
             , o = -r.height * this.ground.v;
           qn(u, r, -n / 2 + i, -o / 2 + t, n, o),
           u.restore()
       }
   }
   function Aa() {
       if (10 !== this.info) {
           for (var e = 15 & this.info, i = 0; i < e; i++)
               this.fruits[i].draw(SPRITE.TOMATO, this.x, this.y);
           if (u.save(),
           u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
           u.rotate(this.angle),
           this.hit.update) {
               this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
               var t = (1 - this.hit.anim.v) * jI * 600 * C
                 , r = Math.cos(this.hit.angle - this.angle) * t
                 , n = Math.sin(this.hit.angle - this.angle) * t
           } else
               r = 0,
               n = 0;
           if (16 & this.info)
               var o = sprite[SPRITE.DRIED_TOMATO_MINI][UI.time];
           else
               o = sprite[SPRITE.TOMATO_MINI][UI.time];
           qn(u, o, -o.width / 2 + r, -o.width / 2 + n),
           u.restore()
       }
   }
   function da() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       2 == this.action ? img = sprite[SPRITE.FURNACE_ON][UI.time] : img = sprite[SPRITE.FURNACE_OFF][UI.time],
       qn(u, img, -img.width / 2 + i, -img.height / 2 + t),
       u.restore()
   }
   function Sa() {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.ground.update(),
       u.globalAlpha = .3;
       var e = sprite[SPRITE.GROUND_FIRE][UI.time]
         , i = -e.width * this.ground.v
         , t = -e.height * this.ground.v;
       qn(u, e, -i / 2, -t / 2, i, t),
       u.globalAlpha = 1,
       u.restore()
   }
   function la() {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       31 & this.info && 992 & this.info && 31744 != (31744 & this.info) && (0 == this.smog.length || this.smog[this.smog.length - 1] <= SPRITE.SMOG_PUSH) && this.smog.push(SPRITE.SMOG);
       for (var e = 0; e < this.smog.length; e++) {
           this.smog[e] = Math.max(0, this.smog[e] - jI * SPRITE.SMOG_SPEED),
           u.globalAlpha = this.smog[e] / 1.3;
           var i = 40 * (1 - this.smog[e])
             , t = 35 * (1 - this.smog[e]) + 10;
           Ee(u, -68 * C + Math.cos(-this.angle - Math.PI / 2) * i, -20 * C + Math.sin(-this.angle - Math.PI / 2) * i, t),
           se(u, "#333333")
       }
       u.globalAlpha = 1,
       this.smog.length > 0 && 0 === this.smog[0] && this.smog.shift(),
       u.restore()
   }
   function Na(e) {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.ground.update(),
       u.globalAlpha = .3;
       var i = sprite[SPRITE.GROUND_FIRE][UI.time]
         , t = -i.width * this.ground.v
         , r = -i.height * this.ground.v;
       if (qn(u, i, -t / 2, -r / 2, t, r),
       u.globalAlpha = 1,
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var n = (1 - this.hit.anim.v) * jI * 600 * C
             , o = Math.cos(this.hit.angle - this.angle) * n
             , a = Math.sin(this.hit.angle - this.angle) * n
       } else
           o = 0,
           a = 0;
       i = sprite[e][UI.time],
       qn(u, i, -i.width / 2 + o, -i.height / 2 + a),
       u.restore()
   }
   function Ca() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       0 === this.info ? img = sprite[SPRITE.SIGN][UI.time] : img = sprite[SPRITE.SYMBOLS][UI.time][this.info - 1],
       qn(u, img, -img.width / 2 + i, -img.height / 2 + t),
       u.restore()
   }
   function ga() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       if (31 & this.info && 992 & this.info && 31744 != (31744 & this.info)) {
           r = sprite[SPRITE.BREAD_OVEN_ON][UI.time],
           qn(u, r, -r.width / 2 + i, -r.height / 2 + t),
           this.up.update();
           var r = sprite[SPRITE.BREAD_LIGHT_UP][UI.time]
             , n = -r.width * this.up.v
             , o = -r.height * this.up.v;
           qn(u, r, -n / 2 + 1 * C, -o / 2 + 3 * C, n, o)
       } else
           r = sprite[SPRITE.BREAD_OVEN_OFF][UI.time],
           qn(u, r, -r.width / 2 + i, -r.height / 2 + t);
       u.restore()
   }
   function ba() {
       if (this.hit.update)
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e;
       else
           i = 0,
           t = 0;
       255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + .5 * jI) % (2 * Math.PI)),
       u.save(),
       u.translate(kI.cam.x + this.x + i, kI.cam.y + this.y + t),
       u.save(),
       u.rotate(this.rotate),
       img = sprite[SPRITE.WINDMILL_WINGS][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       u.restore(),
       u.save(),
       u.rotate(this.angl),
       img = sprite[SPRITE.WINDMILL_HEAD][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       u.restore(),
       u.restore()
   }
   function Oa() {
       if (this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       u.save(),
       255 & this.info && 65280 != (65280 & this.info) && (i += 2 * Math.random() - 1,
       t += 2 * Math.random() - 1),
       u.translate(kI.cam.x + this.x + i, kI.cam.y + this.y + t),
       u.rotate(this.angle),
       img = sprite[SPRITE.EXTRACTOR_MACHINE_STONE][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * jI) % (2 * Math.PI)),
       u.rotate(this.rotate),
       img = sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       u.restore()
   }
   function pa() {
       if (this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       u.save(),
       255 & this.info && 65280 != (65280 & this.info) && (i += 2 * Math.random() - 1,
       t += 2 * Math.random() - 1),
       u.translate(kI.cam.x + this.x + i, kI.cam.y + this.y + t),
       u.rotate(this.angle),
       img = sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * jI) % (2 * Math.PI)),
       u.rotate(this.rotate),
       img = sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       u.restore()
   }
   function ca() {
       if (this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       u.save(),
       255 & this.info && 65280 != (65280 & this.info) && (i += 2 * Math.random() - 1,
       t += 2 * Math.random() - 1),
       u.translate(kI.cam.x + this.x + i, kI.cam.y + this.y + t),
       u.rotate(this.angle),
       img = sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * jI) % (2 * Math.PI)),
       u.rotate(this.rotate),
       img = sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       u.restore()
   }
   function va() {
       if (this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       u.save(),
       255 & this.info && 65280 != (65280 & this.info) && (i += 2 * Math.random() - 1,
       t += 2 * Math.random() - 1),
       u.translate(kI.cam.x + this.x + i, kI.cam.y + this.y + t),
       u.rotate(this.angle),
       img = sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * jI) % (2 * Math.PI)),
       u.rotate(this.rotate),
       img = sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       u.restore()
   }
   function Pa() {
       if (this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       u.save(),
       255 & this.info && 65280 != (65280 & this.info) && (i += 2 * Math.random() - 1,
       t += 2 * Math.random() - 1),
       u.translate(kI.cam.x + this.x + i, kI.cam.y + this.y + t),
       u.rotate(this.angle),
       img = sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * jI) % (2 * Math.PI)),
       u.rotate(this.rotate),
       img = sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       u.restore()
   }
   function ma() {
       if (this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       u.save(),
       u.translate(kI.cam.x + this.x + i, kI.cam.y + this.y + t),
       u.rotate(this.angle),
       img = sprite[SPRITE.WINDMILL][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       u.restore()
   }
   function Da() {
       if (this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       this.rotate1 = (this.rotate1 + 3 * jI) % (2 * Math.PI),
       this.rotate2 = (this.rotate2 - 3 * jI) % (2 * Math.PI),
       u.save(),
       u.translate(kI.cam.x + this.x + i, kI.cam.y + this.y + t),
       u.save(),
       u.rotate(this.angle),
       img = sprite[SPRITE.EMERALD_MACHINE][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       u.restore(),
       u.save(),
       u.rotate(this.rotate1),
       img = sprite[SPRITE.EMERALD_MACHINE_ROTATE][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       u.restore(),
       u.save(),
       u.rotate(this.rotate2),
       img = sprite[SPRITE.EMERALD_MACHINE_HOLE][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       u.restore(),
       u.restore()
   }
   function Ma() {
       if (this.hit.update) {
           this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
           var e = (1 - this.hit.anim.v) * jI * 600 * C
             , i = Math.cos(this.hit.angle - this.angle) * e
             , t = Math.sin(this.hit.angle - this.angle) * e
       } else
           i = 0,
           t = 0;
       this.rotate1 = (this.rotate1 + 3 * jI) % (2 * Math.PI),
       this.rotate2 = (this.rotate2 - 3 * jI) % (2 * Math.PI),
       u.save(),
       u.translate(kI.cam.x + this.x + i, kI.cam.y + this.y + t),
       u.save(),
       u.rotate(this.angle),
       img = sprite[SPRITE.RESURRECTION][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       u.restore(),
       u.save(),
       u.rotate(this.rotate1),
       img = sprite[SPRITE.RESURRECTION_ROTATE][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       u.restore(),
       u.save(),
       u.rotate(this.rotate2),
       img = sprite[SPRITE.RESURRECTION_HOLE][UI.time],
       qn(u, img, -img.width / 2, -img.height / 2),
       u.restore(),
       u.restore()
   }
   function Ga() {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.halo.update(),
       img = sprite[SPRITE.EMERALD_MACHINE_GROUND][UI.time],
       w = -img.width * this.halo.v,
       h = -img.height * this.halo.v,
       qn(u, img, -w / 2, -h / 2, w, h),
       u.restore()
   }
   function La() {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.halo.update(),
       img = sprite[SPRITE.RESURRECTION_GROUND][UI.time],
       w = -img.width * this.halo.v,
       h = -img.height * this.halo.v,
       qn(u, img, -w / 2, -h / 2, w, h),
       u.restore()
   }
   function fa() {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.halo.update(),
       img = sprite[SPRITE.HALO_FIRE][UI.time],
       w = -img.width * this.halo.v,
       h = -img.height * this.halo.v,
       qn(u, img, -w / 2, -h / 2, w, h),
       u.restore()
   }
   function Va() {
       u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       u.rotate(this.angle),
       this.fire.update(),
       img = sprite[SPRITE.FIRE][UI.time],
       w = -img.width * this.fire.v,
       h = -img.height * this.fire.v,
       qn(u, img, -w / 2, -h / 2, w, h),
       this.halo.update(),
       img = sprite[SPRITE.HALO_FIRE][UI.time],
       w = -img.width * this.halo.v,
       h = -img.height * this.halo.v,
       qn(u, img, -w / 2, -h / 2, w, h),
       u.restore()
   }
   function za(e) {
       if (e.right >= 0)
           switch (e.right) {
           case SPRITE.WATERING_CAN_FULL:
               u.save();
               var i = -3 * e.attack.v / Math.PI;
               if (e.attack.o)
                   var t = -Math.PI / 3 - (Math.PI / 3 + e.attack.v) / 3;
               else
                   t = e.attack.v;
               u.rotate(e.angle - Math.PI / 2 + t),
               u.globalAlpha = i / 1.2,
               Ee(u, -40 * C, 90 * C, 5 * C),
               se(u, "#0B6A84"),
               u.globalAlpha = i / 1.2,
               Ee(u, -52 * C, 100 * C, 8 * C),
               se(u, "#0B6A84"),
               u.globalAlpha = i / 1.2,
               Ee(u, -30 * C, 95 * C, 4 * C),
               se(u, "#0B6A84"),
               u.globalAlpha = 1,
               u.restore();
               break;
           case SPRITE.SHOVEL:
           case SPRITE.SHOVEL_GOLD:
           case SPRITE.SHOVEL_DIAMOND:
           case SPRITE.SHOVEL_AMETHYST:
               if (1 === e.fly)
                   break;
               if (e.dist_winter > 0)
                   var r = SPRITE.ICE_SHOVEL_CO[UI.time];
               else if (e.dist_sand > 0 || e.dist_desert > 0)
                   r = SPRITE.SAND_SHOVEL_CO[UI.time];
               else
                   r = SPRITE.GRD_SHOVEL_CO[UI.time];
               i = -3 * e.attack.v / Math.PI;
               if (e.attack.o)
                   t = Math.max(.5 - i / 2 + .5, 0);
               else
                   t = Math.max(i / 2, 0);
               0 === t && (e.angle_init = e.angle),
               u.save(),
               u.rotate(e.angle_init - Math.PI / 2),
               u.globalAlpha = i;
               var n = 25 * C + 25 * t;
               Ee(u, n, 80 * C, 15 * C),
               se(u, r),
               Ee(u, -n, 80 * C, 15 * C),
               se(u, r),
               u.globalAlpha = 1,
               u.restore()
           }
   }
   function Ha(e, i, t) {
       if (e >= 0)
           switch (img = sprite[e][UI.time],
           e) {
           case SPRITE.WOOD_SHIELD:
           case SPRITE.STONE_SHIELD:
           case SPRITE.GOLD_SHIELD:
               Es(e, img, -img.width / 4 - C * (0 + i), -img.height / 4 + C * (t + 35));
               break;
           case SPRITE.DIAMOND_SHIELD:
               Es(e, img, -img.width / 4 - C * (1 + i), -img.height / 4 + C * (t + 45));
               break;
           case SPRITE.AMETHYST_SHIELD:
           case SPRITE.REIDITE_SHIELD:
               Es(e, img, -img.width / 4 - C * (1 + i), -img.height / 4 + C * (t + 40))
           }
   }
   function ya(e, i, t) {
       if (e >= 0)
           switch (img = sprite[e][UI.time],
           e) {
           case SPRITE.PICK:
           case SPRITE.PICK_GOLD:
           case SPRITE.PICK_DIAMOND:
           case SPRITE.PICK_WOOD:
           case SPRITE.PICK_AMETHYST:
           case SPRITE.PICK_REIDITE:
               Ts(e, img, -img.width / 2 - C * (45 + i), -img.height / 2 + C * (t + 22));
               break;
           case SPRITE.SWORD_WOOD:
           case SPRITE.SWORD:
           case SPRITE.SWORD_GOLD:
           case SPRITE.SWORD_DIAMOND:
               Es(e, img, -img.width / 4 - C * (47 + i), -img.height / 4 + C * (t + 45));
               break;
           case SPRITE.SWORD_AMETHYST:
               Es(e, img, -img.width / 4 - C * (52 + i), -img.height / 4 + C * (t + 45));
               break;
           case SPRITE.REIDITE_SWORD:
               Es(e, img, -img.width / 4 - C * (47 + i), -img.height / 4 + C * (t + 44));
               break;
           case SPRITE.PIRATE_SWORD:
               Ts(e, img, -img.width / 2 - C * (47 + i), -img.height / 2 + C * (t + 44));
               break;
           case SPRITE.DRAGON_SWORD:
               Ts(e, img, -img.width / 2 - C * (40 + i), -img.height / 2 + C * (t + 65));
               break;
           case SPRITE.WOOD_SPEAR:
           case SPRITE.REIDITE_SPEAR:
               Es(e, img, -img.width / 4 - C * (37 + i), -img.height / 4 + C * (t + 85));
               break;
           case SPRITE.PITCHFORK2:
           case SPRITE.PITCHFORK:
               Es(e, img, -img.width / 4 - C * (26 + i), -img.height / 4 + C * (t + 77));
               break;
           case SPRITE.LAVA_SPEAR:
               Es(e, img, -img.width / 4 - C * (37 + i), -img.height / 4 + C * (t + 85));
               break;
           case SPRITE.LAVA_SWORD:
               Es(e, img, -img.width / 4 - C * (47 + i), -img.height / 4 + C * (t + 44));
               break;
           case SPRITE.WOOD_BOW:
           case SPRITE.STONE_BOW:
           case SPRITE.GOLD_BOW:
           case SPRITE.DIAMOND_BOW:
           case SPRITE.AMETHYST_BOW:
           case SPRITE.REIDITE_BOW:
           case SPRITE.DRAGON_BOW:
               Es(e, img, -img.width / 4 - C * (37 + i), -img.height / 4 + C * (t + 30));
               break;
           case SPRITE.MACHETE:
               Es(e, img, -img.width / 4 - C * (47 + i), -img.height / 4 + C * (t + 35));
               break;
           case SPRITE.WAND1:
           case SPRITE.WAND2:
               Es(e, img, -img.width / 4 - C * (47 + i), -img.height / 4 + C * (t + 40));
               break;
           case SPRITE.SADDLE:
               Es(e, img, -img.width / 4 - C * (47 + i), -img.height / 4 + C * (t + 34));
               break;
           case SPRITE.SPEAR:
           case SPRITE.GOLD_SPEAR:
           case SPRITE.DIAMOND_SPEAR:
           case SPRITE.AMETHYST_SPEAR:
               Es(e, img, -img.width / 4 - C * (37 + i), -img.height / 4 + C * (t + 90));
               break;
           case SPRITE.CRAB_SPEAR:
               Es(e, img, -img.width / 4 - C * (40 + i), -img.height / 4 + C * (t + 85));
               break;
           case SPRITE.DRAGON_SPEAR:
               Ts(e, img, -img.width / 2 - C * (39 + i), -img.height / 2 + C * (t + 90));
               break;
           case SPRITE.HAMMER:
           case SPRITE.HAMMER_GOLD:
           case SPRITE.HAMMER_DIAMOND:
           case SPRITE.HAMMER_AMETHYST:
           case SPRITE.HAMMER_REIDITE:
           case SPRITE.SUPER_HAMMER:
               Ts(e, img, -img.width / 2 - C * (46 + i), -img.height / 2 + C * (t + 35));
               break;
           case SPRITE.WATERING_CAN_FULL:
               Ts(e, img, -img.width / 2 - C * (47 + i), -img.height / 2 + C * (t + 54));
               break;
           case SPRITE.SHOVEL:
           case SPRITE.SHOVEL_GOLD:
           case SPRITE.SHOVEL_DIAMOND:
           case SPRITE.SHOVEL_AMETHYST:
               Ts(e, img, -img.width / 2 - C * (46 + i), -img.height / 2 + C * (t + 35));
               break;
           case SPRITE.SPANNER:
               Ts(e, img, -img.width / 2 - C * (47 + i), -img.height / 2 + C * (t + 20))
           }
   }
   var Ba = function(e) {
       if (e > 0) {
           var i = sprite[e][UI.time];
           switch (e) {
           case SPRITE.WOOD_HELMET:
               Ts(e, i, -i.width / 2 + 2 * C, -i.height / 2 - 5 * C);
               break;
           case SPRITE.EARMUFFS:
               Ts(e, i, -i.width / 2, -i.height / 2 - 18 * C);
               break;
           case SPRITE.COAT:
               Ts(e, i, -i.width / 2, -i.height / 2 - 10 * C);
               break;
           case SPRITE.EXPLORER_HAT:
               Ts(e, i, -i.width / 2, -i.height / 2 - 19 * C);
               break;
           case SPRITE.PIRATE_HAT:
               Es(e, i, -i.width / 4, -i.height / 4 - 20 * C);
               break;
           case SPRITE.STONE_HELMET:
               Ts(e, i, -i.width / 2 - 1 * C, -i.height / 2 - 23 * C);
               break;
           case SPRITE.GOLD_HELMET:
               Ts(e, i, -i.width / 2, -i.height / 2 - 5 * C);
               break;
           case SPRITE.DIAMOND_HELMET:
               Ts(e, i, -i.width / 2, -i.height / 2 - 2 * C);
               break;
           case SPRITE.AMETHYST_HELMET:
               Ts(e, i, -i.width / 2 + 1.5 * C, -i.height / 2 - 1 * C);
               break;
           case SPRITE.REIDITE_HELMET:
           case SPRITE.DIAMOND_PROTECTION:
           case SPRITE.AMETHYST_PROTECTION:
           case SPRITE.REIDITE_PROTECTION:
           case SPRITE.TURBAN1:
           case SPRITE.TURBAN2:
           case SPRITE.PILOT_HELMET:
           case SPRITE.LAVA_HELMET:
           case SPRITE.WITCH:
           case SPRITE.FUR_HAT:
           case SPRITE.FLOWER_HAT:
               Es(e, i, -i.width / 4, -i.height / 4 + 2 * C);
               break;
           case SPRITE.CHRISTMAS_HAT:
           case SPRITE.ELF_HAT:
               Ts(e, i, -i.width / 2 - 5 * C, -i.height / 2 - 2 * C);
               break;
           case SPRITE.CAP_SCARF:
           case SPRITE.WINTER_HOOD:
           case SPRITE.DIVING_MASK:
               Ts(e, i, -i.width / 2, -i.height / 2 - 2 * C);
               break;
           case SPRITE.SUPER_DIVING_SUIT:
               Ts(e, i, -i.width / 2 + 2 * C, -i.height / 2);
               break;
           case SPRITE.DRAGON_HELMET:
               Ts(e, i, -i.width / 2, -i.height / 2 - 5 * C);
               break;
           case SPRITE.CROWN_GREEN:
           case SPRITE.CROWN_ORANGE:
           case SPRITE.CROWN_BLUE:
               Ts(e, i, -i.width / 2 - 1 * C, -i.height / 2);
               break;
           case SPRITE.HOOD:
               Ts(e, i, -i.width / 2, -i.height / 2 + 2 * C);
               break;
           case SPRITE.PEASANT:
           case SPRITE.WINTER_PEASANT:
               Ts(e, i, -i.width / 2, -i.height / 2 + 8 * C);
               break;
           case SPRITE.CROWN_CRAB:
               Ts(e, i, -i.width / 2, -i.height / 2 - 4 * C)
           }
       }
   };
   function wa() {
       if (!this.ghost && 0 !== this.vehicle) {
           if (this.x != this.r.x || this.y != this.r.y) {
               var e = (s.get_angle_2(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (2 * Math.PI);
               this.vehicle_fx2 = s.reduceAngle(e, this.vehicle_fx2),
               this.vehicle_fx2 = s.lerp(this.vehicle_fx2, e, .018)
           }
           if (u.save(),
           u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
           u.rotate(this.vehicle_fx2),
           this.vehicle === INV.BOAT) {
               if (this.speed > 50 || this.vehicle_fx1 > 0) {
                   this.speed > 50 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + jI) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - jI),
                   u.globalAlpha = this.vehicle_fx1;
                   var i = sprite[SPRITE.BOAT_WAVE][UI.time];
                   Es(SPRITE.BOAT_WAVE, i, -i.width / 4, -i.height / 4),
                   u.globalAlpha = 1
               }
               i = sprite[SPRITE.BOAT][UI.time];
               Es(SPRITE.BOAT, i, -i.width / 4, -i.height / 4)
           } else if (this.vehicle === INV.HAWK) {
               this.vehicle_fx5 = s.lerp(this.vehicle_fx5, this.speed, .018),
               this.vehicle_fx4.update(),
               this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + jI / 4) : this.vehicle_fx1 = Math.max(.1, this.vehicle_fx1 - jI);
               i = sprite[SPRITE.HAWK_TAMED][UI.time];
               Es(SPRITE.HAWK_TAMED, i, -i.width / 4, -i.height / 4),
               i = sprite[SPRITE.HAWK_WING_LEFT_TAMED][UI.time],
               w = -i.width,
               h = -i.height,
               u.save(),
               u.translate(-20 * C, -20 * C),
               u.rotate(this.vehicle_fx4.v * this.vehicle_fx1),
               qn(u, i, -w / 4, -h / 4, w / 2, h / 2),
               u.restore(),
               i = sprite[SPRITE.HAWK_WING_RIGHT_TAMED][UI.time],
               u.save(),
               u.translate(20 * C, -20 * C),
               u.rotate(-this.vehicle_fx4.v * this.vehicle_fx1),
               qn(u, i, -w / 4, -h / 4, w / 2, h / 2),
               u.restore()
           } else if (this.vehicle === INV.BABY_LAVA) {
               this.vehicle_fx5 = s.lerp(this.vehicle_fx5, this.speed, .018),
               this.vehicle_fx4.update(),
               this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + jI / 4) : this.vehicle_fx1 = Math.max(.1, this.vehicle_fx1 - jI);
               i = sprite[SPRITE.BABY_LAVA_TAMED][UI.time];
               Es(SPRITE.BABY_LAVA_TAMED, i, -i.width / 4, -i.height / 4),
               i = sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][UI.time],
               w = -i.width,
               h = -i.height,
               u.save(),
               u.translate(-40 * C, -45 * C),
               u.rotate(this.vehicle_fx4.v * this.vehicle_fx1),
               qn(u, i, -w / 4, -h / 4, w / 2, h / 2),
               u.restore(),
               i = sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][UI.time],
               u.save(),
               u.translate(40 * C, -45 * C),
               u.rotate(-this.vehicle_fx4.v * this.vehicle_fx1),
               qn(u, i, -w / 4, -h / 4, w / 2, h / 2),
               u.restore()
           } else if (this.vehicle === INV.BABY_DRAGON) {
               this.vehicle_fx5 = s.lerp(this.vehicle_fx5, this.speed, .018),
               this.vehicle_fx4.update(),
               this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + jI / 4) : this.vehicle_fx1 = Math.max(.1, this.vehicle_fx1 - jI);
               i = sprite[SPRITE.BABY_DRAGON_TAMED][UI.time];
               Es(SPRITE.BABY_DRAGON_TAMED, i, -i.width / 4, -i.height / 4),
               i = sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][UI.time],
               w = -i.width,
               h = -i.height,
               u.save(),
               u.translate(-40 * C, -45 * C),
               u.rotate(this.vehicle_fx4.v * this.vehicle_fx1),
               qn(u, i, -w / 4, -h / 4, w / 2, h / 2),
               u.restore(),
               i = sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][UI.time],
               u.save(),
               u.translate(40 * C, -45 * C),
               u.rotate(-this.vehicle_fx4.v * this.vehicle_fx1),
               qn(u, i, -w / 4, -h / 4, w / 2, h / 2),
               u.restore()
           } else if (this.vehicle === INV.NIMBUS) {
               this.vehicle_fx5 = s.lerp(this.vehicle_fx5, this.speed, .018);
               i = sprite[SPRITE.NIMBUS][UI.time];
               Es(SPRITE.NIMBUS, i, -i.width / 4, -i.height / 4)
           } else if (this.vehicle === INV.PLANE) {
               this.vehicle_fx5 = s.lerp(this.vehicle_fx5, this.speed, .018);
               i = sprite[SPRITE.PLANE][UI.time];
               Es(SPRITE.PLANE, i, -i.width / 4, -i.height / 4)
           } else if (this.vehicle === INV.SLED) {
               i = sprite[SPRITE.SLED][UI.time];
               Es(SPRITE.SLED, i, -i.width / 4, -i.height / 4)
           } else if (this.vehicle === INV.BABY_MAMMOTH) {
               i = sprite[SPRITE.BABY_MAMMOTH_TAMED][UI.time];
               this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + jI / 4) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - jI),
               this.vehicle_fx3 += 60 * jI,
               this.vehicle_fx3 > 60 && (this.vehicle_fx3 -= 60);
               var t = this.vehicle_fx1 * (12 * (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) - 6);
               Es(SPRITE.BABY_MAMMOTH_TAMED, i, -i.width / 4, -i.height / 4 + t)
           } else if (this.vehicle === INV.MOUNT_BOAR) {
               i = sprite[SPRITE.BOAR_TAMED][UI.time];
               this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + jI / 4) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - jI),
               this.vehicle_fx3 += 60 * jI,
               this.vehicle_fx3 > 60 && (this.vehicle_fx3 -= 60);
               t = this.vehicle_fx1 * (12 * (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) - 6);
               Es(SPRITE.BOAR_TAMED, i, -i.width / 4, -i.height / 4 + t)
           } else if (this.vehicle === INV.CRAB_BOSS) {
               var r = Math.PI / 2
                 , n = Math.PI / 4;
               i = sprite[SPRITE.CRAB_BOSS_TAMED][UI.time];
               this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + jI / 4) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - jI),
               this.vehicle_fx3 += 60 * jI,
               this.vehicle_fx3 > 60 && (this.vehicle_fx3 -= 60);
               t = this.vehicle_fx1 * (12 * (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) - 6);
               Es(SPRITE.CRAB_BOSS_TAMED, i, -i.width / 4 + t, -i.height / 4),
               u.restore(),
               u.save(),
               u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
               u.rotate(Math.PI + this.vehicle_fx2 + n),
               u.translate(120, t),
               u.rotate(r),
               i = sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][UI.time],
               w = -i.width,
               h = -i.height,
               qn(u, i, -w / 2, -h / 2, w, h),
               u.restore(),
               u.save(),
               u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
               u.rotate(Math.PI + this.vehicle_fx2 + r + n),
               u.translate(120, t),
               u.rotate(r),
               i = sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][UI.time],
               w = -i.width,
               h = -i.height,
               qn(u, i, -w / 2, -h / 2, w, h)
           }
           u.restore()
       }
   }
   function Ka(e, i, t) {
       if (1 !== i.tryLoad())
           return i;
       var r = __IMAGE_EFFECT__[t][e];
       if (void 0 === r) {
           var n = (r = document.createElement("canvas")).getContext("2d")
             , o = i.width
             , a = i.height;
           r.width = o,
           r.height = a,
           n.drawImage(i, 0, 0),
           n.globalCompositeOperation = "source-in",
           n.fillStyle = __IMAGE_EFFECT_COLOR__[t],
           n.fillRect(0, 0, o, a),
           __IMAGE_EFFECT__[t][e] = r
       }
       return r
   }
   function Wa() {
       var e = 0;
       switch (this.right) {
       case SPRITE.WOOD_SHIELD:
       case SPRITE.STONE_SHIELD:
       case SPRITE.GOLD_SHIELD:
       case SPRITE.DIAMOND_SHIELD:
       case SPRITE.AMETHYST_SHIELD:
       case SPRITE.REIDITE_SHIELD:
           e = 1
       }
       if (this.ghost)
           for (var i = 0; i < this.bubbles.length; i++) {
               var t = this.bubbles[i];
               if (t.life > .5)
                   var r = 1 - 2 * (t.life - .5);
               else
                   r = 2 * t.life;
               u.globalAlpha = r;
               var n = sprite[SPRITE.BUBBLES][UI.time][t.id];
               qn(u, n, kI.cam.x + t.x - n.width / 2, kI.cam.y + t.y - n.height / 2),
               u.globalAlpha = 1
           }
       else {
           u.save(),
           u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
           UI.dist_from_biomes(this),
           this.action & sT.ATTACK && za(this),
           u.save(),
           u.rotate(this.angle - Math.PI / 2),
           this.action & sT.ATTACK || (this.action & sT.IDLE || 0 !== this.vehicle ? this.idle.update() : this.action & sT.WALK && this.walk.update());
           var o, a = this.idle.v, T = this.walk.v;
           this.clothe === SPRITE.WINTER_HOOD ? (n = sprite[SPRITE.GLOVES_HOOD][UI.time],
           o = SPRITE.GLOVES_HOOD) : this.clothe === SPRITE.DIAMOND_PROTECTION ? (n = sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][UI.time],
           o = SPRITE.GLOVES_DIAMOND_PROTECTION) : this.clothe === SPRITE.AMETHYST_PROTECTION ? (n = sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][UI.time],
           o = SPRITE.GLOVES_AMETHYST_PROTECTION) : this.clothe === SPRITE.REIDITE_PROTECTION ? (n = sprite[SPRITE.GLOVES_REIDITE_PROTECTION][UI.time],
           o = SPRITE.GLOVES_REIDITE_PROTECTION) : this.superzombie ? (n = sprite[SPRITE.ZOMBIE_HAND][UI.time],
           o = SPRITE.ZOMBIE_HAND) : (n = sprite[SPRITE.HAND][this.skin][UI.time],
           o = SPRITE.HAND),
           shadow = sprite[SPRITE.HAND_SHADOW][UI.time];
           var I = n
             , E = o;
           if (this.action & sT.ATTACK) {
               this.attack.update() && 0 == this.attack.o && (this.hand = !this.hand,
               this.action -= sT.ATTACK,
               this.uid == kI.uid && (kI.control.mouse = 0)),
               this.right >= 0 && (this.hand = !0);
               var _ = this.hand ? this.attack.v : -this.attack.v / 3
                 , h = this.hand ? this.attack.v / 3 : -this.attack.v;
               if (this.superzombie)
                   u.save(),
                   u.rotate(_),
                   Ts(o, n, -n.width / 2 - C * (66 + a), -n.height / 2 + (5 + T) * C),
                   u.restore(),
                   u.save(),
                   u.rotate(h),
                   Ts(o, n, -n.width / 2 + C * (66 + a), -n.height / 2 + (5 + T) * C),
                   u.restore();
               else if (0 === e) {
                   if (this.right === SPRITE.WOOD_BOW && (_ = -s.ease_out_quad(-_)),
                   u.save(),
                   u.rotate(_),
                   Ts(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 - C * (49 + a), -shadow.height / 2 + (15 + T) * C),
                   this.right === SPRITE.BOOK) {
                       var R = sprite[this.right][this.book][UI.time];
                       Is(this.right, this.book, R, -R.width / 4 - C * (62 + a), -R.height / 4 + C * (T + 18))
                   } else
                       ya(this.right, a, T);
                   o >= SPRITE.GLOVES_DIAMOND_PROTECTION ? Es(o, n, -n.width / 4 - C * (49 + a), -n.height / 4 + (11 + T) * C) : o !== SPRITE.GLOVES_HOOD ? Is(o, this.skin, n, -n.width / 4 - C * (49 + a), -n.height / 4 + (11 + T) * C) : Ts(o, n, -n.width / 2 - C * (49 + a), -n.height / 2 + (11 + T) * C),
                   u.restore(),
                   u.save(),
                   u.rotate(h),
                   Ts(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 + C * (49 + a), -shadow.height / 2 + (15 + T) * C),
                   o >= SPRITE.GLOVES_DIAMOND_PROTECTION ? Es(o, n, -n.width / 4 + C * (49 + a), -n.height / 4 + (11 + T) * C) : o !== SPRITE.GLOVES_HOOD ? Is(o, this.skin, n, -n.width / 4 + C * (49 + a), -n.height / 4 + (11 + T) * C) : Ts(o, n, -n.width / 2 + C * (49 + a), -n.height / 2 + (11 + T) * C),
                   u.restore()
               }
           } else if (this.superzombie)
               Ts(o, n, -n.width / 2 - C * (66 + a), -n.height / 2 + (5 + T) * C),
               Ts(o, n, -n.width / 2 + C * (66 + a), -n.height / 2 + (5 + T) * C);
           else if (0 === e) {
               if (Ts(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 - C * (49 + a), -shadow.height / 2 + (15 + T) * C),
               this.right === SPRITE.BOOK) {
                   R = sprite[this.right][this.book][UI.time];
                   Is(this.right, this.book, R, -R.width / 4 - C * (62 + a), -R.height / 4 + C * (T + 18))
               } else
                   ya(this.right, a, T);
               o >= SPRITE.GLOVES_DIAMOND_PROTECTION ? Es(o, n, -n.width / 4 - C * (49 + a), -n.height / 4 + (11 + T) * C) : o !== SPRITE.GLOVES_HOOD ? Is(o, this.skin, n, -n.width / 4 - C * (49 + a), -n.height / 4 + (11 + T) * C) : Ts(o, n, -n.width / 2 - C * (49 + a), -n.height / 2 + (11 + T) * C),
               Ts(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 + C * (49 + a), -shadow.height / 2 + (15 + T) * C),
               o >= SPRITE.GLOVES_DIAMOND_PROTECTION ? Es(o, n, -n.width / 4 + C * (49 + a), -n.height / 4 + (11 + T) * C) : o !== SPRITE.GLOVES_HOOD ? Is(o, this.skin, n, -n.width / 4 + C * (49 + a), -n.height / 4 + (11 + T) * C) : Ts(o, n, -n.width / 2 + C * (49 + a), -n.height / 2 + (11 + T) * C)
           }
           if (this.bag && this.clothe < 1) {
               n = sprite[SPRITE.BAG][this.baglook][UI.time];
               Is(SPRITE.BAG, this.baglook, n, -n.width / 4, -n.height / 4 - 39 * C)
           }
           if (this.superzombie) {
               n = sprite[SPRITE.ZOMBIE_BODY][UI.time];
               Ts(SPRITE.ZOMBIE_BODY, n, -n.width / 2, -n.height / 2),
               this.move_head.update(),
               n = sprite[SPRITE.ZOMBIE_HEAD][UI.time],
               Ts(SPRITE.ZOMBIE_HEAD, n, -n.width / 2, -n.height / 2 + this.move_head.v)
           } else {
               n = sprite[SPRITE.BODY][this.skin][UI.time];
               if (this.clothe !== SPRITE.WINTER_HOOD && (Is(SPRITE.BODY, this.skin, n, -n.width / 4, -n.height / 4),
               this.accessory > 0)) {
                   n = sprite[SPRITE.ACCESSORY][this.accessory][UI.time];
                   Is(SPRITE.ACCESSORY, this.accessory, n, -n.width / 4, -n.height / 4)
               }
           }
           if (this.action & sT.HEAL) {
               if (this.heal.update() && 0 == this.heal.o && (this.action -= sT.HEAL),
               u.globalAlpha = .6 - this.heal.v,
               this.superzombie) {
                   n = sprite[SPRITE.ZOMBIE_HEAL];
                   qn(u, n, -n.width / 2, -n.height / 2)
               } else {
                   n = Ka(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_HEAL__);
                   qn(u, n, n.width / 4, n.height / 4, -n.width / 2, -n.height / 2)
               }
               u.globalAlpha = 1
           }
           if (this.action & sT.WEB) {
               this.web.update() && 0 == this.web.o && (this.action -= sT.WEB),
               u.globalAlpha = .6 - this.web.v;
               n = sprite[SPRITE.WEB];
               qn(u, n, -n.width / 2, -n.height / 2),
               u.globalAlpha = 1
           }
           if (this.action & sT.HURT) {
               if (window.debuggablePlayers[this.id] = this,
               this.hit && this.hit.update() && 0 == this.hit.o && (this.action -= sT.HURT),
               u.globalAlpha = .6 - this.hit.v,
               this.superzombie) {
                   n = sprite[SPRITE.ZOMBIE_HURT];
                   qn(u, n, -n.width / 2, -n.height / 2)
               } else {
                   n = Ka(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_HURT__);
                   qn(u, n, n.width / 4, n.height / 4, -n.width / 2, -n.height / 2)
               }
               u.globalAlpha = 1
           }
           if (this.action & sT.COLD) {
               this.freeze.update() && 0 == this.freeze.o && (this.action -= sT.COLD),
               u.globalAlpha = .6 - this.freeze.v;
               n = Ka(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_COLD__);
               qn(u, n, n.width / 4, n.height / 4, -n.width / 2, -n.height / 2),
               u.globalAlpha = 1
           }
           if (this.action & sT.HUNGER) {
               if (this.starve.update() && 0 == this.starve.o && (this.action -= sT.HUNGER),
               u.globalAlpha = .6 - this.starve.v,
               this.superzombie) {
                   n = sprite[SPRITE.ZOMBIE_HUNGER];
                   qn(u, n, -n.width / 2, -n.height / 2)
               } else {
                   n = Ka(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_HUNGER__);
                   qn(u, n, n.width / 4, n.height / 4, -n.width / 2, -n.height / 2)
               }
               u.globalAlpha = 1
           }
           if (Ba(this.clothe),
           1 === e && (this.action & sT.ATTACK && (a += 15 * this.attack.v),
           Ts(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 - 26 * C, -shadow.height / 2 + (31 + T + a) * C),
           E >= SPRITE.GLOVES_DIAMOND_PROTECTION ? Es(E, I, -I.width / 4 - 26 * C, -I.height / 4 + (27 + T + a) * C) : E !== SPRITE.GLOVES_HOOD ? Is(E, this.skin, I, -I.width / 4 - 26 * C, -I.height / 4 + (27 + T + a) * C) : Ts(E, I, -I.width / 2 - 26 * C, -I.height / 2 + (27 + T + a) * C),
           Ts(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 + 26 * C, -shadow.height / 2 + (31 + T + a) * C),
           E >= SPRITE.GLOVES_DIAMOND_PROTECTION ? Es(E, I, -I.width / 4 + 26 * C, -I.height / 4 + (27 + T + a) * C) : E !== SPRITE.GLOVES_HOOD ? Is(E, this.skin, I, -I.width / 4 + 26 * C, -I.height / 4 + (27 + T + a) * C) : Ts(E, I, -I.width / 2 + 26 * C, -I.height / 2 + (27 + T + a) * C),
           Ha(this.right, 0, T + a)),
           u.restore(),
           this.clothe !== SPRITE.HOOD && this.clothe !== SPRITE.WINTER_HOOD) {
               if (this.dist_winter > 0) {
                   this.player.label_winter || (this.player.label_winter = Yi(C, this.player.nickname, 20, "#187484", "#000", 2, null, null, 300 * C));
                   n = this.player.label_winter
               } else {
                   this.player.label || (this.player.label = Yi(C, this.player.nickname, 20, "#FFF", "#000", 2, null, null, 300 * C));
                   n = this.player.label
               }
               UI.day == SPRITE.NIGHT && (u.globalAlpha = .5);
               a = Math.floor(-n.width / 2),
               T = Math.floor(-n.height / 2 - 70 * C);
               if (qn(u, n, a, T),
               this.player.level > 0) {
                   var A = a + n.width + 5;
                   n = sprite[SPRITE.VERIFIED],
                   void 0 === PLAYER_LEVEL[this.player.level] && (PLAYER_LEVEL[this.player.level] = Yi(C, "[" + this.player.level + "]", 20, "#F9E8A2", "#000", 2, null, null, 50 * C)),
                   qn(u, PLAYER_LEVEL[this.player.level], A, T)
               }
               u.globalAlpha = 1
           } else
               T = Math.floor(-70 * C),
               a = Math.floor(sprite[SPRITE.ICON_MEMBER].width / 1.5);
           if (kI.in_team(this.pid)) {
               if (this.pid == kI.team[0])
                   n = sprite[SPRITE.ICON_LEADER];
               else
                   n = sprite[SPRITE.ICON_MEMBER];
               qn(u, n, a - n.width - 5, T - 6)
           }
           u.restore(),
           u.restore()
       }
   }
   function Ya() {
       if (this.enabled && this.delay >= 0) {
           var e = (new Date).getTime() - this.delay
             , i = e % 1e3 / 1e3;
           i > .5 ? i = 1 - 2 * (i - .5) : i *= 2,
           (e = Math.floor(e / 1e3)) < ET.GHOST_DELAY && (e = ET.GHOST_DELAY - e,
           this.label || (this.label = Yi(C, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10)),
           this.now == e && this.sec || (this.now = e,
           this.sec = Yi(C, "" + e, 40, "#660000", null, null, null, null, null, "#000", 10)),
           qn(u, this.label, (R - this.label.width) / 2, 100 * C),
           u.globalAlpha = i,
           qn(u, this.sec, (R - this.label.width) / 2 - this.sec.width + 15 * C, 100 * C),
           u.globalAlpha = 1)
       }
   }
   function Ua() {
       if (void 0 !== this.message) {
           var e = kI.inv.can_select.length > 0 ? -95 : 0;
           qn(u, this.message, 0, A - this.message.height + e)
       }
   }
   function ka(e, i) {
       this.text && (this.timeout.o ? u.globalAlpha = 1 - this.timeout.v : u.globalAlpha = 1,
       this.label || (this.label = Yi(C, this.text, 40, e, null, null, null, null, null, i, 10)),
       qn(u, this.label, (R - this.label.width) / 2, 50 * C),
       u.globalAlpha = 1,
       this.timeout.update() && 0 == this.timeout.o && (this.text = this.list.shift(),
       this.label = null))
   }
   function Fa() {
       if (u.save(),
       u.translate(kI.cam.x + this.x, kI.cam.y + this.y),
       this.text.length > 0) {
           for (var e = 0; e < this.text.length && e < 2; e++)
               this.label[e] || (this.label[e] = Re(C, this.text[e]),
               this.text_effect[e] = 0,
               this.text_move[e] = 0),
               1 === e && (this.text_move[0] = 30 * s.ease_in_out_quad(this.text_ease));
           this.text_effect[0] += jI,
           this.text.length > 1 && (this.text_ease = Math.min(this.text_ease + jI, 1),
           this.text_effect[0] > 1 && this.text_ease > .5 && (this.text_effect[1] += jI));
           for (e = 0; e < this.text.length && e < 2; e++) {
               var i = this.text_effect[e];
               i > 0 && (u.globalAlpha = i < .25 ? 4 * i : i > 3.75 ? Math.max(4 * (4 - i), 0) : 1,
               qn(u, this.label[e], -this.label[e].width / 2, -this.text_move[e] + -this.label[e].height / 2 - 110 * C))
           }
           this.text_effect[0] > 4 && (this.text_effect.shift(),
           this.text.shift(),
           this.text_move.shift(),
           this.label.shift(),
           this.text_ease = 0)
       }
       u.restore()
   }
   __EFFECT_HURT__ = 0,
   __EFFECT_HEAL__ = 1,
   __EFFECT_COLD__ = 2,
   __EFFECT_HUNGER__ = 3,
   __EFFECT_BOX__ = 4,
   __IMAGE_EFFECT__ = [[], [], [], [], []],
   __IMAGE_EFFECT_COLOR__ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
   var xa = 0;
   function Ja(e, i, t, r, n, o, a, s) {
       void 0 === s && (s = 0);
       for (var T = a; T >= s; T--)
           for (var I = e; I <= i; I++)
               for (var E = t; E <= r; E++) {
                   var _ = wI.tiles[I][E];
                   if (_ && _[o]) {
                       var h = _[o][T];
                       if (void 0 !== h)
                           for (var R = 0; R < h.length; R++) {
                               var A = h[R]
                                 , d = sprite[n][UI.time][T]
                                 , S = (xa + 3 * (I + E)) % 60
                                 , l = S < 30 ? S / 30 : 1 - (S - 30) / 30
                                 , N = -d.width * (1 + .9 * l / 30)
                                 , C = -d.height * (1 + .9 * l / 30);
                               l = (S = (xa + 7 * (I + E)) % 60) < 30 ? S / 30 : 1 - (S - 30) / 30;
                               var g = u.globalAlpha;
                               u.globalAlpha = (.9 + .1 * l) * g,
                               qn(u, d, kI.cam.x + A.x - N / 2, kI.cam.y + A.y - C / 2, N, C),
                               u.globalAlpha = g
                           }
                   }
               }
   }
   function Xa(e, i, t, r, n, o, a, s) {
       void 0 === s && (s = 0),
       UI.breath[n].update();
       for (var T = a; T >= s; T--)
           for (var I = e; I <= i; I++)
               for (var E = t; E <= r; E++) {
                   var _ = wI.tiles[I][E];
                   if (_ && _[o]) {
                       var h = _[o][T];
                       if (void 0 !== h)
                           for (var R = 0; R < h.length; R++) {
                               var A = h[R];
                               if (A.update) {
                                   A.hit.update() && 0 == A.hit.o && (A.update = !1);
                                   var d = (1 - A.hit.v) * jI * 600 * C
                                     , S = Math.cos(A.angle) * d
                                     , l = Math.sin(A.angle) * d
                               } else
                                   S = 0,
                                   l = 0;
                               var N = sprite[n][UI.time][T]
                                 , g = -N.width * UI.breath[n].v
                                 , b = -N.height * UI.breath[n].v;
                               qn(u, N, kI.cam.x + A.x - g / 2 + S, kI.cam.y + A.y - b / 2 + l, g, b)
                           }
                   }
               }
   }
   var qa = [];
   for (Z = 0; Z < 100; Z++) {
       var ja = 1;
       Math.random() < .25 && (ja = 0),
       qa.push(ja)
   }
   function Za(e, i, t, r, n, o, a, s, T) {
       void 0 === s && (s = 0);
       for (var I = a; I >= s; I--)
           for (var E = e; E <= i; E++)
               for (var _ = t; _ <= r; _++)
                   if (!(T > 0 && 1 === qa[(E + _ * T) % qa.length])) {
                       var h = wI.tiles[E][_];
                       if (void 0 !== h && void 0 !== h[o]) {
                           var R = h[o][I];
                           if (void 0 !== R)
                               for (var A = 0; A < R.length; A++) {
                                   var d = R[A];
                                   if (d.update) {
                                       d.hit.update() && 0 == d.hit.o && (d.update = !1);
                                       var S = (1 - d.hit.v) * jI * 600 * C
                                         , l = Math.cos(d.angle) * S
                                         , N = Math.sin(d.angle) * S
                                   } else
                                       l = 0,
                                       N = 0;
                                   var g = sprite[n][UI.time][I];
                                   qn(u, g, kI.cam.x + d.x - g.width / (2 * _scale_object) + l, kI.cam.y + d.y - g.height / (2 * _scale_object) + N, g.width / _scale_object, g.height / _scale_object)
                               }
                       }
                   }
   }
   function Qa(e, i, t, r, n, o, a, s) {
       void 0 === s && (s = 0);
       for (var T = e; T <= i; T++)
           for (var I = t; I <= r; I++) {
               var E = wI.tiles[T][I];
               if (void 0 !== E && void 0 !== E[o]) {
                   var _ = E[o];
                   if (void 0 !== _)
                       if (1 === _.scale) {
                           var h = sprite[n][UI.time][_._id];
                           u.save(),
                           u.translate(kI.cam.x + _.x, kI.cam.y + _.y),
                           u.rotate(_.angle),
                           qn(u, h, -h.width / 4, -h.height / 4, h.width / 2, h.height / 2),
                           u.restore()
                       } else if (3 === _.scale)
                           for (var R = 0; R < _.p.length; R++) {
                               u.save(),
                               u.translate(kI.cam.x + _.x, kI.cam.y + _.y),
                               u.rotate(_.p[R].angle);
                               h = sprite[n][UI.time][_.p[R]._id];
                               qn(u, h, -h.width / 3 + _.p[R].x, -h.height / 3 + _.p[R].y, h.width / 1.5, h.height / 1.5),
                               u.restore()
                           }
                       else {
                           h = sprite[n][UI.time][_._id];
                           u.save(),
                           u.translate(kI.cam.x + _.x, kI.cam.y + _.y),
                           u.rotate(_.angle),
                           qn(u, h, -h.width / 2, -h.height / 2, h.width, h.height),
                           u.restore()
                       }
               }
           }
   }
   function $a(e, i, t, r, n, o, a, s) {
       void 0 === s && (s = 0);
       for (var T = a; T >= s; T--)
           for (var I = e; I <= i; I++)
               for (var E = t; E <= r; E++) {
                   var _ = wI.tiles[I][E];
                   if (void 0 !== _ && void 0 !== _[o]) {
                       var h = _[o][T];
                       if (void 0 !== h)
                           for (var R = 0; R < h.length; R++) {
                               var A = h[R];
                               if (A.update) {
                                   A.hit.update() && 0 == A.hit.o && (A.update = !1);
                                   var d = (1 - A.hit.v) * jI * 600 * C
                                     , S = Math.cos(A.angle) * d
                                     , l = Math.sin(A.angle) * d
                               } else
                                   S = 0,
                                   l = 0;
                               for (var N = 0; N < _bubble[T].amount; N++) {
                                   UI.lava[N].last !== ZI && (UI.lava[N].update(),
                                   UI.lava[N].last = ZI);
                                   var g = sprite[SPRITE.LAVA_BUBBLE][UI.time][_bubble[T].pos[N].t]
                                     , b = -g.width * UI.lava[N].v
                                     , O = -g.height * UI.lava[N].v;
                                   qn(u, g, kI.cam.x + A.x - b / 4 + S + _bubble[T].pos[N].x, kI.cam.y + A.y - O / 4 + l + _bubble[T].pos[N].y, b / 2, O / 2)
                               }
                           }
                   }
               }
   }
   _scale_object = 1,
   _bubble = [{
       amount: 10,
       pos: [{
           x: -128,
           y: -20,
           t: 0
       }, {
           x: -86,
           y: -4,
           t: 1
       }, {
           x: -60,
           y: -74,
           t: 2
       }, {
           x: -22,
           y: -144,
           t: 0
       }, {
           x: -58,
           y: 86,
           t: 0
       }, {
           x: 3,
           y: -30,
           t: 0
       }, {
           x: 65,
           y: -115,
           t: 1
       }, {
           x: 118,
           y: -50,
           t: 0
       }, {
           x: 73,
           y: 15,
           t: 1
       }, {
           x: 67,
           y: 79,
           t: 0
       }]
   }, {
       amount: 5,
       pos: [{
           x: -45,
           y: -26,
           t: 0
       }, {
           x: -45,
           y: 20,
           t: 2
       }, {
           x: 10,
           y: -60,
           t: 1
       }, {
           x: 52,
           y: -17,
           t: 1
       }, {
           x: 14,
           y: 45,
           t: 0
       }]
   }, {
       amount: 3,
       pos: [{
           x: -30,
           y: 3,
           t: 2
       }, {
           x: 7,
           y: -38,
           t: 2
       }, {
           x: 37,
           y: 5,
           t: 2
       }]
   }, {
       amount: 11,
       pos: [{
           x: -74,
           y: -87,
           t: 2
       }, {
           x: -11,
           y: -10,
           t: 1
       }, {
           x: -99,
           y: 17,
           t: 1
       }, {
           x: -66,
           y: 84,
           t: 0
       }, {
           x: -55,
           y: 123,
           t: 1
       }, {
           x: 10,
           y: 81,
           t: 2
       }, {
           x: 52,
           y: 50,
           t: 0
       }, {
           x: 138,
           y: 9,
           t: 1
       }, {
           x: 104,
           y: -28,
           t: 0
       }, {
           x: 67,
           y: -56,
           t: 2
       }, {
           x: 5,
           y: -112,
           t: 0
       }]
   }, {
       amount: 6,
       pos: [{
           x: -33,
           y: -66,
           t: 2
       }, {
           x: -58,
           y: 10,
           t: 0
       }, {
           x: -19,
           y: 44,
           t: 1
       }, {
           x: 44,
           y: 20,
           t: 0
       }, {
           x: 53,
           y: -36,
           t: 2
       }, {
           x: 7,
           y: -62,
           t: 0
       }]
   }, {
       amount: 3,
       pos: [{
           x: -19,
           y: -25,
           t: 1
       }, {
           x: -29,
           y: 13,
           t: 2
       }, {
           x: 12,
           y: 12,
           t: 0
       }]
   }];
   var es = 0
     , is = 0
     , ts = 0
     , rs = 0;
   function ns() {
       var e = es
         , i = is
         , t = ts
         , r = rs;
       YI.quality && As(Za, t, r, e, i, SPRITE.LAKE_EDGE, "l", 2),
       YI.quality && As(Za, t, r, e, i, SPRITE.LAVA_GROUND, "la", 5),
       As(Za, t, r, e, i, SPRITE.MAGMA, "la", 5),
       As(Xa, t, r, e, i, SPRITE.LAKE, "l", 2),
       YI.quality && (As($a, t, r, e, i, SPRITE.MAGMA, "la", 5),
       As(Xa, t, r, e, i, SPRITE.LAKE_DEEP, "l", 2)),
       As(Za, t, r, e, i, SPRITE.MARKER, "ma", 3);
       for (var n = UI.units[hT.SAND_WORM], o = 0; o < n.length; o++)
           n[o].draw_ground();
       var a = UI.units[hT.PLAYERS];
       for (o = 0; o < a.length; o++)
           for (var T = a[o], I = 0; I < T.swim.length; I++)
               _s(T.swim[I]);
       var E = UI.units[hT.BRIDGE];
       for (o = 0; o < E.length; o++)
           Rs(E[o], SPRITE.BRIDGE),
           E[o].draw_life(E[o].info);
       var _ = UI.units[hT.FURNACE];
       for (o = 0; o < _.length; o++)
           2 == _[o].action && os(_[o]);
       var h = UI.units[hT.FIRE];
       for (o = 0; o < h.length; o++)
           os(h[o], SPRITE.WOOD_FIRE);
       var R = UI.units[hT.RESURRECTION];
       for (o = 0; o < R.length; o++)
           os(R[o]);
       var A = UI.units[hT.EMERALD_MACHINE];
       for (o = 0; o < A.length; o++)
           os(A[o]);
       var d = UI.units[hT.BIG_FIRE];
       for (o = 0; o < d.length; o++)
           os(d[o], SPRITE.BIG_FIRE_WOOD);
       var S = UI.units[hT.SIGN];
       for (o = 0; o < S.length; o++)
           Rs(S[o]);
       var l = UI.units[hT.PLOT];
       for (o = 0; o < l.length; o++)
           Rs(l[o], SPRITE.PLOT);
       var N = UI.units[hT.SEED];
       for (o = 0; o < N.length; o++)
           os(N[o]);
       for (N = UI.units[hT.TOMATO_SEED],
       o = 0; o < N.length; o++)
           os(N[o]);
       for (N = UI.units[hT.SEED],
       o = 0; o < N.length; o++)
           as(N[o]);
       var C = UI.units[hT.CARROT_SEED];
       for (o = 0; o < C.length; o++)
           0 != (15 & C[o].info) && 10 !== C[o].info || Rs(C[o]);
       var g = UI.units[hT.WATERMELON_SEED];
       for (o = 0; o < g.length; o++)
           0 != (15 & g[o].info) && 10 !== g[o].info || Rs(g[o]);
       var b = UI.units[hT.ALOE_VERA_SEED];
       for (o = 0; o < b.length; o++)
           0 != (15 & b[o].info) && 10 !== b[o].info || Rs(b[o]);
       var O = UI.units[hT.WHEAT_MOB];
       for (o = 0; o < O.length; o++)
           Rs(O[o], SPRITE.WHEAT_SEED);
       var p = UI.units[hT.GARLIC_SEED];
       for (o = 0; o < p.length; o++)
           0 != (15 & p[o].info) && 10 !== p[o].info || Rs(p[o]);
       var c = UI.units[hT.THORNBUSH_SEED];
       for (o = 0; o < c.length; o++)
           0 != (15 & c[o].info) && 10 !== c[o].info || Rs(c[o]);
       var v = UI.units[hT.PUMPKIN_SEED];
       for (o = 0; o < v.length; o++)
           0 != (15 & v[o].info) && 10 !== v[o].info || Rs(v[o]);
       for (O = UI.units[hT.WHEAT_SEED],
       o = 0; o < O.length; o++)
           Rs(O[o]);
       var P = UI.units[hT.CRATE];
       for (o = 0; o < P.length; o++)
           Rs(P[o], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
       var m = UI.units[hT.DEAD_BOX];
       for (o = 0; o < m.length; o++)
           Rs(m[o], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
       var D = UI.units[hT.GIFT];
       for (o = 0; o < D.length; o++)
           Rs(D[o], SPRITE.GIFT, SPRITE.HURT_GIFT);
       var M = UI.units[hT.WOOD_DOOR_SPIKE];
       for (o = 0; o < M.length; o++)
           1 == M[o].extra && Rs(M[o], SPRITE.DOOR_WOOD_OPEN);
       for (M = UI.units[hT.STONE_DOOR_SPIKE],
       o = 0; o < M.length; o++)
           1 == M[o].extra && Rs(M[o], SPRITE.DOOR_STONE_OPEN);
       for (M = UI.units[hT.GOLD_DOOR_SPIKE],
       o = 0; o < M.length; o++)
           1 == M[o].extra && Rs(M[o], SPRITE.DOOR_GOLD_OPEN);
       for (M = UI.units[hT.DIAMOND_DOOR_SPIKE],
       o = 0; o < M.length; o++)
           1 == M[o].extra && Rs(M[o], SPRITE.DOOR_DIAMOND_OPEN);
       for (M = UI.units[hT.AMETHYST_DOOR_SPIKE],
       o = 0; o < M.length; o++)
           1 == M[o].extra && Rs(M[o], SPRITE.DOOR_AMETHYST_OPEN);
       for (M = UI.units[hT.REIDITE_DOOR_SPIKE],
       o = 0; o < M.length; o++)
           1 == M[o].extra && Rs(M[o], SPRITE.DOOR_GOLD_OPEN);
       for (M = UI.units[hT.WOOD_DOOR],
       o = 0; o < M.length; o++)
           1 == M[o].extra && Rs(M[o], SPRITE.DOOR_WOOD_OPEN);
       for (M = UI.units[hT.STONE_DOOR],
       o = 0; o < M.length; o++)
           1 == M[o].extra && Rs(M[o], SPRITE.DOOR_STONE_OPEN);
       for (M = UI.units[hT.GOLD_DOOR],
       o = 0; o < M.length; o++)
           1 == M[o].extra && Rs(M[o], SPRITE.DOOR_GOLD_OPEN);
       for (M = UI.units[hT.DIAMOND_DOOR],
       o = 0; o < M.length; o++)
           1 == M[o].extra && Rs(M[o], SPRITE.DOOR_DIAMOND_OPEN);
       for (M = UI.units[hT.AMETHYST_DOOR],
       o = 0; o < M.length; o++)
           1 == M[o].extra && Rs(M[o], SPRITE.DOOR_AMETHYST_OPEN);
       for (M = UI.units[hT.REIDITE_DOOR],
       o = 0; o < M.length; o++)
           1 == M[o].extra && Rs(M[o], SPRITE.DOOR_GOLD_OPEN);
       var G = UI.units[hT.RABBIT];
       for (o = 0; o < G.length; o++)
           Rs(G[o], SPRITE.RABBIT, SPRITE.HURT_RABBIT);
       var L = UI.units[hT.BED];
       for (o = 0; o < L.length; o++)
           Rs(L[o], SPRITE.BED);
       for (n = UI.units[hT.SAND_WORM],
       o = 0; o < n.length; o++)
           Rs(n[o], SPRITE.SAND_WORM, SPRITE.HURT_SAND_WORM);
       var f = UI.units[hT.SPELL];
       for (o = 0; o < f.length; o++)
           0 === f[o].fly && Rs(f[o]);
       for (a = UI.units[hT.PLAYERS],
       o = 0; o < a.length; o++) {
           T = a[o];
           if (a[o].vehicle !== INV.BABY_DRAGON && a[o].vehicle !== INV.BABY_LAVA && a[o].vehicle !== INV.HAWK && a[o].vehicle !== INV.PLANE && a[o].vehicle !== INV.NIMBUS) {
               if (0 === T.tower)
                   if (T.tower_fx > .001) {
                       T.tower_fx = s.lerp(T.tower_fx, 0, .018);
                       var V = 1 + .18 * Math.min(1, Math.max(T.tower_fx, 0) / 100);
                       u.save(),
                       u.scale(V, V),
                       kI.cam.x /= V,
                       kI.cam.y /= V,
                       T.x /= V,
                       T.y /= V,
                       T.r.x /= V,
                       T.r.y /= V,
                       T.draw_vehicle(),
                       T.draw(),
                       kI.cam.x *= V,
                       kI.cam.y *= V,
                       T.x *= V,
                       T.y *= V,
                       T.r.x *= V,
                       T.r.y *= V,
                       u.restore()
                   } else
                       T.fly = 0,
                       T.draw_vehicle(),
                       T.draw()
           } else if (T.speed <= 180) {
               u.save();
               V = 1 + .35 * Math.min(1, Math.max(T.vehicle_fx5 - 30, 0) / 180);
               u.scale(V, V),
               kI.cam.x /= V,
               kI.cam.y /= V,
               T.x /= V,
               T.y /= V,
               T.r.x /= V,
               T.r.y /= V,
               T.fly = 0,
               T.draw_vehicle(),
               T.draw(),
               kI.cam.x *= V,
               kI.cam.y *= V,
               T.x *= V,
               T.y *= V,
               T.r.x *= V,
               T.r.y *= V,
               u.restore()
           }
       }
       for (L = UI.units[hT.BED],
       o = 0; o < L.length; o++)
           Rs(L[o], SPRITE.BED_TOP);
       var z = UI.units[hT.CRAB];
       for (o = 0; o < z.length; o++)
           Rs(z[o]);
       var H = UI.units[hT.FOX];
       for (o = 0; o < H.length; o++)
           Rs(H[o], SPRITE.FOX, SPRITE.HURT_FOX);
       var y = UI.units[hT.BOAR];
       for (o = 0; o < y.length; o++)
           Rs(y[o]);
       var B = UI.units[hT.WOLF];
       for (o = 0; o < B.length; o++)
           Rs(B[o], SPRITE.WOLF, SPRITE.HURT_WOLF);
       var w = UI.units[hT.BABY_DRAGON];
       for (o = 0; o < w.length; o++)
           Rs(w[o], SPRITE.BABY_DRAGON, SPRITE.HURT_BABY_DRAGON);
       var K = UI.units[hT.BABY_LAVA];
       for (o = 0; o < K.length; o++)
           Rs(K[o], SPRITE.BABY_LAVA, SPRITE.HURT_BABY_LAVA);
       for (C = UI.units[hT.CARROT_SEED],
       o = 0; o < C.length; o++)
           0 != (15 & C[o].info) && 10 !== C[o].info && Rs(C[o]);
       for (g = UI.units[hT.WATERMELON_SEED],
       o = 0; o < g.length; o++)
           0 != (15 & g[o].info) && 10 !== g[o].info && Rs(g[o]);
       for (b = UI.units[hT.ALOE_VERA_MOB],
       o = 0; o < b.length; o++)
           Rs(b[o], SPRITE.ALOE_VERA);
       for (b = UI.units[hT.ALOE_VERA_SEED],
       o = 0; o < b.length; o++)
           0 != (15 & b[o].info) && 10 !== b[o].info && Rs(b[o]);
       for (N = UI.units[hT.TOMATO_SEED],
       o = 0; o < N.length; o++)
           as(N[o]);
       for (p = UI.units[hT.GARLIC_SEED],
       o = 0; o < p.length; o++)
           0 != (15 & p[o].info) && 10 !== p[o].info && Rs(p[o]);
       for (c = UI.units[hT.THORNBUSH_SEED],
       o = 0; o < c.length; o++)
           0 != (15 & c[o].info) && 10 !== c[o].info && Rs(c[o]);
       for (v = UI.units[hT.PUMPKIN_SEED],
       o = 0; o < v.length; o++)
           0 != (15 & v[o].info) && 10 !== v[o].info && Rs(v[o]);
       var W = UI.units[hT.TREASURE_CHEST];
       for (o = 0; o < W.length; o++)
           Rs(W[o], SPRITE.TREASURE_CHEST, SPRITE.HURT_TREASURE_CHEST);
       var Y = UI.units[hT.KRAKEN];
       for (o = 0; o < Y.length; o++)
           Rs(Y[o], SPRITE.KRAKEN, SPRITE.HURT_KRAKEN);
       var U = UI.units[hT.PIRANHA];
       for (o = 0; o < U.length; o++)
           Rs(U[o], SPRITE.PIRANHA, SPRITE.HURT_PIRANHA);
       var k = UI.units[hT.SPIDER];
       for (o = 0; o < k.length; o++)
           Rs(k[o], SPRITE.SPIDER, SPRITE.HURT_SPIDER);
       var F = UI.units[hT.PENGUIN];
       for (o = 0; o < F.length; o++)
           Rs(F[o], SPRITE.PENGUIN, SPRITE.HURT_PENGUIN);
       var x = UI.units[hT.BEAR];
       for (o = 0; o < x.length; o++)
           Rs(x[o], SPRITE.BEAR, SPRITE.HURT_BEAR);
       var J = UI.units[hT.BABY_MAMMOTH];
       for (o = 0; o < J.length; o++)
           Rs(J[o]);
       var X = UI.units[hT.FLAME];
       for (o = 0; o < X.length; o++)
           Rs(X[o], SPRITE.FIRE_MOB, SPRITE.HURT_FIRE_MOB);
       var q = UI.units[hT.CRAB_BOSS];
       for (o = 0; o < q.length; o++)
           Rs(q[o]);
       var j = UI.units[hT.MAMMOTH];
       for (o = 0; o < j.length; o++)
           Rs(j[o], SPRITE.MAMMOTH, SPRITE.HURT_MAMMOTH);
       var Z = UI.units[hT.DRAGON];
       for (o = 0; o < Z.length; o++)
           1 === Z[o].scale && Rs(Z[o], SPRITE.DRAGON, SPRITE.HURT_DRAGON);
       for (Z = UI.units[hT.LAVA_DRAGON],
       o = 0; o < Z.length; o++)
           1 === Z[o].scale && Rs(Z[o], SPRITE.LAVA_DRAGON, SPRITE.HURT_LAVA_DRAGON);
       var Q = UI.units[hT.CHEST];
       for (o = 0; o < Q.length; o++)
           Rs(Q[o]);
       var $ = UI.units[hT.WORKBENCH];
       for (o = 0; o < $.length; o++)
           Rs($[o], SPRITE.WORKBENCH);
       for (_ = UI.units[hT.FURNACE],
       o = 0; o < _.length; o++)
           Rs(_[o]);
       var ee = UI.units[hT.BREAD_OVEN];
       for (o = 0; o < ee.length; o++)
           Rs(ee[o]);
       for (M = UI.units[hT.WOOD_DOOR],
       o = 0; o < M.length; o++)
           0 == M[o].extra && Rs(M[o], SPRITE.DOOR_WOOD_CLOSE),
           M[o].draw_life(M[o].info);
       for (M = UI.units[hT.STONE_DOOR],
       o = 0; o < M.length; o++)
           0 == M[o].extra && Rs(M[o], SPRITE.DOOR_STONE_CLOSE),
           M[o].draw_life(M[o].info);
       for (M = UI.units[hT.GOLD_DOOR],
       o = 0; o < M.length; o++)
           0 == M[o].extra && Rs(M[o], SPRITE.DOOR_GOLD_CLOSE),
           M[o].draw_life(M[o].info);
       for (M = UI.units[hT.DIAMOND_DOOR],
       o = 0; o < M.length; o++)
           0 == M[o].extra && Rs(M[o], SPRITE.DOOR_DIAMOND_CLOSE),
           M[o].draw_life(M[o].info);
       for (M = UI.units[hT.AMETHYST_DOOR],
       o = 0; o < M.length; o++)
           0 == M[o].extra && Rs(M[o], SPRITE.DOOR_AMETHYST_CLOSE),
           M[o].draw_life(M[o].info);
       for (M = UI.units[hT.REIDITE_DOOR],
       o = 0; o < M.length; o++)
           0 == M[o].extra && Rs(M[o], SPRITE.REIDITE_DOOR),
           M[o].draw_life(M[o].info);
       for (M = UI.units[hT.WOOD_DOOR_SPIKE],
       o = 0; o < M.length; o++)
           0 == M[o].extra && Rs(M[o], SPRITE.WOOD_DOOR_SPIKE),
           M[o].draw_life(M[o].info);
       for (M = UI.units[hT.STONE_DOOR_SPIKE],
       o = 0; o < M.length; o++)
           0 == M[o].extra && Rs(M[o], SPRITE.STONE_DOOR_SPIKE),
           M[o].draw_life(M[o].info);
       for (M = UI.units[hT.GOLD_DOOR_SPIKE],
       o = 0; o < M.length; o++)
           0 == M[o].extra && Rs(M[o], SPRITE.GOLD_DOOR_SPIKE),
           M[o].draw_life(M[o].info);
       for (M = UI.units[hT.DIAMOND_DOOR_SPIKE],
       o = 0; o < M.length; o++)
           0 == M[o].extra && Rs(M[o], SPRITE.DIAMOND_DOOR_SPIKE),
           M[o].draw_life(M[o].info);
       for (M = UI.units[hT.AMETHYST_DOOR_SPIKE],
       o = 0; o < M.length; o++)
           0 == M[o].extra && Rs(M[o], SPRITE.AMETHYST_DOOR_SPIKE),
           M[o].draw_life(M[o].info);
       for (M = UI.units[hT.REIDITE_DOOR_SPIKE],
       o = 0; o < M.length; o++)
           0 == M[o].extra && Rs(M[o], SPRITE.REIDITE_DOOR_SPIKE),
           M[o].draw_life(M[o].info);
       var ie = UI.units[hT.WALL];
       for (o = 0; o < ie.length; o++)
           Rs(ie[o], SPRITE.WALL),
           ie[o].draw_life(ie[o].info);
       for (ie = UI.units[hT.STONE_WALL],
       o = 0; o < ie.length; o++)
           Rs(ie[o], SPRITE.STONE_WALL),
           ie[o].draw_life(ie[o].info);
       for (ie = UI.units[hT.GOLD_WALL],
       o = 0; o < ie.length; o++)
           Rs(ie[o], SPRITE.GOLD_WALL),
           ie[o].draw_life(ie[o].info);
       for (ie = UI.units[hT.DIAMOND_WALL],
       o = 0; o < ie.length; o++)
           Rs(ie[o], SPRITE.DIAMOND_WALL),
           ie[o].draw_life(ie[o].info);
       for (ie = UI.units[hT.AMETHYST_WALL],
       o = 0; o < ie.length; o++)
           Rs(ie[o], SPRITE.AMETHYST_WALL),
           ie[o].draw_life(ie[o].info);
       for (ie = UI.units[hT.REIDITE_WALL],
       o = 0; o < ie.length; o++)
           Rs(ie[o], SPRITE.REIDITE_WALL),
           ie[o].draw_life(ie[o].info);
       var te = UI.units[hT.SPIKE];
       for (o = 0; o < te.length; o++)
           Rs(te[o], SPRITE.SPIKE),
           te[o].draw_life(te[o].info);
       for (te = UI.units[hT.STONE_SPIKE],
       o = 0; o < te.length; o++)
           Rs(te[o], SPRITE.STONE_SPIKE),
           te[o].draw_life(te[o].info);
       for (te = UI.units[hT.GOLD_SPIKE],
       o = 0; o < te.length; o++)
           Rs(te[o], SPRITE.GOLD_SPIKE),
           te[o].draw_life(te[o].info);
       for (te = UI.units[hT.DIAMOND_SPIKE],
       o = 0; o < te.length; o++)
           Rs(te[o], SPRITE.DIAMOND_SPIKE),
           te[o].draw_life(te[o].info);
       for (te = UI.units[hT.AMETHYST_SPIKE],
       o = 0; o < te.length; o++)
           Rs(te[o], SPRITE.AMETHYST_SPIKE),
           te[o].draw_life(te[o].info);
       for (te = UI.units[hT.REIDITE_SPIKE],
       o = 0; o < te.length; o++)
           Rs(te[o], SPRITE.REIDITE_SPIKE),
           te[o].draw_life(te[o].info);
       var re = UI.units[hT.WELL];
       for (o = 0; o < re.length; o++) {
           var ne = re[o];
           ne.info > 0 ? Rs(ne, SPRITE.WELL_FULL) : Rs(ne, SPRITE.WELL_EMPTY)
       }
       var oe = UI.units[hT.TOTEM];
       for (o = 0; o < oe.length; o++)
           Rs(oe[o], SPRITE.TOTEM);
       As(Za, t, r, e, i, SPRITE.GOLD, "g", 2),
       As(Za, t, r, e, i, SPRITE.GOLD_WINTER, "gw", 2),
       As(Za, t, r, e, i, SPRITE.DIAMOND, "d", 2),
       As(Za, t, r, e, i, SPRITE.DIAMOND_WINTER, "dw", 2),
       As(Za, t, r, e, i, SPRITE.PLANT, "p", 0),
       As(Za, t, r, e, i, SPRITE.EMERALD, "m", 2),
       As(Za, t, r, e, i, SPRITE.AMETHYST, "a", 2),
       As(Za, t, r, e, i, SPRITE.REIDITE, "re", 2),
       As(Za, t, r, e, i, SPRITE.SHADOW_CAVE_STONES, "cs", 3, 3),
       As(Za, t, r, e, i, SPRITE.SHADOW_CAVE_STONES, "cs", 2, 2),
       As(Za, t, r, e, i, SPRITE.SHADOW_CAVE_STONES, "cs", 1, 1),
       As(Za, t, r, e, i, SPRITE.SHADOW_CAVE_STONES, "cs", 0, 0),
       As(Za, t, r, e, i, SPRITE.CAVE_STONES, "cs", 3, 3),
       As(Za, t, r, e, i, SPRITE.CAVE_STONES, "cs", 2, 2),
       As(Za, t, r, e, i, SPRITE.CAVE_STONES, "cs", 1, 1),
       As(Za, t, r, e, i, SPRITE.CAVE_STONES, "cs", 0, 0);
       var ae = UI.units[hT.FRUIT];
       for (o = 0; o < ae.length; o++)
           for (I = 0; I < ae[o].info; I++)
               Rs(ae[o].fruits[I], SPRITE.FRUIT);
       As(Za, t, r, e, i, SPRITE.STONES, "s", 2);
       var se = UI.units[hT.EXTRACTOR_MACHINE_STONE];
       for (o = 0; o < se.length; o++)
           Rs(se[o]);
       for (se = UI.units[hT.EXTRACTOR_MACHINE_GOLD],
       o = 0; o < se.length; o++)
           Rs(se[o]);
       for (se = UI.units[hT.EXTRACTOR_MACHINE_DIAMOND],
       o = 0; o < se.length; o++)
           Rs(se[o]);
       for (se = UI.units[hT.EXTRACTOR_MACHINE_AMETHYST],
       o = 0; o < se.length; o++)
           Rs(se[o]);
       for (se = UI.units[hT.EXTRACTOR_MACHINE_REIDITE],
       o = 0; o < se.length; o++)
           Rs(se[o]);
       var Te = UI.units[hT.WINDMILL];
       for (o = 0; o < Te.length; o++)
           os(Te[o]);
       for (h = UI.units[hT.FIRE],
       o = 0; o < h.length; o++)
           as(h[o]);
       for (h = UI.units[hT.BIG_FIRE],
       o = 0; o < h.length; o++)
           as(h[o]);
       for (_ = UI.units[hT.FURNACE],
       o = 0; o < _.length; o++)
           2 == _[o].action && as(_[o]);
       for (ee = UI.units[hT.BREAD_OVEN],
       o = 0; o < ee.length; o++)
           as(ee[o]);
       for (R = UI.units[hT.RESURRECTION],
       o = 0; o < R.length; o++)
           as(R[o]);
       for (A = UI.units[hT.EMERALD_MACHINE],
       o = 0; o < A.length; o++)
           as(A[o]),
           A[o].draw_life(A[o].info);
       As(Za, t, r, e, i, SPRITE.CACTUS, "c", 0),
       As(Za, t, r, e, i, SPRITE.TREE, "t", 5, 4),
       As(Za, t, r, e, i, SPRITE.FIR, "f", 2, 2),
       As(Za, t, r, e, i, SPRITE.PALM, "plm", 0, 0),
       As(Za, t, r, e, i, SPRITE.TREE_BRANCH, "b", 3, 2),
       As(Za, t, r, e, i, SPRITE.TREE, "t", 3, 2),
       As(Za, t, r, e, i, SPRITE.TREE_BRANCH, "b", 1, 0),
       As(Za, t, r, e, i, SPRITE.FIR, "f", 1, 1),
       As(Za, t, r, e, i, SPRITE.PALM, "plm", 1, 1),
       As(Za, t, r, e, i, SPRITE.TREE, "t", 1, 0),
       As(Za, t, r, e, i, SPRITE.FIR, "f", 0, 0),
       As(Za, t, r, e, i, SPRITE.PALM, "plm", 2, 2);
       for (Te = UI.units[hT.WINDMILL],
       o = 0; o < Te.length; o++)
           as(Te[o]);
       var Ie = UI.units[hT.WOOD_TOWER];
       for (o = 0; o < Ie.length; o++)
           Rs(Ie[o], SPRITE.WOOD_TOWER);
       for (a = UI.units[hT.PLAYERS],
       o = 0; o < a.length; o++) {
           if (1 === (T = a[o]).tower && (T.speed < 180 || T.vehicle !== INV.BABY_DRAGON && T.vehicle !== INV.BABY_LAVA && T.vehicle !== INV.NIMBUS && T.vehicle !== INV.HAWK && T.vehicle !== INV.PLANE)) {
               T.tower_fx = s.lerp(T.tower_fx, 100, .018);
               V = 1 + .18 * Math.min(1, Math.max(T.tower_fx, 0) / 100);
               u.save(),
               u.scale(V, V),
               kI.cam.x /= V,
               kI.cam.y /= V,
               T.x /= V,
               T.y /= V,
               T.r.x /= V,
               T.r.y /= V,
               T.draw_vehicle(),
               T.draw(),
               kI.cam.x *= V,
               kI.cam.y *= V,
               T.x *= V,
               T.y *= V,
               T.r.x *= V,
               T.r.y *= V,
               u.restore()
           }
       }
       var Ee = UI.units[hT.ROOF];
       for (o = 0; o < Ee.length; o++)
           Rs(Ee[o], SPRITE.ROOF),
           Ee[o].draw_life(Ee[o].info);
       var _e = UI.units[hT.FIREFLY];
       for (o = 0; o < _e.length; o++)
           Rs(_e[o], SPRITE.FIREFLY, SPRITE.HURT_FIREFLY);
       var ue = UI.units[hT.GARLAND];
       for (o = 0; o < ue.length; o++)
           Rs(ue[o], SPRITE.GARLAND);
       for (a = UI.units[hT.PLAYERS],
       o = 0; o < a.length; o++) {
           if (((T = a[o]).vehicle === INV.BABY_DRAGON || T.vehicle === INV.BABY_LAVA || T.vehicle === INV.NIMBUS || T.vehicle === INV.HAWK || T.vehicle === INV.PLANE) && T.speed > 180) {
               T.fly = 1,
               u.save();
               V = 1 + .35 * Math.min(1, Math.max(T.vehicle_fx5 - 30, 0) / 180);
               u.scale(V, V),
               kI.cam.x /= V,
               kI.cam.y /= V,
               T.x /= V,
               T.y /= V,
               T.r.x /= V,
               T.r.y /= V,
               T.draw_vehicle(),
               T.draw(),
               kI.cam.x *= V,
               kI.cam.y *= V,
               T.x *= V,
               T.y *= V,
               T.r.x *= V,
               T.r.y *= V,
               u.restore()
           }
       }
       for (f = UI.units[hT.SPELL],
       o = 0; o < f.length; o++)
           1 === f[o].fly && Rs(f[o]);
       for (Z = UI.units[hT.DRAGON],
       o = 0; o < Z.length; o++)
           Z[o].scale > 1 && Rs(Z[o], SPRITE.DRAGON, SPRITE.HURT_DRAGON);
       for (Z = UI.units[hT.LAVA_DRAGON],
       o = 0; o < Z.length; o++)
           Z[o].scale > 1 && Rs(Z[o], SPRITE.LAVA_DRAGON, SPRITE.HURT_LAVA_DRAGON);
       var he = UI.units[hT.HAWK];
       for (o = 0; o < he.length; o++)
           Rs(he[o], SPRITE.HAWK, SPRITE.HURT_HAWK);
       var Re = UI.units[hT.VULTURE];
       for (o = 0; o < Re.length; o++)
           Rs(Re[o], SPRITE.VULTURE, SPRITE.HURT_VULTURE);
       if ((xa += 15 * jI) > 60 && (xa -= 60),
       As(Ja, t, r, e, i, SPRITE.FOG, "fo", 2),
       As(Ja, t, r, e, i, SPRITE.FOD, "fod", 2),
       window.drawShit)
           for (let e = 0; e < window.drawShit[0].length; e++) {
               const i = window.drawShit[0][e];
               u.save(),
               u.beginPath(),
               u.lineWidth = 2.5,
               u.strokeStyle = "red",
               u.arc(i.x + kI.cam.x, i.y + kI.cam.y, i.r, 0, 2 * Math.PI, !1),
               u.stroke(),
               u.restore(),
               i.data && (u.save(),
               u.font = "24px Baloo Paaji",
               u.fillStyle = "red",
               u.fillText("t: " + i.data.type, i.x + kI.cam.x, i.y + kI.cam.y),
               u.restore())
           }
   }
   function os(e, i) {
       UI.transition ? (u.globalAlpha = 1,
       e.draw_bg(i),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1 - UI.shade.v,
       e.draw_bg(i),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1) : e.draw_bg(i)
   }
   function as(e, i) {
       UI.transition ? (u.globalAlpha = 1,
       e.draw_fg(i),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1 - UI.shade.v,
       e.draw_fg(i),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1) : e.draw_fg(i)
   }
   function ss(e, i, t, r, n) {
       UI.transition ? (u.globalAlpha = 1,
       qn(u, sprite[e][i][UI.time], r, n),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1 - UI.shade.v,
       qn(u, sprite[e][i][UI.time], r, n),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1) : qn(u, t, r, n)
   }
   function Ts(e, i, t, r) {
       UI.transition ? (u.globalAlpha = 1,
       qn(u, sprite[e][UI.time], t, r),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1 - UI.shade.v,
       qn(u, sprite[e][UI.time], t, r),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1) : qn(u, i, t, r)
   }
   function Is(e, i, t, r, n) {
       var o = t.width
         , a = t.height
         , s = Math.floor(o / 2)
         , T = Math.floor(a / 2);
       UI.transition ? (u.globalAlpha = 1,
       qn(u, sprite[e][i][UI.time], 0, 0, o, a, r, n, s, T),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1 - UI.shade.v,
       qn(u, sprite[e][i][UI.time], 0, 0, o, a, r, n, s, T),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1) : qn(u, sprite[e][i][UI.time], 0, 0, o, a, r, n, s, T)
   }
   function Es(e, i, t, r) {
       var n = i.width
         , o = i.height
         , a = Math.floor(n / 2)
         , s = Math.floor(o / 2);
       UI.transition ? (u.globalAlpha = 1,
       qn(u, sprite[e][UI.time], 0, 0, n, o, t, r, a, s),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1 - UI.shade.v,
       qn(u, sprite[e][UI.time], 0, 0, n, o, t, r, a, s),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1) : qn(u, i, 0, 0, n, o, t, r, a, s)
   }
   function _s(e) {
       u.globalAlpha = e.alpha,
       Ee(u, e.x + kI.cam.x, e.y + kI.cam.y, e.r),
       se(u, SPRITE.SWIM_COLOR[UI.time]),
       u.globalAlpha = 1
   }
   function us(e) {
       u.save(),
       u.translate(kI.cam.x + e.x, kI.cam.y + e.y),
       u.rotate(e.angle),
       u.globalAlpha = e.alpha;
       var i = sprite[e.id][UI.time];
       qn(u, i, -i.width / 2, -i.height / 2),
       u.globalAlpha = 1,
       u.restore()
   }
   function hs(e, i, t, r, n) {
       UI.transition && 1 == n ? (u.globalAlpha = 1,
       qn(u, sprite[e][UI.time][i], t, r),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1 - UI.shade.v,
       qn(u, sprite[e][UI.time][i], t, r),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1) : (u.globalAlpha = n,
       qn(u, sprite[e][UI.time][i], t, r),
       u.globalAlpha = 1)
   }
   function Rs(e, i, t) {
       UI.transition ? (u.globalAlpha = 1,
       e.draw(i, t),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1 - UI.shade.v,
       e.draw(i, t),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1) : e.draw(i, t)
   }
   function As(e, i, t, r, n, o, a, s, T, I) {
       UI.transition ? (u.globalAlpha = 1,
       e(i, t, r, n, o, a, s, T, I),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1 - UI.shade.v,
       e(i, t, r, n, o, a, s, T, I),
       UI.time = UI.time ? 0 : 1,
       u.globalAlpha = 1) : e(i, t, r, n, o, a, s, T, I)
   }
   function ds(e, i, t, r, n, o, a) {
       var s, T = "#";
       return T += (s = Math.floor(r * a + (1 - a) * e)) < 16 ? "0" + s.toString(16) : s.toString(16),
       T += (s = Math.floor(n * a + (1 - a) * i)) < 16 ? "0" + s.toString(16) : s.toString(16),
       T += (s = Math.floor(o * a + (1 - a) * t)) < 16 ? "0" + s.toString(16) : s.toString(16)
   }
   function Ss() {
       if (UI.transition) {
           var e = UI.time ? 1 - UI.shade.v : UI.shade.v;
           u.fillStyle = ds(4, 43, 48, 19, 58, 43, e)
       } else
           u.fillStyle = SPRITE.GROUND[UI.time];
       u.fillRect(0, 0, R, A)
   }
   function ls() {
       for (var e = UI.biomes.length - 1; e >= 0; e--) {
           if ((S = UI.biomes[e]).t === UI.BIOME_SEA) {
               var i = UI.BIOME[S.t];
               if (-kI.cam.x >= S.x1 - 230 - R && -kI.cam.x <= S.x2 + 330 && -kI.cam.y >= S.y1 - A && -kI.cam.y <= S.y2 + 100) {
                   var t = S.x2;
                   S.t !== UI.BIOME_SEA && (t -= 610);
                   var r = S.x1;
                   S.t !== UI.BIOME_SEA && (r += 610);
                   var n = S.y2;
                   S.t !== UI.BIOME_SEA && (n -= 610);
                   var o = S.y1;
                   if (S.t !== UI.BIOME_SEA && (o += 610),
                   UI.transition) {
                       var a = UI.time ? 1 - UI.shade.v : UI.shade.v;
                       u.fillStyle = ds(i.night[0], i.night[1], i.night[2], i.day[0], i.day[1], i.day[1], a)
                   } else
                       u.fillStyle = i._color[UI.time];
                   var s = Math.max(kI.cam.x + r - 2 - 230, 0)
                     , T = Math.max(-kI.cam.x + R - t - 330 - 2, 0)
                     , I = Math.max(kI.cam.y + o - 2, 0)
                     , E = Math.max(-kI.cam.y + A - n - 100 - 2, 0);
                   u.beginPath(),
                   u.fillRect(s, I, R - T - s, A - I - E)
               }
           }
       }
       for (e = UI.biomes.length - 1; e >= 0; e--) {
           if ((S = UI.biomes[e]).t !== UI.BIOME_SEA) {
               t = S.x2;
               S.t !== UI.BIOME_SEA && (t -= 400);
               r = S.x1;
               S.t !== UI.BIOME_SEA && (r += 400);
               n = S.y2;
               S.t !== UI.BIOME_SEA && (n -= 300);
               o = S.y1;
               S.t !== UI.BIOME_SEA && (o += 300),
               0 == (S.v & ET.RIGHT) && -kI.cam.x >= t - R + 120 && -kI.cam.x <= t + 820 && -kI.cam.y >= o + 88 - A && -kI.cam.y <= n + 50 && (vs(t, o + 88, n - 88, kI.beach[0], UI.BIOME[S.t], S.v & ET.RIGHT),
               Ps(t, o + 88, n - 88, kI.beach[0], UI.BIOME[S.t], S.v & ET.RIGHT)),
               0 == (S.v & ET.LEFT) && -kI.cam.x >= r - R - 700 && -kI.cam.x <= r - 20 && -kI.cam.y >= o + 88 - A && -kI.cam.y <= n + 50 && (bs(r, o + 88, n - 88, kI.beach[1], UI.BIOME[S.t], S.v & ET.LEFT),
               Os(r, o + 88, n - 88, kI.beach[1], UI.BIOME[S.t], S.v & ET.LEFT)),
               0 == (S.v & ET.BOTTOM) && -kI.cam.x >= r - 235 - R && -kI.cam.x <= t + 350 && -kI.cam.y >= n - A - 275 && -kI.cam.y <= n + 490 && (ms(n - 230, r - 230, t + 230, kI.beach[2], UI.BIOME[S.t], S.v & ET.BOTTOM),
               Ds(n - 230, r - 230, t + 230, kI.beach[2], UI.BIOME[S.t], S.v & ET.BOTTOM)),
               0 == (S.v & ET.TOP) && -kI.cam.x >= r - 235 - R && -kI.cam.x <= t + 350 && -kI.cam.y >= o - A - 390 && -kI.cam.y <= o + 315 && (ps(o + 310, r - 230, t + 230, kI.beach[3], UI.BIOME[S.t], S.v & ET.TOP),
               cs(o + 310, r - 230, t + 230, kI.beach[3], UI.BIOME[S.t], S.v & ET.TOP))
           }
       }
       for (e = UI.biomes.length - 1; e >= 0; e--) {
           if ((S = UI.biomes[e]).t !== UI.BIOME_SEA) {
               t = S.x2;
               S.t !== UI.BIOME_SEA && (t -= 400);
               r = S.x1;
               S.t !== UI.BIOME_SEA && (r += 400);
               n = S.y2;
               S.t !== UI.BIOME_SEA && (n -= 300);
               o = S.y1;
               S.t !== UI.BIOME_SEA && (o += 300),
               0 != (S.v & ET.RIGHT) && -kI.cam.x >= t - R + 120 && -kI.cam.x <= t + 820 && -kI.cam.y >= o + 88 - A && -kI.cam.y <= n + 50 && vs(t, o + 88, n - 88, kI.beach[0], UI.BIOME[S.t], S.v & ET.RIGHT),
               0 != (S.v & ET.LEFT) && -kI.cam.x >= r - R - 700 && -kI.cam.x <= r - 20 && -kI.cam.y >= o + 88 - A && -kI.cam.y <= n + 50 && bs(r, o + 88, n - 88, kI.beach[1], UI.BIOME[S.t], S.v & ET.LEFT),
               0 != (S.v & ET.BOTTOM) && -kI.cam.x >= r - 235 - R && -kI.cam.x <= t + 350 && -kI.cam.y >= n - A - 275 && -kI.cam.y <= n + 490 && ms(n - 230, r - 230, t + 230, kI.beach[2], UI.BIOME[S.t], S.v & ET.BOTTOM),
               0 != (S.v & ET.TOP) && -kI.cam.x >= r - 235 - R && -kI.cam.x <= t + 350 && -kI.cam.y >= o - A - 390 && -kI.cam.y <= o + 315 && ps(o + 310, r - 230, t + 230, kI.beach[3], UI.BIOME[S.t], S.v & ET.TOP)
           }
       }
       for (e = UI.biomes.length - 1; e >= 0; e--) {
           if ((S = UI.biomes[e]).t !== UI.BIOME_SEA) {
               i = UI.BIOME[S.t];
               if (-kI.cam.x >= S.x1 - 230 - R && -kI.cam.x <= S.x2 + 330 && -kI.cam.y >= S.y1 - A && -kI.cam.y <= S.y2 + 100) {
                   t = S.x2;
                   S.t !== UI.BIOME_SEA && (0 == (S.v & ET.RIGHT) ? t -= 414 : t -= 610);
                   r = S.x1;
                   S.t !== UI.BIOME_SEA && (0 == (S.v & ET.LEFT) ? r += 414 : r += 610);
                   n = S.y2;
                   S.t !== UI.BIOME_SEA && (0 == (S.v & ET.BOTTOM) ? n -= 414 : n -= 610);
                   o = S.y1;
                   if (S.t !== UI.BIOME_SEA && (0 == (S.v & ET.TOP) ? o += 414 : o += 610),
                   UI.transition) {
                       a = UI.time ? 1 - UI.shade.v : UI.shade.v;
                       u.fillStyle = ds(i.night[0], i.night[1], i.night[2], i.day[0], i.day[1], i.day[2], a)
                   } else
                       u.fillStyle = i._color[UI.time];
                   s = Math.max(kI.cam.x + r - 2 - 230, 0),
                   T = Math.max(-kI.cam.x + R - t - 330 - 2, 0),
                   I = Math.max(kI.cam.y + o - 2, 0),
                   E = Math.max(-kI.cam.y + A - n - 100 - 2, 0);
                   u.beginPath(),
                   u.fillRect(s, I, R - T - s, A - I - E)
               }
           }
       }
       YI.quality && (As(Xa, ts, rs, es, is, SPRITE.WAVE_TWO, "isl", 2),
       As(Xa, ts, rs, es, is, SPRITE.WAVE_ONE, "isl", 2)),
       As(Za, ts, rs, es, is, SPRITE.ISLAND, "isl", 2),
       YI.quality && As(Qa, ts, rs, es, is, SPRITE.DECORATION, "de");
       var _ = UI.units[hT.PLAYERS];
       for (e = 0; e < _.length; e++)
           for (var h = _[e], d = 0; d < h.foot.length; d++)
               us(h.foot[d]);
       (Bo += 40 * jI) > 60 && (Bo -= 60),
       As(wo, ts, rs, es, is, SPRITE.RIVER, "r", 0);
       for (e = 0; e < UI.biomes.length; e++) {
           var S;
           if ((S = UI.biomes[e]).t !== UI.BIOME_SEA) {
               t = S.x2;
               S.t !== UI.BIOME_SEA && (t -= 400);
               r = S.x1;
               S.t !== UI.BIOME_SEA && (r += 400);
               n = S.y2;
               S.t !== UI.BIOME_SEA && (n -= 300);
               o = S.y1;
               S.t !== UI.BIOME_SEA && (o += 300),
               (S.v & ET.RIGHT) > 0 && -kI.cam.x >= t - R + 120 && -kI.cam.x <= t + 820 && -kI.cam.y >= o + 88 - A && -kI.cam.y <= n + 50 && Ps(t, o + 88, n - 88, kI.beach[0], UI.BIOME[S.t], S.v & ET.RIGHT),
               (S.v & ET.LEFT) > 0 && -kI.cam.x >= r - R - 700 && -kI.cam.x <= r - 20 && -kI.cam.y >= o + 88 - A && -kI.cam.y <= n + 50 && Os(r, o + 88, n - 88, kI.beach[1], UI.BIOME[S.t], S.v & ET.LEFT),
               (S.v & ET.BOTTOM) > 0 && -kI.cam.x >= r - 235 - R && -kI.cam.x <= t + 350 && -kI.cam.y >= n - A - 275 && -kI.cam.y <= n + 490 && Ds(n - 230, r - 230, t + 230, kI.beach[2], UI.BIOME[S.t], S.v & ET.BOTTOM),
               (S.v & ET.TOP) > 0 && -kI.cam.x >= r - 235 - R && -kI.cam.x <= t + 350 && -kI.cam.y >= o - A - 390 && -kI.cam.y <= o + 315 && cs(o + 310, r - 230, t + 230, kI.beach[3], UI.BIOME[S.t], S.v & ET.TOP)
           }
       }
   }
   function Ns() {
       for (var e = kI.ash, i = e.flakes, t = 0; t < i.length; t++) {
           var r = i[t];
           e.update(r),
           hs(SPRITE.ASHES, r.id, kI.cam.x + r.x, kI.cam.y + r.y, r.alpha)
       }
       for (t = 0; t < i.length; t++) {
           ((r = i[t]).life <= 0 || r.x > -kI.cam.x + R || r.x < -kI.cam.x || r.y > -kI.cam.y + A) && i.splice(t, 1)
       }
       var n = -kI.cam.y;
       UI.dist_lava > -1e3 && e.add(n)
   }
   function Cs() {
       var e = kI.winter;
       0 === e.tempest ? e.tempest_speed = Math.max(0, e.tempest_speed - jI / 10) : e.tempest_speed = Math.min(1, e.tempest_speed + jI / 10);
       for (var i = e.flakes, t = 0; t < i.length; t++) {
           var r = i[t];
           e.update(r),
           hs(SPRITE.FLAKES, r.id, kI.cam.x + r.x, kI.cam.y + r.y, r.alpha)
       }
       for (t = 0; t < i.length; t++) {
           ((r = i[t]).life <= 0 || r.x > -kI.cam.x + R || r.x < -kI.cam.x || r.y > -kI.cam.y + A) && i.splice(t, 1)
       }
       var n = -kI.cam.y;
       UI.dist_winter > -1e3 && e.add(n)
   }
   function gs() {
       var e = kI.desert;
       0 === e.tempest ? e.tempest_speed = Math.max(0, e.tempest_speed - jI / 10) : e.tempest_speed = Math.min(1, e.tempest_speed + jI / 10);
       for (var i = e.flakes, t = 0; t < i.length; t++) {
           var r = i[t];
           e.update(r),
           hs(SPRITE.DESERT, r.id, kI.cam.x + r.x, kI.cam.y + r.y, r.alpha)
       }
       for (t = 0; t < i.length; t++) {
           ((r = i[t]).life <= 0 || r.x > -kI.cam.x + R || r.x < -kI.cam.x - kI.cam.w / 2 || r.y > -kI.cam.y + A) && i.splice(t, 1)
       }
       var n = -kI.cam.y;
       UI.dist_desert > -1e3 && e.add(n)
   }
   function bs(e, i, t, r, n, o) {
       var a = r.w1
         , s = r.w2
         , T = r.w3
         , I = kI.cam.x + e - 700
         , E = Math.max(kI.cam.y + i, 0)
         , _ = Math.max(-kI.cam.y + A - t - 100, 0)
         , h = E
         , R = A - E - _;
       if (o)
           var d = r.t(a).x;
       else
           d = a.r.x;
       var S = I + ET.LW1SX;
       ET.W1SX,
       S += d + ET.W1SX - 2;
       if (o)
           d = r.t(s).x;
       else
           d = s.r.x;
       var l = I + ET.LW2SX - S + d
         , N = (S += l - 2) - 2;
       if (o)
           d = r.t(T).x;
       else
           d = T.r.x;
       if (N < S + (l = I + ET.LW3SX - S + d) - 3)
           S += l - 2;
       else {
           S = N
       }
       if (l = I + ET.LSANDX - S,
       o > 0 && 1 === n.isSand) {
           if (UI.transition) {
               var C = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(15, 77, 72, 252, 239, 187, C)
           } else
               u.fillStyle = SPRITE.SAND_COLOR[UI.time];
           u.fillRect(S, h, l, R)
       } else {
           if (UI.transition) {
               C = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(n.night[0], n.night[1], n.night[2], n.day[0], n.day[1], n.day[2], C)
           } else
               u.fillStyle = n._color[UI.time];
           u.fillRect(S, h, l, R)
       }
   }
   function Os(e, i, t, r, n, o) {
       var a = r.w1
         , s = r.w2
         , T = r.w3
         , I = kI.cam.x + e - 700
         , E = Math.max(kI.cam.y + i, 0)
         , _ = Math.max(-kI.cam.y + A - t - 100, 0)
         , h = E
         , R = A - E - _;
       if (o)
           var d = r.t(a);
       else
           d = a.r;
       var S = I + ET.LW1SX
         , l = S
         , N = h
         , C = d.x + ET.W1SX
         , g = R
         , b = S += d.x + ET.W1SX - 2;
       if (o)
           d = r.t(s);
       else
           d = s.r;
       var O = I + ET.LW2SX - S + d.x
         , p = S
         , c = h
         , v = O
         , P = R
         , m = (S += O - 2) - 2;
       if (o)
           d = r.t(T);
       else
           d = T.r;
       if (m < S + (O = I + ET.LW3SX - S + d.x) - 3)
           var D = !0
             , M = S
             , G = h
             , L = O
             , f = R
             , V = S += O - 2;
       else {
           D = !1;
           S = m;
           V = -1
       }
       if (O = I + ET.LSANDX - S,
       UI.transition) {
           var z = UI.time ? 1 - UI.shade.v : UI.shade.v;
           u.fillStyle = ds(9, 55, 63, 11, 106, 132, z)
       } else
           u.fillStyle = SPRITE.WATER_3_COLOR[UI.time];
       if (u.fillRect(l, N, C, g),
       o)
           if (UI.transition) {
               z = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(15, 70, 76, 42, 139, 155, z)
           } else
               u.fillStyle = SPRITE.WATER_2_COLOR[UI.time];
       else if (UI.transition) {
           z = UI.time ? 1 - UI.shade.v : UI.shade.v;
           u.fillStyle = ds(9, 55, 63, 11, 106, 132, z)
       } else
           u.fillStyle = SPRITE.WATER_3_COLOR[UI.time];
       if (u.fillRect(p, c, v, P),
       D) {
           if (o)
               if (UI.transition) {
                   z = UI.time ? 1 - UI.shade.v : UI.shade.v;
                   u.fillStyle = ds(17, 94, 96, 169, 214, 211, z)
               } else
                   u.fillStyle = SPRITE.WATER_1_COLOR[UI.time];
           else if (UI.transition) {
               z = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(9, 55, 63, 11, 106, 132, z)
           } else
               u.fillStyle = SPRITE.WATER_3_COLOR[UI.time];
           u.fillRect(M, G, L, f)
       }
       YI.quality && o && r.draw_foams_left(m, V, b, I, -kI.cam.y + N, -kI.cam.y + N + g)
   }
   function ps(e, i, t, r, n, o) {
       var a = r.w1
         , s = r.w2
         , T = r.w3
         , I = kI.cam.y + e - 700
         , E = Math.max(kI.cam.x + i, 0)
         , _ = Math.max(-kI.cam.x + R - t - 100, 0)
         , h = E
         , A = R - E - _;
       if (o)
           var d = r.t(a).x;
       else
           d = a.r.x;
       var S = I + ET.LW1SX;
       ET.W1SX,
       S += d + ET.W1SX - 2;
       if (o)
           d = r.t(s).x;
       else
           d = s.r.x;
       var l = I + ET.LW2SX - S + d
         , N = (S += l - 2) - 2;
       if (o)
           d = r.t(T).x;
       else
           d = T.r.x;
       if (N < S + (l = I + ET.LW3SX - S + d) - 3)
           S += l - 2;
       else {
           S = N
       }
       if (l = I + ET.LSANDX - S,
       o > 0 && 1 === n.isSand) {
           if (UI.transition) {
               var C = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(15, 77, 72, 252, 239, 187, C)
           } else
               u.fillStyle = SPRITE.SAND_COLOR[UI.time];
           u.fillRect(h, S, A, l)
       } else {
           if (UI.transition) {
               C = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(n.night[0], n.night[1], n.night[2], n.day[0], n.day[1], n.day[2], C)
           } else
               u.fillStyle = n._color[UI.time];
           u.fillRect(h, S, A, l)
       }
   }
   function cs(e, i, t, r, n, o) {
       var a = r.w1
         , s = r.w2
         , T = r.w3
         , I = kI.cam.y + e - 700
         , E = Math.max(kI.cam.x + i, 0)
         , _ = Math.max(-kI.cam.x + R - t - 100, 0)
         , h = E
         , A = R - E - _;
       if (o)
           var d = r.t(a);
       else
           d = a.r;
       var S = I + ET.LW1SX
         , l = h
         , N = S
         , C = d.x + ET.W1SX
         , g = A
         , b = S += d.x + ET.W1SX - 2;
       if (o)
           d = r.t(s);
       else
           d = s.r;
       var O = I + ET.LW2SX - S + d.x
         , p = S
         , c = h
         , v = O
         , P = A
         , m = (S += O - 2) - 2;
       if (o)
           d = r.t(T);
       else
           d = T.r;
       if (m < S + (O = I + ET.LW3SX - S + d.x) - 3)
           var D = !0
             , M = S
             , G = h
             , L = O
             , f = A
             , V = S += O - 2;
       else {
           D = !1;
           S = m;
           V = -1
       }
       if (O = I + ET.LSANDX - S,
       UI.transition) {
           var z = UI.time ? 1 - UI.shade.v : UI.shade.v;
           u.fillStyle = ds(9, 55, 63, 11, 106, 132, z)
       } else
           u.fillStyle = SPRITE.WATER_3_COLOR[UI.time];
       if (u.fillRect(l, N, g, C),
       o)
           if (UI.transition) {
               z = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(15, 70, 76, 42, 139, 155, z)
           } else
               u.fillStyle = SPRITE.WATER_2_COLOR[UI.time];
       else if (UI.transition) {
           z = UI.time ? 1 - UI.shade.v : UI.shade.v;
           u.fillStyle = ds(9, 55, 63, 11, 106, 132, z)
       } else
           u.fillStyle = SPRITE.WATER_3_COLOR[UI.time];
       if (u.fillRect(c, p, P, v),
       D) {
           if (o)
               if (UI.transition) {
                   z = UI.time ? 1 - UI.shade.v : UI.shade.v;
                   u.fillStyle = ds(17, 94, 96, 169, 214, 211, z)
               } else
                   u.fillStyle = SPRITE.WATER_1_COLOR[UI.time];
           else if (UI.transition) {
               z = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(9, 55, 63, 11, 106, 132, z)
           } else
               u.fillStyle = SPRITE.WATER_3_COLOR[UI.time];
           u.fillRect(G, M, f, L)
       }
       YI.quality && o && r.draw_foams_top(m, V, b, I, -kI.cam.x + l, -kI.cam.x + l + g)
   }
   function vs(e, i, t, r, n, o) {
       var a = r.w1
         , s = r.w2
         , T = r.w3
         , I = kI.cam.x + e + 820
         , E = Math.max(kI.cam.y + i, 0)
         , _ = Math.max(-kI.cam.y + A - t - 100, 0)
         , h = E
         , R = A - E - _;
       if (o)
           var d = r.t(a).x;
       else
           d = a.r.x;
       var S = I + ET.LW1SX;
       ET.W1SX,
       S += -d + ET.W1SX + 2;
       if (o)
           d = r.t(s).x;
       else
           d = s.r.x;
       var l = I - ET.LW2SX - S - d
         , N = (S += l + 2) - 2;
       if (o)
           d = r.t(T).x;
       else
           d = T.r.x;
       if (N > S + (l = I - ET.LW3SX - S - d))
           S += l + 2;
       else {
           S = N
       }
       if (l = I - ET.LSANDX - S,
       o > 0 && 1 === n.isSand) {
           if (UI.transition) {
               var C = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(15, 77, 72, 252, 239, 187, C)
           } else
               u.fillStyle = SPRITE.SAND_COLOR[UI.time];
           u.fillRect(S, h, l, R)
       } else {
           if (UI.transition) {
               C = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(n.night[0], n.night[1], n.night[2], n.day[0], n.day[1], n.day[2], C)
           } else
               u.fillStyle = n._color[UI.time];
           u.fillRect(S, h, l, R)
       }
   }
   function Ps(e, i, t, r, n, o) {
       var a = r.w1
         , s = r.w2
         , T = r.w3
         , I = kI.cam.x + e + 820
         , E = Math.max(kI.cam.y + i, 0)
         , _ = Math.max(-kI.cam.y + A - t - 100, 0)
         , h = E
         , R = A - E - _;
       if (o)
           var d = r.t(a);
       else
           d = a.r;
       var S = I + ET.LW1SX
         , l = S
         , N = h
         , C = -d.x + ET.W1SX
         , g = R
         , b = S += -d.x + ET.W1SX + 2;
       if (o)
           d = r.t(s);
       else
           d = s.r;
       var O = I - ET.LW2SX - S - d.x
         , p = S
         , c = h
         , v = O
         , P = R
         , m = (S += O + 2) - 2;
       if (o)
           d = r.t(T);
       else
           d = T.r;
       if (m > S + (O = I - ET.LW3SX - S - d.x))
           var D = !0
             , M = S
             , G = h
             , L = O
             , f = R
             , V = S += O + 2;
       else {
           D = !1;
           S = m;
           V = -1
       }
       if (O = I - ET.LSANDX - S,
       UI.transition) {
           var z = UI.time ? 1 - UI.shade.v : UI.shade.v;
           u.fillStyle = ds(9, 55, 63, 11, 106, 132, z)
       } else
           u.fillStyle = SPRITE.WATER_3_COLOR[UI.time];
       if (u.fillRect(l, N, C, g),
       o)
           if (UI.transition) {
               z = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(15, 70, 76, 42, 139, 155, z)
           } else
               u.fillStyle = SPRITE.WATER_2_COLOR[UI.time];
       else if (UI.transition) {
           z = UI.time ? 1 - UI.shade.v : UI.shade.v;
           u.fillStyle = ds(9, 55, 63, 11, 106, 132, z)
       } else
           u.fillStyle = SPRITE.WATER_3_COLOR[UI.time];
       if (u.fillRect(p, c, v, P),
       D) {
           if (o)
               if (UI.transition) {
                   z = UI.time ? 1 - UI.shade.v : UI.shade.v;
                   u.fillStyle = ds(17, 94, 96, 169, 214, 211, z)
               } else
                   u.fillStyle = SPRITE.WATER_1_COLOR[UI.time];
           else if (UI.transition) {
               z = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(9, 55, 63, 11, 106, 132, z)
           } else
               u.fillStyle = SPRITE.WATER_3_COLOR[UI.time];
           u.fillRect(M, G, L, f)
       }
       YI.quality && o && r.draw_foams_right(m, V, b, I, -kI.cam.y + N, -kI.cam.y + N + g)
   }
   function ms(e, i, t, r, n, o) {
       var a = r.w1
         , s = r.w2
         , T = r.w3
         , I = kI.cam.y + e + 710
         , E = Math.max(kI.cam.x + i, 0)
         , _ = Math.max(-kI.cam.x + R - t - 100, 0)
         , h = E
         , A = R - E - _;
       if (o)
           var d = r.t(a).x;
       else
           d = a.r.x;
       var S = I + ET.LW1SX;
       ET.W1SX,
       S += -d + ET.W1SX + 2;
       if (o)
           d = r.t(s).x;
       else
           d = s.r.x;
       var l = I - ET.LW2SX - S - d
         , N = (S += l + 2) - 2;
       if (o)
           d = r.t(T).x;
       else
           d = T.r.x;
       if (N > S + (l = I - ET.LW3SX - S - d))
           S += l + 2;
       else {
           S = N
       }
       if (l = I - ET.LSANDX - S,
       o > 0 && 1 === n.isSand) {
           if (UI.transition) {
               var C = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(15, 77, 72, 252, 239, 187, C)
           } else
               u.fillStyle = SPRITE.SAND_COLOR[UI.time];
           u.fillRect(h, S, A, l)
       } else {
           if (UI.transition) {
               C = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(n.night[0], n.night[1], n.night[2], n.day[0], n.day[1], n.day[2], C)
           } else
               u.fillStyle = n._color[UI.time];
           u.fillRect(h, S, A, l)
       }
   }
   function Ds(e, i, t, r, n, o) {
       var a = r.w1
         , s = r.w2
         , T = r.w3
         , I = kI.cam.y + e + 710
         , E = Math.max(kI.cam.x + i, 0)
         , _ = Math.max(-kI.cam.x + R - t - 100, 0)
         , h = E
         , A = R - E - _;
       if (o)
           var d = r.t(a);
       else
           d = a.r;
       var S = I + ET.LW1SX
         , l = S
         , N = h
         , C = -d.x + ET.W1SX
         , g = A
         , b = S += -d.x + ET.W1SX + 2;
       if (o)
           d = r.t(s);
       else
           d = s.r;
       var O = I - ET.LW2SX - S - d.x
         , p = S
         , c = h
         , v = O
         , P = A
         , m = (S += O + 2) - 2;
       if (o)
           d = r.t(T);
       else
           d = T.r;
       if (m > S + (O = I - ET.LW3SX - S - d.x))
           var D = !0
             , M = S
             , G = h
             , L = O
             , f = A
             , V = S += O + 2;
       else {
           D = !1;
           S = m;
           V = -1
       }
       if (O = I - ET.LSANDX - S,
       UI.transition) {
           var z = UI.time ? 1 - UI.shade.v : UI.shade.v;
           u.fillStyle = ds(9, 55, 63, 11, 106, 132, z)
       } else
           u.fillStyle = SPRITE.WATER_3_COLOR[UI.time];
       if (u.fillRect(N, l, g, C),
       o)
           if (UI.transition) {
               z = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(15, 70, 76, 42, 139, 155, z)
           } else
               u.fillStyle = SPRITE.WATER_2_COLOR[UI.time];
       else if (UI.transition) {
           z = UI.time ? 1 - UI.shade.v : UI.shade.v;
           u.fillStyle = ds(9, 55, 63, 11, 106, 132, z)
       } else
           u.fillStyle = SPRITE.WATER_3_COLOR[UI.time];
       if (u.fillRect(c, p, P, v),
       D) {
           if (o)
               if (UI.transition) {
                   z = UI.time ? 1 - UI.shade.v : UI.shade.v;
                   u.fillStyle = ds(17, 94, 96, 169, 214, 211, z)
               } else
                   u.fillStyle = SPRITE.WATER_1_COLOR[UI.time];
           else if (UI.transition) {
               z = UI.time ? 1 - UI.shade.v : UI.shade.v;
               u.fillStyle = ds(9, 55, 63, 11, 106, 132, z)
           } else
               u.fillStyle = SPRITE.WATER_3_COLOR[UI.time];
           u.fillRect(G, M, f, L)
       }
       YI.quality && o && r.draw_foams_bottom(m, V, b, I, -kI.cam.x + N, -kI.cam.x + N + g)
   }
   function Ms() {
       if (u.globalAlpha = 1,
       UI.transition)
           var e = UI.shade.update();
       UI.update_dist_from_biomes(-kI.cam.x, -kI.cam.y),
       es = Math.max(Math.floor(-kI.cam.x / UI.dw) - 5, 0),
       is = Math.min(Math.floor((-kI.cam.x + kI.cam.w) / UI.dw) + 4, UI.nw - 1),
       ts = Math.max(Math.floor(-kI.cam.y / UI.dh) - 3, 0),
       rs = Math.min(Math.floor((-kI.cam.y + kI.cam.h) / UI.dh) + 3, UI.nh - 1),
       ls(),
       ns(),
       YI.quality && UI.mode !== ET.MODE_ZOMBIES && UI.mode !== ET.MODE_LEGACY && UI.mode !== ET.MODE_BR && (gs(),
       Cs(),
       Ns()),
       UI.transition && e && (UI.transition = !1,
       UI.shade.v = 0,
       UI.shade.o = !1)
   }
   var Gs = 0
     , Ls = 1
     , fs = 0
     , Vs = 1
     , zs = 0
     , Hs = 1
     , ys = 0
     , Bs = 1
     , ws = 0
     , Ks = 1
     , Ws = 0
     , Ys = 1
     , Us = 0
     , ks = 1
     , Fs = 2
     , xs = 0
     , Js = 1
     , Xs = 2;
   function qs(e) {
       e.imageSmoothingEnabled = !1,
       e.webkitImageSmoothingEnabled = !1,
       e.mozImageSmoothingEnabled = !1,
       e.msImageSmoothingEnabled = !1,
       e.oImageSmoothingEnabled = !1
   }
   function js(e, i) {
       var t = e.getBoundingClientRect();
       return {
           x: i.clientX - t.left,
           y: i.clientY - t.top
       }
   }
   function Zs(e, i, t, r, n, o, a, s, T, I, E, _, u, h, R) {
       0 === e.length && (e = " "),
       void 0 === a && (a = 0),
       void 0 === s && (s = 0),
       void 0 === T && (T = 0),
       void 0 === h && (h = 0);
       var A = document.createElement("canvas")
         , d = A.getContext("2d");
       return d.textBaseline = "middle",
       d.font = (void 0 !== R ? R + " " : "") + r + "px " + i,
       n = void 0 !== n ? Math.min(d.measureText(e).width, n) : d.measureText(e).width,
       A.width = n + a,
       A.height = r + s,
       void 0 !== o && (void 0 !== E && (d.globalAlpha = E),
       d.fillStyle = o,
       void 0 !== _ ? (roundRect(d, T + 2, T, n + a - 2 * T - 4, r + s - 2 * T, _),
       d.fill()) : d.fillRect(T, T, n + a - 2 * T, r + s - 2 * T),
       d.globalAlpha = 1,
       0 !== T && (d.lineWidth = T,
       d.strokeStyle = I,
       d.stroke())),
       d.textBaseline = "middle",
       d.font = (void 0 !== R ? R + " " : "") + r + "px " + i,
       void 0 !== u && (d.strokeStyle = u,
       d.lineWidth = h,
       d.lineJoin = "miter",
       d.miterLimit = 2,
       d.strokeText(e, Math.floor(a / 2), Math.floor(s / 2) + Math.floor(r / 2), n)),
       d.fillStyle = t,
       d.fillText(e, Math.floor(a / 2), Math.floor(s / 2) + Math.floor(r / 2), n),
       A.w2 = A.width / 2,
       A.h2 = A.height / 2,
       A
   }
   function Qs(e, i, t, r, n, o, a, T, I, E, _) {
       if (void 0 === I && (I = 0),
       void 0 === T && (T = 0),
       void 0 === E && (E = 0),
       void 0 === _ && (_ = 1),
       1 !== o && (o = 0),
       r)
           var u = r;
       var h, R = {
           width: e,
           height: i,
           img: u,
           state: xs,
           translate: {
               x: T,
               y: I,
               _x: T,
               _y: I
           },
           enable_breath: o,
           breath: 0,
           callback: a,
           position: E,
           active: _
       }, A = function() {
           return R.img[R.state]
       }, d = function(e) {
           var i = R.translate;
           return 0 !== R.width && 0 !== R.height || (R.width = R.img[0].width,
           R.height = R.img[0].height),
           e.x > i.x && e.x < i.x + R.width / n && e.y > i.y && e.y < i.y + R.height / n
       };
       o = function() {
           var e = 0;
           return 1 === R.enable_breath && (R.state === Js || R.state === Xs ? R.breath = (R.breath + 1e3 * jI) % 1e3 : R.breath > 0 && (R.breath = R.breath > 500 ? R.breath + 1e3 * jI : R.breath - 1e3 * jI,
           (R.breath < 0 || R.breath > 1e3) && (R.breath = 0)),
           e = .2 * s.ease_in_out_quad(R.breath > 500 ? (1e3 - R.breath) / 500 : R.breath / 500)),
           e
       }
       ;
       return 2 === (n = 3 === n ? 3 : 1 === n ? 2 : 1) ? h = function(e) {
           var i = 1 + o()
             , t = A()
             , r = R.width * i / 2
             , n = R.height * i / 2
             , a = (r - R.width / 2) / 2
             , s = (n - R.height / 2) / 2;
           qn(e, t, R.translate.x - a, R.translate.y - s, r, n)
       }
       : 3 === n ? (h = function(e) {
           var i = A()
             , t = R.width
             , r = R.height
             , n = (t - R.width) / 2
             , o = (r - R.height) / 2;
           qn(e, i, R.translate.x - n, R.translate.y - o, t, r)
       }
       ,
       n = 1) : h = function(e) {
           qn(e, A(), R.translate.x, R.translate.y)
       }
       ,
       {
           info: R,
           trigger: function(e, i, t) {
               return d(i) ? (t == ks ? R.state = Xs : (t == Fs || t == Us && R.state != Xs) && (R.state = Js),
               !0) : (R.state = xs,
               !1)
           },
           draw: h,
           in_button: d
       }
   }
   function $s(e, i, t, r, n) {
       var o = {
           x: t,
           y: r,
           _x: t,
           _y: r
       };
       return {
           translate: o,
           draw: function(i) {
               qn(i, e, o.x, o.y, e.width / 2, e.height / 2)
           },
           active: i,
           position: n
       }
   }
   function eT(e) {
       var i = {
           x: 0,
           y: 0
       };
       return {
           img: e,
           translate: i,
           draw: function(t) {
               qn(t, e, i.x, i.y)
           }
       }
   }
   function iT(e, i) {
       void 0 === i && (i = .033);
       var t = {
           x: 0,
           y: 0
       }
         , r = 0
         , n = 0;
       return {
           img: e,
           translate: t,
           draw: function(o) {
               qn(o, ((n += jI) > i && (r = (r + 1) % e.length,
               n -= i),
               e[r]), t.x, t.y)
           }
       }
   }
   function tT(e, i, t, r, n) {
       e.end = i,
       e.start = t,
       e.speed_start = r,
       e.speed_end = n,
       e.width = e.img.width,
       e.height = e.img.height,
       e.scale = (i + t) / 2,
       e.breath = !1,
       e.draw = function(i) {
           e.translate.x = d - e.width / 2,
           qn(i, e.img, 0, 0, e.img.width, e.img.height, e.translate.x, e.translate.y, e.width, e.height)
       }
   }
   function rT(e) {
       e.scale += e.breath ? jI / e.speed_start : -jI / e.speed_end,
       e.scale > e.end ? e.breath = !1 : e.scale < e.start && (e.breath = !0)
   }
   var nT = "send"
     , oT = "1" === s.getURLData("id") ? 1 : 0
     , aT = s.getURLData("password")
     , sT = {
       DELETE: 1,
       HURT: 2,
       COLD: 4,
       HUNGER: 8,
       ATTACK: 16,
       WALK: 32,
       IDLE: 64,
       HEAL: 128,
       WEB: 256
   }
     , TT = [{
       price: 1e3,
       items: [[2, INV.FIRE], [1, INV.COOKED_MEAT], [8, INV.PLANT], [1, INV.BREAD]]
   }, {
       price: 2e3,
       items: [[2, INV.BIG_FIRE], [1, INV.PICK_WOOD], [2, INV.COOKED_MEAT], [16, INV.PLANT], [2, INV.BREAD]]
   }, {
       price: 4e3,
       items: [[3, INV.BIG_FIRE], [1, INV.PICK], [4, INV.COOKED_MEAT], [20, INV.PLANT], [4, INV.BREAD], [1, INV.WORKBENCH], [80, INV.STONE], [140, INV.WOOD]]
   }, {
       price: 8e3,
       items: [[1, INV.BAG], [4, INV.BIG_FIRE], [1, INV.PICK_GOLD], [6, INV.COOKED_MEAT], [30, INV.PLANT], [6, INV.BREAD], [1, INV.WORKBENCH], [150, INV.STONE], [200, INV.WOOD], [60, INV.GOLD], [2, INV.BOTTLE_FULL]]
   }, {
       price: 16e3,
       items: [[1, INV.BAG], [1, INV.PICK_DIAMOND], [1, INV.BED], [7, INV.CAKE], [2, INV.BOTTLE_FULL], [2, INV.BIG_FIRE], [1, INV.FURNACE], [15, INV.STONE_WALL], [2, INV.STONE_DOOR], [1, INV.TOTEM], [1, INV.SPANNER], [200, INV.STONE], [300, INV.WOOD]]
   }, {
       price: 16e3,
       items: [[1, INV.BAG], [1, INV.COAT], [1, INV.SHOVEL_GOLD], [1, INV.PICK_GOLD], [10, INV.CAKE], [4, INV.BOTTLE_FULL], [6, INV.BIG_FIRE], [3, INV.BANDAGE], [1, INV.BOOK], [200, INV.STONE], [300, INV.WOOD]]
   }, {
       price: 16e3,
       items: [[1, INV.BAG], [1, INV.HOOD], [1, INV.HAMMER_GOLD], [3, INV.BANDAGE], [1, 0], [1, INV.PICK_GOLD], [7, INV.CAKE], [2, INV.BOTTLE_FULL], [4, INV.BIG_FIRE], [150, INV.STONE], [200, INV.WOOD], [1, INV.LOCKPICK]]
   }, {
       price: 16e3,
       items: [[1, INV.BAG], [1, INV.PEASANT], [1, INV.PICK_GOLD], [7, INV.CAKE], [2, INV.BOTTLE_FULL], [4, INV.BIG_FIRE], [2, INV.WINDMILL], [4, INV.BREAD_OVEN], [10, INV.PLOT], [6, INV.WHEAT_SEED], [4, INV.SEED], [1, INV.WATERING_CAN_FULL], [500, INV.WOOD]]
   }, {
       price: 16e3,
       items: [[1, INV.BAG], [1, INV.PICK_GOLD], [16, INV.FOODFISH_COOKED], [1, INV.BOTTLE_FULL], [6, INV.BIG_FIRE], [3, INV.BANDAGE], [1, INV.DIVING_MASK], [1, INV.SWORD], [16, INV.BRIDGE], [150, INV.STONE], [200, INV.WOOD]]
   }, {
       price: 2e4,
       items: [[1, INV.BAG], [1, INV.PICK_GOLD], [1, INV.CAKE], [1, INV.BOTTLE_FULL], [3, INV.BIG_FIRE], [3, INV.BANDAGE], [1, INV.GOLD_HELMET], [1, INV.SWORD_GOLD], [1, INV.DIAMOND_SPEAR], [2, INV.GOLD_SPIKE], [50, INV.STONE], [100, INV.WOOD]]
   }]
     , IT = {
       VERSION_NUMBER: 52,
       TIMEOUT_TIME: 2e3,
       TIMEOUT_NUMBER: 3,
       PING: "[13]",
       PING_DELAY: 6e4,
       ROTATE: .2,
       ATTACK: .2,
       SLOW_ATTACK: .58,
       CAM_DELAY: 50,
       MUTE_DELAY: 125e3,
       TIMEOUT_SERVER: 6e5,
       WAITING_FOR_SERVER: 8e3,
       DELAY_CONNECTION_UPDATE: 5,
       LAG_DISTANCE: 200,
       LOOSE_FOCUS: 15,
       TOKEN_LEN: 14,
       TEAM_MANAGE: 0,
       TEAM_SHOW: 1,
       TEAM_LEAVE: 2,
       TEAM_JOIN: 3,
       TEAM_FULL: 4,
       SKIN_MAX: 20,
       ACCESSORY_MAX: 14,
       SYMBOL_MAX: 4
   };
   window.NetworkClient = function() {
       var e = this;
       this.socket = null,
       this._current_id = 0,
       this.server_list = [],
       this.mode_list = [[], [], [], [], [], [], [], [], []],
       this.selected_server = [-1, -1, -1, -1, -1, -1, -1, -1, -1],
       this.current_mode = 0,
       this.privateServer = 0,
       this.xhttp = new XMLHttpRequest,
       this.xhttp.onreadystatechange = function() {
           4 == this.readyState && 200 == this.status ? e.fun_after(!0, 4) : e.fun_after(!1, this.readyState)
       }
       ,
       this.xhttp_get = function(e, i) {
           this.fun_after = e,
           this.xhttp.open("GET", i, !0),
           this.xhttp.send()
       }
       ,
       this.store_server_list = function(e) {
           const i = [];
           for (let t = 0; t < e.length; t++) {
               const r = e[t];
               let n = {
                   nu: r.players,
                   m: r.maxPlayers,
                   i: r.ip,
                   p: r.port ?? 80,
                   a: r.name,
                   ssl: r.ssl ?? 1,
                   mode: r.mode ?? "legacy"
               };
               i.push(n)
           }
           this.server_list = i
       }
       ,
       this.geolocate_server = function(e) {
           for (var i = [], t = 0; t < e.length; t++)
               -1 !== e[t].a.indexOf(K) && i.push(t);
           return 0 === i.length ? 0 : i[Math.floor(Math.random() * i.length)]
       }
       ,
       this.set_server_list = function(e) {
           for (var i = 0, t = 0; t < e.length; t++)
               i += e[t].nu;
           var r = document.getElementById("servselect");
           -1 === WI.selected_server[WI.current_mode] ? WI.selected_server[WI.current_mode] = r.selectedIndex = WI.geolocate_server(e) : r.selectedIndex = WI.selected_server[WI.current_mode];
           var n = '<label for="ul-id"><button type="button" class="ng-binding">' + e[r.selectedIndex].a + (e[r.selectedIndex].nu > 0 ? " [" + e[r.selectedIndex].nu + " " + q[TEXT.PLAYERS] + "]" : "") + '</button></label><ul role="listbox" id="ul-id" class="md-whiteframe-z1" name="ul-id"><li role="option" id="selectDisabled">' + q[TEXT.CHOOSE] + " (" + this.total_players + ") " + q[TEXT.TOTAL_PLAYERS] + "</li>";
           for (t = 0; t < e.length; t++)
               n += '<li role="option">' + e[t].a,
               n += " [" + e[t].nu + " " + q[TEXT.PLAYERS] + "]",
               n += "</li>\n";
           n += '<li role="option" id="selectDisabled">(' + i + ") " + q[TEXT.TOTAL_MODE] + "</li>",
           n += "</div>",
           r.innerHTML = n,
           $(".md-select").on("click", (function() {
               $(this).toggleClass("active")
           }
           )),
           $(".md-select ul li").on("click", (function() {
               for (var e = $(this).text(), i = -1, t = WI.mode_list[WI.current_mode], r = 0; r < t.length; r++)
                   if (t[r].a + " [" + t[r].nu + " " + q[TEXT.PLAYERS] + "]" === e) {
                       i = r;
                       break
                   }
               -1 !== i && (document.getElementById("servselect").selectedIndex = i,
               WI.selected_server[WI.current_mode] = i,
               $(".md-select ul li").removeClass("active"),
               $(this).addClass("active"),
               $(".md-select label button").text(e))
           }
           ))
       }
       ,
       this.total_players = 0,
       this.update_server_list = function() {
           this.total_players = 0;
           for (var e = 0; e < WI.server_list.length; e++) {
               const i = this.server_list[e];
               switch (i.mode) {
               case "com":
                   this.mode_list[6].push(i);
                   break;
               case "exp":
                   this.mode_list[7].push(i);
                   break;
               case "legacy":
                   this.mode_list[4].push(i);
                   break;
               case "normal":
                   this.mode_list[0].push(i);
                   break;
               case "vampire":
                   this.mode_list[3].push(i);
                   break;
               case "zombie":
                   this.mode_list[1].push(i);
                   break;
               default:
                   throw Error("Not found displayServer type")
               }
               this.total_players += i.nu
           }
           for (e = 0; e < this.mode_list.length; e++)
               0 === this.mode_list[e].length && this.mode_list[e].push({
                   a: q[TEXT.COMMING_SOON],
                   nu: 0,
                   i: "127.0.0.1",
                   p: 80
               });
           this.set_server_list(this.mode_list[0]),
           this.select_gamemode = function(e) {
               WI.current_mode = e,
               WI.set_server_list(WI.mode_list[WI.current_mode]),
               WI.set_server_list(WI.mode_list[WI.current_mode]),
               document.getElementById("servselect").selectedIndex = WI.current_mode
           }
       }
       ,
       this.timeout_server = 0,
       this.timeout_number = 0,
       this.timeout_handler = null,
       this.timeout = function() {
           e.timeout_number++,
           e.socket.close(),
           e.timeout_number > IT.TIMEOUT_NUMBER ? (YI.error_level = IT.ERROR_REFUSED,
           e.new_alert(q[TEXT.YOU_CANNOT_JOIN]),
           YI.waiting = !1,
           kI.reconnect.enabled && xI.quit(YI.run)) : e.connect_timeout()
       }
       ,
       this.kick = function(e) {
           this._current_id == this.socket._current_id && (this._current_id++,
           this.new_alert(q[TEXT.KICKED] + e),
           xI.quit(YI.run))
       }
       ,
       this.mute = function() {
           this.new_alert("You speak too much")
       }
       ,
       this.already_used_key = function() {
           clearTimeout(this.timeout_handler),
           this.new_alert(q[TEXT.KEY_ALREADY]),
           YI.waiting = !1
       }
       ,
       this.hide_shop_kit = function() {
           kI.shop.open = !1
       }
       ,
       this.hide_recipe_book = function() {
           xI.show_recipe_book = 0
       }
       ,
       this.hide_clock = function() {
           xI.show_clock = 0
       }
       ,
       this.sand_tempest = function(e) {
           kI.desert.tempest = e,
           UI.dist_desert > -300 && (0 === e ? this.new_alert(q[TEXT.TEMPEST_OFF]) : this.new_alert(q[TEXT.TEMPEST_ON]))
       }
       ,
       this.bandage = function(e) {
           kI.bandage = e
       }
       ,
       this.blizzard_status = function(e) {
           kI.blizzard = e
       }
       ,
       this.blizzard = function(e) {
           kI.winter.tempest = e,
           UI.dist_winter > -300 && (0 === e ? this.new_alert(q[TEXT.BLIZZARD_OFF]) : this.new_alert(q[TEXT.BLIZZARD_ON]))
       }
       ,
       this.explorer_quest = function(e) {
           0 === e ? document.getElementById("exploreForest").src = "img/forest-leaf-ok.png" : 1 === e ? document.getElementById("exploreWinter").src = "img/winter-flake-ok.png" : 2 === e ? document.getElementById("exploreLava").src = "img/lava-volcano-ok.png" : 3 === e && (document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png")
       }
       ,
       this.hide_market = function() {
           xI.show_market = 0
       }
       ,
       this.hide_quest = function() {
           xI.show_quest = 0
       }
       ,
       this.clean_inventory = function() {
           kI.inv.can_select = [],
           kI.inv.n = [],
           kI.inv.id = -1,
           kI.inv.drag.stop(),
           kI.craft.can_craft = [],
           kI.craft.crafting = !1,
           kI.craft.can_build = !1,
           kI.craft.preview = -1,
           kI.craft.id = -1,
           kI.craft.workbench = !1,
           kI.craft.well = !1,
           kI.craft.fire = !1,
           kI.craft.water = !1,
           kI.craft.timeout = new s.LinearAnimation(!1,0,1,0,1,1)
       }
       ,
       this.wrong_key = function() {
           clearTimeout(this.timeout_handler),
           this.new_alert(),
           YI.waiting = !1
       }
       ,
       this.commands = function(e) {
           for (var i = 0; i < e.length; i++)
               "string" == typeof e[i] && (e[i] = s.escape_html(e[i]));
           kI.terminal.write_command(e[1], e[2], e[3], e[4]instanceof Array ? kI.terminal.create_array(e[4], e.length > 5 ? e[5] : []) : e[4])
       }
       ,
       this.message = function(e) {
           this.new_alert(e)
       }
       ,
       this.wrong_password = function() {
           clearTimeout(this.timeout_handler),
           this.new_alert(q[TEXT.WRONG_PASSWORD]),
           YI.waiting = !1
       }
       ,
       this.new_version = function() {
           clearTimeout(this.timeout_handler),
           this.new_alert(q[TEXT.NEW_VERSION]),
           YI.waiting = !1
       }
       ,
       this.old_version = function() {
           clearTimeout(this.timeout_handler),
           this.new_alert(q[TEXT.OLD_VERSION]),
           YI.waiting = !1
       }
       ,
       this.denied_with_callback = function(e) {
           clearTimeout(this.timeout_handler),
           this.new_alert(e),
           YI.waiting = !1
       }
       ,
       this.get_bag = function() {
           kI.inv.update_bag_size(1, 0),
           xI.update_inv_buttons()
       }
       ,
       this.verified_account = function(e) {
           var i = e[1]
             , t = UI.players[i];
           t.skin = e[2],
           t.accessory = e[3],
           t.baglook = e[4],
           t.book = e[5],
           t.crate = e[6],
           t.dead = e[7],
           t.level = e[8];
           var r = UI.fast_units[i * UI.max_units];
           r && (r.skin = e[2],
           r.accessory = e[3],
           r.baglook = e[4],
           r.book = e[5])
       }
       ,
       this.build_stop = function(e) {
           e === INV.BAG ? (kI.inv.update_bag_size(1, 0),
           xI.update_inv_buttons()) : this.gather([0, e, 1]),
           kI.craft.restart()
       }
       ,
       this.recycle_ok = function(e) {
           kI.auto_feed.delay = 0,
           kI.craft.do_recycle(e)
       }
       ,
       this.recycle_stop = function(e) {
           for (var i = RECIPES[e].r, t = 0; t < i.length; t++)
               if (kI.inv.max > kI.inv.can_select.length || kI.inv.n[i[t][0]] > 0) {
                   var r = Math.floor(.8 * i[t][1]);
                   if (!r)
                       continue;
                   this.gather([0, i[t][0], r])
               }
           kI.craft.restart()
       }
       ,
       this.build_ok = function(e) {
           kI.auto_feed.delay = 0,
           kI.craft.do_craft(e)
       }
       ,
       this.new_alert = function(e) {
           kI.alert.text ? e !== kI.alert.text && e !== kI.alert.list[kI.alert.list.length - 1] && kI.alert.list.push(e) : kI.alert.text = e
       }
       ,
       this.no_resources = function() {
           this.new_alert(q[TEXT.NO_MORE_RESOURCES])
       }
       ,
       this.survive = function() {
           var e;
           e = 0 == kI.day ? q[TEXT.SURVIVED_1DAY] : q[TEXT.SURVIVED] + (kI.day + 1) + q[TEXT.DAYS],
           this.new_alert(e),
           kI.day++
       }
       ,
       this.fail_restore = function() {
           clearTimeout(e.timeout_handler),
           kI.reconnect.enabled = !1,
           kI.alive = !1,
           this.new_alert(q[TEXT.DEAD_SAD]),
           xI.quit(YI.run),
           this.socket.close()
       }
       ,
       this.blocked = function() {
           clearTimeout(this.timeout_handler),
           this.new_alert(q[TEXT.SPAM_ME]),
           YI.waiting = !1
       }
       ,
       this.kicked_before_join = function(e) {
           clearTimeout(this.timeout_handler),
           this.new_alert(e),
           YI.waiting = !1
       }
       ,
       this.full = function() {
           clearTimeout(this.timeout_handler),
           this.new_alert(q[TEXT.SPAM_ME2]),
           YI.waiting = !1
       }
       ,
       this.throttle = function() {
           clearTimeout(this.timeout_handler),
           this.new_alert("Connection throttled, spam play button!"),
           YI.waiting = !1
       }
       ,
       this.new_player = function(e) {
           var i = e[1]
             , t = UI.players;
           t[i].nickname = e[2],
           t[i].skin = e[3],
           t[i].accessory = e[4],
           t[i].baglook = e[5],
           t[i].book = e[6],
           t[i].crate = e[7],
           t[i].dead = e[8],
           t[i].level = e[9],
           t[i].score = 0,
           t[i].ldb_label = null,
           t[i].label = null,
           t[i].label_winter = null,
           t[i].alive = !0,
           1 === oT && (t[i].nickname += "|" + i)
       }
       ,
       this.get_focus = function() {
           this.sendJson([11]),
           console.log("[Famishs] Camera lost , restoring packet")
       }
       ,
       this.empty_res = function() {
           this.new_alert(q[TEXT.EMPTY])
       }
       ,
       this.inv_full = function() {
           this.new_alert(q[TEXT.INV_FULL])
       }
       ,
       this.choose_kit = function(e) {
           this.sendJson([21, e]),
           kI.shop.open = !1
       }
       ,
       this.kit_ok = function(e) {
           for (var i = TT[e - 1].items, t = 0; t < i.length && kI.inv.max > kI.inv.can_select.length; t++) {
               var r = i[t][1]
                 , n = i[t][0];
               i[t][1] === INV.BAG ? kI.inv.update_bag_size(1, 0) : this.gather([0, r, n])
           }
       }
       ,
       this.gather = function(e) {
           for (var i = e.length, t = kI.inv, r = 1; r < i; r += 2) {
               for (var n = e[r], o = e[r + 1], a = 0; a < t.can_select.length; a++)
                   if (t.can_select[a].id == n) {
                       t.n[n] += o;
                       break
                   }
               a == t.can_select.length && (t.n[n] = o,
               t.can_select.push(xI.inv_buttons[n]),
               xI.update_inv_buttons())
           }
           kI.craft.update()
       }
       ,
       this.gauges = function(e, i, t, r, n, o, a) {
           kI.gauges.l = e / 100,
           kI.gauges.h = i / 100,
           kI.gauges.c = t / 100,
           kI.gauges.t = r / 100,
           kI.gauges.o = n / 100,
           kI.gauges.wa = o / 100,
           kI.bandage = a
       }
       ,
       this.succeed_quest = function(e) {
           xI.quests.modify(e, 2)
       }
       ,
       this.fail_quest = function(e) {
           xI.quests.modify(e, 0)
       }
       ,
       this.claimed = function(e) {
           xI.quests.modify(e, 3)
       }
       ,
       this.gauges_life = function(e, i) {
           kI.gauges.l = e / 100,
           kI.bandage = i
       }
       ,
       this.gauges_water = function(e) {
           kI.gauges.t = e / 100
       }
       ,
       this.gauges_food = function(e) {
           kI.gauges.h = e / 100
       }
       ,
       this.gauges_warm = function(e) {
           kI.gauges.wa = e / 100
       }
       ,
       this.gauges_cold = function(e) {
           kI.gauges.c = e / 100
       }
       ,
       this.get_time = function(e) {
           console.log(e),
           UI.time = e[1],
           UI.transition = !0,
           JI.transition = 1
       }
       ,
       this.change_ground = function() {
           document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[UI.time]
       }
       ,
       this.kill_player = function(e) {
           UI.mode == ET.MODE_HUNGER_GAMES && "spectator" !== UI.players[e].nickname && this.new_alert(UI.players[e].nickname + q[TEXT.DEAD]),
           UI.players[e].alive = !1
       }
       ,
       this.set_cam = function(e) {
           var i = new Uint16Array(e);
           player.cam.change(i[1], i[2])
       }
       ,
       this.recover_focus = function(e) {
           var i = new dT(0,kI.id,kI.id,e[3],e[4],e[5],e[6],e[7],e[8],e[9]);
           UI.fast_units[1e3 * kI.id] = i,
           kI.cam.change(x, y)
       }
       ,
       this.remove_entity = function(e) {
           for (var i = new Uint16Array(e), t = (i.length - 1) / 4, r = 0; r < t; r++) {
               var n = 4 * r
                 , o = i[1 + n]
                 , a = i[2 + n] * UI.max_units + o;
               UI.delete_units(a)
           }
       }
       ,
       this.hitten = function(e, i=0) {
           var t = new Uint16Array(e)
             , r = (t.length - 1) / 4;
           if (0 == i)
               for (var n = 0; n < r; n++) {
                   var o, a = t[1 + (_ = 4 * n)], s = t[2 + _], T = (t[3 + _] >> 1) / 127 * Math.PI * 2, I = t[4 + _], E = wI.tiles[s][a];
                   switch (I) {
                   case 0:
                       (o = E.p[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 1:
                       (o = E.s[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 2:
                       (o = E.s[1][0]).angle = T,
                       o.update = !0;
                       break;
                   case 3:
                       (o = E.s[2][0]).angle = T,
                       o.update = !0;
                       break;
                   case 4:
                       (o = E.t[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 5:
                       (o = E.t[1][0]).angle = T,
                       o.update = !0;
                       break;
                   case 6:
                       (o = E.t[2][0]).angle = T,
                       o.update = !0;
                       break;
                   case 7:
                       (o = E.t[3][0]).angle = T,
                       o.update = !0;
                       break;
                   case 8:
                       (o = E.t[4][0]).angle = T,
                       o.update = !0;
                       break;
                   case 9:
                       (o = E.t[5][0]).angle = T,
                       o.update = !0;
                       break;
                   case 10:
                       (o = E.g[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 11:
                       (o = E.g[1][0]).angle = T,
                       o.update = !0;
                       break;
                   case 12:
                       (o = E.g[2][0]).angle = T,
                       o.update = !0;
                       break;
                   case 13:
                       (o = E.d[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 14:
                       (o = E.d[1][0]).angle = T,
                       o.update = !0;
                       break;
                   case 15:
                       (o = E.d[2][0]).angle = T,
                       o.update = !0;
                       break;
                   case 16:
                       (o = E.b[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 17:
                       (o = E.b[1][0]).angle = T,
                       o.update = !0;
                       break;
                   case 18:
                       (o = E.b[2][0]).angle = T,
                       o.update = !0;
                       break;
                   case 19:
                       (o = E.b[3][0]).angle = T,
                       o.update = !0;
                       break;
                   case 20:
                       (o = E.f[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 21:
                       (o = E.f[1][0]).angle = T,
                       o.update = !0;
                       break;
                   case 22:
                       (o = E.f[2][0]).angle = T,
                       o.update = !0;
                       break;
                   case 23:
                       (o = E.sw[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 24:
                       (o = E.sw[1][0]).angle = T,
                       o.update = !0;
                       break;
                   case 25:
                       (o = E.sw[2][0]).angle = T,
                       o.update = !0;
                       break;
                   case 26:
                       (o = E.gw[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 27:
                       (o = E.gw[1][0]).angle = T,
                       o.update = !0;
                       break;
                   case 28:
                       (o = E.gw[2][0]).angle = T,
                       o.update = !0;
                       break;
                   case 29:
                       (o = E.dw[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 30:
                       (o = E.dw[1][0]).angle = T,
                       o.update = !0;
                       break;
                   case 31:
                       (o = E.dw[2][0]).angle = T,
                       o.update = !0;
                       break;
                   case 32:
                       (o = E.a[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 33:
                       (o = E.a[1][0]).angle = T,
                       o.update = !0;
                       break;
                   case 34:
                       (o = E.a[2][0]).angle = T,
                       o.update = !0;
                       break;
                   case 35:
                       (o = E.cs[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 36:
                       (o = E.cs[1][0]).angle = T,
                       o.update = !0;
                       break;
                   case 37:
                       (o = E.cs[2][0]).angle = T,
                       o.update = !0;
                       break;
                   case 38:
                       (o = E.cs[3][0]).angle = T,
                       o.update = !0;
                       break;
                   case 40:
                       (o = E.plm[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 41:
                       (o = E.plm[1][0]).angle = T,
                       o.update = !0;
                       break;
                   case 42:
                       (o = E.plm[2][0]).angle = T,
                       o.update = !0;
                       break;
                   case 50:
                       (o = E.re[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 51:
                       (o = E.re[1][0]).angle = T,
                       o.update = !0;
                       break;
                   case 52:
                       (o = E.re[2][0]).angle = T,
                       o.update = !0;
                       break;
                   case 55:
                       (o = E.c[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 56:
                       (o = E.m[0][0]).angle = T,
                       o.update = !0;
                       break;
                   case 57:
                       (o = E.m[1][0]).angle = T,
                       o.update = !0;
                       break;
                   case 58:
                       (o = E.m[2][0]).angle = T,
                       o.update = !0
                   }
               }
           if (1 == i)
               for (n = 0; n < r; n++) {
                   I = t[1 + (_ = 4 * n)];
                   var _, u = t[2 + _], h = (T = (t[3 + _] >> 1) / 127 * Math.PI * 2,
                   UI.fast_units[u * UI.max_units + I]);
                   h && h.hit && (h.hit.angle = T,
                   h.hit.update = T)
               }
       }
       ,
       this.resurrection = function() {
           this.sendJson([17, kI.resurrection.pid, kI.resurrection.iid])
       }
       ,
       this.give_wheat = function(e, i) {
           this.sendJson([22, i, e.pid, e.iid])
       }
       ,
       this.give_bread_oven = function(e, i, t) {
           i ? this.sendJson([25, i, e.pid, e.iid]) : this.sendJson([24, t, e.pid, e.iid])
       }
       ,
       this.take_bread = function(e) {
           this.sendJson(JSON.stringify.stringify([26, e.pid, e.iid]))
       }
       ,
       this.claim_quest_reward = function(e) {
           this.sendJson([27, e])
       }
       ,
       this.give_well = function(e) {
           this.sendJson([30, e.pid, e.iid])
       }
       ,
       this.give_wood_extractor = function(e, i) {
           this.sendJson([38, i, e.pid, e.iid, e.type])
       }
       ,
       this.give_wood = function(e, i) {
           this.sendJson([12, i, e.pid, e.iid])
       }
       ,
       this.give_item = function(e, i, t) {
           this.sendJson([8, i, t, e.pid, e.iid])
       }
       ,
       this.take_extractor = function(e) {
           this.sendJson([37, e.pid, e.iid, e.type])
       }
       ,
       this.take_flour = function(e) {
           this.sendJson([23, e.pid, e.iid])
       }
       ,
       this.take_chest = function(e) {
           this.sendJson([9, e.pid, e.iid])
       }
       ,
       this.unlock_chest = function(e) {
           this.sendJson([15, e.pid, e.iid])
       }
       ,
       this.lock_chest = function(e) {
           this.sendJson([16, e.iid])
       }
       ,
       this.kick_team = function(i) {
           e.sendJson([20, kI.totem.id, kI.team[i]])
       }
       ,
       this.join_team = function() {
           e.sendJson([18, kI.totem.pid, kI.totem.id])
       }
       ,
       this.leave_team = function() {
           e.sendJson([19])
       }
       ,
       this.lock_team = function() {
           e.sendJson([35, kI.totem.id]),
           "LOCK" == document.getElementById("lock_team").innerHTML ? (kI.totem.lock = 1,
           document.getElementById("lock_team").innerHTML = "UNLOCK") : (kI.totem.lock = 0,
           document.getElementById("lock_team").innerHTML = "LOCK")
       }
       ,
       this.units = function(e, i, t) {
           var r = new Uint16Array(e);
           t && UI.delete_all_units();
           for (var n = (i.length - 2) / 18, o = 0; o < n; o++) {
               var a = 2 + 18 * o
                 , T = 1 + 9 * o
                 , I = i[a]
                 , E = r[T + 1]
                 , _ = r[T + 5]
                 , u = I * UI.max_units + _;
               if (E & sT.DELETE)
                   UI.delete_units(u);
               else {
                   var h = r[T + 2]
                     , R = r[T + 3]
                     , A = r[T + 4]
                     , d = r[T + 6]
                     , S = r[T + 7]
                     , l = r[T + 8]
                     , N = i[a + 1] / 255 * Math.PI * 2;
                   if (UI.fast_units[u]) {
                       var C = UI.fast_units[u];
                       C.r.x = R,
                       C.r.y = A,
                       0 != I && s.dist(C, C.r) > IT.LAG_DISTANCE && (C.x = R,
                       C.y = A),
                       C.id === kI.id && 0 !== I || (C.nangle = N),
                       C.action |= E,
                       C.info = d,
                       C.speed = S,
                       C.extra = l,
                       C.update && C.update(E)
                   } else {
                       var g = new dT(h,I,_,R,A,N,E,d,S,l);
                       UI.fast_units[u] = g,
                       UI.units[h].push(g)
                   }
               }
           }
       }
       ,
       this.leaderboard = function(e) {
           this.timeout_server = ZI,
           kI.ldb.init(e)
       }
       ,
       this.new_recipes = function(e) {
           if (void 0 !== OLD_RECIPES && (RECIPES = OLD_RECIPES),
           e.length > 0) {
               OLD_RECIPES = JSON.parse(JSON.stringify(RECIPES));
               for (var i = 0; i < e.length; i++) {
                   var t = e[i]
                     , r = RECIPES[t.item];
                   console.log(t, r),
                   void 0 !== r && (r.r = t.recipe,
                   r.w = t.workbench,
                   r.f = t.fire,
                   r.o = t.water,
                   r.e = t.well,
                   r.time = 1 / t.time)
               }
           }
       }
       ,
       this.welcome = function(e) {
           e && 0 !== e.length ? kI.welcome.message = Wi(e) : kI.welcome.message = void 0
       }
       ,
       this.chat = function(e) {
           var i = UI.fast_units[e[1] * UI.max_units];
           i && (UI.mode === ET.MODE_ZOMBIES && i.skin === ET.ZOMBIE_SKIN ? kI.zombie ? Math.random() > .5 ? i.text.push(e[2] + " ..." + ZOMBIE_GRUMBLE) : i.text.push(ZOMBIE_GRUMBLE + "... " + e[2]) : i.text.push(ZOMBIE_GRUMBLES[Math.floor(Math.random() * ZOMBIE_GRUMBLES.length)]) : i.text.push(e[2]))
       }
       ,
       this.select_craft = function(e) {
           return kI.inv.max !== kI.inv.can_select.length || RECIPES[e].id2 === INV.BAG || -1 != kI.inv.find_item(RECIPES[e].id2) || kI.inv.free_place(RECIPES[e].r) ? (this.sendJson([7, e]),
           1) : (this.inv_full(),
           0)
       }
       ,
       this.workbench = function(e) {
           kI.craft.set_workbench(e)
       }
       ,
       this.well = function(e) {
           kI.craft.well = e,
           kI.craft.update()
       }
       ,
       this.fire = function(e) {
           kI.craft.fire = e,
           kI.craft.update()
       }
       ,
       this.water = function(e) {
           kI.craft.water = e,
           kI.craft.update()
       }
       ,
       this.dont_harvest = function() {
           this.new_alert(q[TEXT.WRONG_TOOL])
       }
       ,
       this.cancel_craft = function() {
           kI.craft.restart()
       }
       ,
       this.minimap = function(e) {
           xI.minimap.players = [];
           for (var i = UI.fast_units[kI.uid], t = 0, r = 1; r < e.length; r += 2) {
               var n = {
                   x: Math.floor(e[r] * UI.w / 250),
                   y: Math.floor(e[r + 1] * UI.h / 250)
               };
               i && !t && !kI.spectator && s.dist(n, i) < 250 ? t += 1 : xI.minimap.players.push(n)
           }
       }
       ,
       this.reborn = function() {
           kI.resurrection.open = !1,
           kI.ghost.enabled = !1,
           kI.ghost.delay = -1,
           kI.ghost.label = null,
           kI.ghost.sec = null,
           kI.ghost.now = -1
       }
       ,
       this.ghost = function(e) {
           ET.GHOST_DELAY = e,
           kI.ghost.enabled = !0,
           kI.ghost.delay = (new Date).getTime(),
           kI.ghost.label = null,
           kI.ghost.now = -1;
           for (var i = [INV.SUPER_HAMMER, INV.DRAGON_HEART, INV.SWORD_WOOD, INV.SWORD, INV.SWORD_GOLD, INV.SWORD_DIAMOND, INV.SWORD_AMETHYST, INV.REIDITE_SWORD, INV.DRAGON_SWORD, INV.LAVA_SWORD, INV.PIRATE_SWORD, INV.SPEAR, INV.WOOD_SPEAR, INV.GOLD_SPEAR, INV.DIAMOND_SPEAR, INV.AMETHYST_SPEAR, INV.REIDITE_SPEAR, INV.DRAGON_SPEAR, INV.LAVA_SPEAR, INV.CRAB_SPEAR, INV.WOOD_BOW, INV.STONE_BOW, INV.GOLD_BOW, INV.DIAMOND_BOW, INV.AMETHYST_BOW, INV.REIDITE_BOW, INV.DRAGON_BOW, INV.WOOD_SHIELD, INV.STONE_SHIELD, INV.GOLD_SHIELD, INV.DIAMOND_SHIELD, INV.AMETHYST_SHIELD, INV.REIDITE_SHIELD, INV.WAND1, INV.WAND2, INV.PICK_WOOD, INV.PICK, INV.PICK_GOLD, INV.PICK_DIAMOND, INV.PICK_AMETHYST, INV.PICK_REIDITE, INV.SPANNER, INV.PITCHFORK, INV.PITCHFORK2], t = 0; t < i.length; t++) {
               var r = kI.inv.find_item(i[t]);
               -1 != r && kI.inv.delete_item(i.length[t], r)
           }
           kI.craft.restart()
       }
       ,
       this.decrease_item2 = function(e, i, t) {
           this.decrease_item(e, 256 * i + t)
       }
       ,
       this.decrease_item = function(e, i) {
           kI.craft.preview = -1,
           kI.inv.decrease(e, i, kI.inv.find_item(e)),
           kI.craft.update()
       }
       ,
       this.accept_build = function(e) {
           kI.craft.preview = -1,
           kI.build.wait = !0;
           var i = kI.inv.find_item(e);
           kI.inv.decrease(e, 1, i),
           i >= 0 && !kI.inv.n[e] && kI.craft.update(),
           e == INV.TOTEM && (kI.team = [kI.id])
       }
       ,
       this.cancel_crafting = function() {
           this.sendJson([31])
       }
       ,
       this.buy_market = function(e) {
           this.sendJson([32, e.val, e.id])
       }
       ,
       this.update_sign = function(e, i) {
           this.sendJson([33, e, i])
       }
       ,
       this.send_build = function() {
           var e = UI.fast_units[kI.uid];
           if (e) {
               var i = 2 * Math.PI;
               this.sendJson([102, kI.craft.preview, Math.floor((e.angle + i) % i * 255 / i), kI.craft.mode])
           }
       }
       ,
       this.select_inv = function(e) {
           switch (e) {
           case INV.BANDAGE:
           case INV.PLANT:
           case INV.MEAT:
           case INV.COOKED_MEAT:
           case INV.SANDWICH:
           case INV.BOTTLE_FULL:
           case INV.COOKIE:
           case INV.CAKE:
           case INV.ICE:
           case INV.BREAD:
           case INV.PUMPKIN:
           case INV.TOMATO:
           case INV.CACTUS:
           case INV.CARROT:
           case INV.WATERMELON:
           case INV.ALOE_VERA:
           case INV.GARLIC:
           case INV.FOODFISH:
           case INV.FOODFISH_COOKED:
           case INV.CRAB_STICK:
           case INV.CRAB_LOOT:
           case INV.CANDY:
           case INV.SUGAR_CAN:
               kI.craft.preview = -1,
               this.sendJson([5, e]);
               break;
           case INV.WORKBENCH:
           case INV.SPIKE:
           case INV.SEED:
           case INV.WHEAT_SEED:
           case INV.PUMPKIN_SEED:
           case INV.TOMATO_SEED:
           case INV.CARROT_SEED:
           case INV.GARLIC_SEED:
           case INV.THORNBUSH_SEED:
           case INV.WATERMELON_SEED:
           case INV.ALOE_VERA_SEED:
           case INV.FIRE:
           case INV.WALL:
           case INV.STONE_WALL:
           case INV.GOLD_WALL:
           case INV.DIAMOND_WALL:
           case INV.BIG_FIRE:
           case INV.CHEST:
           case INV.RESURRECTION:
           case INV.EMERALD_MACHINE:
           case INV.WOOD_DOOR:
           case INV.STONE_DOOR:
           case INV.GOLD_DOOR:
           case INV.DIAMOND_DOOR:
           case INV.AMETHYST_DOOR:
           case INV.REIDITE_DOOR:
           case INV.WOOD_DOOR_SPIKE:
           case INV.STONE_DOOR_SPIKE:
           case INV.GOLD_DOOR_SPIKE:
           case INV.DIAMOND_DOOR_SPIKE:
           case INV.AMETHYST_DOOR_SPIKE:
           case INV.REIDITE_DOOR_SPIKE:
           case INV.STONE_SPIKE:
           case INV.GOLD_SPIKE:
           case INV.DIAMOND_SPIKE:
           case INV.FURNACE:
           case INV.AMETHYST_WALL:
           case INV.AMETHYST_SPIKE:
           case INV.REIDITE_WALL:
           case INV.REIDITE_SPIKE:
           case INV.BRIDGE:
           case INV.ROOF:
           case INV.PLOT:
           case INV.WINDMILL:
           case INV.EXTRACTOR_MACHINE_STONE:
           case INV.EXTRACTOR_MACHINE_GOLD:
           case INV.EXTRACTOR_MACHINE_DIAMOND:
           case INV.EXTRACTOR_MACHINE_AMETHYST:
           case INV.EXTRACTOR_MACHINE_REIDITE:
           case INV.BED:
           case INV.GARLAND:
           case INV.WELL:
           case INV.SIGN:
           case INV.BREAD_OVEN:
           case INV.TOTEM:
           case INV.WOOD_TOWER:
               kI.zombie || (kI.craft.preview === e ? kI.craft.preview = -1 : kI.craft.preview = e);
               break;
           case INV.SWORD:
           case INV.SWORD_WOOD:
           case INV.SWORD_GOLD:
           case INV.SWORD_DIAMOND:
           case INV.SWORD_AMETHYST:
           case INV.REIDITE_SWORD:
           case INV.PIRATE_SWORD:
           case INV.DRAGON_SWORD:
           case INV.LAVA_SWORD:
           case INV.WOOD_BOW:
           case INV.STONE_BOW:
           case INV.GOLD_BOW:
           case INV.DIAMOND_BOW:
           case INV.AMETHYST_BOW:
           case INV.REIDITE_BOW:
           case INV.DRAGON_BOW:
           case INV.WAND1:
           case INV.WAND2:
           case INV.WOOD_SPEAR:
           case INV.SPEAR:
           case INV.GOLD_SPEAR:
           case INV.DIAMOND_SPEAR:
           case INV.AMETHYST_SPEAR:
           case INV.AMETHYST_REIDITE:
           case INV.DRAGON_SPEAR:
           case INV.LAVA_SPEAR:
           case INV.REIDITE_SPEAR:
           case INV.CRAB_SPEAR:
               if (!kI.zombie)
                   kI.craft.preview = -1,
                   (i = UI.fast_units[kI.uid]) && i.right === e ? this.sendJson([5, INV.HAND]) : (kI.weapon.wait = !0,
                   this.sendJson([5, e]));
               break;
           case INV.PICK:
           case INV.PICK_WOOD:
           case INV.PICK_GOLD:
           case INV.PICK_DIAMOND:
           case INV.HAMMER:
           case INV.HAMMER_GOLD:
           case INV.HAMMER_DIAMOND:
           case INV.BOOK:
           case INV.HAMMER_AMETHYST:
           case INV.HAMMER_REIDITE:
           case INV.PICK_AMETHYST:
           case INV.PICK_REIDITE:
           case INV.SUPER_HAMMER:
           case INV.SHOVEL:
           case INV.SHOVEL_GOLD:
           case INV.SHOVEL_DIAMOND:
           case INV.SHOVEL_AMETHYST:
           case INV.SPANNER:
           case INV.MACHETE:
           case INV.PITCHFORK:
           case INV.PITCHFORK2:
           case INV.SADDLE:
           case INV.WATERING_CAN_FULL:
           case INV.WOOD_SHIELD:
           case INV.STONE_SHIELD:
           case INV.GOLD_SHIELD:
           case INV.DIAMOND_SHIELD:
           case INV.AMETHYST_SHIELD:
           case INV.REIDITE_SHIELD:
               if (!kI.zombie)
                   kI.craft.preview = -1,
                   (i = UI.fast_units[kI.uid]) && i.right === e ? this.sendJson([5, INV.HAND]) : this.sendJson([5, e]);
               break;
           case INV.BOAT:
           case INV.SLED:
           case INV.MOUNT_BOAR:
           case INV.BABY_MAMMOTH:
           case INV.CRAB_BOSS:
           case INV.BABY_DRAGON:
           case INV.BABY_LAVA:
           case INV.HAWK:
           case INV.PLANE:
           case INV.NIMBUS:
               if (!kI.zombie) {
                   kI.craft.preview = -1;
                   var i = UI.fast_units[kI.uid];
                   this.sendJson([5, e])
               }
               break;
           case INV.CROWN_GREEN:
           case INV.CROWN_ORANGE:
           case INV.CROWN_BLUE:
           case INV.WOOD_HELMET:
           case INV.STONE_HELMET:
           case INV.GOLD_HELMET:
           case INV.DIAMOND_HELMET:
           case INV.AMETHYST_HELMET:
           case INV.REIDITE_HELMET:
           case INV.DIAMOND_PROTECTION:
           case INV.AMETHYST_PROTECTION:
           case INV.REIDITE_PROTECTION:
           case INV.DRAGON_HELMET:
           case INV.LAVA_HELMET:
           case INV.WITCH:
           case INV.CROWN_CRAB:
           case INV.SUPER_DIVING_SUIT:
               (i = UI.fast_units[kI.uid]) && i.clothe !== e && (kI.helmet.wait = !0),
               this.sendJson([5, e]);
               break;
           case INV.EARMUFFS:
           case INV.HOOD:
           case INV.PEASANT:
           case INV.WINTER_PEASANT:
           case INV.COAT:
           case INV.CAP_SCARF:
           case INV.FUR_HAT:
           case INV.PILOT_HELMET:
           case INV.TURBAN1:
           case INV.TURBAN2:
           case INV.CHRISTMAS_HAT:
           case INV.ELF_HAT:
           case INV.WINTER_HOOD:
           case INV.EXPLORER_HAT:
           case INV.PIRATE_HAT:
           case INV.DIVING_MASK:
               this.sendJson([5, e])
           }
       }
       ,
       this.delete_inv = function(e) {
           this.sendJson([6, e])
       }
       ,
       this.delete_inv_ok = function(e) {
           kI.build.wait = !0;
           var i = kI.inv.find_item(e);
           kI.inv.delete_item(e, i),
           kI.craft.update()
       }
       ,
       this.recycle_inv = function(e) {
           this.sendJson([29, e])
       }
       ,
       this.delete_one_inv = function(e) {
           this.sendJson([28, e])
       }
       ,
       this.delete_one_inv_ok = function(e) {
           kI.build.wait = !0;
           var i = kI.inv.find_item(e);
           kI.inv.decrease(e, 1, i),
           kI.craft.update()
       }
       ,
       this.delete_single_inv = function(e) {
           var i = e[1]
             , t = e[2];
           kI.build.wait = !0;
           var r = kI.inv.find_item(i);
           kI.inv.decrease(i, t, r),
           kI.craft.update()
       }
       ,
       this.stop_attack = function() {
           this.sendJson([14])
       }
       ,
       this.send_attack = function(e) {
           var i = 2 * Math.PI;
           this.sendJson([4, Math.floor((e + i) % i * 255 / i)])
       }
       ,
       this.send_angle = function(e) {
           var i = 2 * Math.PI;
           this.sendJson([3, Math.floor((e + i) % i * 255 / i)])
       }
       ,
       this.send_move = function(e) {
           this.sendJson([2, e])
       }
       ,
       this.send_command = function(e) {
           this.sendJson([36, e])
       }
       ,
       this.send_chat = function(e) {
           var i = UI.fast_units[kI.uid];
           kI.zombie ? Math.random() > .5 ? i.text.push(e.substring(0, 25) + " ..." + ZOMBIE_GRUMBLE) : i.text.push(ZOMBIE_GRUMBLE + "... " + e.substring(0, 25)) : i.text.push(e),
           this.sendJson([0, e])
       }
       ,
       this.move_units = function(e) {
           var i = player.select.units;
           if (0 != i.length) {
               var t = [2]
                 , r = [];
               s.sub_vector(e, {
                   x: player.cam.rx,
                   y: player.cam.ry
               }),
               t.push(e.x),
               t.push(e.y);
               for (var n = 0; n < i.length; n++)
                   r.push(i[n].oid);
               t.push(r),
               this.sendJson(t)
           }
       }
       ,
       this.cam_delay = 0,
       this.last_cam = {
           i: 0,
           j: 0
       },
       this.update_cam = function() {
           if (ZI - this.cam_delay > IT.CAM_DELAY) {
               this.cam_delay = ZI;
               var e = kI.cam
                 , i = Math.floor(e.x / 100)
                 , t = Math.floor(e.y / 100);
               this.last_cam.i == i && this.last_cam.j == t || (this.sendJson([1, Math.floor(-e.x), Math.floor(-e.y)]),
               this.last_cam.i = i,
               this.last_cam.j = t)
           }
       }
       ,
       this.ping_delay = 0,
       this.try_ping = function() {
           ZI - this.ping_delay > IT.PING_DELAY && (this.ping_delay = ZI,
           this.ping())
       }
       ,
       this.lost = function() {
           kI.reconnect.enabled = !0,
           this._current_id == this.socket._current_id && (this._current_id++,
           this.socket.close(),
           WI.connect())
       }
       ,
       this.join_new_team = function(e) {
           this.new_alert(q[TEXT.JOIN_TEAM]);
           for (var i = 1; i < e.length; i++)
               kI.team.push(e[i])
       }
       ,
       this.new_member_team = function(e) {
           this.new_alert(UI.players[e].nickname + q[TEXT.JOINED_TEAM]),
           kI.team.push(e);
           var i = document.getElementById("team_box");
           -1 != xI.team_buttons_id && "inline-block" == i.style.display && xI.team_buttons[xI.team_buttons_id].action()
       }
       ,
       this.destroy_team = function() {
           this.new_alert(q[TEXT.TEAM_DESTROYED]),
           kI.totem.wait = !0,
           kI.team = [],
           document.getElementById("team_box").style.display = "none"
       }
       ,
       this.exclude_team = function(e) {
           if (e == kI.id)
               this.new_alert(q[TEXT.LEFT_TEAM]),
               kI.totem.wait = !0,
               kI.team = [],
               document.getElementById("team_box").style.display = "none";
           else {
               this.new_alert(UI.players[e].nickname + q[TEXT.LEFT_TEAM2]);
               for (var i = 0; i < kI.team.length; i++)
                   if (kI.team[i] == e) {
                       kI.team.splice(i, 1);
                       break
                   }
               var t = document.getElementById("team_box");
               -1 != xI.team_buttons_id && "inline-block" == t.style.display && xI.team_buttons[xI.team_buttons_id].action()
           }
       }
       ,
       this.steal_token = function() {
           kI.alive = !1,
           this.new_alert(q[TEXT.TOKEN]),
           this._current_id == this.socket._current_id && (this._current_id++,
           xI.quit(YI.run),
           this.socket.close())
       }
       ,
       this.killed = function(e, i) {
           kI.alive = !1;
           var t = i[2]
             , r = i[3];
           kI.die.howdie = Q[e][Math.floor(Math.random() * Q[e].length)],
           kI.die.score = s.simplify_number(UI.players[kI.id].score),
           kI.die.bank = s.simplify_number(t),
           kI.die.kill = r,
           this.new_alert(q[TEXT.YOU_DEAD]),
           this._current_id == this.socket._current_id && (this._current_id++,
           xI.quit(FI.run),
           this.socket.close(),
           window.aiptag.cmd.display.push((function() {
               window.aipDisplayTag.display("MFN_starve-io_300x250")
           }
           )))
       }
       ,
       this.ping = function() {
           try {
               this.sendJson([IT.PING])
           } catch (e) {
               console.log("[Famishs/ConnectionException] WebSocket is not eligble"),
               this.lost(),
               console.log("[Famishs/Session] Trying to restore session..")
           }
       }
       ,
       this.check_state = function() {
           3 == this.socket.readyState && (this.timeout_server -= IT.TIMEOUT_SERVER)
       }
       ,
       this.check_pong = function() {
           jI > IT.LOOSE_FOCUS && (this.timeout_server = ZI),
           ZI - this.timeout_server > IT.TIMEOUT_SERVER && (this.timeout_server = ZI,
           this.lost())
       }
       ,
       this.handshake = function(i) {
           clearTimeout(this.timeout_handler),
           document.getElementById("commandMainBoxName").innerHTML = this.mode_list[this.current_mode][this.selected_server[this.current_mode]].a,
           document.getElementById("exploreForest").src = "img/forest-leaf.png",
           document.getElementById("exploreWinter").src = "img/winter-flake.png",
           document.getElementById("exploreDesert").src = "img/desert-cactus.png",
           document.getElementById("exploreLava").src = "img/lava-volcano.png",
           this.timeout_server = ZI,
           kI.gauges.cold.ed = kI.gauges.cold.em,
           kI.gauges.hunger.ed = kI.gauges.hunger.em,
           kI.gauges.thirst.ed = kI.gauges.thirst.em,
           kI.gauges.oxygen.ed = kI.gauges.oxygen.em,
           kI.gauges.warm.ed = kI.gauges.warm.em,
           kI.gauges.l = 1,
           kI.gauges.c = 1,
           kI.gauges.h = 1,
           kI.gauges.t = 1,
           kI.gauges.o = 1,
           kI.gauges.wa = 1,
           kI.bigmap = !1,
           xI.info_box.display = 0,
           kI.inv.can_select = [],
           kI.inv.n = [],
           kI.inv.max = ET.WITHOUT_BAG,
           kI.inv.bonus = 0,
           kI.inv.bag = 0,
           kI.inv.id = -1,
           xI.show_recipe_book = 1,
           xI.show_clock = 1,
           xI.show_quest = 1,
           xI.show_market = 1,
           kI.alive = !0,
           kI.inv.drag.stop(),
           kI.craft.can_craft = [],
           kI.craft.crafting = !1,
           kI.craft.can_build = !1,
           kI.craft.preview = -1,
           kI.craft.id = -1,
           kI.craft.workbench = !1,
           kI.craft.well = !1,
           kI.craft.fire = !1,
           kI.craft.water = !1,
           kI.craft.timeout = new s.LinearAnimation(!1,0,1,0,1,1),
           kI.weapon.timeout = new s.LinearAnimation(!1,0,1,0,.1,1),
           kI.weapon.wait = !1,
           kI.helmet.timeout = new s.LinearAnimation(!1,0,1,0,.2,1),
           kI.helmet.wait = !1,
           kI.build.timeout = new s.LinearAnimation(!1,0,1,0,1,1),
           kI.build.wait = !1,
           kI.totem.id = -1,
           kI.totem.pid = -1,
           kI.totem.wait = !1,
           kI.totem.timeout = new s.LinearAnimation(!1,0,1,0,1 / 30,1),
           xI.minimap.marker.x = -1,
           xI.minimap.marker.y = -1,
           xI.craft_list.open = !1,
           xI.minimap.players = [],
           kI.show_spectators.enabled = !1,
           UI.mode = i[1],
           void 0 !== i[20] && void 0 !== i[21] && (UI.nw = i[20],
           UI.nh = i[21],
           UI.w = UI.nw * UI.dw,
           UI.h = UI.nh * UI.dh),
           UI.islands = i[22],
           UI.custom_map = i[23],
           e.welcome(i[24]),
           e.new_recipes(i[25]),
           kI.desert.tempest = i[26],
           kI.blizzard = 0,
           kI.winter.tempest = i[27],
           UI.generate_world(i[19]),
           UI.time = i[5],
           UI.clock.hour = i[15],
           UI.clock.init = (new Date).getTime(),
           xI.quests.born = i[16],
           UI.transition = !1,
           kI.day = i[2],
           xI.quests.reset(),
           kI.team = i[8],
           UI.units[hT.PLAYERS] = [],
           UI.units[hT.FRUIT] = [],
           UI.units[hT.WORKBENCH] = [],
           UI.units[hT.FIRE] = [],
           UI.units[hT.BIG_FIRE] = [],
           UI.units[hT.SEED] = [],
           UI.units[hT.WHEAT_SEED] = [],
           UI.units[hT.PUMPKIN_SEED] = [],
           UI.units[hT.TOMATO_SEED] = [],
           UI.units[hT.CARROT_SEED] = [],
           UI.units[hT.GARLIC_SEED] = [],
           UI.units[hT.THORNBUSH_SEED] = [],
           UI.units[hT.WATERMELON_SEED] = [],
           UI.units[hT.ALOE_VERA_SEED] = [],
           UI.units[hT.WALL] = [],
           UI.units[hT.STONE_WALL] = [],
           UI.units[hT.GOLD_WALL] = [],
           UI.units[hT.DIAMOND_WALL] = [],
           UI.units[hT.WOOD_DOOR] = [],
           UI.units[hT.STONE_DOOR] = [],
           UI.units[hT.GOLD_DOOR] = [],
           UI.units[hT.DIAMOND_DOOR] = [],
           UI.units[hT.WOOD_DOOR_SPIKE] = [],
           UI.units[hT.STONE_DOOR_SPIKE] = [],
           UI.units[hT.GOLD_DOOR_SPIKE] = [],
           UI.units[hT.DIAMOND_DOOR_SPIKE] = [],
           UI.units[hT.AMETHYST_DOOR_SPIKE] = [],
           UI.units[hT.REIDITE_DOOR_SPIKE] = [],
           UI.units[hT.CHEST] = [],
           UI.units[hT.RESURRECTION] = [],
           UI.units[hT.EMERALD_MACHINE] = [],
           UI.units[hT.SPIKE] = [],
           UI.units[hT.STONE_SPIKE] = [],
           UI.units[hT.GOLD_SPIKE] = [],
           UI.units[hT.DIAMOND_SPIKE] = [],
           UI.units[hT.WOLF] = [],
           UI.units[hT.BOAR] = [],
           UI.units[hT.CRAB_BOSS] = [],
           UI.units[hT.BABY_DRAGON] = [],
           UI.units[hT.BABY_LAVA] = [],
           UI.units[hT.HAWK] = [],
           UI.units[hT.TREASURE_CHEST] = [],
           UI.units[hT.DEAD_BOX] = [],
           UI.units[hT.GIFT] = [],
           UI.units[hT.CRATE] = [],
           UI.units[hT.BREAD_OVEN] = [],
           UI.units[hT.PIRANHA] = [],
           UI.units[hT.KRAKEN] = [],
           UI.units[hT.CRAB] = [],
           UI.units[hT.FOX] = [],
           UI.units[hT.BEAR] = [],
           UI.units[hT.MAMMOTH] = [],
           UI.units[hT.BABY_MAMMOTH] = [],
           UI.units[hT.VULTURE] = [],
           UI.units[hT.SAND_WORM] = [],
           UI.units[hT.DRAGON] = [],
           UI.units[hT.LAVA_DRAGON] = [],
           UI.units[hT.FLAME] = [],
           UI.units[hT.WHEAT_MOB] = [],
           UI.units[hT.ALOE_VERA_MOB] = [],
           UI.units[hT.PUMPKIN_MOB] = [],
           UI.units[hT.GARLIC_MOB] = [],
           UI.units[hT.THORNBUSH_MOB] = [],
           UI.units[hT.RABBIT] = [],
           UI.units[hT.PENGUIN] = [],
           UI.units[hT.SPELL] = [],
           UI.units[hT.FIREFLY] = [],
           UI.units[hT.SPIDER] = [],
           UI.units[hT.FURNACE] = [],
           UI.units[hT.AMETHYST_WALL] = [],
           UI.units[hT.AMETHYST_SPIKE] = [],
           UI.units[hT.AMETHYST_DOOR] = [],
           UI.units[hT.REIDITE_WALL] = [],
           UI.units[hT.REIDITE_SPIKE] = [],
           UI.units[hT.REIDITE_DOOR] = [],
           UI.units[hT.TOTEM] = [],
           UI.units[hT.WOOD_TOWER] = [],
           UI.units[hT.BRIDGE] = [],
           UI.units[hT.ROOF] = [],
           UI.units[hT.PLOT] = [],
           UI.units[hT.WINDMILL] = [],
           UI.units[hT.EXTRACTOR_MACHINE_STONE] = [],
           UI.units[hT.EXTRACTOR_MACHINE_GOLD] = [],
           UI.units[hT.EXTRACTOR_MACHINE_DIAMOND] = [],
           UI.units[hT.EXTRACTOR_MACHINE_AMETHYST] = [],
           UI.units[hT.EXTRACTOR_MACHINE_REIDITE] = [],
           UI.units[hT.GARLAND] = [],
           UI.units[hT.BED] = [],
           UI.units[hT.WELL] = [],
           UI.units[hT.SIGN] = [],
           UI.fast_units = [],
           UI.max_units = i[7],
           kI.id = i[9],
           kI.uid = kI.id * UI.max_units,
           JI.loaded && (JI.players[0].uid = kI.uid,
           JI.players[0].free = 0),
           XI.clear_directionnal(),
           kI.cam.change(i[3], i[10]),
           UI.players = [];
           for (var t = UI.players, r = 0; r < 105; r++)
               t.push(new AT);
           r = 0;
           for (var n = i[4]; r < n.length; r++) {
               var o = t[n[r].i];
               o.nickname = n[r].n,
               o.skin = n[r].s,
               o.accessory = n[r].a,
               o.crate = n[r].c,
               o.book = n[r].b,
               o.dead = n[r].d,
               o.baglook = n[r].g,
               o.level = n[r].l,
               o.score = s.restore_number(n[r].p),
               o.alive = !0,
               1 === oT && (o.nickname += "|" + n[r].i)
           }
           if (kI.ldb.sort(),
           UI.mode === ET.MODE_HUNGER_GAMES && "spectator" === UI.players[kI.id].nickname ? kI.spectator = !0 : kI.spectator = !1,
           UI.mode === ET.MODE_ZOMBIES && UI.players[kI.id].skin === ET.ZOMBIE_SKIN ? kI.zombie = !0 : kI.zombie = !1,
           UI.mode === ET.MODE_VAMPIRES && UI.players[kI.id].skin === ET.VAMPIRE_SKIN ? kI.vampire = !0 : kI.vampire = !1,
           Cookies.set("starve_token", kI.token),
           0 === i[12]) {
               kI.shop.delay = 0,
               xI.quests.restore(i[17]);
               var a = i[14];
               a[INV.BAG] && kI.inv.update_bag_size(1, 0);
               for (r = 0; r < a.length; r++)
                   if (a[r]) {
                       if (r == INV.BAG)
                           continue;
                       if (r == INV.HAND)
                           continue;
                       this.gather([0, r, a[r]])
                   }
               kI.shop.open = !1
           } else
               UI.mode === ET.MODE_LEGACY ? this.gather([0, INV.SANDWORM_JUICE, 1]) : UI.mode === ET.MODE_VAMPIRES && (kI.vampire ? this.gather([0, INV.ROOF, 4]) : this.gather([0, INV.GARLIC_SEED, 3])),
               UI.mode === ET.MODE_PVP || UI.mode === ET.MODE_VAMPIRES || UI.mode === ET.MODE_EXPERIMENTAL || UI.mode === ET.MODE_LEGACY ? (kI.shop.delay = (new Date).getTime(),
               kI.shop.open = !0,
               kI.shop.value = i[13],
               xI.shop.init()) : (kI.shop.delay = 0,
               kI.shop.open = !1,
               kI.shop.value = 0),
               kI.token_id = i[12].toString();
           kI.ghost.enabled = i[6],
           kI.ghost.delay = -1,
           kI.ghost.label = null,
           kI.ghost.now = -1,
           Cookies.set("starve_token_id", kI.token_id),
           kI.reconnect.enabled ? (kI.reconnect.rotate = 0,
           kI.reconnect.enabled = !1) : YI.quit(xI.run)
       }
       ,
       this.connect = function() {
           this.timeout_number = 0,
           this.connect_timeout()
       }
       ,
       this.connect_timeout = function() {
           var i = this.selected_server[this.current_mode]
             , t = this.mode_list[this.current_mode][i].i
             , r = this.mode_list[this.current_mode][i].p
             , n = this.mode_list[this.current_mode][i].ssl;
           t = t + ":" + r;
           let o = "DEV" == window.AppData.ENV_MODE ? window.WebSocketLink : "ws" + (1 === n ? "s" : "") + "://" + t + "/id=" + ~~(999684281 * Math.random());
           this.socket = new window.WebSocket(o),
           this.socket.binaryType = "arraybuffer",
           this.socket._current_id = this._current_id,
           this.socket.onmessage = function(i) {
               if (this._current_id == e._current_id)
                   if ("string" == typeof i.data) {
                       var t = JSON.parse(i.data);
                       switch (t[0]) {
                       case 0:
                           e.chat(t);
                           break;
                       case 1:
                           e.kick(t[1]);
                           break;
                       case 2:
                           e.new_player(t);
                           break;
                       case 3:
                           e.handshake(t);
                           break;
                       case 4:
                           e.message(t[1]);
                           break;
                       case 5:
                           e.commands(t);
                           break;
                       case 6:
                           e.welcome(t[1]);
                           break;
                       case 7:
                           e.kicked_before_join(t[1]);
                           break;
                       case 8:
                           e.leaderboard(t[1]);
                           break;
                       case 9:
                           e.decrease_item(t[1], t[2]);
                           break;
                       case 10:
                           e.gather([0, t[1], t[2]]);
                           break;
                       case 11:
                           window.drawShit = [t[1]];
                           break;
                       case 12:
                           window.drawShit2 = t[1];
                           break;
                       case 13:
                           e.killed(t[1], t);
                           break;
                       case 14:
                           e.mute();
                           break;
                       case 15:
                           e.throttle();
                           break;
                       case 16:
                           e.recover_focus(t[1], t[2]);
                           break;
                       case 17:
                           e.denied_with_callback(t[1]);
                           break;
                       case 18:
                           e.recreate_session()
                       }
                   } else {
                       var r = new Uint8Array(i.data);
                       switch (r[0]) {
                       case 0:
                           e.units(i.data, r, !1);
                           break;
                       case 1:
                           e.units(i.data, r, !0);
                           break;
                       case 2:
                           e.cancel_craft();
                           break;
                       case 3:
                           e.gather(new Uint16Array(i.data));
                           break;
                       case 5:
                           e.full();
                           break;
                       case 6:
                           e.dont_harvest();
                           break;
                       case 7:
                           e.hitten(i.data, 0);
                           break;
                       case 8:
                           e.build_stop(r[1]);
                           break;
                       case 9:
                           e.build_ok(r[1]);
                           break;
                       case 10:
                           e.inv_full();
                           break;
                       case 11:
                           e.decrease_item(r[1], r[2]);
                           break;
                       case 12:
                           e.workbench(r[1]);
                           break;
                       case 13:
                           e.hitten(i.data, 1);
                           break;
                       case 14:
                           e.mute();
                           break;
                       case 15:
                           e.kill_player(r[1]);
                           break;
                       case 16:
                           e.gauges(r[1], r[2], r[3], r[4], r[5], r[6], r[7]);
                           break;
                       case 18:
                           e.empty_res();
                           break;
                       case 19:
                           e.fire(r[1]);
                           break;
                       case 20:
                           e.survive();
                           break;
                       case 21:
                           e.leaderboard(i.data);
                           break;
                       case 22:
                           e.get_time(r, i.data);
                           break;
                       case 23:
                           e.set_cam(i.data);
                           break;
                       case 24:
                           e.accept_build(r[1]);
                           break;
                       case 26:
                           e.minimap(r);
                           break;
                       case 27:
                           e.fail_restore();
                           break;
                       case 28:
                           e.ghost(r[1]);
                           break;
                       case 29:
                           e.reborn();
                           break;
                       case 30:
                           e.steal_token();
                           break;
                       case 31:
                           e.join_new_team(r);
                           break;
                       case 32:
                           e.exclude_team(r[1]);
                           break;
                       case 33:
                           e.new_member_team(r[1]);
                           break;
                       case 34:
                           e.destroy_team();
                           break;
                       case 35:
                           e.kit_ok(r[1]);
                           break;
                       case 36:
                           e.water(r[1]);
                           break;
                       case 37:
                           e.gauges_life(r[1], r[2]);
                           break;
                       case 38:
                           e.gauges_food(r[1]);
                           break;
                       case 39:
                           e.gauges_water(r[1]);
                           break;
                       case 40:
                           e.get_bag();
                           break;
                       case 41:
                           e.verified_account(r);
                           break;
                       case 42:
                           e.succeed_quest(r[1]);
                           break;
                       case 43:
                           e.fail_quest(r[1]);
                           break;
                       case 44:
                           e.claimed(r[1]);
                           break;
                       case 45:
                           e.recycle_ok(r[1]);
                           break;
                       case 46:
                           e.recycle_stop(r[1]);
                           break;
                       case 47:
                           e.well(r[1]);
                           break;
                       case 48:
                           e.no_resources();
                           break;
                       case 50:
                           e.decrease_item2(r[1], r[2], r[3]);
                           break;
                       case 51:
                           e.blocked();
                           break;
                       case 52:
                           e.delete_inv_ok(r[1]);
                           break;
                       case 53:
                           e.delete_one_inv_ok(r[1]);
                           break;
                       case 54:
                           e.account_ok();
                           break;
                       case 55:
                           e.gauges_warm(r[1]);
                           break;
                       case 56:
                           e.gauges_cold(r[1]);
                           break;
                       case 57:
                           e.new_version();
                           break;
                       case 58:
                           e.wrong_password();
                           break;
                       case 59:
                           e.clean_inventory();
                           break;
                       case 60:
                           e.hide_shop_kit();
                           break;
                       case 61:
                           kI.cam.forcedDelay = .2,
                           kI.cam.delay = 3;
                           break;
                       case 62:
                           e.delete_single_inv(new Uint16Array(i.data));
                           break;
                       case 63:
                           e.hide_clock();
                           break;
                       case 64:
                           e.hide_recipe_book();
                           break;
                       case 65:
                           e.hide_quest();
                           break;
                       case 66:
                           e.hide_market();
                           break;
                       case 67:
                           e.explorer_quest(r[1]);
                           break;
                       case 68:
                           e.sand_tempest(r[2]);
                           break;
                       case 69:
                           e.blizzard(r[2]);
                           break;
                       case 70:
                           e.blizzard_status(r[1]);
                           break;
                       case 71:
                           e.bandage(r[1]);
                           break;
                       case 72:
                           e.remove_entity(i.data)
                       }
                   }
           }
           ,
           this.recreate_session = function() {
               clearTimeout(e.timeout_handler),
               kI.newToken = kI.newToken || s.getURLData("token"),
               window.threadSafe.dataSentCounter = 0,
               e.sendJson([YI.nickname.input.value, screen.width + 200, screen.height + 200, window.AppData.VERSION, kI.token, kI.token_id, kI.reconnect.enabled ? 1 : 0, YI.skin, YI.accessory, YI.bag, YI.book, YI.crate, YI.dead, void 0 === dI ? 0 : dI, void 0 === AI ? 0 : AI.substring(AI.length - 50), aT, kI.newToken]),
               kI.newToken = void 0,
               e.timeout_handler = setTimeout(e.timeout, IT.TIMEOUT_TIME)
           }
           ,
           this.sendJson = function(e) {
               "DEV" == window.PACKET_MODE ? this.socket.send(JSON.stringify(e)) : this.socket.send(window.UI8Wrap.encode(e))
           }
           ,
           this.socket.onopen = function() {
               clearTimeout(e.timeout_handler),
               kI.newToken = kI.newToken || s.getURLData("token"),
               e.sendJson([YI.nickname.input.value, screen.width + 200, screen.height + 200, window.AppData.VERSION, kI.token + "g", kI.token_id, kI.reconnect.enabled ? 1 : 0, YI.skin, YI.accessory, YI.bag, YI.book, YI.crate, YI.dead, void 0 === dI ? 0 : dI, void 0 === AI ? 0 : AI, aT, kI.newToken]),
               kI.newToken = void 0,
               e.timeout_handler = setTimeout(e.timeout, IT.TIMEOUT_TIME)
           }
           ,
           this.timeout_handler = setTimeout(e.timeout, IT.TIMEOUT_TIME)
       }
   }
   ;
   var ET = {
       DAY: 48e4,
       WITHOUT_BAG: 10,
       WITH_BAG: 16,
       BAG_SIZE: 6,
       GHOST_DELAY: 60,
       TOP: 1,
       BOTTOM: 2,
       LEFT: 4,
       RIGHT: 8,
       ROTATE: 10,
       DIST_CHEST: 100,
       DIST_FURNACE: 100,
       DIST_WINDMILL: 100,
       DIST_WELL: 100,
       DIST_BREAD_OVEN: 100,
       DIST_SIGN: 100,
       DIST_TOTEM: 100,
       DIST_SIGN: 100,
       DIST_RESURRECTION: 100,
       DIST_EXTRACTOR_MACHINE: 100,
       MODE_PVP: 0,
       MODE_HUNGER_GAMES: 1,
       MODE_ZOMBIES: 2,
       MODE_VAMPIRES: 3,
       MODE_LEGACY: 4,
       MODE_BR: 5,
       MODE_COMMUNITY: 6,
       MODE_EXPERIMENTAL: 7,
       ZOMBIE_SKIN: 0,
       VAMPIRE_SKIN: 0,
       ROBOT_SKIN: 30,
       GHOST: 2,
       GHOST_DELAY: 6e4,
       WT1SY: 0,
       LWT1SY: 0,
       WT1EY: 50,
       WT2SY: 0,
       LWT2SY: 40,
       WT2EY: 39,
       LWT2: 830,
       FLOAM_X: 25,
       FLOAM_Y: 8,
       W1SX: 0,
       LW1SX: 0,
       W1EX: 200,
       W2SX: 0,
       LW2SX: 250,
       W2EX: 150,
       W3SX: 0,
       LW3SX: 350,
       W3EX: 100,
       LSANDX: 700,
       SEED: 39879
   }
     , _T = [];
   for (Z = 0; Z < 500; Z++)
       _T[Z] = 0;
   _T[SPRITE.SUPER_DIVING_SUIT] = 1,
   _T[SPRITE.SWORD_WOOD] = 1,
   _T[SPRITE.SWORD] = 1,
   _T[SPRITE.SWORD_GOLD] = 1,
   _T[SPRITE.SWORD_DIAMOND] = 1,
   _T[SPRITE.SWORD_AMETHYST] = 1,
   _T[SPRITE.REIDITE_SWORD] = 1,
   _T[SPRITE.PIRATE_SWORD] = 1,
   _T[SPRITE.DRAGON_SWORD] = 1,
   _T[SPRITE.LAVA_SWORD] = 1,
   _T[SPRITE.SPEAR] = 1,
   _T[SPRITE.GOLD_SPEAR] = 1,
   _T[SPRITE.DIAMOND_SPEAR] = 1,
   _T[SPRITE.AMETHYST_SPEAR] = 1,
   _T[SPRITE.REIDITE_SPEAR] = 1,
   _T[SPRITE.DRAGON_SPEAR] = 1,
   _T[SPRITE.LAVA_SPEAR] = 1,
   _T[SPRITE.WOOD_SPEAR] = 1,
   _T[SPRITE.CRAB_SPEAR] = 1;
   var uT = [{
       time: 288e4
   }, {
       time: 144e4
   }, {
       time: 192e4
   }, {
       time: 144e4
   }, {
       time: 288e4
   }, {
       time: 24e5
   }, {
       time: 24e5
   }, {
       time: 48e5
   }, {
       time: 288e4
   }, {
       time: 336e4
   }, {
       time: 288e4
   }, {
       time: 384e4
   }, {
       time: 336e4
   }]
     , hT = {
       PLAYERS: 0,
       FIRE: 1,
       WORKBENCH: 2,
       SEED: 3,
       WALL: 4,
       SPIKE: 5,
       BIG_FIRE: 6,
       STONE_WALL: 7,
       GOLD_WALL: 8,
       DIAMOND_WALL: 9,
       WOOD_DOOR: 10,
       CHEST: 11,
       STONE_SPIKE: 12,
       GOLD_SPIKE: 13,
       DIAMOND_SPIKE: 14,
       STONE_DOOR: 15,
       GOLD_DOOR: 16,
       DIAMOND_DOOR: 17,
       FURNACE: 18,
       AMETHYST_WALL: 19,
       AMETHYST_SPIKE: 20,
       AMETHYST_DOOR: 21,
       RESURRECTION: 22,
       EMERALD_MACHINE: 23,
       EXTRACTOR_MACHINE_STONE: 24,
       EXTRACTOR_MACHINE_GOLD: 25,
       EXTRACTOR_MACHINE_DIAMOND: 26,
       EXTRACTOR_MACHINE_AMETHYST: 27,
       EXTRACTOR_MACHINE_REIDITE: 28,
       TOTEM: 29,
       BRIDGE: 30,
       WHEAT_SEED: 31,
       WINDMILL: 32,
       PLOT: 33,
       BREAD_OVEN: 34,
       WELL: 35,
       SIGN: 36,
       PUMPKIN_SEED: 37,
       ROOF: 38,
       GARLIC_SEED: 39,
       THORNBUSH_SEED: 40,
       BED: 41,
       GARLAND: 42,
       TOMATO_SEED: 43,
       CARROT_SEED: 44,
       WOOD_DOOR_SPIKE: 45,
       STONE_DOOR_SPIKE: 46,
       GOLD_DOOR_SPIKE: 47,
       DIAMOND_DOOR_SPIKE: 48,
       AMETHYST_DOOR_SPIKE: 49,
       REIDITE_WALL: 50,
       REIDITE_DOOR: 51,
       REIDITE_SPIKE: 52,
       REIDITE_DOOR_SPIKE: 53,
       WATERMELON_SEED: 54,
       ALOE_VERA_SEED: 55,
       WOOD_TOWER: 56,
       WOLF: 60,
       SPIDER: 61,
       FOX: 62,
       BEAR: 63,
       DRAGON: 64,
       PIRANHA: 65,
       KRAKEN: 66,
       CRAB: 67,
       FLAME: 68,
       LAVA_DRAGON: 69,
       BOAR: 70,
       CRAB_BOSS: 71,
       BABY_DRAGON: 72,
       BABY_LAVA: 73,
       HAWK: 74,
       VULTURE: 75,
       SAND_WORM: 76,
       BABY_MAMMOTH: 77,
       MAMMOTH: 78,
       WHEAT_MOB: 79,
       RABBIT: 80,
       TREASURE_CHEST: 81,
       DEAD_BOX: 82,
       PUMPKIN_MOB: 83,
       GARLIC_MOB: 84,
       THORNBUSH_MOB: 85,
       CRATE: 86,
       GIFT: 87,
       PENGUIN: 88,
       ALOE_VERA_MOB: 89,
       FIREFLY: 90,
       SPELL: 91,
       FRUIT: 100
   }
     , RT = [[hT.EXTRACTOR_MACHINE_STONE, INV.STONE], [hT.EXTRACTOR_MACHINE_GOLD, INV.GOLD], [hT.EXTRACTOR_MACHINE_DIAMOND, INV.DIAMOND], [hT.EXTRACTOR_MACHINE_AMETHYST, INV.AMETHYST], [hT.EXTRACTOR_MACHINE_REIDITE, INV.REIDITE]];
   function AT() {
       this.nickname = "",
       this.skin = 0,
       this.accessory = 0,
       this.bag = 0,
       this.baglook = 0,
       this.book = 0,
       this.crate = 0,
       this.dead = 0,
       this.level = 0,
       this.label = null,
       this.label_winter = null,
       this.ldb_label = null,
       this.alive = !1,
       this.score = 0
   }
   function dT(e, i, t, r, n, o, a, T, I, E) {
       switch (this.type = e,
       this.pid = i,
       this.id = t,
       this.x = r,
       this.y = n,
       this.angle = o,
       this.nangle = o,
       this.action = a,
       this.info = T,
       this.extra = E,
       this.r = {
           x: r,
           y: n
       },
       this.speed = I,
       UI && (this.uid = i * UI.max_units + t),
       e) {
       case hT.PLAYERS:
           this.player = UI.players[this.pid],
           this.skin = this.player.skin,
           this.baglook = this.player.baglook,
           this.book = this.player.book,
           this.accessory = this.player.accessory,
           this.dist_forest = -1e6,
           this.dist_lava = -1e6,
           this.dist_winter = -1e6,
           this.dist_desert = -1e6,
           this.dist_water = -1e6,
           this.dist_sand = -1e6,
           this.dist_dragon = -1e6,
           this.zombie = UI.mode === ET.MODE_ZOMBIES && this.skin === ET.ZOMBIE_SKIN,
           this.vampire = UI.mode === ET.MODE_VAMPIRES && this.skin === ET.VAMPIRE_SKIN,
           this.superzombie = !(!this.zombie || "  " !== this.player.nickname),
           this.foot = [],
           this.tower = 0,
           this.move_effect = !0,
           this.id_foot = 0,
           this.fly = 0,
           this.swim = [],
           this.r = {
               x: r,
               y: n
           },
           this.draw = Wa,
           this.draw_vehicle = wa,
           this.vehicle_fx1 = 0,
           this.vehicle_fx2 = 0,
           this.vehicle_fx3 = 0,
           this.vehicle_fx4 = new s.LinearAnimation(!1,0,0,-Math.PI / 6,.5,1),
           this.vehicle_fx5 = 0,
           this.tower_fx = 0,
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3),
           this.heal = new s.LinearAnimation(!1,.6,.6,0,5,3),
           this.freeze = new s.LinearAnimation(!1,.6,.6,0,5,3),
           this.starve = new s.LinearAnimation(!1,.6,.6,0,5,3),
           this.idle = new s.LinearAnimation(!0,0,2.25,-1.5,3.75,7.5),
           this.walk = new s.LinearAnimation(!0,0,7.5,-3,22.5,33.75),
           this.attack = new s.LinearAnimation(!1,0,0,-Math.PI / 3,6,9),
           this.slow_attack = 0,
           this.web = new s.LinearAnimation(!1,.6,.6,0,1,3),
           this.move_head = this.superzombie ? new s.LinearAnimation(!0,0,2.25,-1.5,2.75,5.5) : 0,
           this.angle_init = 0,
           this.text_ease = 0,
           this.text_effect = [],
           this.text_move = [],
           this.text = [],
           this.label = [],
           this.draw_text = Fa,
           this.hand = !0,
           this.right = -1,
           this.vehicle = -1,
           this.action = sT.IDLE,
           this.collide = !1,
           this.clothe = 0,
           this.ghost = !1,
           this.bubbles = [],
           this.bag = 0,
           this.sid = -1,
           this.update = function(e) {
               32768 & this.info ? (this.collide = !0,
               this.info = -32769 & this.info) : this.collide = !1,
               16384 & this.info ? (this.info = -16385 & this.info,
               this.bag = 1) : this.bag = 0,
               this.clothe = Math.floor(this.info / 128),
               this.info -= 128 * this.clothe,
               this.info === INV.HAND || this.superzombie ? this.right = -1 : this.right = this.info,
               this.tower = UI.find_tower(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100)),
               this.vehicle = 255 & this.extra,
               this.right === ET.GHOST ? this.ghost = !0 : this.ghost = !1,
               _T[this.right] ? this.weapon = !0 : this.weapon = !1,
               e & sT.WEB ? (this.web.o = !1,
               this.web.v = .6) : e & sT.COLD ? (this.freeze.o = !1,
               this.freeze.v = .6) : e & sT.HEAL && (this.heal.o = !1,
               this.heal.v = .6),
               e & sT.HUNGER && (this.starve.o = !1,
               this.starve.v = .6),
               e & sT.HURT && (this.hit.o = !1,
               this.hit.v = .6),
               e & sT.ATTACK && (this.slow_attack = IT.SLOW_ATTACK,
               JI.run && -1 !== this.sid && JI.players[this.sid].swing(tI[this.right]))
           }
           ,
           this.update();
           break;
       case hT.EMERALD_MACHINE:
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.draw_bg = Ga,
           this.draw_fg = Da,
           this.halo = new s.LinearAnimation(!1,1,1.23,1.18,.01,.01),
           this.rotate1 = 0,
           this.rotate2 = 0,
           this.draw_life = fo;
           break;
       case hT.RESURRECTION:
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.draw_bg = La,
           this.draw_fg = Ma,
           this.halo = new s.LinearAnimation(!1,1,1.23,1.18,.01,.01),
           this.rotate1 = 0,
           this.rotate2 = 0;
           break;
       case hT.FIRE:
       case hT.BIG_FIRE:
           this.draw_bg = Na,
           this.draw_fg = Va,
           this.fire = new s.LinearAnimation(!1,1,1.03,.98,.3,.3),
           this.ground = new s.LinearAnimation(!1,1,1.23,1.18,.01,.01),
           this.halo = new s.LinearAnimation(!1,1,1.23,1.18,.01,.01),
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           };
           break;
       case hT.TOMATO_SEED:
           this.draw_bg = Ra,
           this.draw_fg = Aa,
           this.ground = new s.LinearAnimation(!1,.9,1.05,.9,.2,.2),
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.fruits = [];
           for (var _ = 0; _ < 3; _++)
               this.fruits.push({
                   draw: ra,
                   breath: new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2)
               });
           this.fruits[0].x = this.x - 16.5,
           this.fruits[0].y = this.y - 15.5,
           this.fruits[0].angle = this.angle,
           this.fruits[1].x = this.x + 36,
           this.fruits[1].y = this.y + 17,
           this.fruits[1].angle = this.angle,
           this.fruits[2].x = this.x - 18.5,
           this.fruits[2].y = this.y + 39,
           this.fruits[2].angle = this.angle;
           break;
       case hT.SEED:
           this.draw_bg = ua,
           this.draw_fg = ha,
           this.ground = new s.LinearAnimation(!1,.9,1.05,.9,.2,.2),
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.fruits = [];
           for (_ = 0; _ < 3; _++)
               this.fruits.push({
                   draw: na,
                   breath: new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2)
               });
           this.fruits[0].x = this.x - 16.5,
           this.fruits[0].y = this.y - 15.5,
           this.fruits[1].x = this.x - 5.5,
           this.fruits[1].y = this.y + 7.5,
           this.fruits[2].x = this.x + 18,
           this.fruits[2].y = this.y - 5;
           break;
       case hT.BABY_MAMMOTH:
           this.draw = jo,
           this.breath = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.BOAR:
           this.draw = Zo,
           this.breath = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.CRAB_BOSS:
           this.draw = Qo,
           this.breath = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.breathl = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.breathr = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3),
           this.heal = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.CRAB:
           this.draw = $o,
           this.breath = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.breathl = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.breathr = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3),
           this.heal = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.FLAME:
           this.draw = ta,
           this.breath = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.FIREFLY:
           this.draw = ia,
           this.breath = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.5,.5),
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.SPELL:
           this.spell = 15 & this.info,
           this.fly = 1 & this.extra,
           this.born = 0,
           this.x = this.info,
           this.y = this.extra,
           this.draw = ea,
           this.breath = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.6,.6);
           break;
       case hT.RABBIT:
       case hT.WOLF:
       case hT.SPIDER:
       case hT.FOX:
       case hT.BEAR:
       case hT.MAMMOTH:
       case hT.PIRANHA:
       case hT.KRAKEN:
       case hT.PENGUIN:
           this.draw = ia,
           this.breath = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.SIGN:
           this.draw = Ca,
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           };
           break;
       case hT.BREAD_OVEN:
           this.draw_fg = la,
           this.draw = ga,
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.up = new s.LinearAnimation(!1,1,1.03,.98,.1,.1),
           this.smog = [];
           break;
       case hT.GIFT:
           this.angle = Math.random() * Math.PI / 2;
       case hT.CRATE:
       case hT.DEAD_BOX:
           this.draw = Xo,
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.TREASURE_CHEST:
           this.draw = qo,
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.LAVA_DRAGON:
           this.scale = 1,
           this.draw = xo,
           this.breath = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.rotate = new s.LinearAnimation(!1,0,0,-Math.PI / 6,.5,1),
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.SAND_WORM:
           this.dig = 0,
           this.ground = [],
           this.groundTimer = 0,
           this.draw_ground = Ko,
           this.draw = Wo,
           this.breath = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.rotate = new s.LinearAnimation(!1,0,0,-Math.PI / 6,.5,1),
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.VULTURE:
           this.x = this.info,
           this.y = this.extra,
           this.scale = 1,
           this._alpha = 0,
           this.draw = Yo,
           this.breath = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.rotate = new s.LinearAnimation(!1,0,0,-Math.PI / 6,.5,1),
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.HAWK:
           this.x = this.info,
           this.y = this.extra,
           this.scale = 1,
           this._alpha = 0,
           this.draw = Uo,
           this.breath = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.rotate = new s.LinearAnimation(!1,0,0,-Math.PI / 6,.5,1),
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.BABY_LAVA:
           this.scale = 1,
           this.draw = ko,
           this.breath = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.rotate = new s.LinearAnimation(!1,0,0,-Math.PI / 6,.5,1),
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.BABY_DRAGON:
           this.scale = 1,
           this.draw = Fo,
           this.breath = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.rotate = new s.LinearAnimation(!1,0,0,-Math.PI / 6,.5,1),
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.DRAGON:
           this.scale = 1,
           this.draw = Jo,
           this.breath = new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2),
           this.rotate = new s.LinearAnimation(!1,0,0,-Math.PI / 6,.5,1),
           this.hit = new s.LinearAnimation(!1,.6,.6,0,5,3);
           break;
       case hT.FRUIT:
           this.fruits = [];
           for (_ = 0; _ < 5; _++)
               this.fruits.push({
                   draw: na,
                   breath: new s.LinearAnimation(!1,.9 + .15 * Math.random(),1.05,.9,.2,.2)
               });
           switch (this.id % 3) {
           case 0:
               this.fruits[0].x = this.x - 20.5,
               this.fruits[0].y = this.y - 22.5,
               this.fruits[1].x = this.x - 35.5,
               this.fruits[1].y = this.y + 7.5,
               this.fruits[2].x = this.x + 7.5,
               this.fruits[2].y = this.y - 30,
               this.fruits[3].x = this.x + 22.5,
               this.fruits[3].y = this.y,
               this.fruits[4].x = this.x - 7.5,
               this.fruits[4].y = this.y + 14.5;
               break;
           case 1:
               this.fruits[0].x = this.x - 30.5,
               this.fruits[0].y = this.y - 22.5,
               this.fruits[1].x = this.x - 15.5,
               this.fruits[1].y = this.y + 7.5,
               this.fruits[2].x = this.x + 15.5,
               this.fruits[2].y = this.y - 30,
               this.fruits[3].x = this.x + 12.5,
               this.fruits[3].y = this.y + 5,
               this.fruits[4].x = this.x - 40.5,
               this.fruits[4].y = this.y + 14.5;
               break;
           case 2:
               this.fruits[0].x = this.x - 20.5,
               this.fruits[0].y = this.y - 20.5,
               this.fruits[1].x = this.x - 35.5,
               this.fruits[1].y = this.y + 15.5,
               this.fruits[2].x = this.x + 7.5,
               this.fruits[2].y = this.y - 17,
               this.fruits[3].x = this.x + 22.5,
               this.fruits[3].y = this.y + 5,
               this.fruits[4].x = this.x - 7.5,
               this.fruits[4].y = this.y + 1.5
           }
           break;
       case hT.WHEAT_SEED:
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.draw = _a,
           this.ground = new s.LinearAnimation(!1,.9,1.05,.9,.2,.2),
           this.wind = new s.LinearAnimation(!1,0,Math.PI / 30,-Math.PI / 30,.06,.06);
           break;
       case hT.THORNBUSH_SEED:
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.draw = oa,
           this.ground = new s.LinearAnimation(!1,.9,1.05,.9,.2,.2);
           break;
       case hT.GARLIC_SEED:
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.draw = aa,
           this.ground = new s.LinearAnimation(!1,.9,1.05,.9,.2,.2);
           break;
       case hT.CARROT_SEED:
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.draw = Ia,
           this.ground = new s.LinearAnimation(!1,.9,1.05,.9,.2,.2);
           break;
       case hT.ALOE_VERA_SEED:
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.draw = sa,
           this.ground = new s.LinearAnimation(!1,.9,1.05,.9,.2,.2);
           break;
       case hT.WATERMELON_SEED:
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.draw = Ta,
           this.ground = new s.LinearAnimation(!1,.9,1.05,.9,.2,.2);
           break;
       case hT.PUMPKIN_SEED:
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.draw = Ea,
           this.ground = new s.LinearAnimation(!1,.9,1.05,.9,.2,.2);
           break;
       case hT.EXTRACTOR_MACHINE_STONE:
           this.draw = Oa,
           this.rotate = 0,
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           };
           break;
       case hT.EXTRACTOR_MACHINE_GOLD:
           this.draw = pa,
           this.rotate = 0,
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           };
           break;
       case hT.EXTRACTOR_MACHINE_DIAMOND:
           this.draw = ca,
           this.rotate = 0,
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           };
           break;
       case hT.EXTRACTOR_MACHINE_AMETHYST:
           this.draw = va,
           this.rotate = 0,
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           };
           break;
       case hT.EXTRACTOR_MACHINE_REIDITE:
           this.draw = Pa,
           this.rotate = 0,
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           };
           break;
       case hT.WINDMILL:
           this.draw_bg = ma,
           this.draw_fg = ba,
           this.rotate = 0,
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           };
           break;
       case hT.ROOF:
           this.draw = Vo,
           this.j = Math.floor(this.x / 100),
           this.i = Math.floor(this.y / 100),
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.opacity = 1,
           this.draw_life = Lo;
           break;
       case hT.GARLAND:
           this.draw = zo,
           this.halo = new s.LinearAnimation(!1,1,1.15,1,.3,.3),
           this.color = 0,
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           };
           break;
       case hT.PLOT:
       case hT.WORKBENCH:
       case hT.WOOD_TOWER:
       case hT.WELL:
       case hT.TOTEM:
           this.draw = yo,
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           };
           break;
       case hT.BRIDGE:
           this.draw = yo,
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.draw_life = Lo;
           break;
       case hT.WALL:
       case hT.STONE_WALL:
       case hT.GOLD_WALL:
       case hT.DIAMOND_WALL:
       case hT.AMETHYST_WALL:
       case hT.REIDITE_WALL:
       case hT.SPIKE:
       case hT.STONE_SPIKE:
       case hT.GOLD_SPIKE:
       case hT.DIAMOND_SPIKE:
       case hT.AMETHYST_SPIKE:
       case hT.REIDITE_SPIKE:
           this.draw = yo,
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.draw_life = fo;
           break;
       case hT.BED:
           this.draw = Ho,
           this.opacity = 1,
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           };
           var u = this.angle % (Math.PI / 2);
           u < Math.PI / 4 ? this.angle -= u : this.angle += Math.PI / 2 - u;
           break;
       case hT.WHEAT_MOB:
           this.draw = Go,
           this.angle = Math.random() * Math.PI * 2;
           break;
       case hT.ALOE_VERA_MOB:
           this.draw = Mo,
           this.angle = Math.random() * Math.PI * 2;
           break;
       case hT.PUMPKIN_MOB:
           this.draw = Do,
           this.angle = Math.random() * Math.PI * 2;
           break;
       case hT.GARLIC_MOB:
           this.draw = mo,
           this.angle = Math.random() * Math.PI * 2;
           break;
       case hT.THORNBUSH_MOB:
           this.draw = Po,
           this.angle = Math.random() * Math.PI * 2;
           break;
       case hT.CHEST:
           this.update = function(e) {
               this.lock = this.info > 8e3 ? 1 : 0,
               this.info = this.info > 8e3 ? this.info - 8192 : this.info,
               this.action = e
           }
           ,
           this.draw = vo,
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.lock = 0,
           this.update(this.action);
           break;
       case hT.WOOD_DOOR_SPIKE:
       case hT.STONE_DOOR_SPIKE:
       case hT.GOLD_DOOR_SPIKE:
       case hT.DIAMOND_DOOR_SPIKE:
       case hT.AMETHYST_DOOR_SPIKE:
       case hT.REIDITE_DOOR_SPIKE:
       case hT.WOOD_DOOR:
       case hT.STONE_DOOR:
       case hT.GOLD_DOOR:
       case hT.DIAMOND_DOOR:
       case hT.AMETHYST_DOOR:
       case hT.REIDITE_DOOR:
           this.draw = co,
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.draw_life = fo;
           break;
       case hT.FURNACE:
           this.draw_bg = Sa,
           this.draw = da,
           this.draw_fg = fa,
           this.ground = new s.LinearAnimation(!1,1,1.23,1.18,.02,.02),
           this.halo = new s.LinearAnimation(!1,1,1.23,1.18,.04,.04),
           this.hit = {
               anim: new s.LinearAnimation(!1,1,1,0,10,10),
               update: !1,
               angle: 0
           },
           this.update = function(e) {
               this.action = e
           }
       }
   }
   function ST(e) {
       function i(e, i, t, r, n) {
           for (var o = i + Math.floor(UI.RNG.get() * r), a = t + Math.floor(UI.RNG.get() * r), T = 10 + Math.floor(UI.RNG.get() * (UI.nw - o - 20)), I = 10 + Math.floor(UI.RNG.get() * (UI.nh - a - 20)), E = T + o, _ = I + a, u = 0; u < UI.biomes.length; u++) {
               var h = UI.biomes[u];
               if (1 === s.intersect_aabb(T, E, I, _, h.x1 / 100 - n, h.x2 / 100 + n, h.y1 / 100 - n, h.y2 / 100 + n))
                   return 0
           }
           return UI.biomes.push(new UI.Biome(e,T,I,o,a,15)),
           1
       }
       function t(e, i, t) {
           for (var r = i, n = t; n < UI.nh; n++) {
               for (var o = i; o < UI.nw && (n === t && (r = Math.max(o, r)),
               !(o > r)) && 1 !== e[n][o]; o++)
                   e[n][o] = 1;
               if (o < r)
                   break
           }
           UI.biomes.push(new UI.Biome(UI.BIOME_SEA,i,t,r - i + 1,n - t,15))
       }
       function n(e, t, r, n, o) {
           for (var a = 0; a < o && 1 !== i(e, t, r, n, 8); a++)
               ;
           return a === o ? 0 : 1
       }
       function a(e, i, t, r, n, o, a, s) {
           for (var T = Math.floor(a / 2), I = Math.max(1, Math.floor(a / 2)), E = Math.floor(s / 2), _ = Math.max(1, Math.floor(s / 2)), u = 0; u < t; u++) {
               for (var h = e - E; h < e + _; h++)
                   for (var R = i - T; R < i + I; R++)
                       1 === O(h, R, "wtb", 0, 1) && o.push([h, R, 1]);
               e += r,
               i += n
           }
       }
       function T(e, i) {
           for (var t = UI.biomes[e], r = Math.floor(t.y1 / 100), n = Math.floor(t.x1 / 100), o = Math.floor(t.h / 100), s = n + (A = Math.floor(t.w / 100)), T = 2, I = o, E = r, _ = n + 10 + Math.floor((A - 20) * UI.RNG.get()), u = _ - 4; u < _ + 4; u++)
               O(r - 1, u, "wtb", 0, 1);
           for (; I > 0; )
               if (2 !== T)
                   if (I < 10)
                       for (S = 1; I > 0; S++)
                           a(E, _, 1, 1, 0, i, S, 1),
                           I -= 1,
                           E += 1;
                   else if (1 !== T) {
                       T = 1;
                       var h = Math.floor(1 + 2 * UI.RNG.get())
                         , R = 1 + Math.floor(4 * UI.RNG.get());
                       _ < n + 16 ? (a(E, _, h, 0, 1, i, R, R),
                       _ += h) : _ > s - 16 ? (a(E, _, h, 0, -1, i, R, R),
                       _ -= h) : UI.RNG.get() > .5 ? (a(E, _, h, 0, 1, i, R, R),
                       _ += h) : (a(E, _, h, 0, -1, i, R, R),
                       _ -= h)
                   } else {
                       var A, d = Math.min(I, Math.floor(1 + 4 * UI.RNG.get()));
                       a(E, _, d, 1, 0, i, A = 1 + Math.floor(4 * UI.RNG.get()), A),
                       T = 0,
                       I -= d,
                       E += d
                   }
               else {
                   for (var S = 10; S > 1; S--)
                       a(E, _, 1, 1, 0, i, S, 1),
                       I -= 1,
                       E += 1;
                   T = 0
               }
           for (u = _ - 1; u < _ + 2; u++)
               O(E, u, "wtb", 0, 1)
       }
       function I(e, i) {
           for (var t = 0; t < i.length; t++) {
               g(i[t][0], i[t][1], e, i[t][2])
           }
       }
       function E(e) {
           for (var i = 0; i < 3; i++)
               S(e, "s", i, 15);
           for (i = 0; i < 3; i++)
               S(e, "a", i, 1);
           for (i = 0; i < 3; i++)
               S(e, "d", i, 1);
           d(e)
       }
       function _(e, i) {
           for (var t = 0; t < 3; t++)
               S(e, "s", t, Math.floor(18 * i));
           for (t = 0; t < 3; t++)
               S(e, "f", t, Math.floor(24 * i));
           for (t = 0; t < 3; t++)
               S(e, "d", t, Math.max(1, Math.floor(2 * i)), .3);
           for (t = 0; t < 3; t++)
               S(e, "g", t, Math.floor(6 * i));
           d(e)
       }
       function u(e, i) {
           for (var t = 0; t < 3; t++)
               S(e, "s", t, Math.floor(12 * i));
           for (t = 0; t < 3; t++)
               S(e, "m", t, Math.max(1, Math.floor(1 * i)), .2);
           S(e, "c", 0, Math.floor(36 * i));
           var r = [];
           !function(e, i) {
               for (var t = UI.biomes[e], r = Math.floor(t.y1 / 100), n = Math.floor(t.x1 / 100), o = Math.floor(t.h / 100), a = Math.floor(t.w / 100), s = r + Math.floor(o / 2), T = n + Math.floor(a / 2), I = 0; I < 3; I++)
                   O(E = Math.floor(s - 3 + 6 * UI.RNG.get()), _ = Math.floor(T - 3 + 6 * UI.RNG.get()), "plm", I, 1);
               for (I = 0; I < 80; I++) {
                   var E, _;
                   1 === O(E = Math.floor(s - 3 + 6 * UI.RNG.get()), _ = Math.floor(T - 3 + 6 * UI.RNG.get()), "wtb", 0, 1) && i.push([E, _, 0])
               }
           }(e, r),
           I(e, r),
           r = []
       }
       function h(e, i) {
           !function(e, i) {
               for (var t = UI.biomes[i], r = 0, n = 0; r < e && n < 1e4; n++) {
                   var o = t.y1 + UI.RNG.get() * t.h
                     , a = t.x1 + UI.RNG.get() * t.w
                     , s = Math.floor(o / 100)
                     , T = Math.floor(a / 100);
                   if (!(UI.dist_from_biome(i, 100 * T + 50, 100 * s + 50) < 600)) {
                       for (var I = 1, E = s - 4; 1 === I && E <= s + 4; E++)
                           for (var _ = T - 4; 1 === I && _ <= T + 4; _++)
                               void 0 !== wI.tiles[E][_] && (I = 0);
                       0 !== I && (O(s, T, "la", r % 6, 0),
                       r++)
                   }
               }
           }(80 * i, e);
           for (var t = 0; t < 3; t++)
               S(e, "s", t, Math.floor(12 * i));
           for (t = 0; t < 3; t++)
               S(e, "g", t, Math.floor(6 * i));
           for (t = 0; t < 3; t++)
               S(e, "re", t, Math.max(1, Math.floor(1 * i)), .2);
           for (t = 0; t < 3; t++)
               S(e, "a", t, Math.max(1, Math.floor(2 * i)));
           d(e)
       }
       function R(e, i) {
           for (var t = 0; t < 6; t++)
               S(e, "t", t, Math.floor(80 * i));
           for (t = 0; t < 4; t++)
               S(e, "b", t, Math.floor(80 * i));
           for (t = 0; t < 3; t++)
               S(e, "s", t, Math.floor(50 * i));
           var r = [];
           for (t = 0; t < 6; t++)
               T(e, r);
           I(e, r),
           r = [],
           S(e, "p", 0, Math.floor(28 * i));
           for (t = 0; t < 3; t++)
               S(e, "g", t, Math.floor(7 * i));
           for (t = 0; t < 3; t++)
               S(e, "d", t, Math.floor(2 * i));
           for (t = 0; t < 3; t++)
               S(e, "a", t, Math.floor(1 * i));
           for (t = 0; t < 3; t++)
               S(e, "m", t, Math.floor(1 * i));
           S(e, "a", 0, Math.floor(1 * i)),
           d(e)
       }
       function A(e, i) {
           for (var t = 0; t < 6; t++)
               S(e, "t", t, Math.floor(20 * i));
           for (t = 0; t < 4; t++)
               S(e, "b", t, Math.floor(20 * i));
           for (t = 0; t < 3; t++)
               S(e, "s", t, Math.floor(20 * i));
           var r = [];
           T(e, r),
           I(e, r),
           r = [],
           S(e, "p", 0, Math.floor(24 * i));
           for (t = 0; t < 3; t++)
               S(e, "g", t, Math.floor(5 * i));
           if (UI.mode === ET.MODE_ZOMBIES) {
               for (t = 0; t < 3; t++)
                   S(e, "d", t, Math.floor(3 * i));
               for (t = 0; t < 3; t++)
                   S(e, "a", t, Math.floor(2 * i))
           }
           d(e)
       }
       function d(e) {
           var i = UI.biomes[e];
           O(-3 + Math.floor(i.y2 / 100), -1 + Math.floor(i.x2 / 100), "s", 0, 0),
           O(3 + Math.floor(i.y1 / 100), -1 + Math.floor(i.x2 / 100), "s", 0, 0),
           O(-3 + Math.floor(i.y2 / 100), 1 + Math.floor(i.x1 / 100), "s", 0, 0),
           O(3 + Math.floor(i.y1 / 100), 1 + Math.floor(i.x1 / 100), "s", 0, 0)
       }
       function S(e, i, t, r, n) {
           var o = UI.biomes[e]
             , a = Math.floor(o.x1 / 100)
             , s = Math.floor(o.y1 / 100)
             , T = Math.floor(o.w / 100)
             , I = Math.floor(o.h / 100);
           void 0 !== n && (n = 1 - n,
           a += Math.floor(T * n / 2),
           s += Math.floor(I * n / 2),
           T -= Math.floor(T * n),
           I -= Math.floor(I * n));
           for (var E = wI.tiles, _ = 0, u = 0; _ < r && !(u > 5e4); u++) {
               var h, R = s + Math.floor(UI.RNG.get() * I), A = a + Math.floor(UI.RNG.get() * T);
               UI.dist_from_biome(e, 100 * A + 50, 100 * R + 50) < 400 || void 0 !== (h = E[R][A + 1]) && void 0 !== h[i] && void 0 !== h[i][t] || void 0 !== (h = E[R][A - 1]) && void 0 !== h[i] && void 0 !== h[i][t] || void 0 !== (h = E[R + 1][A]) && void 0 !== h[i] && void 0 !== h[i][t] || void 0 !== (h = E[R - 1][A]) && void 0 !== h[i] && void 0 !== h[i][t] || void 0 !== (h = E[R + 1][A - 1]) && void 0 !== h[i] && void 0 !== h[i][t] || void 0 !== (h = E[R - 1][A + 1]) && void 0 !== h[i] && void 0 !== h[i][t] || void 0 !== (h = E[R + 1][A + 1]) && void 0 !== h[i] && void 0 !== h[i][t] || void 0 !== (h = E[R - 1][A - 1]) && void 0 !== h[i] && void 0 !== h[i][t] || void 0 === E[R][A] && (O(R, A, i, t, 1),
               _++)
           }
       }
       function N(e, i) {
           return e >= 0 && i >= 0 && e < UI.nh && i < UI.nw
       }
       function g(e, i, t, r) {
           if (N(e, i) && (tiles = wI.tiles,
           void 0 === tiles[e][i] && (tiles[e][i] = {}),
           void 0 === tiles[e][i].r)) {
               var n = 0;
               N(e - 1, i) && void 0 !== tiles[e - 1][i] && void 0 !== tiles[e - 1][i].wtb && (n += 2),
               N(e, i - 1) && void 0 !== tiles[e][i - 1] && void 0 !== tiles[e][i - 1].wtb && (n += 8),
               N(e, i + 1) && void 0 !== tiles[e][i + 1] && void 0 !== tiles[e][i + 1].wtb && (n += 16),
               N(e + 1, i) && void 0 !== tiles[e + 1][i] && void 0 !== tiles[e + 1][i].wtb && (n += 64),
               N(e - 1, i - 1) && 10 == (10 & n) && void 0 !== tiles[e - 1][i - 1] && void 0 !== tiles[e - 1][i - 1].wtb && (n += 1),
               N(e - 1, i + 1) && 18 == (18 & n) && void 0 !== tiles[e - 1][i + 1] && void 0 !== tiles[e - 1][i + 1].wtb && (n += 4),
               N(e + 1, i - 1) && 72 == (72 & n) && void 0 !== tiles[e + 1][i - 1] && void 0 !== tiles[e + 1][i - 1].wtb && (n += 32),
               N(e + 1, i + 1) && 80 == (80 & n) && void 0 !== tiles[e + 1][i + 1] && void 0 !== tiles[e + 1][i + 1].wtb && (n += 128),
               tiles[e][i].r = {},
               tiles[e][i].r.river = n,
               tiles[e][i].r.current = r,
               tiles[e][i].r.dist = UI.dist_from_biome(t, 100 * i + 50, 100 * e + 50) - 400,
               tiles[e][i].r.x = 100 * i + 50,
               tiles[e][i].r.y = 100 * e + 50
           }
       }
       function O(e, i, t, r, n) {
           if (!(e < 0 || i < 0 || e >= UI.nh || i >= UI.nw))
               return tiles = wI.tiles,
               void 0 === tiles[e][i] && (tiles[e][i] = {}),
               void 0 !== tiles[e][i][t] ? 0 : (tiles[e][i][t] = [],
               tiles[e][i][t][r] = [{
                   x: 100 * i + 50,
                   y: 100 * e + 50
               }],
               1 === n && oe(t, r, e, i),
               1)
       }
       function p(e, i, t) {
           if (e[i])
               for (o = 0; o < e[i].length; o++)
                   if (e[i][o])
                       for (l = 0; l < e[i][o].length; l++)
                           e[i][o][l].hit = t,
                           e[i][o][l].update = !1,
                           e[i][o][l].time = 0,
                           e[i][o][l].angle = 0
       }
       this.mode = ET.MODE_PVP,
       this.max_units = e,
       this.custom_map = 0,
       this.islands = 6,
       this.players = [],
       this.units = [],
       this.units[hT.PLAYERS] = [],
       this.units[hT.FRUIT] = [],
       this.units[hT.RABBIT] = [],
       this.units[hT.WOLF] = [],
       this.units[hT.CRAB] = [],
       this.units[hT.BOAR] = [],
       this.units[hT.BABY_MAMMOTH] = [],
       this.units[hT.CRAB_BOSS] = [],
       this.units[hT.BABY_DRAGON] = [],
       this.units[hT.BABY_LAVA] = [],
       this.units[hT.HAWK] = [],
       this.units[hT.PIRANHA] = [],
       this.units[hT.KRAKEN] = [],
       this.units[hT.FOX] = [],
       this.units[hT.PENGUIN] = [],
       this.units[hT.SPELL] = [],
       this.units[hT.FIREFLY] = [],
       this.units[hT.BEAR] = [],
       this.units[hT.MAMMOTH] = [],
       this.units[hT.DRAGON] = [],
       this.units[hT.LAVA_DRAGON] = [],
       this.units[hT.FLAME] = [],
       this.units[hT.WHEAT_MOB] = [],
       this.units[hT.ALOE_VERA_MOB] = [],
       this.units[hT.PUMPKIN_MOB] = [],
       this.units[hT.GARLIC_MOB] = [],
       this.units[hT.THORNBUSH_MOB] = [],
       this.units[hT.TREASURE_CHEST] = [],
       this.units[hT.DEAD_BOX] = [],
       this.units[hT.CRATE] = [],
       this.units[hT.BREAD_OVEN] = [],
       this.units[hT.SIGN] = [],
       this.units[hT.SPIDER] = [],
       this.units[hT.WORKBENCH] = [],
       this.units[hT.FIRE] = [],
       this.units[hT.BIG_FIRE] = [],
       this.units[hT.SEED] = [],
       this.units[hT.SPIKE] = [],
       this.units[hT.STONE_SPIKE] = [],
       this.units[hT.GOLD_SPIKE] = [],
       this.units[hT.DIAMOND_SPIKE] = [],
       this.units[hT.AMETHYST_SPIKE] = [],
       this.units[hT.REIDITE_SPIKE] = [],
       this.units[hT.WALL] = [],
       this.units[hT.STONE_WALL] = [],
       this.units[hT.GOLD_WALL] = [],
       this.units[hT.DIAMOND_WALL] = [],
       this.units[hT.AMETHYST_WALL] = [],
       this.units[hT.REIDITE_WALL] = [],
       this.units[hT.BED] = [],
       this.units[hT.WOOD_DOOR] = [],
       this.units[hT.STONE_DOOR] = [],
       this.units[hT.GOLD_DOOR] = [],
       this.units[hT.DIAMOND_DOOR] = [],
       this.units[hT.AMETHYST_DOOR] = [],
       this.units[hT.REIDITE_DOOR] = [],
       this.units[hT.WOOD_DOOR_SPIKE] = [],
       this.units[hT.STONE_DOOR_SPIKE] = [],
       this.units[hT.GOLD_DOOR_SPIKE] = [],
       this.units[hT.DIAMOND_DOOR_SPIKE] = [],
       this.units[hT.AMETHYST_DOOR_SPIKE] = [],
       this.units[hT.REIDITE_DOOR_SPIKE] = [],
       this.units[hT.FURNACE] = [],
       this.units[hT.TOTEM] = [],
       this.units[hT.WOOD_TOWER] = [],
       this.units[hT.CHEST] = [],
       this.units[hT.RESURRECTION] = [],
       this.units[hT.EMERALD_MACHINE] = [],
       this.units[hT.BRIDGE] = [],
       this.units[hT.ROOF] = [],
       this.units[hT.PLOT] = [],
       this.units[hT.WHEAT_SEED] = [],
       this.units[hT.ALOE_VERA_SEED] = [],
       this.units[hT.PUMPKIN_SEED] = [],
       this.units[hT.TOMATO_SEED] = [],
       this.units[hT.CARROT_SEED] = [],
       this.units[hT.WATERMELON_SEED] = [],
       this.units[hT.GARLIC_SEED] = [],
       this.units[hT.THORNBUSH_SEED] = [],
       this.units[hT.WINDMILL] = [],
       this.units[hT.EXTRACTOR_MACHINE_STONE] = [],
       this.units[hT.EXTRACTOR_MACHINE_GOLD] = [],
       this.units[hT.EXTRACTOR_MACHINE_DIAMOND] = [],
       this.units[hT.EXTRACTOR_MACHINE_AMETHYST] = [],
       this.units[hT.EXTRACTOR_MACHINE_REIDITE] = [],
       this.units[hT.WELL] = [],
       this.units[hT.GIFT] = [],
       this.units[hT.GARLAND] = [],
       this.fast_units = [],
       this.nw = 260,
       this.nh = 260,
       this.dw = 100,
       this.dh = 100,
       this.w = this.nw * this.dw,
       this.h = this.nh * this.dh,
       this.RNG = new r.Random,
       this.biomes = [],
       this.shade = new s.LinearAnimation(!1,0,1,0,1,1),
       this.transition = !1,
       this.BIOME = [],
       this.BIOME_FOREST = 0,
       this.BIOME_WINTER = 1,
       this.BIOME_LAVA = 2,
       this.BIOME_DRAGON = 3,
       this.BIOME_SEA = 4,
       this.BIOME_DESERT = 10,
       this.BIOME[this.BIOME_FOREST] = {
           isSand: 1,
           day: [19, 58, 43],
           night: [4, 43, 48],
           _color: ["#133a2b", "#042b30"]
       },
       this.BIOME[this.BIOME_SEA] = {
           isSand: 0,
           day: [11, 106, 132],
           night: [9, 55, 63],
           _color: ["#0B6A84", "#09373F"]
       },
       this.BIOME[this.BIOME_WINTER] = {
           isSand: 0,
           day: [235, 242, 240],
           night: [19, 97, 103],
           _color: ["#EBF2F0", "#136167"]
       },
       this.BIOME[this.BIOME_LAVA] = {
           isSand: 0,
           day: [45, 32, 23],
           night: [3, 28, 30],
           _color: ["#2D2017", "#031C1E"]
       },
       this.BIOME[this.BIOME_DRAGON] = {
           isSand: 0,
           day: [74, 74, 74],
           night: [24, 61, 60],
           _color: ["#4A4A4A", "#183D3C"]
       },
       this.BIOME[this.BIOME_DESERT] = {
           isSand: 0,
           day: [235, 216, 166],
           night: [9, 61, 56],
           _color: ["#EBD8A6", "#093D38"]
       },
       this.Biome = function(e, i, t, r, n, o) {
           this.x1 = 100 * i,
           this.y1 = 100 * t,
           this.w = 100 * r,
           this.h = 100 * n,
           this.x2 = 100 * (i + r),
           this.y2 = 100 * (t + n),
           this.t = e,
           this.v = void 0 === o ? 15 : o
       }
       ,
       this.MAX_DIST = -1e6,
       this.dist_winter = this.MAX_DIST,
       this.dist_desert = this.MAX_DIST,
       this.dist_lava = this.MAX_DIST,
       this.dist_forest = this.MAX_DIST,
       this.dist_water = this.MAX_DIST,
       this.dist_dragon = this.MAX_DIST,
       this.dist_from_biomes = function(e) {
           var i = e.r.x
             , t = e.r.y
             , r = Math.floor(t / 100)
             , n = Math.floor(i / 100);
           e.dist_winter = UI.MAX_DIST,
           e.dist_desert = UI.MAX_DIST,
           e.dist_lava = UI.MAX_DIST,
           e.dist_forest = UI.MAX_DIST,
           e.dist_dragon = UI.MAX_DIST,
           e.dist_sand = UI.MAX_DIST;
           for (var o = 0; UI.biomes[o].t !== UI.BIOME_SEA; o++)
               if (UI.biomes[o].t === UI.BIOME_FOREST) {
                   var a = UI.dist_from_biome(o, i, t);
                   e.dist_forest = Math.max(e.dist_forest, a),
                   a > 0 && 1 === UI.dist_from_sand(o, i, t) && (e.dist_sand = 1)
               } else
                   UI.biomes[o].t === UI.BIOME_WINTER ? e.dist_winter = Math.max(e.dist_winter, UI.dist_from_biome(o, i, t)) : UI.biomes[o].t === UI.BIOME_DESERT ? e.dist_desert = Math.max(e.dist_desert, UI.dist_from_biome(o, i, t)) : UI.biomes[o].t === UI.BIOME_LAVA ? e.dist_lava = Math.max(e.dist_lava, UI.dist_from_biome(o, i, t)) : UI.biomes[o].t === UI.BIOME_DRAGON && (e.dist_dragon = Math.max(e.dist_dragon, UI.dist_from_biome(o, i, t)));
           wI.tiles[r][n].iblk && (e.dist_sand = 1),
           UI.find_bridge(n, r) ? e.dist_water = e.MAX_DIST : wI.tiles[r][n].wtb || e.dist_winter < 0 && e.dist_lava < 0 && e.dist_forest < 0 && e.dist_sand < 0 && e.dist_dragon < 0 && e.dist_desert < 0 ? e.dist_water = 1 : e.dist_water = e.MAX_DIST
       }
       ,
       this.update_dist_from_biomes = function(e, i) {
           UI.dist_winter = UI.MAX_DIST,
           UI.dist_desert = UI.MAX_DIST,
           UI.dist_lava = UI.MAX_DIST,
           UI.dist_dragon = UI.MAX_DIST,
           UI.dist_forest = UI.MAX_DIST;
           for (var t = 0; UI.biomes[t].t !== UI.BIOME_SEA; t++)
               UI.biomes[t].t === UI.BIOME_FOREST ? UI.dist_forest = Math.max(UI.dist_forest, UI.dist_from_biome(t, e, i)) : UI.biomes[t].t === UI.BIOME_WINTER ? UI.dist_winter = Math.max(UI.dist_winter, UI.dist_from_biome(t, e, i)) : UI.biomes[t].t === UI.BIOME_DESERT ? UI.dist_desert = Math.max(UI.dist_desert, UI.dist_from_biome(t, e, i)) : UI.biomes[t].t === UI.BIOME_LAVA ? UI.dist_lava = Math.max(UI.dist_lava, UI.dist_from_biome(t, e, i)) : UI.biomes[t].t === UI.BIOME_DRAGON && (UI.dist_dragon = Math.max(UI.dist_dragon, UI.dist_from_biome(t, e, i)));
           UI.dist_winter < 0 && UI.dist_dragon < 0 && UI.dist_forest < 0 && UI.dist_dragon < 0 && UI.dist_desert < 0 ? UI.dist_water = 1 : UI.dist_water = UI.MAX_DIST
       }
       ,
       this.dist_from_sand = function(e, i, t) {
           var r = UI.biomes[e]
             , n = 0;
           x1 = r.x1 + 30 + (0 == (r.v & ET.LEFT) ? 150 : 0);
           var o = i - x1;
           return (r.v & ET.LEFT) > 0 && o > 0 && o < 320 && (n = 1),
           y1 = r.y1 + 250 + (0 == (r.v & ET.TOP) ? 150 : 0),
           o = t - y1,
           (r.v & ET.TOP) > 0 && o > 0 && o < 320 && (n = 1),
           x2 = r.x2 + 80 + (0 == (r.v & ET.RIGHT) ? -200 : 0),
           o = x2 - i,
           (r.v & ET.RIGHT) > 0 && o > 0 && o < 320 && (n = 1),
           y2 = r.y2 - 200 + (0 == (r.v & ET.BOTTOM) ? -200 : 0),
           o = y2 - t,
           (r.v & ET.BOTTOM) > 0 && o > 0 && o < 320 && (n = 1),
           i >= x1 && i <= x2 && t >= y1 && t <= y2 ? n : 0
       }
       ,
       this.dist_from_biome = function(e, i, t) {
           var r = UI.biomes[e];
           if (x1 = r.x1 + 30,
           y1 = r.y1 + 250,
           x2 = r.x2 + 80,
           y2 = r.y2 - 200,
           i >= x1 && i <= x2 && t >= y1 && t <= y2)
               return Math.min(i - x1, x2 - i, t - y1, y2 - t);
           var n = -1e6;
           return i - x1 < 0 ? n = Math.max(n, i - x1) : x2 - i < 0 && (n = Math.max(n, x2 - i)),
           distY = -1e6,
           (t < y1 || t > y2) && (t - y1 < 0 ? distY = Math.max(distY, t - y1) : distY = Math.max(distY, y2 - t),
           n = -1e6 !== n && -1e6 !== distY ? Math.min(n, distY) : distY),
           n
       }
       ,
       this.add_island = function(e, i, t) {
           var r = t
             , n = i;
           O(r, n, "isl", e, 1);
           for (var o = 0; o < 4; o++)
               for (var a = 0; a < 3; a++)
                   O(r - a, n - o, "iblk", 0),
                   O(r + a, n - o, "iblk", 0),
                   O(r + a, n + o, "iblk", 0),
                   O(r - a, n + o, "iblk", 0);
           if (0 === e) {
               for (o = 0; o < 2; o++)
                   O(r - o, n - 4, "iblk", 0),
                   O(r + o, n - 4, "iblk", 0),
                   O(r - o, n + 4, "iblk", 0),
                   O(r + o, n + 4, "iblk", 0);
               for (o = 0; o < 3; o++)
                   O(r - 3, n + o, "iblk", 0),
                   O(r + 3, n + o, "iblk", 0),
                   O(r - 3, n - o, "iblk", 0),
                   O(r + 3, n - o, "iblk", 0);
               O(r - 2, n - 4, "iblk", 0),
               O(r - 3, n - 3, "iblk", 0),
               O(r + 2, n + 4, "iblk", 0),
               O(r + 3, n + 3, "iblk", 0)
           } else if (1 === e) {
               for (o = 0; o < 3; o++)
                   O(r - o, n - 4, "iblk", 0),
                   O(r + o, n - 4, "iblk", 0),
                   O(r - o, n + 4, "iblk", 0),
                   O(r + o, n + 4, "iblk", 0);
               for (o = 0; o < 4; o++)
                   O(r - 3, n + o, "iblk", 0),
                   O(r + 3, n + o, "iblk", 0),
                   O(r - 3, n - o, "iblk", 0),
                   O(r + 3, n - o, "iblk", 0)
           } else if (2 === e) {
               for (o = 0; o < 2; o++)
                   O(r - o, n - 4, "iblk", 0),
                   O(r + o, n - 4, "iblk", 0),
                   O(r - o, n + 4, "iblk", 0),
                   O(r + o, n + 4, "iblk", 0);
               for (o = 0; o < 3; o++)
                   O(r - 3, n + o, "iblk", 0),
                   O(r + 3, n + o, "iblk", 0),
                   O(r - 3, n - o, "iblk", 0),
                   O(r + 3, n - o, "iblk", 0)
           }
       }
       ,
       this.add_islands = function(e) {
           for (var i = 0; i < UI.biomes.length && e > 0; i++) {
               var t = UI.biomes[i];
               if (t.t === UI.BIOME_SEA && (t.w > 1800 && t.h > 1e3)) {
                   var r = Math.floor((t.x1 + t.w / 2) / 100)
                     , n = Math.floor((t.y1 + t.h / 2) / 100);
                   UI.add_island(e % 3, r, n);
                   for (var o = 0; o < 3; o++) {
                       var a = n - 2 + Math.floor(4 * UI.RNG.get())
                         , s = r - 3 + Math.floor(6 * UI.RNG.get());
                       void 0 === wI.tiles[a][s].s && O(a, s, "plm", o);
                       a = n - 2 + Math.floor(4 * UI.RNG.get()),
                       s = r - 3 + Math.floor(6 * UI.RNG.get());
                       void 0 === wI.tiles[a][s].plm && O(a, s, "s", o)
                   }
                   a = n - 2 + Math.floor(4 * UI.RNG.get()),
                   s = r - 3 + Math.floor(6 * UI.RNG.get());
                   void 0 === wI.tiles[a][s].plm && void 0 === wI.tiles[a][s].s && O(a, s, "p", 0, 1),
                   e--
               }
           }
       }
       ,
       this.generate_world = function(e) {
           UI.RNG.init(e);
           for (var i = 0; ; ) {
               if (++i > 1e4)
                   return;
               if (UI.biomes = [],
               0 !== UI.custom_map || UI.mode !== ET.MODE_VAMPIRES && UI.mode !== ET.MODE_EXPERIMENTAL && UI.mode !== ET.MODE_PVP || (UI.custom_map = ___MAP___),
               UI.mode === ET.MODE_ZOMBIES)
                   UI.biomes.push(new UI.Biome(UI.BIOME_FOREST,2,2,80,80,15));
               else if (UI.mode === ET.MODE_LEGACY)
                   UI.biomes.push(new UI.Biome(UI.BIOME_FOREST,2,2,150,150,15));
               else if (0 !== UI.custom_map && UI.custom_map.length > 0 && UI.custom_map[0].length > 3)
                   for (var r = 0; r < UI.custom_map.length; r++) {
                       if (0 !== (b = UI.custom_map[r])[0])
                           break;
                       var o = ET.BIOME_FOREST;
                       switch (b[1]) {
                       case "FOREST":
                           o = UI.BIOME_FOREST;
                           break;
                       case "WINTER":
                           o = UI.BIOME_WINTER;
                           break;
                       case "DESERT":
                           o = UI.BIOME_DESERT;
                           break;
                       case "LAVA":
                           o = UI.BIOME_LAVA;
                           break;
                       case "DRAGON":
                           o = UI.BIOME_DRAGON
                       }
                       UI.biomes.push(new UI.Biome(o,b[2],b[3],b[4],b[5],b[6],b[7]))
                   }
               else if (0 !== UI.custom_map) {
                   for (r = 0; r < UI.custom_map.length; r++) {
                       var a = UI.custom_map[r];
                       o = ET.BIOME_FOREST;
                       switch (a[0]) {
                       case "FOREST":
                           o = UI.BIOME_FOREST;
                           break;
                       case "WINTER":
                           o = UI.BIOME_WINTER;
                           break;
                       case "DESERT":
                           o = UI.BIOME_DESERT;
                           break;
                       case "LAVA":
                           o = UI.BIOME_LAVA;
                           break;
                       case "DRAGON":
                           o = UI.BIOME_DRAGON
                       }
                       if (0 === n(o, a[1], a[2], 0, 10 * (r + 1)))
                           break
                   }
                   if (r !== UI.custom_map.length)
                       continue
               }
               break
           }
           render_minimap();
           for (var s = [], T = 0; T < UI.nh; T++) {
               s[T] = new Array(UI.nw);
               for (var d = 0; d < UI.nw; d++)
                   s[T][d] = 0
           }
           for (T = 0; T < UI.biomes.length; T++)
               for (var S = (a = UI.biomes[T]).x2 / 100, l = a.y2 / 100, N = a.x1 / 100; N <= S; N++)
                   for (var C = a.y1 / 100; C <= l; C++)
                       s[C][N] = 1;
           for (C = 0; C < UI.nh; C++)
               for (N = 0; N < UI.nw; N++)
                   0 === s[C][N] && t(s, N, C);
           wI = {
               w: UI.nw,
               h: UI.nh,
               tiles: []
           };
           for (T = 0; T < UI.nh; T++)
               wI.tiles[T] = [];
           if (0 !== UI.custom_map && UI.custom_map.length > 0 && UI.custom_map[0].length > 3)
               for (r = 0; r < UI.custom_map.length; r++) {
                   "isl" === (b = UI.custom_map[r])[1] && UI.add_island(b[2], b[3], b[4])
               }
           else
               UI.add_islands(UI.islands);
           if (0 !== UI.custom_map && UI.custom_map.length > 0 && UI.custom_map[0].length > 3) {
               var g = [];
               for (r = 0; r < UI.custom_map.length; r++) {
                   var b;
                   1 === (b = UI.custom_map[r])[0] && ("r" === b[1] ? (O(b[3], b[2], "wtb", 0, 1),
                   g.push([b[3], b[2], b[4]])) : O(b[4], b[3], b[1], b[2], b[5]))
               }
               I(0, g),
               g = []
           } else
               for (T = 0; T < UI.biomes.length; T++) {
                   a = UI.biomes[T];
                   UI.mode === ET.MODE_LEGACY ? a.t === UI.BIOME_FOREST && R(T, a.w / 1e4) : (a.t === UI.BIOME_FOREST && A(T, a.w / 1e4),
                   a.t === UI.BIOME_LAVA && h(T, a.w / 1e4),
                   a.t === UI.BIOME_WINTER && _(T, a.w / 1e4),
                   a.t === UI.BIOME_DESERT && u(T, a.w / 1e4),
                   a.t === UI.BIOME_DRAGON && E(T))
               }
           ne(),
           UI.map_wrapper(wI)
       }
       ,
       this.render_single_resource = O,
       this.map_wrapper = function(e) {
           for (var i = 0; i < this.nh; i++)
               for (var t = 0; t < this.nw; t++)
                   if (e.tiles[i] || (e.tiles[i] = []),
                   e.tiles[i][t]) {
                       var r = e.tiles[i][t];
                       if (r.de && r.de.length > 0)
                           for (var n = 0; n < r.de.length; n++)
                               if (r.de[n] && r.de[n].length > 0)
                                   if (r.de = r.de[n][0],
                                   n >= 41 && n <= 49) {
                                       r.de.scale = 3;
                                       var o = Math.floor(3 * Math.random() + 1);
                                       r.de.p = [];
                                       for (var a = 0; a < o; a++)
                                           r.de.p.push({
                                               x: 120 * Math.random() - 60,
                                               y: 120 * Math.random() - 60,
                                               angle: Math.random() * Math.PI * 2,
                                               _id: 41 + Math.floor(9 * Math.random())
                                           })
                                   } else if (n >= 19 && n <= 26) {
                                       r.de.scale = 3;
                                       o = Math.floor(3 * Math.random() + 1);
                                       r.de.p = [];
                                       for (a = 0; a < o; a++)
                                           r.de.p.push({
                                               x: 120 * Math.random() - 60,
                                               y: 120 * Math.random() - 60,
                                               angle: Math.random() * Math.PI * 2,
                                               _id: 19 + Math.floor(8 * Math.random())
                                           })
                                   } else
                                       n <= 15 || n >= 27 && n <= 40 ? (r.de.angle = 0,
                                       r.de.scale = 2,
                                       r.de._id = n) : (r.de.angle = Math.random() * Math.PI * 2,
                                       r.de.scale = 1,
                                       r.de._id = n);
                       p(r, "p", new s.LinearAnimation(!1,1,1,0,10,10)),
                       p(r, "t", new s.LinearAnimation(!1,1,1,0,10,10)),
                       p(r, "s", new s.LinearAnimation(!1,1,1,0,10,10)),
                       p(r, "g", new s.LinearAnimation(!1,1,1,0,10,10)),
                       p(r, "d", new s.LinearAnimation(!1,1,1,0,10,10)),
                       p(r, "b", new s.LinearAnimation(!1,1,1,0,10,10)),
                       p(r, "f", new s.LinearAnimation(!1,1,1,0,10,10)),
                       p(r, "sw", new s.LinearAnimation(!1,1,1,0,10,10)),
                       p(r, "gw", new s.LinearAnimation(!1,1,1,0,10,10)),
                       p(r, "dw", new s.LinearAnimation(!1,1,1,0,10,10)),
                       p(r, "a", new s.LinearAnimation(!1,1,1,0,10,10)),
                       p(r, "cs", new s.LinearAnimation(!1,1,1,0,10,10)),
                       p(r, "plm", new s.LinearAnimation(!1,1,1,0,10,10)),
                       p(r, "re", new s.LinearAnimation(!1,1,1,0,10,10)),
                       p(r, "c", new s.LinearAnimation(!1,1,1,0,10,10)),
                       p(r, "m", new s.LinearAnimation(!1,1,1,0,10,10))
                   } else
                       e.tiles[i][t] = []
       }
       ,
       this.time = SPRITE.DAY,
       this.clock = {
           translate: {
               x: 0,
               y: 0
           },
           init: 0,
           hour: 0,
           now: 0
       },
       this.delete_all_units = function() {
           this.fast_units = [],
           this.units[hT.PLAYERS] = [],
           this.units[hT.WORKBENCH] = [],
           this.units[hT.FIRE] = [],
           this.units[hT.BIG_FIRE] = [],
           this.units[hT.SEED] = [],
           this.units[hT.SPIKE] = [],
           this.units[hT.STONE_SPIKE] = [],
           this.units[hT.GOLD_SPIKE] = [],
           this.units[hT.DIAMOND_SPIKE] = [],
           this.units[hT.AMETHYST_SPIKE] = [],
           this.units[hT.REIDITE_SPIKE] = [],
           this.units[hT.BRIDGE] = [],
           this.units[hT.WOOD_TOWER] = [],
           this.units[hT.ROOF] = [],
           this.units[hT.PLOT] = [],
           this.units[hT.WHEAT_SEED] = [],
           this.units[hT.ALOE_VERA_SEED] = [],
           this.units[hT.PUMPKIN_SEED] = [],
           this.units[hT.TOMATO_SEED] = [],
           this.units[hT.CARROT_SEED] = [],
           this.units[hT.WATERMELON_SEED] = [],
           this.units[hT.GARLIC_SEED] = [],
           this.units[hT.THORNBUSH_SEED] = [],
           this.units[hT.WINDMILL] = [],
           this.units[hT.EXTRACTOR_MACHINE_STONE] = [],
           this.units[hT.EXTRACTOR_MACHINE_GOLD] = [],
           this.units[hT.EXTRACTOR_MACHINE_DIAMOND] = [],
           this.units[hT.EXTRACTOR_MACHINE_AMETHYST] = [],
           this.units[hT.EXTRACTOR_MACHINE_REIDITE] = [],
           this.units[hT.WELL] = [],
           this.units[hT.WALL] = [],
           this.units[hT.STONE_WALL] = [],
           this.units[hT.GOLD_WALL] = [],
           this.units[hT.DIAMOND_WALL] = [],
           this.units[hT.AMETHYST_WALL] = [],
           this.units[hT.REIDITE_WALL] = [],
           this.units[hT.BED] = [],
           this.units[hT.WOOD_DOOR] = [],
           this.units[hT.STONE_DOOR] = [],
           this.units[hT.GOLD_DOOR] = [],
           this.units[hT.DIAMOND_DOOR] = [],
           this.units[hT.AMETHYST_DOOR] = [],
           this.units[hT.REIDITE_DOOR] = [],
           this.units[hT.WOOD_DOOR_SPIKE] = [],
           this.units[hT.STONE_DOOR_SPIKE] = [],
           this.units[hT.GOLD_DOOR_SPIKE] = [],
           this.units[hT.DIAMOND_DOOR_SPIKE] = [],
           this.units[hT.AMETHYST_DOOR_SPIKE] = [],
           this.units[hT.REIDITE_DOOR_SPIKE] = [],
           this.units[hT.FURNACE] = [],
           this.units[hT.TOTEM] = [],
           this.units[hT.WOOD_TOWER] = [],
           this.units[hT.CHEST] = [],
           this.units[hT.RESURRECTION] = [],
           this.units[hT.EMERALD_MACHINE] = [],
           this.units[hT.FRUIT] = [],
           this.units[hT.RABBIT] = [],
           this.units[hT.WOLF] = [],
           this.units[hT.CRAB] = [],
           this.units[hT.BOAR] = [],
           this.units[hT.BABY_MAMMOTH] = [],
           this.units[hT.CRAB_BOSS] = [],
           this.units[hT.BABY_DRAGON] = [],
           this.units[hT.BABY_LAVA] = [],
           this.units[hT.HAWK] = [],
           this.units[hT.PIRANHA] = [],
           this.units[hT.KRAKEN] = [],
           this.units[hT.FOX] = [],
           this.units[hT.PENGUIN] = [],
           this.units[hT.SPELL] = [],
           this.units[hT.FIREFLY] = [],
           this.units[hT.BEAR] = [],
           this.units[hT.MAMMOTH] = [],
           this.units[hT.VULTURE] = [],
           this.units[hT.SAND_WORM] = [],
           this.units[hT.DRAGON] = [],
           this.units[hT.LAVA_DRAGON] = [],
           this.units[hT.FLAME] = [],
           this.units[hT.WHEAT_MOB] = [],
           this.units[hT.ALOE_VERA_MOB] = [],
           this.units[hT.PUMPKIN_MOB] = [],
           this.units[hT.GARLIC_MOB] = [],
           this.units[hT.THORNBUSH_MOB] = [],
           this.units[hT.TREASURE_CHEST] = [],
           this.units[hT.DEAD_BOX] = [],
           this.units[hT.CRATE] = [],
           this.units[hT.BREAD_OVEN] = [],
           this.units[hT.SIGN] = [],
           this.units[hT.SPIDER] = [],
           this.units[hT.GIFT] = [],
           this.units[hT.GARLAND] = []
       }
       ,
       this.delete_units = function(e) {
           if (this.fast_units[e]) {
               type = this.fast_units[e].type,
               this.fast_units[e] = null;
               for (var i = this.units[type], t = 0; t < i.length; t++)
                   if (i[t].uid == e)
                       return void i.splice(t, 1)
           }
       }
       ,
       this.find_tower = function(e, i) {
           for (var t = 0; t < this.units[hT.WOOD_TOWER].length; t++) {
               var r = this.units[hT.WOOD_TOWER][t];
               if (Math.floor(r.x / 100) === i && Math.floor(r.y / 100) === e)
                   return 1
           }
           return 0
       }
       ,
       this.find_bridge = function(e, i) {
           for (var t = 0; t < this.units[hT.BRIDGE].length; t++) {
               var r = this.units[hT.BRIDGE][t];
               if (Math.floor(r.x / 100) == e && Math.floor(r.y / 100) == i)
                   return !0
           }
           return !1
       }
       ,
       this.move_units = function(e) {
           for (var i = 0; i < e.length; i++) {
               if (b = e[i],
               b.angle != b.nangle) {
                   var t = 2 * Math.PI;
                   if (b.angle = (b.angle + t) % t,
                   b.nangle = (b.nangle + t) % t,
                   b.angle != b.nangle) {
                       var r = b.nangle - b.angle
                         , n = Math.abs(r);
                       n > Math.PI && (n = 2 * Math.PI - n);
                       var o = n / Math.PI * 3 * ET.ROTATE * jI;
                       r > Math.PI ? b.angle -= o : r < -Math.PI ? b.angle += o : r < 0 ? b.angle -= o : b.angle += o,
                       b.angle = (b.angle + t) % t,
                       Math.abs(b.angle - b.nangle) < o && (b.angle = b.nangle)
                   }
               }
               Math.floor(b.r.y / 100),
               Math.floor(b.r.x / 100);
               if (b.x != b.r.x || b.y != b.r.y) {
                   b.action & sT.IDLE && (b.action -= sT.IDLE),
                   b.action |= sT.WALK;
                   var a = s.get_std_angle(b, b.r) + Math.PI
                     , T = jI * b.speed
                     , I = s.build_vector(T, a);
                   s.norm(I) < s.norm(s.get_vector(b, b.r)) ? s.add_vector(b, I) : (b.action & sT.WALK && (b.action -= sT.WALK),
                   b.action |= sT.IDLE,
                   s.copy_vector(b.r, b))
               }
               if (b.ghost) {
                   var E = b.bubbles;
                   (0 === (R = E.length) || R < SPRITE.GHOST_BUBBLES && E[R - 1].life < .95) && E.push({
                       id: Math.floor(Math.random() * sprite[SPRITE.BUBBLES][0].length),
                       x: Math.floor(b.x + 80 * Math.random() - 40),
                       y: Math.floor(b.y + 80 * Math.random() - 40),
                       life: 1
                   });
                   for (var _ = 0; _ < R; _++)
                       E[_].life = Math.max(0, E[_].life - jI);
                   for (_ = 0; _ < R; _++)
                       if (0 === E[_].life) {
                           E.splice(_, 1);
                           break
                       }
               }
               var u = 0;
               if (b.move_effect && YI.quality) {
                   var h = b.swim
                     , R = h.length;
                   if (b.dist_water > 0 && b.vehicle !== INV.BABY_DRAGON && b.vehicle !== INV.BABY_LAVA && b.vehicle !== INV.PLANE && b.vehicle !== INV.HAWK && b.vehicle !== INV.NIMBUS && !b.ghost && (u = 1,
                   0 === R || s.dist(h[R - 1], b) > SPRITE.SWIM_SPACE)) {
                       var A = -b.angle
                         , d = 45 * Math.sin(A) * C
                         , S = 45 * Math.cos(A) * C;
                       h.push({
                           x: b.x + d,
                           y: b.y + S,
                           r: 8,
                           alpha: .8
                       }),
                       h.push({
                           x: b.x - d,
                           y: b.y - S,
                           r: 8,
                           alpha: .8
                       }),
                       h.push({
                           x: b.x,
                           y: b.y,
                           r: 24,
                           alpha: 1
                       })
                   }
                   for (_ = 0; _ < R; _++)
                       h[_].alpha = Math.max(0, h[_].alpha - jI / 2.2),
                       h[_].r += 20 * jI;
                   h.length > 0 && 0 === h[0].alpha && h.splice(0, 1);
                   var l = b.foot
                     , N = (R = l.length,
                   -1)
                     , g = Math.max(0, Math.sign(b.dist_sand))
                     , O = Math.max(0, Math.sign(b.dist_winter))
                     , p = (Math.max(0, Math.sign(b.dist_desert)),
                   Math.max(0, Math.sign(b.dist_lava)))
                     , c = Math.max(0, Math.sign(b.dist_dragon));
                   if (b.dist_sand > 0 || b.dist_desert > 0)
                       N = SPRITE.SAND_STEP;
                   else if (b.dist_dragon > 0)
                       N = SPRITE.CAVE_STEP;
                   else if (b.dist_winter > 0)
                       N = SPRITE.SNOW_STEP;
                   else if (b.dist_lava > 0)
                       N = SPRITE.LAVA_STEP;
                   if (b.vehicle === INV.MOUNT_BOAR && 1 == (g | O | p | c)) {
                       N = SPRITE.BOAR_STEP;
                       var v = b.vehicle_fx2 - Math.PI / 2
                         , P = 15
                         , m = 11
                         , D = SPRITE.STEP_SPACE
                   } else if (b.vehicle === INV.BABY_MAMMOTH && 1 == (g | O | p | c)) {
                       N = SPRITE.BABY_MAMMOTH_STEP;
                       v = b.vehicle_fx2 - Math.PI / 2,
                       P = 21,
                       m = 16,
                       D = SPRITE.STEP_SPACE
                   } else if (b.vehicle === INV.CRAB_BOSS && 1 == (g | O | p | c)) {
                       N = SPRITE.CRAB_STEP;
                       v = b.vehicle_fx2 - Math.PI / 2;
                       var M = 50 * Math.random();
                       P = 10 + M,
                       m = 0 + M,
                       D = .9 * SPRITE.STEP_SPACE
                   } else
                       v = b.angle,
                       P = 15,
                       m = 11,
                       D = SPRITE.STEP_SPACE;
                   if (b.vehicle === INV.BABY_DRAGON || b.vehicle === INV.BABY_LAVA || b.vehicle === INV.NIMBUS || b.vehicle === INV.HAWK || b.vehicle === INV.PLANE || b.ghost)
                       ;
                   else if (b.vehicle === INV.SLED)
                       (0 === R || s.dist(l[R - 1], b) > SPRITE.TRAIL_SPACE) && l.push({
                           x: b.x,
                           y: b.y,
                           angle: b.vehicle_fx2,
                           alpha: 1,
                           id: SPRITE.SLED_WAVE
                       });
                   else if (-1 != N && 0 === u && (0 === R || s.dist(l[R - 1], b) > D)) {
                       if (b.id_foot++,
                       Math.abs(b.x - b.r.x) > 1 && Math.abs(b.y - b.r.y) > 1)
                           if (b.r.x > b.x && b.r.y < b.y || b.r.x < b.x && b.r.y > b.y)
                               if (b.id_foot % 2)
                                   d = -m * C,
                                   S = -m * C;
                               else
                                   S = m * C,
                                   d = m * C;
                           else if (b.id_foot % 2)
                               d = m * C,
                               S = -m * C;
                           else
                               S = m * C,
                               d = -m * C;
                       else if (b.id_foot % 2)
                           d = Math.sin(v) * P * C,
                           S = Math.cos(v) * P * C;
                       else
                           d = -Math.sin(v) * P * C,
                           S = -Math.cos(v) * P * C;
                       l.push({
                           x: b.x + d,
                           y: b.y + S,
                           angle: v + Math.PI / 2,
                           alpha: 1,
                           id: N
                       })
                   }
                   for (_ = 0; _ < R; _++)
                       l[_].id === SPRITE.SLED_WAVE ? l[_].alpha = Math.max(0, l[_].alpha - 1.5 * jI) : l[_].alpha = Math.max(0, l[_].alpha - jI / 2.85);
                   l.length > 0 && 0 === l[0].alpha && l.splice(0, 1)
               }
           }
       }
       ,
       this.update = function() {
           this.move_units(this.units[hT.PLAYERS]),
           this.move_units(this.units[hT.RABBIT]),
           this.move_units(this.units[hT.WOLF]),
           this.move_units(this.units[hT.CRAB]),
           this.move_units(this.units[hT.BOAR]),
           this.move_units(this.units[hT.BABY_MAMMOTH]),
           this.move_units(this.units[hT.CRAB_BOSS]),
           this.move_units(this.units[hT.BABY_DRAGON]),
           this.move_units(this.units[hT.BABY_LAVA]),
           this.move_units(this.units[hT.HAWK]),
           this.move_units(this.units[hT.SPIDER]),
           this.move_units(this.units[hT.FOX]),
           this.move_units(this.units[hT.PENGUIN]),
           this.move_units(this.units[hT.SPELL]),
           this.move_units(this.units[hT.FIREFLY]),
           this.move_units(this.units[hT.BEAR]),
           this.move_units(this.units[hT.MAMMOTH]),
           this.move_units(this.units[hT.VULTURE]),
           this.move_units(this.units[hT.SAND_WORM]),
           this.move_units(this.units[hT.DRAGON]),
           this.move_units(this.units[hT.FLAME]),
           this.move_units(this.units[hT.PIRANHA]),
           this.move_units(this.units[hT.KRAKEN]),
           this.move_units(this.units[hT.LAVA_DRAGON])
       }
       ,
       this.breath = [],
       this.breath[SPRITE.LAKE] = new s.LinearAnimation(!1,1,1.05,1,.008,.008),
       this.breath[SPRITE.LAKE_DEEP] = new s.LinearAnimation(!1,1,1.08,1,.006,.006),
       this.breath[SPRITE.WAVE_ONE] = new s.LinearAnimation(!1,1,1.02,1,.008,.008),
       this.breath[SPRITE.WAVE_TWO] = new s.LinearAnimation(!1,1,1.08,1,.006,.006),
       this.lava = [],
       this.lava[0] = new s.LinearAnimation(!1,.1,1,0,.6,.6),
       this.lava[1] = new s.LinearAnimation(!1,.4,1,0,.6,.6),
       this.lava[2] = new s.LinearAnimation(!1,.3,1,0,.6,.6),
       this.lava[3] = new s.LinearAnimation(!1,.8,1,0,.6,.6),
       this.lava[4] = new s.LinearAnimation(!1,.3,1,0,.6,.6),
       this.lava[5] = new s.LinearAnimation(!1,.8,1,0,.6,.6),
       this.lava[6] = new s.LinearAnimation(!1,.5,1,0,.6,.6),
       this.lava[7] = new s.LinearAnimation(!1,.9,1,0,.6,.6),
       this.lava[8] = new s.LinearAnimation(!1,.6,1,0,.6,.6),
       this.lava[9] = new s.LinearAnimation(!1,.2,1,0,.6,.6),
       this.lava[10] = new s.LinearAnimation(!1,.6,1,0,.6,.6),
       this.lava[11] = new s.LinearAnimation(!1,.4,1,0,.6,.6),
       this.lava[12] = new s.LinearAnimation(!1,.8,1,0,.6,.6),
       this.lava[13] = new s.LinearAnimation(!1,.2,1,0,.6,.6),
       this.lava[14] = new s.LinearAnimation(!1,.7,1,0,.6,.6)
   }
   function lT(e, i, t, r) {
       this.id = e,
       this.speed = 8 * (e + 5),
       this.life = R / 1366,
       this.x = i,
       this.y = t,
       this.c = Math.cos(r),
       this.s = Math.sin(r),
       this.alpha = 0
   }
   function NT() {
       this.init = function() {}
       ,
       this.resurrection = {
           pid: 1,
           iid: 1,
           open: !1
       },
       this.well = {
           pid: 1,
           iid: -1,
           open: !1
       },
       this.windmill = {
           amount_wheat: 0,
           amount_flour: 0,
           pid: 1,
           iid: -1,
           open: !1
       },
       this.extractor = {
           amount_wood: 0,
           amount_mineral: 0,
           type: 0,
           mineral: 0,
           pid: 1,
           iid: -1,
           open: !1
       },
       this.bread_oven = {
           amount_wood: 0,
           amount_bread: 0,
           amount_flour: 0,
           pid: 1,
           iid: -1,
           open: !1
       },
       this.sign = {
           iid: -1,
           open: !1
       },
       this.furnace = {
           amount: 0,
           pid: 1,
           iid: -1,
           open: !1
       },
       this.ghost = {
           enabled: !1,
           delay: -1,
           label: !1,
           now: -1,
           draw: Ya
       },
       this.chest = {
           id: -1,
           amount: 0,
           pid: 1,
           iid: -1,
           open: !1,
           lock: !1,
           locked: !1,
           lockpick: !1,
           padlock: !1
       },
       this.alive = !0,
       this.reconnect = {
           enabled: !1,
           rotate: 0
       },
       this.key = s.gup("key", window.location.href);
       var e = s.gup("egg", window.location.href);
       function i() {
           this.seed = 1,
           this.seed2 = 2,
           this.seed3 = 3,
           this.seedv = 1,
           this.seedv2 = 2,
           this.seedv3 = 3,
           this.new_seed = function() {
               this.seed = 2 + Math.floor(Math.random() * ET.SEED)
           }
           ,
           this.new_seed2 = function() {
               this.seed2 = 2 + Math.floor(Math.random() * ET.SEED)
           }
           ,
           this.new_seed3 = function() {
               this.seed3 = 2 + Math.floor(Math.random() * ET.SEED)
           }
           ,
           this.new_seedv = function() {
               this.seedv = 2 + Math.floor(Math.random() * ET.SEED)
           }
           ,
           this.new_seedv2 = function() {
               this.seedv2 = 2 + Math.floor(Math.random() * ET.SEED)
           }
           ,
           this.new_seedv3 = function() {
               this.seedv3 = 2 + Math.floor(Math.random() * ET.SEED)
           }
           ,
           this.draw_foam_vert = function(e, i, t, r, n, o, a) {
               for (var s = 1; s < a; ) {
                   var T = s * t % RAND_SIZE
                     , I = RANDOM[T];
                   if (I < .1)
                       E += 50,
                       s += 50;
                   else {
                       var E = Math.floor(I * r + n);
                       if (s > o && s < a) {
                           var _ = Math.random() > .5 ? -10 * jI : 10 * jI
                             , h = E * i;
                           if (this.bxv[T] = Math.max(-ET.FLOAM_X, Math.min(ET.FLOAM_X, this.bxv[T] + _)),
                           this.byv[T] = Math.max(-ET.FLOAM_Y, Math.min(ET.FLOAM_Y, this.byv[T] + _)),
                           h > 0) {
                               if (u.beginPath(),
                               u.arc(s + kI.cam.x + this.byv[T], e + this.bxv[T] - .8 * ET.FLOAM_X, h, 0, 2 * Math.PI),
                               UI.transition) {
                                   var R = UI.time ? 1 - UI.shade.v : UI.shade.v;
                                   u.fillStyle = ds(83, 156, 160, 236, 247, 249, R)
                               } else
                                   u.fillStyle = SPRITE.FLOAM_COLOR[UI.time];
                               u.fill()
                           }
                       }
                       s += 2 * E
                   }
               }
           }
           ,
           this.draw_foam = function(e, i, t, r, n, o, a) {
               for (var s = 1; s < a; ) {
                   var T = s * t % RAND_SIZE
                     , I = RANDOM[T];
                   if (I < .1)
                       E += 50,
                       s += 50;
                   else {
                       var E = Math.floor(I * r + n);
                       if (s > o && s < a) {
                           var _ = Math.random() > .5 ? -10 * jI : 10 * jI
                             , h = E * i;
                           if (this.bx[T] = Math.max(-ET.FLOAM_X, Math.min(ET.FLOAM_X, this.bx[T] + _)),
                           this.by[T] = Math.max(-ET.FLOAM_Y, Math.min(ET.FLOAM_Y, this.by[T] + _)),
                           h > 0) {
                               if (u.beginPath(),
                               u.arc(e + this.bx[T] - .8 * ET.FLOAM_X, s + kI.cam.y + this.by[T], h, 0, 2 * Math.PI),
                               UI.transition) {
                                   var R = UI.time ? 1 - UI.shade.v : UI.shade.v;
                                   u.fillStyle = ds(83, 156, 160, 236, 247, 249, R)
                               } else
                                   u.fillStyle = SPRITE.FLOAM_COLOR[UI.time];
                               u.fill()
                           }
                       }
                       s += 2 * E
                   }
               }
           }
           ,
           this.draw_foams_bottom = function(e, i, t, r, n, o) {
               var a;
               (n -= 30,
               o += 30,
               0 === (a = -(t - ET.LW1SX - r - 2) / ET.W1EX) && this.new_seed3(),
               u.globalAlpha = s.ease_in_out_quad(a),
               this.draw_foam_vert(t, a, this.seed3, 18, 16, n, o),
               u.globalAlpha = 1,
               0 === (a = -(e - ET.LW2SX - r + 500) / ET.W2EX) && this.new_seed(),
               u.globalAlpha = s.ease_in_out_quad(a),
               this.draw_foam_vert(e, a, this.seed, 12, 10, n, o),
               u.globalAlpha = 1,
               -1 !== i) && ((a = -(i - ET.LW3SX - r + 698) / ET.W3EX) <= .01 && this.new_seed2(),
               u.globalAlpha = s.ease_in_out_quad(a),
               this.draw_foam_vert(i, a, this.seed2, 6, 6, n, o),
               u.globalAlpha = 1)
           }
           ,
           this.draw_foams_top = function(e, i, t, r, n, o) {
               var a;
               (n -= 30,
               o += 30,
               0 === (a = -(-t + ET.LW1SX + r + 2) / ET.W1EX) && this.new_seed3(),
               u.globalAlpha = s.ease_in_out_quad(a),
               this.draw_foam_vert(t, a, this.seed3, 18, 16, n, o),
               u.globalAlpha = 1,
               0 === (a = -(-e + ET.LW2SX + r) / ET.W2EX) && this.new_seed(),
               u.globalAlpha = s.ease_in_out_quad(a),
               this.draw_foam_vert(e, a, this.seed, 12, 10, n, o),
               u.globalAlpha = 1,
               -1 !== i) && ((a = -(-i + ET.LW3SX + r) / ET.W3EX) <= .01 && this.new_seed2(),
               u.globalAlpha = s.ease_in_out_quad(a),
               this.draw_foam_vert(i, a, this.seed2, 6, 6, n, o),
               u.globalAlpha = 1)
           }
           ,
           this.draw_foams_left = function(e, i, t, r, n, o) {
               var a;
               (n -= 30,
               o += 30,
               0 === (a = -(-t + ET.LW1SX + r + 2) / ET.W1EX) && this.new_seed3(),
               u.globalAlpha = s.ease_in_out_quad(a),
               this.draw_foam(t, a, this.seed3, 18, 16, n, o),
               u.globalAlpha = 1,
               0 === (a = -(-e + ET.LW2SX + r) / ET.W2EX) && this.new_seed(),
               u.globalAlpha = s.ease_in_out_quad(a),
               this.draw_foam(e, a, this.seed, 12, 10, n, o),
               u.globalAlpha = 1,
               -1 !== i) && ((a = -(-i + ET.LW3SX + r) / ET.W3EX) <= .01 && this.new_seed2(),
               u.globalAlpha = s.ease_in_out_quad(a),
               this.draw_foam(i, a, this.seed2, 6, 6, n, o),
               u.globalAlpha = 1)
           }
           ,
           this.draw_foams_right = function(e, i, t, r, n, o) {
               var a;
               (n -= 30,
               o += 30,
               0 === (a = -(t - ET.LW1SX - r - 2) / ET.W1EX) && this.new_seed3(),
               u.globalAlpha = s.ease_in_out_quad(a),
               this.draw_foam(t, a, this.seed3, 18, 16, n, o),
               u.globalAlpha = 1,
               0 === (a = -(e - ET.LW2SX - r + 500) / ET.W2EX) && this.new_seed(),
               u.globalAlpha = s.ease_in_out_quad(a),
               this.draw_foam(e, a, this.seed, 12, 10, n, o),
               u.globalAlpha = 1,
               -1 !== i) && ((a = -(i - ET.LW3SX - r + 698) / ET.W3EX) <= .01 && this.new_seed2(),
               u.globalAlpha = s.ease_in_out_quad(a),
               this.draw_foam(i, a, this.seed2, 6, 6, n, o),
               u.globalAlpha = 1)
           }
           ,
           this.w1 = {
               r: new s.Ease(s.ease_out_cubic,0,10,ET.W1SX,ET.W1SX,ET.W1EX),
               l: new s.Ease(s.ease_in_out_cubic,0,10,ET.W1EX,ET.W1EX,ET.W1SX)
           },
           this.w2 = {
               r: new s.Ease(s.ease_out_quart,0,10,ET.W2SX,ET.W2SX,ET.W2EX),
               l: new s.Ease(s.ease_in_out_quad,0,10,ET.W2EX,ET.W2EX,ET.W2SX)
           },
           this.w3 = {
               r: new s.Ease(s.ease_out_quint,0,10,ET.W3SX,ET.W3SX,ET.W3EX),
               l: new s.Ease(s.ease_in_out_quad,0,10,ET.W3EX,ET.W3EX,ET.W3SX)
           },
           this.t_ = function(e) {
               return e.r.x === e.r.ex ? e.l.x === e.l.ex ? e.r : e.l : e.r
           }
           ,
           this.t = function(e) {
               var i;
               return e.r.x === e.r.ex ? e.l.x === e.l.ex ? (e.r.restart(),
               e.l.restart(),
               i = e.r) : i = e.l : i = e.r,
               i.ease(i.ex),
               i
           }
           ,
           this.bx = [],
           this.by = [],
           this.bxv = [],
           this.byv = [],
           this.init = function() {
               for (var e = 0; e < RAND_SIZE; e++)
                   this.bx[e] = Math.floor(RANDOM[e] * ET.FLOAM_X),
                   this.by[e] = Math.floor(RANDOM[e] * ET.FLOAM_Y),
                   this.bxv[e] = Math.floor(RANDOM[e] * ET.FLOAM_X),
                   this.byv[e] = Math.floor(RANDOM[e] * ET.FLOAM_Y);
               this.w1.r.x = this.w1.r.ex,
               this.w2.r.ed = 3.5,
               this.w3.r.ed = 2
           }
           ,
           this.init()
       }
       e && (YI.skin = parseInt(e)),
       this.beta = 0 === window.location.href.indexOf("http://starve.io/beta") ? 1 : 0,
       this.key && this.beta ? Cookies.set("starve_beta", this.key) : this.beta && (this.key = Cookies.get("starve_beta")),
       this.token = Cookies.get("starve_token") ? Cookies.get("starve_token") : s.generate_token(IT.TOKEN_LEN),
       this.token_id = Cookies.get("starve_token_id") ? Cookies.get("starve_token_id") : "",
       this.id = 0,
       this.uid = 0,
       this.day = 0,
       this.die = {
           howdie: "",
           score: 0,
           bank: 0,
           kill: 0
       },
       this.account = {
           connected: 0,
           last: (new Date).getTime()
       },
       this.team = [],
       this.in_team = function(e) {
           for (var i = 0; i < this.team.length; i++)
               if (this.team[i] == e)
                   return !0;
           return !1
       }
       ,
       this.shop = {
           delay: 0,
           time: 0,
           value: 0,
           open: !1,
           draw: function() {
               if (this.open) {
                   var e = (new Date).getTime();
                   this.time = Math.floor((e - this.delay) / 1e3),
                   this.time < 60 ? xI.shop.button.draw(u) : (document.getElementById("shop_starterkit").style.display = "none",
                   this.open = !1)
               }
           }
       },
       this.totem = {
           id: -1,
           pid: -1,
           lock: 0,
           timeout: new s.LinearAnimation(!1,0,1,0,1 / 30,1),
           wait: !1
       },
       this.helmet = {
           timeout: new s.LinearAnimation(!1,0,1,0,.2,1),
           wait: !1
       },
       this.build = {
           timeout: new s.LinearAnimation(!1,0,1,0,1,1),
           wait: !1
       },
       this.weapon = {
           timeout: new s.LinearAnimation(!1,0,1,0,.1,1),
           wait: !1
       },
       this.cam = new s.Ease2d(s.ease_out_quad,0,.4,0,0,d,S,d,S),
       this.cam.delay = 0,
       this.cam.forcedDelay = 0,
       this.cam.update = function() {
           if (this.forcedDelay > 0)
               this.forcedDelay -= jI;
           else {
               var e = UI.fast_units[kI.uid];
               if (e) {
                   this.delay = 0;
                   var i = Math.max(Math.min(d - e.x, -2), 2 - UI.w + R)
                     , t = Math.max(Math.min(S - e.y, -2), 2 - UI.h + A);
                   this.ease({
                       x: i,
                       y: t
                   })
               } else
                   this.delay += jI,
                   this.delay > 3 && (this.delay = 0,
                   kI.reconnect.enabled || WI.get_focus())
           }
       }
       ,
       this.cam.w = screen.width,
       this.cam.h = screen.height,
       this.cam.rw = this.cam.w,
       this.cam.rh = this.cam.h,
       this.cam.rx = 0,
       this.cam.ry = 0,
       this.cam.rdw = 0,
       this.cam.rdh = 0,
       this.cam.change = function(e, i) {
           this.x = -Math.min(Math.max(2 * -UI.dw, e - UI.dw - this.rw / 2), UI.w - this.rw),
           this.y = -Math.min(Math.max(2 * -UI.dh, i - (UI.dh + this.rh) / 2), UI.h - this.rh + UI.dh),
           this.ex = this.x,
           this.ey = this.y
       }
       ,
       this.control = {
           angle: 0,
           timeout: 0,
           previous: 0,
           mouse: 0,
           attack: 0,
           update: function() {
               var e = UI.fast_units[kI.uid];
               if (e)
                   var i = {
                       x: kI.cam.x + e.x,
                       y: kI.cam.y + e.y
                   };
               else
                   i = N;
               var t = s.get_std_angle(qI.pos, i)
                 , r = !1;
               if (this.mouse += jI,
               qI.state || e && !(e.action & sT.ATTACK) && this.mouse > IT.ATTACK && (this.attack = 1,
               r = !0,
               this.mouse = 0,
               WI.send_attack(t)),
               e && (e.angle = t,
               e.nangle = t),
               r || (this.timeout += jI,
               this.timeout > IT.ROTATE && (this.timeout = 0,
               Math.abs(this.angle - t) > .005 && (WI.send_angle(t),
               this.angle = t))),
               !kI.chat.open && !kI.terminal.open) {
                   var n = 0;
                   XI.is_left() && (n |= 1),
                   XI.is_right() && (n |= 2),
                   XI.is_bottom() && (n |= 4),
                   XI.is_top() && (n |= 8),
                   this.previous != n && WI.send_move(n),
                   this.previous = n
               }
           }
       },
       this.gauges = {
           c: 1,
           l: 1,
           h: 1,
           t: 1,
           o: 1,
           wa: 1,
           warn_cold: new s.LinearAnimation(!0,0,1,0,3,3),
           warn_life: new s.LinearAnimation(!0,0,1,0,2,2),
           warn_hunger: new s.LinearAnimation(!0,0,1,0,3,3),
           warn_thirst: new s.LinearAnimation(!0,0,1,0,3,3),
           warn_oxygen: new s.LinearAnimation(!0,0,1,0,3,3),
           warn_warm: new s.LinearAnimation(!0,0,1,0,3,3),
           cold: new s.Ease(s.ease_out_quad,0,1,0,0,1),
           life: new s.Ease(s.ease_out_quad,0,1,0,0,1),
           hunger: new s.Ease(s.ease_out_quad,0,1,0,0,1),
           thirst: new s.Ease(s.ease_out_quad,0,1,0,0,1),
           oxygen: new s.Ease(s.ease_out_quad,0,1,0,0,1),
           warm: new s.Ease(s.ease_out_quad,0,1,0,0,1),
           update: function() {
               this.warn_cold.update(),
               this.warn_life.update(),
               this.warn_hunger.update(),
               this.warn_thirst.update(),
               this.warn_oxygen.update(),
               this.warn_warm.update(),
               this.cold.ease(this.c),
               this.life.ease(this.l),
               this.hunger.ease(this.h),
               this.thirst.ease(this.t),
               this.oxygen.ease(this.o),
               this.warm.ease(this.wa)
           }
       },
       this.bigmap = !1,
       this.spectator = !1,
       this.zombie = !1,
       this.vampire = !1,
       this.inv = {
           max: ET.WITHOUT_BAG,
           bonus: 0,
           bag: 0,
           n: [],
           can_select: [],
           update_bag_size: function(e, i) {
               1 === e && (this.bag = ET.BAG_SIZE),
               this.bonus += i,
               this.max = ET.WITHOUT_BAG + this.bonus + this.bag
           },
           drag: {
               item: -1,
               img: null,
               _start: 0,
               _move: 0,
               _x: -1,
               _y: -1,
               move: function(e) {
                   !this._start || e.x === this._x && e.y === this._y || (this._move = 1)
               },
               start: function(e, i) {
                   this._x = i.x,
                   this._y = i.y,
                   this.item = e,
                   this.img = kI.inv.can_select[e].info.img[2],
                   this._start = 1
               },
               stop: function() {
                   this._start = 0,
                   this._move = 0,
                   this._x = -1,
                   this._y = -1
               },
               release: function() {
                   var e = -1
                     , i = kI.inv.can_select
                     , t = 0;
                   if (this._start && this._move) {
                       for (var r = 0; r < i.length; r++)
                           if (i[r].info.state === Js) {
                               e = r;
                               break
                           }
                       if (-1 !== e && e !== this.item && i[this.item]) {
                           t = 1;
                           var n = i[e];
                           i[e] = i[this.item],
                           i[this.item] = n,
                           xI.update_inv_buttons()
                       }
                   }
                   return this.stop(),
                   t
               },
               draw: function(e, i) {
                   this._start && this._move && qn(u, this.img, Math.floor(e - this.img.width / 2), Math.floor(i - this.img.height / 2))
               }
           },
           free_place: function(e) {
               for (t = 0; t < e.length; t++)
                   if (this.n[e[t][0]] == e[t][1])
                       return !0;
               return !1
           },
           find_item: function(e) {
               for (var i = 0; i < this.can_select.length; i++)
                   if (this.can_select[i].id == e)
                       return i;
               return -1
           },
           delete_item: function(e, i) {
               this.n[e] = 0,
               this.can_select.splice(i, 1),
               xI.update_inv_buttons()
           },
           decrease: function(e, i, t) {
               update = !0,
               this.n[e] = Math.max(0, this.n[e] - i),
               !this.n[e] && t >= 0 && this.delete_item(e, t)
           }
       },
       this.show_spectators = {
           enabled: !1,
           translate: {
               x: 0,
               y: 0
           },
           invert: function() {
               UI.mode != ET.MODE_HUNGER_GAMES || kI.spectator || (kI.show_spectators.enabled = !kI.show_spectators.enabled,
               kI.show_spectators.enabled ? xI.options.spectator_agree.display = "inline-block" : xI.options.spectator_agree.display = "none")
           }
       },
       xI.options.spectator_agree.display = "none",
       this.auto_feed = {
           enabled: !1,
           translate: {
               x: 0,
               y: 0
           },
           delay: 0,
           invert: function() {
               kI.auto_feed.enabled = !kI.auto_feed.enabled,
               kI.auto_feed.enabled ? xI.options.feed_agree.display = "inline-block" : xI.options.feed_agree.display = "none"
           },
           update: function() {
               !this.enabled || kI.craft.id >= 0 || xI.safe_delete.open || (this.delay += jI,
               this.delay > 2 && (this.delay = 0,
               kI.gauges.h < .35 ? kI.inv.n[INV.PLANT] ? WI.select_inv(INV.PLANT, kI.inv.find_item(INV.PLANT)) : kI.inv.n[INV.GARLIC] ? WI.select_inv(INV.GARLIC, kI.inv.find_item(INV.GARLIC)) : kI.inv.n[INV.CRAB_STICK] ? WI.select_inv(INV.CRAB_STICK, kI.inv.find_item(INV.CRAB_STICK)) : kI.inv.n[INV.PUMPKIN] ? WI.select_inv(INV.PUMPKIN, kI.inv.find_item(INV.PUMPKIN)) : kI.inv.n[INV.TOMATO] ? WI.select_inv(INV.TOMATO, kI.inv.find_item(INV.TOMATO)) : kI.inv.n[INV.CARROT] ? WI.select_inv(INV.CARROT, kI.inv.find_item(INV.CARROT)) : kI.inv.n[INV.WATERMELON] ? WI.select_inv(INV.WATERMELON, kI.inv.find_item(INV.WATERMELON)) : kI.inv.n[INV.BREAD] ? WI.select_inv(INV.BREAD, kI.inv.find_item(INV.BREAD)) : kI.inv.n[INV.COOKED_MEAT] ? WI.select_inv(INV.COOKED_MEAT, kI.inv.find_item(INV.COOKED_MEAT)) : kI.inv.n[INV.FOODFISH_COOKED] ? WI.select_inv(INV.FOODFISH_COOKED, kI.inv.find_item(INV.FOODFISH_COOKED)) : kI.inv.n[INV.COOKIE] ? WI.select_inv(INV.COOKIE, kI.inv.find_item(INV.COOKIE)) : kI.inv.n[INV.SANDWICH] ? WI.select_inv(INV.SANDWICH, kI.inv.find_item(INV.SANDWICH)) : kI.inv.n[INV.CAKE] ? WI.select_inv(INV.CAKE, kI.inv.find_item(INV.CAKE)) : kI.inv.n[INV.CRAB_LOOT] && WI.select_inv(INV.CRAB_LOOT, kI.inv.find_item(INV.CRAB_LOOT)) : kI.gauges.t < .35 && kI.inv.n[INV.BOTTLE_FULL] && WI.select_inv(INV.BOTTLE_FULL, kI.inv.find_item(INV.BOTTLE_FULL))))
           }
       },
       xI.options.feed_agree.display = "none",
       this.craft = {
           id: -1,
           id2: -1,
           timeout: new s.LinearAnimation(!1,0,1,0,1,1),
           crafting: !1,
           preview: -1,
           mode: 0,
           label: [],
           can_craft: [],
           workbench: !1,
           fire: !1,
           water: !1,
           well: !1,
           change_mode: function() {
               this.mode = 0 === this.mode ? 1 : 0
           },
           set_workbench: function(e) {
               this.workbench = e;
               var i = xI.safe_delete;
               i.open && i.del(i.button),
               this.update()
           },
           do_recycle: function(e) {
               var i = RECIPES[e];
               this.id = e,
               this.crafting = !0;
               UI.fast_units[kI.uid];
               this.timeout.max_speed = 8 * i.time,
               this.id2 = i.id2
           },
           do_craft: function(e) {
               var i = RECIPES[e];
               console.log(e, i),
               this.id = e,
               this.crafting = !0;
               var t = UI.fast_units[kI.uid];
               t && t.right == INV.BOOK ? this.timeout.max_speed = 3 * i.time : this.timeout.max_speed = i.time,
               this.id2 = i.id2;
               for (var r = 0; r < i.r.length; r++) {
                   var n = i.r[r];
                   kI.inv.decrease(n[0], n[1], kI.inv.find_item(n[0]))
               }
               xI.update_inv_buttons()
           },
           update: function() {
               for (var e in this.can_craft = [],
               1 === xI.info_box.craft && (xI.info_box.display = 0),
               RECIPES) {
                   var i = RECIPES[e]
                     , t = !0;
                   if (i.r) {
                       for (var r = 0; r < i.r.length; r++) {
                           if (kI.inv.max >= ET.WITH_BAG && i.id === CRAFT.BAG) {
                               t = !1;
                               break
                           }
                           if (i.w > this.workbench || i.f > this.fire || i.o > this.water || i.e > this.well) {
                               t = !1;
                               break
                           }
                           var n = i.r[r];
                           if (!kI.inv.n[n[0]] || kI.inv.n[n[0]] < n[1]) {
                               t = !1;
                               break
                           }
                       }
                       t && this.can_craft.push(xI.craft_buttons[i.id])
                   }
               }
               xI.update_craft_buttons(),
               xI.update_chest_buttons(),
               xI.update_furnace_button(),
               xI.update_windmill_button(),
               xI.update_extractor_button(),
               xI.update_bread_oven_button(),
               xI.sign.update_button()
           },
           restart: function() {
               this.id = -1,
               this.crafting = !1,
               this.timeout.v = 0,
               this.timeout.o = !1,
               this.update()
           }
       },
       this.welcome = {
           message: void 0,
           draw: Ua
       },
       this.alert = {
           timeout: new s.LinearAnimation(!1,1,1,0,4,.3),
           text: "",
           label: null,
           draw: ka,
           list: []
       },
       this.ldb = {
           can: document.createElement("canvas"),
           ids: [],
           update: !0,
           translate: {
               x: 0,
               y: 0
           },
           sort: function() {
               for (var e = [], i = UI.players, t = 0; t < i.length; t++)
                   i[t].alive && e.push({
                       id: t,
                       s: i[t].score
                   });
               e.sort((function(e, i) {
                   return i.s - e.s
               }
               )),
               this.ids = [];
               for (t = 0; t < e.length && t < 10; t++)
                   this.ids.push(e[t].id);
               this.update = !0
           },
           init: function(e) {
               e = e.sort(((e,i)=>i[1] - e[1]));
               for (var i = UI.players, t = 0; t < i.length; t++)
                   i[t].score = 0;
               this.ids = [],
               i[kI.id].score = s.restore_number(e.find((e=>e[0] == kI.id))[1]);
               for (t = 0; t < e.length && t < 10; t++)
                   this.ids.push(e[t][0]),
                   i[e[t][0]].score = s.restore_number(e[t][1]);
               this.update = !0
           }
       },
       this.ldb.can.width = 180 * C,
       this.ldb.can.height = 300 * C,
       this.ldb.ctx = this.ldb.can.getContext("2d"),
       this.terminal = {
           open: !1,
           input: document.getElementById("commandInput"),
           contentBox: document.getElementById("commandsBox"),
           style: document.getElementById("commandMainBox").style,
           _print: function(e) {
               this.contentBox.innerHTML += e
           },
           update: function() {
               this.style.left = Math.floor(R / 2 - 300) + "px",
               this.style.top = Math.floor(A / 2 - 250) + "px"
           },
           _clean: function() {
               this.contentBox.innerHTML = ""
           },
           quit: function() {
               this.open = !1,
               this.style.display = "none"
           },
           create_array: function(e, i=[]) {
               for (var t = '<table class="tableList">', r = 0; r < e.length; r++)
                   r % 3 == 0 && (t += "<tr>"),
                   console.log(i[r], r, i),
                   t += '<td class="tableList"' + (null == i[r] ? "" : 'style="color:' + i[r] + ';"') + ">" + e[r] + "</td>",
                   (r + 1) % 3 != 0 && r + 1 !== e.length || (t += "</tr>");
               return t += "</table>"
           },
           write_command: function(e, i, t, r) {
               var n = "<div class=commandWritten>" + (e = e || "");
               n += (i = i || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>",
               n += (t = t || "") + "</div>" + (r = r || "") + "</div>",
               this._print(n),
               this.scroll_down()
           },
           scroll_down: function() {
               this.contentBox.scrollTop = this.contentBox.scrollHeight
           },
           commands: function(e) {
               switch (e) {
               case "clean":
                   return this._clean(),
                   !0;
               case "list":
                   for (var i = "", t = UI.players, r = 0; r < t.length; r++) {
                       var n = t[r];
                       n.alive && (i += n.nickname + ' <span style="color:green">#' + r + "</span><br />")
                   }
                   return this.write_command("list", 1, "List all connected players", i),
                   !0;
               case "weapon-list":
                   return this.write_command("Weapons", 1, "List all weapons in the game", this.create_array(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"])),
                   !0;
               case "tool-list":
                   return this.write_command("Tools", 1, "List all tools in the game", this.create_array(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"])),
                   !0;
               case "survival-list":
                   return this.write_command("Survival Items", 1, "List all survival items in the game", this.create_array(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"])),
                   !0;
               case "resource-list":
                   return this.write_command("Resources", 1, "List all resources in the game", this.create_array(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"])),
                   !0;
               case "food-list":
                   return this.write_command("Food", 1, "List all food in the game", this.create_array(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"])),
                   !0;
               case "hat-list":
                   return this.write_command("Hats", 1, "List all hats in the game", this.create_array(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"])),
                   !0;
               case "building-list":
                   return this.write_command("Buildings", 1, "List all buildings in the game", this.create_array(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"])),
                   !0;
               case "biome-list":
                   return this.write_command("Biomes list", 1, "List all available biomes in the game", this.create_array(["forest", "winter", "lava", "sea", "beach", "island", "dragon"])),
                   !0;
               case "help-config":
                   return this.write_command("Help Configuration", 1, "Learn how to build your customized map", '<div class="specialCommandBox">To get the current map configuration, and modify it, copy the result of <span class="commandSynthax">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class="commandSynthax">set-config</span></br>To modify the map, modify "important" section (at the end)<div class="infoCommand">The minimum size of the map is 50x50.</div>"custom_map" is used to change the biomes and is written like this :<div class="commandSynthax" style="font-size:17px;">"custom_map":[["biome",width,height],...,["biome",width,height]]</div>Biomes are <span class="commandSynthax">"forest"</span>, <span class="commandSynthax">"lava"</span>, <span class="commandSynthax">"winter"</span>, and <span class="commandSynthax">"dragon"</span>.'),
                   !0;
               case "pos":
                   for (t = UI.units[hT.PLAYERS],
                   r = 0; r < t.length; r++) {
                       var o = t[r];
                       if (o.pid === kI.id)
                           return this.write_command("pos", 1, "Your position is " + Math.floor(o.x / 100) + ":" + Math.floor(o.y / 100)),
                           !0
                   }
                   break;
               case "help-admin":
                   return this.write_command("help-admin", 1, "List all available commands for admin only", this.create_array(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"])),
                   !0;
               case "help":
                   return this.write_command("help", 1, "List all available commands", this.create_array(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"])),
                   !0
               }
               return !1
           },
           _open: function() {
               this.open || (this.open = !0,
               this.style.display = "inline-block",
               this.input.focus())
           },
           _send: function() {
               var e = this.input.value;
               e && e.length > 0 && (this.commands(e) || WI.send_command(this.input.value),
               this.input.value = "")
           }
       },
       this.chat = {
           open: !1,
           input: document.getElementById("chat_input"),
           style: document.getElementById("chat_block").style,
           update: function() {
               this.style.left = Math.floor(R / 2 - 150) + "px",
               this.style.top = Math.floor(A / 2 + 80) + "px"
           },
           quit: function() {
               this.open = !1,
               this.style.display = "none",
               this.input.value = ""
           },
           prefix: "!",
           cmd: {
               hud: function(e) {
                   if ("off" === e) {
                       var i = 'Enter "!hud" without the quotes to restore the HUD';
                       kI.alert.text ? kI.alert.list.push(i) : kI.alert.text = i,
                       xI.show_ui = 0
                   } else
                       xI.show_ui = 1
               }
           },
           commands: function(e) {
               if (e.charAt(0) == this.prefix) {
                   for (var i = "", t = "", r = 1; r < e.length && " " != e.charAt(r); r++)
                       i += e.charAt(r);
                   for (r++; r < e.length; r++)
                       t += e.charAt(r);
                   var n = this.cmd[i];
                   return n && n(t),
                   !0
               }
               return !1
           },
           run: function() {
               if (this.open) {
                   this.open = !1,
                   this.style.display = "none";
                   var e = this.input.value;
                   e && (this.commands(e) || WI.send_chat(this.input.value),
                   this.input.value = "")
               } else
                   this.open = !0,
                   this.style.display = "inline-block",
                   this.input.focus()
           }
       },
       this.ash = {
           flakes: [],
           update: function(e) {
               e.y += 80 * jI * e.s,
               e.x += 80 * jI * e.c,
               e.life -= jI / 6,
               e.life > .2 ? e.alpha = Math.min(e.alpha + 3 * jI, 1) : e.alpha = Math.max(e.alpha - 1 * jI, 0)
           },
           add: function() {
               var e = Math.floor(Math.min(SPRITE.ASHES_NUMBER * (R / 1366), SPRITE.ASHES_NUMBER + 10) * Math.max(Math.min(UI.dist_lava + 1e3, 3e3) / 3e3, 0));
               if (this.flakes.length < e) {
                   var i = Math.floor(Math.random() * SPRITE.ASHES_SIZES)
                     , t = -kI.cam.x + Math.floor(Math.random() * kI.cam.w)
                     , r = -kI.cam.y + Math.floor(Math.random() * kI.cam.h)
                     , n = Math.random(Math.PI);
                   this.flakes.push(new lT(i,t,r,n))
               }
           }
       },
       this.blizzard = 0,
       this.bandage = 0,
       this.desert = {
           flakes: [],
           tempest: 0,
           tempest_speed: 0,
           update: function(e) {
               e.y += jI * (200 + 800 * this.tempest_speed) * e.s,
               e.x += jI * (200 + 800 * this.tempest_speed) * e.c,
               e.life -= jI / 6,
               e.life > .2 ? e.alpha = Math.min(e.alpha + 3 * jI, 1) : e.alpha = Math.max(e.alpha - 1 * jI, 0)
           },
           add: function() {
               var e = Math.floor(Math.min((this.tempest_speed + .1) * SPRITE.SAND_NUMBER * (R / 1366), (this.tempest_speed + .1) * SPRITE.SAND_NUMBER + 10) * Math.max(Math.min(UI.dist_desert + 1e3, 3e3) / 3e3, 0));
               if (this.flakes.length < e) {
                   var i = Math.floor(Math.random() * SPRITE.ASHES_SIZES)
                     , t = -kI.cam.x + Math.floor(Math.random() * kI.cam.w)
                     , r = -kI.cam.y + Math.floor(Math.random() * kI.cam.h)
                     , n = Math.random(Math.PI);
                   0 !== kI.desert.tempest && (t -= kI.cam.w / 2),
                   this.flakes.push(new lT(i,t,r,n))
               }
           }
       },
       this.winter = {
           flakes: [],
           tempest: 0,
           tempest_speed: 0,
           update: function(e) {
               XI.is_bottom() ? e.y += jI * e.speed * (5.5 + 10 * this.tempest_speed) : e.y += jI * e.speed * (5 + 10 * this.tempest_speed),
               e.life -= jI / 2,
               XI.is_left() ? e.x += jI * (100 + 400 * this.tempest_speed) : XI.is_right() ? e.x -= jI * (130 - 400 * this.tempest_speed) : e.x -= jI * (30 - 400 * this.tempest_speed),
               e.life > .2 ? e.alpha = Math.min(e.alpha + 3 * jI, 1) : e.alpha = Math.max(e.alpha - 5 * jI, 0)
           },
           add: function() {
               var e = Math.floor(Math.min((1.5 * this.tempest_speed + .5) * SPRITE.FLAKES_NUMBER * (R / 1366), (1.5 * this.tempest_speed + .5) * SPRITE.FLAKES_NUMBER + 10) * Math.max(Math.min(UI.dist_winter + 1e3, 3e3) / 3e3, 0));
               if (this.flakes.length < e) {
                   var i = Math.floor(Math.random() * SPRITE.FLAKES_SIZES)
                     , t = -kI.cam.x + Math.floor(Math.random() * kI.cam.w)
                     , r = -kI.cam.y + Math.floor(400 * Math.random() * C - 200 * C);
                   this.flakes.push(new lT(i,t,r,0))
               }
           }
       },
       this.beach = [];
       for (var t = 0; t < 4; t++)
           this.beach.push(new i)
   }
   function CT() {
       Math.random();
       return "e"
   }
   function gT() {
       Math.random();
       return "S"
   }
   function bT() {
       Math.random();
       return "t"
   }
   function OT() {
       Math.random();
       return "d"
   }
   function pT() {
       Math.random();
       return "o"
   }
   function cT() {
       Math.random();
       return "r"
   }
   function vT() {
       Math.random();
       return "a"
   }
   function PT() {
       Math.random();
       return "w"
   }
   function mT() {
       Math.random();
       return "I"
   }
   function DT() {
       Math.random();
       return "k"
   }
   function MT() {
       Math.random();
       return "W"
   }
   function vT() {
       Math.random();
       return "a"
   }
   function GT() {
       Math.random();
       return "s"
   }
   function LT() {
       Math.random();
       return "n"
   }
   function fT() {
       Math.random();
       return "p"
   }
   function VT() {
       Math.random();
       return "2"
   }
   function zT() {
       Math.random();
       return "g"
   }
   function HT() {
       Math.random();
       return "m"
   }
   function yT() {
       Math.random();
       return "b"
   }
   function pT() {
       Math.random();
       return "o"
   }
   function bT() {
       Math.random();
       return "t"
   }
   function BT() {
       Math.random();
       return "y"
   }
   function wT() {
       Math.random();
       return "c"
   }
   function fT() {
       Math.random();
       return "p"
   }
   function KT() {
       Math.random();
       return "i"
   }
   function WT() {
       Math.random();
       return "v"
   }
   function YT() {
       Math.random();
       return "C"
   }
   function UT() {
       Math.random();
       return "R"
   }
   function kT() {
       Math.random();
       return "x"
   }
   function FT() {
       Math.random();
       return "D"
   }
   function xT() {
       var e = LT() + vT() + bT() + KT()
         , i = MT() + CT() + yT() + gT() + pT() + wT() + DT() + CT() + bT();
       -1 === window[i].toString().indexOf(e) && (Math.floor = function() {
           return Math.round() + 1
       }
       );
       var t = GT() + CT() + LT() + OT()
         , r = fT() + cT() + pT() + bT() + pT() + bT() + BT() + fT() + CT();
       -1 === window[i][r][t].toString().indexOf(e) && (Math.floor = function() {
           return Math.round() + 1
       }
       );
       i = OT() + cT() + vT() + PT() + mT() + HT() + vT() + zT() + CT(),
       t = YT() + vT() + LT() + WT() + vT() + GT() + UT() + CT() + LT() + OT() + CT() + cT() + KT() + LT() + zT() + YT() + pT() + LT() + bT() + CT() + kT() + bT() + VT() + FT();
       -1 === window[t][r][i].toString().indexOf(e) && (Math.floor = function() {
           return Math.round() + 1
       }
       ),
       setTimeout(xT, 1e5)
   }
   mycyph1 = 1,
   setTimeout(xT, 1e5);
   var JT = {
       SERVER_INFO_URL: "DEV" == window.AppData.ENV_MODE ? "http://localhost:8082/serversBound" : "http://evelteam.su/serversBound"
   };
   function XT(e, i, t) {
       this.can = e,
       this.ctx = i,
       this.logo = {
           translate: {
               x: 0,
               y: 0
           },
           style: document.getElementById("loading").style,
           update: function() {
               this.style.left = this.translate.x + "px",
               this.style.top = Math.floor(this.translate.y) + "px"
           }
       },
       this.logo.style.position = "absolute",
       this.logo.style.display = "inline-block",
       this.logo.update(),
       this.is_run = !0,
       this.stop = function() {
           this.is_run = !1
       }
       ,
       this.loading = {
           total: 1
       };
       var r = this
         , n = function() {}
         , o = 0;
       this.quit_effect = function() {
           if (r.update(),
           40 == ++o)
               return r.stop(),
               void n();
           window.setTimeout(r.quit_effect, 33)
       }
       ,
       this.quit = function(e) {
           n = e,
           r.quit_effect()
       }
       ;
       (new Date).getTime();
       function a(e) {
           return -1 !== e.indexOf("normal-mode") || -1 !== e.indexOf("player0") ? 1 : -1 !== e.indexOf("day-bag") || -1 !== e.indexOf("night-bag") || -1 !== e.indexOf("day-book") || -1 !== e.indexOf("night-book") || -1 !== e.indexOf("day-player") || -1 !== e.indexOf("night-player") || -1 !== e.indexOf("day-accessory") || -1 !== e.indexOf("night-accessory") || -1 !== e.indexOf("day-crate") || -1 !== e.indexOf("night-crate") || -1 !== e.indexOf("day-skin") || -1 !== e.indexOf("night-skin") || -1 !== e.indexOf("day-river") || -1 !== e.indexOf("night-river") || -1 !== e.indexOf("day-river") || -1 !== e.indexOf("night-river") || -1 !== e.indexOf("day-rock") || -1 !== e.indexOf("night-rock") || -1 !== e.indexOf("day-flower") || -1 !== e.indexOf("night-flower") || -1 !== e.indexOf("day-leaf") || -1 !== e.indexOf("night-leaf") || -1 !== e.indexOf("day-herb") || -1 !== e.indexOf("night-herb") || -1 !== e.indexOf("day-shell") || -1 !== e.indexOf("night-shell") || -1 !== e.indexOf("day-hand-skin") || -1 !== e.indexOf("night-hand-skin") || -1 !== e.indexOf("bignight") || -1 !== e.indexOf("bigday") || -1 !== e.indexOf("bigzday") || -1 !== e.indexOf("bigznight") || -1 !== e.indexOf("tutorial-box") || -1 !== e.indexOf("tuto-") || -1 !== e.indexOf("-leaderboard-") || -1 !== e.indexOf("-lead-") || -1 !== e.indexOf("day-lava-") || -1 !== e.indexOf("night-lava-") || -1 !== e.indexOf("-click.png") || -1 !== e.indexOf("-in.png") || -1 !== e.indexOf("-fog") || -1 !== e.indexOf("-lava") || -1 !== e.indexOf("pebblecompo") || -1 !== e.indexOf("avatar-player") ? 0 : 1
       }
       var T = Object.keys(IMAGES).length;
       for (var I in console.log("Image to load: ", T),
       IMAGES)
           0 === a(IMAGES[I]) && T--;
       console.log("Image to load with high priority: ", T);
       var E = function() {
           return 0 !== this.isLoaded ? this.isLoaded : (this.isLoaded = 2,
           this.src = this._src,
           0)
       }
         , _ = function() {
           this.isLoaded = 1
       }
         , u = 0
         , h = function(e) {
           if (e) {
               if (1 === u)
                   return;
               u = 1,
               ee !== W && W(),
               ee();
               var i = s.getURLData("server");
               null === i ? WI.store_server_list(e) : (WI.privateServer = 1,
               WI.server_list = [{
                   nu: 0,
                   m: 100,
                   i: "server" + i + ".famishs.io",
                   p: 443,
                   a: "Private Server " + i,
                   ssl: 1
               }]),
               WI.update_server_list(),
               setTimeout(t, 100)
           }
       }
         , d = function() {
           fetch(JT.SERVER_INFO_URL).then((e=>e.json())).then((e=>{
               console.log(e),
               h(e)
           }
           )).catch((e=>{
               console.log(e),
               h([{
                   name: "PvP Time",
                   players: 0,
                   maxPlayers: 95,
                   serverPriority: -1,
                   mode: "normal",
                   port: 80,
                   ip: "DEV" == window.AppData.ENV_MODE ? "localhost:8082" : "hellofromnigeria.famishs.io/",
                   ssl: "DEV" == window.AppData.ENV_MODE ? 0 : 1
               }])
           }
           ))
       }
         , S = function() {
           document.fonts && document.fonts.check ? document.fonts.check("1em Baloo Paaji") ? setTimeout(d, 100) : setTimeout(S, 100) : setTimeout(d, 1e3)
       }
         , l = function() {
           var e = this.src
             , i = 0 === a(e) ? 1e4 : 2e3;
           setTimeout((function() {
               for (var i in DUMP_IMAGES)
                   if (-1 !== e.indexOf(DUMP_IMAGES[i])) {
                       IMAGES[i] = new Image,
                       IMAGES[i].onload = _,
                       IMAGES[i].onerror = l,
                       IMAGES[i].src = e;
                       break
                   }
           }
           ), i)
       };
       function N(e) {
           for (var i in IMAGES) {
               var t = IMAGES[i];
               "string" == typeof t && (a(t) === e && (IMAGES[i] = new Image,
               IMAGES[i].isLoaded = 0,
               IMAGES[i].onload = _,
               IMAGES[i].onerror = l,
               IMAGES[i].tryLoad = E,
               "https:" !== window.location.protocol ? IMAGES[i]._src = t : IMAGES[i]._src = "https://starve.io/" + t))
           }
       }
       N(1),
       N(0),
       Yi(1, "l", 20, "#000"),
       S(),
       kn(),
       this.update = function() {
           this.logo.translate.x = (R - 500) / 2,
           this.logo.translate.y = (A - 150) / 2;
           var e = 2500 / (40 - o + 1) - 48;
           this.logo.translate.y -= e,
           this.logo.update()
       }
       ,
       this.logo.update(),
       this.draw = function() {
           try {
               Jn()
           } catch (e) {}
           this.update()
       }
   }
   function qT(e, i) {
       this.can = e,
       this.ctx = i,
       window.navigator.userAgent.indexOf("Edge") > -1 ? (this.cursor0 = "default",
       this.cursor1 = "pointer") : (this.cursor0 = "url('img/cursor0.png'), default",
       this.cursor1 = "url('img/cursor1.png'), pointer");
       var r = this;
       function n(e, i, t, n, o) {
           for (var a = this, s = i + 9, T = 0, I = n, E = i; E < s; E++)
               r.buttons[E].info.callback = u,
               r.buttons[E].info.cosmeticType = e;
           function _() {
               var i = e[I];
               YI.cosmetic_name = Zs(i.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, void 0, 10, 8),
               void 0 !== i.level ? YI.cosmetic_author = Zs("Level " + i.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, void 0, 10, 8) : YI.cosmetic_author = Zs("by " + i.author, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, void 0, 10, 8)
           }
           function u() {
               I !== this.cosmeticId && -1 !== this.cosmeticId && (this.unlocked > 0 ? i === FIRST_BUTTON_SKIN ? q(m, ne, "none") : q(M, ne, "none") : i === FIRST_BUTTON_SKIN ? q(m, oe, "inline-block") : q(M, oe, "inline-block"),
               I = this.cosmeticId,
               t(this.cosmeticId),
               _())
           }
           this.initSelector = function() {
               for (var t = i, n = 3 * T; t < s && n < e.length; t++,
               n++)
                   if (e[n].rarity !== RARITY.SPECIAL || 0 !== o[n]) {
                       r.buttons[t].info.cosmeticId = n;
                       for (var a = 0; a < 3; a++)
                           r.buttons[t].info.img[a] = RARITY_BUTTON[e[n].rarity][a],
                           r.buttons[t].info.active = oe,
                           r.buttons[t].info.unlocked = o[n]
                   } else
                       r.buttons[t].info.cosmeticId = -1,
                       r.buttons[t].info.active = ne;
               for (; t < s; t++)
                   r.buttons[t].info.cosmeticId = -1,
                   r.buttons[t].info.active = ne;
               _()
           }
           ,
           r.buttons[s].info.callback = function() {
               T > 0 && T--,
               a.initSelector()
           }
           ,
           r.buttons[s + 1].info.callback = function() {
               3 * T + 9 < e.length && T++,
               a.initSelector()
           }
       }
       function o() {
           var e = Number(Cookies.get("starve_crate"))
             , i = Number(Cookies.get("starve_dead"))
             , t = Number(Cookies.get("starve_book"))
             , n = Number(Cookies.get("starve_bag"))
             , o = Number(Cookies.get("starve_skin"))
             , a = Number(Cookies.get("starve_accessory"));
           r.skin = o || 0,
           r.book = t || 0,
           r.crate = e || 1,
           r.accessory = a || 0,
           r.bag = n || 0,
           r.dead = i || 0
       }
       function a() {
           for (var e = COSMETICS.SKIN, i = 0; i < e.length; i++)
               e[i].rarity === RARITY.FREE ? r.unlock.skin[i] = 1 : r.unlock.skin[i] = 0;
           for (e = COSMETICS.ACCESSORY,
           i = 0; i < e.length; i++)
               e[i].rarity === RARITY.FREE ? r.unlock.accessory[i] = 1 : r.unlock.accessory[i] = 0;
           for (e = COSMETICS.BAG,
           i = 0; i < e.length; i++)
               e[i].rarity === RARITY.FREE ? r.unlock.bag[i] = 1 : r.unlock.bag[i] = 0;
           for (e = COSMETICS.BOOK,
           i = 0; i < e.length; i++)
               e[i].rarity === RARITY.FREE ? r.unlock.book[i] = 1 : r.unlock.book[i] = 0;
           for (e = COSMETICS.CRATE,
           i = 0; i < e.length; i++)
               e[i].rarity === RARITY.FREE ? (r.unlock.crate[i] = 1,
               r.unlock.dead[i] = 1) : (r.unlock.crate[i] = 0,
               r.unlock.dead[i] = 0)
       }
       this.waiting = !1,
       this.in_this_view = 0,
       this.current_mode_score = -1,
       this.loading = {
           translate: {
               x: 0,
               y: 0
           },
           angle: 0,
           img: sprite[SPRITE.GEAR2],
           draw: function() {
               this.angle += 2 * jI,
               i.save(),
               i.translate(this.translate.x + this.img.width / 2, this.translate.y + this.img.height / 2),
               i.rotate(this.angle),
               qn(i, this.img, -this.img.width / 2, -this.img.height / 2),
               i.restore()
           }
       },
       this.langselect = {
           id: document.getElementById("langselect"),
           style: document.getElementById("langselect").style,
           translate: {
               x: 0,
               y: 0
           },
           update: function() {
               this.style.left = Math.floor(this.translate.x) + "px",
               this.style.top = Math.floor(this.translate.y) + "px"
           }
       },
       this.bread = 0,
       this.previous_bread = -1,
       this.bread_img = void 0,
       this.new_nickname = "",
       this.previous_new_nickname = "",
       this.new_nickname_img = void 0,
       this.lvl = 0,
       this.previous_lvl = -1,
       this.lvl_img = void 0,
       this.xp = 0,
       this.xp_dest = 0,
       this.firstName = 0,
       this.kill = 0,
       this.death = 0,
       this.time = 0,
       this.score = 0,
       this.scoreTotal = 0,
       this.bestKill = 0,
       this.bestTime = 0,
       this.bestScore = 0,
       this.seasons = [],
       this.kit = -1,
       this.previous_kit_hour = -1,
       this.previous_kit_min = -1,
       this.kit_img_min = void 0,
       this.kit_img_hour = void 0,
       this.privateServerTime = -1,
       this.previous_privateServerTime_day = -1,
       this.previous_privateServerTime_hour = -1,
       this.previous_privateServerTime_min = -1,
       this.privateServerTime_img_min = void 0,
       this.privateServerTime_img_hour = void 0,
       this.privateServerTime_img_day = void 0,
       this.cosmetic_name = void 0,
       this.cosmetic_author = void 0,
       this.leaderboard_range = void 0,
       this.leaderboard_mode = void 0,
       this.leaderboard_sorted = void 0,
       this.leaderboard_season = void 0,
       this.profile_season = 3,
       this.breath = 0,
       this.settings = !1,
       this.quality = Cookies.get("starve_quality") ? Cookies.get("starve_quality") : "high",
       "high" === this.quality ? (document.getElementById("high_ing").style.backgroundColor = "#B56D18",
       document.getElementById("low_ing").style.backgroundColor = "#3A2A0D",
       this.quality = 1) : (document.getElementById("low_ing").style.backgroundColor = "#B56D18",
       document.getElementById("high_ing").style.backgroundColor = "#3A2A0D",
       this.quality = 0),
       this.high_quality = function() {
           document.getElementById("high_ing").style.backgroundColor = "#B56D18",
           document.getElementById("low_ing").style.backgroundColor = "#3A2A0D",
           Cookies.set("starve_quality", "high", {
               expires: 30
           }),
           document.getElementById("input_ratio").value = 1,
           xI.change_ratio(),
           YI.quality = 1
       }
       ,
       this.low_quality = function() {
           document.getElementById("high_ing").style.backgroundColor = "#3A2A0D",
           document.getElementById("low_ing").style.backgroundColor = "#B56D18",
           Cookies.set("starve_quality", "low", {
               expires: 30
           }),
           document.getElementById("input_ratio").value = .5 / (c / v),
           xI.change_ratio(),
           YI.quality = 0
       }
       ,
       void 0 === Cookies.get("starve_mapping") && "FR" === D ? (XI.set_azerty(),
       this.mapping = "azerty") : this.mapping = Cookies.get("starve_mapping") ? Cookies.get("starve_mapping") : "qwerty",
       "azerty" == this.mapping ? (XI.set_azerty(),
       document.getElementById("azerty_ing").style.backgroundColor = "#B56D18",
       document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D") : (document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18",
       document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D"),
       this.set_azerty = function() {
           XI.set_azerty(),
           document.getElementById("azerty_ing").style.backgroundColor = "#B56D18",
           document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D",
           Cookies.set("starve_mapping", "azerty", {
               expires: 30
           })
       }
       ,
       this.set_qwerty = function() {
           XI.set_qwerty(),
           document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D",
           document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18",
           Cookies.set("starve_mapping", "qwerty", {
               expires: 30
           })
       }
       ,
       this.all_rights_reserved = {
           id: document.getElementById("all_rights_reserved"),
           style: document.getElementById("all_rights_reserved").style,
           translate: {
               x: 0,
               y: 0
           },
           update: function() {
               this.style.left = this.translate.x + "px",
               this.style.top = Math.floor(this.translate.y) + "px"
           }
       },
       o(),
       this.unlock = {},
       this.unlock.skin = [],
       this.unlock.bag = [],
       this.unlock.book = [],
       this.unlock.crate = [],
       this.unlock.dead = [],
       this.unlock.accessory = [],
       this.day_mode = 0,
       this.unlock_cosmetics = a,
       a(),
       this.trevda = {
           id: document.getElementById("trevda"),
           style: document.getElementById("trevda").style,
           translate: {
               x: 0,
               y: 0
           },
           update: function() {
               this.style.left = this.translate.x + "px",
               this.style.top = Math.floor(this.translate.y) + "px"
           }
       };
       var T, I = 0, E = function() {
           if (r.update(),
           30 == ++I)
               return r.add_event_listener(),
               r.in_this_view = !0,
               void r.update();
           window.setTimeout(E, 33)
       };
       this.quit = function(e) {
           T = e,
           r.remove_event_listener(),
           r.in_this_view = 0,
           _ = -1,
           u()
       }
       ;
       var _ = -1
         , u = function() {
           if (r.update(),
           30 == ++_)
               return Cookies.set("starve_nickname", r.nickname.input.value, {
                   expires: 30
               }),
               r.nickname.style.display = "none",
               r.server_list.style.display = "none",
               r.langselect.style.display = "none",
               r.all_rights_reserved.style.display = "none",
               r.trevda.style.display = "none",
               r.stop(),
               void T();
           window.setTimeout(u, 33)
       };
       this.is_run = !1,
       this.stop = function() {
           this.is_run = !1
       }
       ,
       this.run = function() {
           EI(),
           document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[KI.time],
           r.nickname.style.display = "inline-block",
           r.server_list.style.display = "inline-block",
           r.langselect.style.display = "inline-block",
           r.all_rights_reserved.style.display = "inline-block",
           r.trevda.style.display = "inline-block",
           r.waiting = !1,
           r.is_run = !0,
           _ = -1,
           I = 0,
           E()
       }
       ,
       this.update_component = function(e, i) {
           i = i < 0 ? -i : i,
           (e.position & te) === te ? (e.position & Q) === Q ? e.translate.x = d + e.translate._x - i : (e.position & $) === $ ? e.translate.x = d + e.translate._x + i : e.translate.x = d + e.translate._x : (e.position & Q) === Q ? e.translate.x = e.translate._x - i : (e.position & $) === $ ? e.translate.x = R - e.translate._x + i : e.translate.x = e.translate._x,
           (e.position & re) === re ? (e.position & ee) === ee ? e.translate.y = S + e.translate._y - i : (e.position & ie) === ie ? e.translate.y = S + e.translate._y + i : e.translate.y = S + e.translate._y : (e.position & ee) === ee ? e.translate.y = e.translate._y - i : (e.position & ie) === ie ? e.translate.y = A + e.translate._y + i : e.translate.y = e.translate._y,
           void 0 !== e.style && (e.style.left = Math.floor(e.translate.x) + "px",
           e.style.top = Math.floor(e.translate.y) + "px")
       }
       ,
       this.update = function() {
           var e = 0;
           if (30 != I || -1 != _) {
               if (30 != I)
                   e = 1500 / (I + 1) - 50;
               if (-1 != _)
                   e = -(1750 / (30 - _ + 1) - 48)
           }
           for (var i = 0; i < this.bkgd.length; i++)
               this.update_component(this.bkgd[i], e);
           for (i = 0; i < this.buttons.length; i++)
               this.update_component(this.buttons[i].info, e);
           for (i = 0; i < this.css.length; i++)
               this.update_component(this.css[i], e);
           if (this.loading.translate.x = (R - this.loading.img.width) / 2,
           this.loading.translate.y = 0,
           this.langselect.translate.x = R - 450,
           this.langselect.translate.y = A - 40,
           this.all_rights_reserved.translate.x = R - 340,
           this.all_rights_reserved.translate.y = A - 25,
           this.trevda.translate.x = R - 320,
           this.trevda.translate.y = 80,
           30 != I || -1 != _) {
               var t = 0;
               if (30 != I)
                   t = 1500 / (I + 1) - 50;
               if (-1 != _)
                   t = -(1750 / (30 - _ + 1) - 48);
               this.loading.translate.y -= t > 0 ? t : -t,
               this.langselect.translate.y -= t < 0 ? t : -t,
               this.all_rights_reserved.translate.y -= t < 0 ? t : -t
           }
           this.langselect.update(),
           this.all_rights_reserved.update(),
           this.trevda.update()
       }
       ,
       this.create_spin = function(e) {
           var i = document.createElement("canvas")
             , t = i.getContext("2d");
           i.width = 342,
           i.height = 342;
           for (var r = -Math.PI / 2, n = 0; n < e.length; n++) {
               var o = e[n][0]
                 , a = e[n][1] * Math.PI / 180;
               t.beginPath(),
               t.arc(171, 171, 170, r, r + a, !1),
               t.lineTo(171, 171),
               t.fillStyle = o,
               t.fill(),
               r += a
           }
           return i
       }
       ,
       this.generate_new_nickname = function() {
           this.new_nickname = document.getElementById("account_nickname_input").value,
           this.new_nickname !== this.previous_new_nickname && (this.previous_new_nickname = this.new_nickname,
           this.new_nickname_img = Zs(this.new_nickname, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550))
       }
       ,
       this.draw = function() {
           Jn(),
           YI.xp = s.lerp(YI.xp, YI.xp_dest, .03),
           this.bkgd[LEVEL_GAUGE].translate.x = this.bkgd[0].translate.x + -72 + 165 * YI.xp,
           this.bkgd[LEVEL_GAUGE].translate._x = this.bkgd[LEVEL_GAUGE].translate.x,
           this.bkgd[LEVEL_GAUGE].translate.y = this.bkgd[0].translate.y + 30,
           this.bkgd[LEVEL_GAUGE].translate._y = this.bkgd[LEVEL_GAUGE].translate.y;
           for (var e = 2; e < this.bkgd.length; e++)
               this.bkgd[e].active === oe && this.bkgd[e].draw(i);
           var t;
           if ((t = this.kit - Date.now()) > 0) {
               var n = Math.floor(t / 6e4)
                 , o = Math.floor(n / 60);
               (n %= 60) !== this.previous_kit_min && (this.previous_kit_min = n,
               n = n < 10 ? "0" + n : "" + n,
               r.kit_img_min = Zs(n, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)),
               o !== this.previous_kit_hour && (this.previous_kit_hour = o,
               o = o < 10 ? "0" + o : "" + o,
               r.kit_img_hour = Zs(o, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)),
               (T = this.bkgd[BAG_REMAIN_BOX]).draw(i);
               var a = this.kit_img_hour;
               qn(i, a, T.translate.x - a.width / 4 + 182, T.translate.y - a.height / 4 + 40, a.width / 2, a.height / 2);
               a = this.kit_img_min;
               qn(i, a, T.translate.x - a.width / 4 + 251, T.translate.y - a.height / 4 + 40, a.width / 2, a.height / 2)
           }
           if ((t = this.privateServerTime - Date.now()) > 0) {
               n = Math.floor(t / 6e4),
               o = Math.floor(n / 60);
               var T, I = Math.floor(o / 24);
               o %= 24,
               (n %= 60) !== this.previous_privateServerTime_min && (this.previous_privateServerTime_min = n,
               n = n < 10 ? "0" + n : "" + n,
               r.privateServerTime_img_min = Zs(n, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)),
               o !== this.previous_privateServerTime_hour && (this.previous_privateServerTime_hour = o,
               o = o < 10 ? "0" + o : "" + o,
               r.privateServerTime_img_hour = Zs(o, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)),
               I !== this.previous_privateServerTime_day && (this.previous_privateServerTime_day = I,
               I = I < 10 ? "0" + I : "" + I,
               r.privateServerTime_img_day = Zs(I, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)),
               (T = this.bkgd[SERVER_REMAIN_BOX]).draw(i);
               a = this.privateServerTime_img_day;
               qn(i, a, T.translate.x - a.width / 4 + 113, T.translate.y - a.height / 4 + 40, a.width / 2, a.height / 2);
               a = this.privateServerTime_img_hour;
               qn(i, a, T.translate.x - a.width / 4 + 182, T.translate.y - a.height / 4 + 40, a.width / 2, a.height / 2);
               a = this.privateServerTime_img_min;
               qn(i, a, T.translate.x - a.width / 4 + 251, T.translate.y - a.height / 4 + 40, a.width / 2, a.height / 2)
           }
           (this.current_view & l) === l ? this.buttons[GAME_BUTTON].info.state = Xs : (this.current_view & p) === p ? this.buttons[LEADERBOARD_BUTTON].info.state = Xs : (this.current_view & g) === g ? this.buttons[COSMETICS_BUTTON].info.state = Xs : (this.current_view & N) === N ? this.buttons[PROFILE_BUTTON].info.state = Xs : (this.current_view & O) === O ? this.buttons[TUTORIAL_BUTTON].info.state = Xs : (this.current_view & C) === C ? this.buttons[LOGIN_BUTTON].info.state = Xs : (this.current_view & b) === b || (this.current_view & G) === G || (this.current_view & L) === L || (this.current_view & f) === f || (this.current_view & V) === V || (this.current_view & z) === z || (this.current_view & H) === H ? this.buttons[SHOP_BUTTON].info.state = Xs : (this.current_view & y) === y || (this.current_view & w) === w || (this.current_view & B) === B || (this.current_view & K) === K || (this.current_view & W) === W || (this.current_view & Y) === Y ? this.buttons[COSMETICS_BUTTON].info.state = Xs : (this.current_view & F) === F || (this.current_view & x) === x || (this.current_view & J) === J ? this.buttons[SERVER_BUTTON].info.state = Xs : (this.current_view & X) === X && (this.buttons[PROFILE_BUTTON].info.state = Xs),
           (this.current_view & p) === p && (this.leaderboard_mode === this.LEADERBOARD_TOTAL ? (this.leaderboard_range = this.LEADERBOARD_ALL,
           this.buttons[this.LEADERBOARD_ALL].info.active = ne,
           this.buttons[this.LEADERBOARD_WEEK].info.active = ne,
           this.buttons[this.LEADERBOARD_TODAY].info.active = ne) : (this.buttons[this.LEADERBOARD_ALL].info.active = oe,
           this.buttons[this.LEADERBOARD_WEEK].info.active = oe,
           this.buttons[this.LEADERBOARD_TODAY].info.active = oe),
           this.leaderboard_mode === this.LEADERBOARD_NORMAL ? this.buttons[this.LEADERBOARD_NORMAL].info.state = Xs : this.leaderboard_mode === this.LEADERBOARD_VAMPIRE ? this.buttons[this.LEADERBOARD_VAMPIRE].info.state = Xs : this.leaderboard_mode === this.LEADERBOARD_TOTAL ? this.buttons[this.LEADERBOARD_TOTAL].info.state = Xs : this.leaderboard_mode === this.LEADERBOARD_ZOMBIE ? this.buttons[this.LEADERBOARD_ZOMBIE].info.state = Xs : this.leaderboard_mode === this.LEADERBOARD_FOREST && (this.buttons[this.LEADERBOARD_FOREST].info.state = Xs),
           this.leaderboard_range === this.LEADERBOARD_ALL ? this.buttons[this.LEADERBOARD_ALL].info.state = Xs : this.leaderboard_range === this.LEADERBOARD_WEEK ? this.buttons[this.LEADERBOARD_WEEK].info.state = Xs : this.leaderboard_range === this.LEADERBOARD_TODAY && (this.buttons[this.LEADERBOARD_TODAY].info.state = Xs),
           this.leaderboard_sorted === this.LEADERBOARD_KILL ? this.buttons[this.LEADERBOARD_KILL].info.state = Xs : this.leaderboard_sorted === this.LEADERBOARD_SCORE ? this.buttons[this.LEADERBOARD_SCORE].info.state = Xs : this.leaderboard_sorted === this.LEADERBOARD_TIME && (this.buttons[this.LEADERBOARD_TIME].info.state = Xs),
           this.leaderboard_season === this.LEADERBOARD_SEASON1 ? this.buttons[this.LEADERBOARD_SEASON1].info.state = Xs : this.leaderboard_season === this.LEADERBOARD_SEASON2 ? this.buttons[this.LEADERBOARD_SEASON2].info.state = Xs : this.leaderboard_season === this.LEADERBOARD_SEASON3 ? this.buttons[this.LEADERBOARD_SEASON3].info.state = Xs : this.leaderboard_season === this.LEADERBOARD_SEASON4 ? this.buttons[this.LEADERBOARD_SEASON4].info.state = Xs : this.leaderboard_season === this.LEADERBOARD_SEASON5 && (this.buttons[this.LEADERBOARD_SEASON5].info.state = Xs)),
           (this.current_view & N) === N && (-1 === this.current_mode_score ? this.buttons[ge].info.state = Xs : this.current_mode_score === ET.MODE_PVP ? this.buttons[be].info.state = Xs : this.current_mode_score === ET.MODE_ZOMBIES ? this.buttons[pe].info.state = Xs : this.current_mode_score === ET.MODE_VAMPIRES ? this.buttons[ce].info.state = Xs : this.current_mode_score === ET.MODE_LEGACY && (this.buttons[Oe].info.state = Xs),
           0 === this.profile_season ? this.buttons[de].info.state = Xs : 1 === this.profile_season ? this.buttons[Se].info.state = Xs : 2 === this.profile_season ? this.buttons[le].info.state = Xs : 3 === this.profile_season ? this.buttons[Ne].info.state = Xs : 4 === this.profile_season && (this.buttons[Ce].info.state = Xs)),
           (this.current_view & l) === l && 0 === WI.privateServer && (this.buttons[Ie].in_button(qI.pos) ? this.buttons[Ie].hint = Math.min(1, this.buttons[Ie].hint + 1.5 * jI) : this.buttons[Ie].hint = Math.max(0, this.buttons[Ie].hint - 1.5 * jI),
           this.buttons[Ee].in_button(qI.pos) ? this.buttons[Ee].hint = Math.min(1, this.buttons[Ee].hint + 1.5 * jI) : this.buttons[Ee].hint = Math.max(0, this.buttons[Ee].hint - 1.5 * jI),
           this.buttons[_e].in_button(qI.pos) ? this.buttons[_e].hint = Math.min(1, this.buttons[_e].hint + 1.5 * jI) : this.buttons[_e].hint = Math.max(0, this.buttons[_e].hint - 1.5 * jI),
           this.buttons[Re].in_button(qI.pos) ? this.buttons[Re].hint = Math.min(1, this.buttons[Re].hint + 1.5 * jI) : this.buttons[Re].hint = Math.max(0, this.buttons[Re].hint - 1.5 * jI),
           this.buttons[ue].in_button(qI.pos) ? this.buttons[ue].hint = Math.min(1, this.buttons[ue].hint + 1.5 * jI) : this.buttons[ue].hint = Math.max(0, this.buttons[ue].hint - 1.5 * jI),
           this.buttons[he].in_button(qI.pos) ? this.buttons[he].hint = Math.min(1, this.buttons[he].hint + 1.5 * jI) : this.buttons[he].hint = Math.max(0, this.buttons[he].hint - 1.5 * jI));
           var E = 1;
           if ((this.current_view & (G | L | f | V | z | H)) > 1) {
               a = IMAGES.ARROW_SPIN;
               i.save(),
               i.translate(d, Te + a.height / 4),
               1 === this.spin && (this.spin_effect += jI / 3,
               E = this.spin_target - 100 / Math.pow(1 + this.spin_effect, 1 + this.spin_effect),
               i.rotate(E)),
               qn(i, a, -a.width / 4, -a.height / 4, a.width / 2, a.height / 2),
               i.restore()
           }
           0 === WI.privateServer && (WI.current_mode === ET.MODE_PVP ? this.buttons[Ie].info.state = Xs : WI.current_mode === ET.MODE_LEGACY ? this.buttons[Ee].info.state = Xs : WI.current_mode === ET.MODE_ZOMBIES ? this.buttons[ue].info.state = Xs : WI.current_mode === ET.MODE_VAMPIRES ? this.buttons[he].info.state = Xs : WI.current_mode === ET.MODE_COMMUNITY ? this.buttons[_e].info.state = Xs : WI.current_mode === ET.MODE_EXPERIMENTAL && (this.buttons[Re].info.state = Xs));
           for (e = 1; e < this.buttons.length; e++)
               this.buttons[e].info.active === oe && this.buttons[e].draw(i);
           if (this.bkgd[0].draw(i),
           (this.current_view & (k | U)) > 0) {
               a = this.new_nickname_img;
               qn(i, a, d - a.width / 4, 138, a.width / 2, a.height / 2)
           }
           var _ = Math.max(1, Math.min(18, Math.floor((YI.lvl + 3) / 2)));
           if (this.bkgd[_].active = oe,
           this.bkgd[_].draw(i),
           this.bkgd[_].active = ne,
           this.buttons[0].draw(i),
           (this.current_view & (g | w | K | y | W)) > 1) {
               var u = (this.current_view & (w | K | y | W)) > 1 ? -190 : 0;
               a = sprite[SPRITE.BAG][this.bag][this.day_mode];
               qn(i, a, d - a.width / 4 + u, 183, a.width / 2, a.height / 2),
               this.breath = (this.breath + 1e3 * jI) % 2e3;
               var h = 4.5 * (this.breath < 1e3) ? this.breath / 1e3 : (2e3 - this.breath) / 1e3;
               a = sprite[SPRITE.BOOK][this.book][this.day_mode];
               qn(i, a, d - a.width / 4 - 62 + h + u, 240, a.width / 2, a.height / 2);
               a = sprite[SPRITE.HAND][this.skin][this.day_mode];
               qn(i, a, d - a.width / 4 - 54 + h + u, 272, a.width / 2, a.height / 2),
               qn(i, a, d - a.width / 4 + 54 - h + u, 272, a.width / 2, a.height / 2);
               a = sprite[SPRITE.BODY][this.skin][this.day_mode];
               qn(i, a, d - a.width / 4 + u, 222, a.width / 2, a.height / 2);
               a = sprite[SPRITE.ACCESSORY][this.accessory][this.day_mode];
               qn(i, a, d - a.width / 4 + u, 222, a.width / 2, a.height / 2)
           }
           if ((this.current_view & g) === g) {
               a = sprite[SPRITE.CRATE][this.crate][this.day_mode];
               qn(i, a, d - a.width / 4 - 61, 406 - a.height / 4, a.width / 2, a.height / 2);
               a = sprite[SPRITE.CRATE][this.dead][this.day_mode];
               qn(i, a, d - a.width / 4 + 53, 406 - a.height / 4, a.width / 2, a.height / 2)
           }
           if ((this.current_view & B) === B) {
               a = sprite[SPRITE.CRATE][this.dead][this.day_mode];
               qn(i, a, d - a.width / 4 - 200, 268 - a.height / 4, a.width / 2, a.height / 2)
           }
           if ((this.current_view & Y) === Y) {
               a = sprite[SPRITE.CRATE][this.crate][this.day_mode];
               qn(i, a, d - a.width / 4 - 200, 268 - a.height / 4, a.width / 2, a.height / 2)
           }
           if ((this.current_view & (w | K | y | W | B | Y)) > 1) {
               for (e = 1; e < this.buttons.length; e++)
                   if (0 != (this.buttons[e].view & this.current_view)) {
                       var R = this.buttons[e].info;
                       if (R.cosmeticId >= 0) {
                           a = R.cosmeticType[R.cosmeticId].day;
                           if (qn(i, a, R.translate.x - a.width / 8 + 44.5, R.translate.y - a.height / 8 + 45.5, a.width / 4, a.height / 4),
                           1 !== R.unlocked) {
                               a = IMAGES.RED_LOCKED;
                               qn(i, a, R.translate.x - a.width / 4 + 44.5, R.translate.y - a.height / 4 + 44.5, a.width / 2, a.height / 2)
                           }
                       }
                   }
               a = this.cosmetic_name;
               qn(i, a, d - 312, 375, a.width / 2, a.height / 2);
               a = this.cosmetic_author;
               qn(i, a, d - 312, 395, a.width / 2, a.height / 2)
           }
           if (this.bread !== this.previous_bread && (this.previous_bread = this.bread,
           this.bread_img = Zs("" + this.bread, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250)),
           qn(i, this.bread_img, this.bkgd[0].translate.x + 350, 15, this.bread_img.w2, this.bread_img.h2),
           this.lvl !== this.previous_lvl && (this.previous_lvl = this.lvl,
           this.lvl_img = Zs("LVL " + (this.lvl + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, void 0, 30, 24, void 0, void 0, void 0, void 0, "#3F3019", 20)),
           qn(i, this.lvl_img, this.bkgd[0].translate.x + 94, 0, this.lvl_img.w2, this.lvl_img.h2),
           0 === WI.privateServer) {
               var A;
               if ((A = this.buttons[Ie].hint) > 0) {
                   a = IMAGES.NORMAL_MODE_HOVER;
                   qn(i, a, d - a.width / 4, -36 - a.height * s.ease_in_out_quad(1 - A) / 2, a.width / 2, a.height / 2)
               }
               if ((A = this.buttons[Ee].hint) > 0) {
                   a = IMAGES.FOREST_MODE_HOVER;
                   qn(i, a, d - a.width / 4, -36 - a.height * s.ease_in_out_quad(1 - A) / 2, a.width / 2, a.height / 2)
               }
               if ((A = this.buttons[_e].hint) > 0) {
                   a = IMAGES.MODE_COMMUNITY_HOVER;
                   qn(i, a, d - a.width / 4, -36 - a.height * s.ease_in_out_quad(1 - A) / 2, a.width / 2, a.height / 2)
               }
               if ((A = this.buttons[Re].hint) > 0) {
                   a = IMAGES.MODE_EXPERIMENTAL_HOVER;
                   qn(i, a, d - a.width / 4, -36 - a.height * s.ease_in_out_quad(1 - A) / 2, a.width / 2, a.height / 2)
               }
               if ((A = this.buttons[he].hint) > 0) {
                   a = IMAGES.VAMPIRE_MODE_HOVER;
                   qn(i, a, d - a.width / 4, -36 - a.height * s.ease_in_out_quad(1 - A) / 2, a.width / 2, a.height / 2)
               }
               if ((A = this.buttons[ue].hint) > 0) {
                   a = IMAGES.ZOMBIE_MODE_HOVER;
                   qn(i, a, d - a.width / 4, -36 - a.height * s.ease_in_out_quad(1 - A) / 2, a.width / 2, a.height / 2)
               }
           }
           if (1 === this.spin && Math.abs(E - this.spin_target) < .006) {
               i.globalAlpha = Math.min(1, 3 * this.spin_win_effect);
               a = IMAGES.SPIN_LIGHT;
               i.save(),
               i.translate(d, 260),
               this.spin_win_effect += jI,
               i.rotate(this.spin_win_effect),
               qn(i, a, -a.width / 2, -a.height / 2, a.width, a.height),
               i.restore();
               h = 1.05 + .05 * Math.sin(5 * this.spin_win_effect);
               if (0 === this.spin_type) {
                   var S = h * (a = COSMETICS.SKIN[this.spin_win].day).width
                     , c = h * a.height;
                   qn(i, a, d - S / 2, 260 - c / 2, S, c)
               } else if (1 === this.spin_type) {
                   S = h * (a = COSMETICS.SKIN[0].day).width,
                   c = h * a.height;
                   qn(i, a, d - S / 2, 260 - c / 2, S, c);
                   S = h * (a = COSMETICS.ACCESSORY[this.spin_win].day).width,
                   c = h * a.height;
                   qn(i, a, d - S / 2, 260 - c / 2, S, c)
               } else if (2 === this.spin_type) {
                   S = h * (a = COSMETICS.BAG[this.spin_win].day).width,
                   c = h * a.height;
                   qn(i, a, d - S / 2, 180 - c / 2, S, c);
                   S = h * (a = COSMETICS.SKIN[0].day).width,
                   c = h * a.height;
                   qn(i, a, d - S / 2, 260 - c / 2, S, c)
               } else if (3 === this.spin_type) {
                   S = h * (a = COSMETICS.BOOK[this.spin_win].day).width,
                   c = h * a.height;
                   i.save(),
                   i.translate(d, 260),
                   i.rotate(Math.PI),
                   qn(i, a, -S / 2, -c / 2, S, c),
                   i.restore()
               } else if (4 === this.spin_type) {
                   S = h * (a = COSMETICS.CRATE[this.spin_win].day).width,
                   c = h * a.height;
                   qn(i, a, d - S / 2, 260 - c / 2, S, c)
               }
               a = this.spin_name;
               qn(i, a, d - a.width / 4, 340, a.width / 2, a.height / 2);
               a = this.spin_author;
               qn(i, a, d - a.width / 4, 365, a.width / 2, a.height / 2),
               this.spin_win_effect > 6 && (this.spin = 0,
               Z(b)),
               i.globalAlpha = 1
           }
           kI.alert.draw("#FFF", "#000"),
           r.waiting && this.loading.draw()
       }
       ;
       var h = 0
         , l = Math.pow(2, h++)
         , N = Math.pow(2, h++);
       this.__PROFILE__ = N;
       var C = Math.pow(2, h++)
         , g = Math.pow(2, h++)
         , b = Math.pow(2, h++)
         , O = Math.pow(2, h++)
         , p = Math.pow(2, h++)
         , P = Math.pow(2, h++);
       this.__BUY__ = P;
       var m = Math.pow(2, h++)
         , M = Math.pow(2, h++)
         , G = Math.pow(2, h++)
         , L = Math.pow(2, h++)
         , f = Math.pow(2, h++)
         , V = Math.pow(2, h++)
         , z = Math.pow(2, h++)
         , H = Math.pow(2, h++)
         , y = Math.pow(2, h++)
         , B = Math.pow(2, h++)
         , w = Math.pow(2, h++)
         , K = Math.pow(2, h++)
         , W = Math.pow(2, h++)
         , Y = Math.pow(2, h++)
         , U = Math.pow(2, h++)
         , k = Math.pow(2, h++)
         , F = Math.pow(2, h++);
       this.__SERVER_LOCATION__ = F;
       var x = Math.pow(2, h++);
       this.__SERVER_DURATION__ = x;
       var J = Math.pow(2, h++);
       this.__SERVER_ACCESS__ = J;
       var X = Math.pow(2, h++);
       function q(e, i, t) {
           for (var n = 0; n < r.bkgd.length; n++)
               0 != (r.bkgd[n].view & e) && (r.bkgd[n].active = i);
           for (n = 0; n < r.buttons.length; n++)
               0 != (r.buttons[n].view & e) && (r.buttons[n].info.active = i);
           for (n = 0; n < r.css.length; n++)
               0 != (r.css[n].view & e) && (r.css[n].style.display = t)
       }
       this.current_view = l;
       function j() {
           var e = Number(Cookies.get("starve_crate"))
             , i = Number(Cookies.get("starve_dead"))
             , t = Number(Cookies.get("starve_book"))
             , r = Number(Cookies.get("starve_bag"))
             , n = Number(Cookies.get("starve_skin"))
             , o = Number(Cookies.get("starve_accessory"));
           YI.unlock.skin[YI.skin] > 0 || (YI.skin = YI.unlock.skin[n] > 0 ? n : 0),
           YI.unlock.book[YI.book] > 0 || (YI.book = YI.unlock.book[t] > 0 ? t : 0),
           YI.unlock.dead[YI.dead] > 0 || (YI.dead = YI.unlock.dead[i] > 0 ? i : 0),
           YI.unlock.crate[YI.crate] > 0 || (YI.crate = YI.unlock.crate[e] > 0 ? e : 0),
           YI.unlock.accessory[YI.accessory] > 0 || (YI.accessory = YI.unlock.accessory[o] > 0 ? o : 0),
           YI.unlock.bag[YI.bag] > 0 || (YI.bag = YI.unlock.bag[r] > 0 ? r : 0)
       }
       function Z(e) {
           !1 !== r.in_this_view && (q(m, ne, "none"),
           q(M, ne, "none"),
           j(),
           e === r.current_view || r.spin >= 1 || (r.trevda.style.display = e === l || e === b || e === N || e === p || e === g || e === O ? "inline-block" : "none",
           q(r.current_view, ne, "none"),
           r.current_view = e,
           q(r.current_view, oe, "inline-block")))
       }
       this.select_subview = Z,
       this.play_game = function() {
           !1 === r.waiting && (kI.reconnect.enabled = !1,
           r.waiting = !0,
           j(),
           WI.connect())
       }
       ;
       var Q = 1
         , $ = 2
         , ee = 4
         , ie = 8
         , te = 16
         , re = 32
         , ne = 0
         , oe = 1;
       window.innerWidth < 1300 ? this.nickname = {
           id: document.getElementById("nickname_block"),
           style: document.getElementById("nickname_block").style,
           input: document.getElementById("nickname_input"),
           active: oe,
           position: ee | Q,
           view: l,
           translate: {
               x: 0,
               y: 0,
               _x: 200,
               _y: 184
           }
       } : this.nickname = {
           id: document.getElementById("nickname_block"),
           style: document.getElementById("nickname_block").style,
           input: document.getElementById("nickname_input"),
           active: oe,
           position: ee | te,
           view: l,
           translate: {
               x: 0,
               y: 0,
               _x: -180,
               _y: 184
           }
       },
       this.nickname.id.addEventListener("keyup", (function(e) {
           e.preventDefault(),
           13 != e.keyCode || r.waiting || r.settings || r.play_game()
       }
       )),
       this.nickname.input.value = Cookies.get("starve_nickname") ? Cookies.get("starve_nickname") : "",
       this.account_nickname = {
           id: document.getElementById("account_nickname_block"),
           style: document.getElementById("account_nickname_block").style,
           input: document.getElementById("account_nickname_input"),
           active: ne,
           position: ee | te,
           view: N,
           translate: {
               x: 0,
               y: 0,
               _x: -122,
               _y: 110
           }
       },
       window.innerWidth < 1300 ? this.server_list = {
           id: document.getElementById("servselect"),
           style: document.getElementById("servselect").style,
           active: oe,
           position: ee | Q,
           view: l,
           translate: {
               x: 0,
               y: 0,
               _x: 208,
               _y: 225
           }
       } : this.server_list = {
           id: document.getElementById("servselect"),
           style: document.getElementById("servselect").style,
           active: oe,
           position: ee | te,
           view: l,
           translate: {
               x: 0,
               y: 0,
               _x: -180,
               _y: 225
           }
       },
       this.leaderboard = {
           id: document.getElementById("leaderboard"),
           style: document.getElementById("leaderboard").style,
           active: ne,
           position: ee | te,
           view: p,
           translate: {
               x: 0,
               y: 0,
               _x: -294.5,
               _y: 190
           }
       },
       this.stats_box = {
           id: document.getElementById("stats_box"),
           style: document.getElementById("stats_box").style,
           active: ne,
           position: ee | te,
           view: N,
           translate: {
               x: 0,
               y: 0,
               _x: 125,
               _y: 187
           }
       },
       this.serverAddressBlock = {
           id: document.getElementById("serverAddressBlock"),
           style: document.getElementById("serverAddressBlock").style,
           input: document.getElementById("serverAddressInput"),
           active: ne,
           position: ee | te,
           view: J,
           translate: {
               x: 0,
               y: 0,
               _x: -220,
               _y: 350
           }
       },
       h = 0,
       this.css = [],
       this.css[h++] = this.nickname,
       this.css[h++] = this.server_list,
       this.css[h++] = this.leaderboard,
       this.css[h++] = this.account_nickname,
       this.css[h++] = this.stats_box,
       this.css[h++] = this.serverAddressBlock,
       h = 0,
       this.bkgd = [],
       this.bkgd[h++] = $s(IMAGES.AVATAR_RESUME, oe, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL1, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL2, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL3, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL4, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL5, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL6, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL7, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL8, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL9, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL10, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL11, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL12, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL13, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL14, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL15, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL16, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL17, ne, 0, 0, Q),
       this.bkgd[h++] = $s(IMAGES.AVATAR_LVL18, ne, 0, 0, Q),
       window.innerWidth < 1300 ? this.bkgd[h] = $s(IMAGES.LOGO_INTERFACE, oe, 200, 100, ee | Q) : this.bkgd[h] = $s(IMAGES.LOGO_INTERFACE, oe, -753 / 4, 100, ee | te),
       this.bkgd[h++].view = l,
       this.bkgd[h++] = $s(IMAGES.LINKS_BG, oe, 353, -10, $),
       window.innerWidth > 1300 && (this.bkgd[h] = $s(IMAGES.CHANGELOG_BOX, oe, -885 / 4, -159.5, ie | te),
       this.bkgd[h++].view = l),
       this.bkgd[h] = $s(IMAGES.PROFILE_BOX, ne, -323.25, 100, ee | te),
       this.bkgd[h++].view = N,
       this.bkgd[h] = $s(IMAGES.SKINS_BOX, ne, -356.25, 100, ee | te),
       this.bkgd[h++].view = g,
       this.bkgd[h] = $s(IMAGES.ACCOUNT_BOX, ne, -905 / 4, 50, ee | te),
       this.bkgd[h++].view = C,
       this.bkgd[h] = $s(IMAGES.SHOP_BOX, ne, -402, 130, ee | te),
       this.bkgd[h++].view = b,
       this.bkgd[h] = $s(IMAGES.SERVER_LOCATION_BOX, ne, -279.25, 130, ee | te),
       this.bkgd[h++].view = F,
       this.bkgd[h] = $s(IMAGES.SERVER_DURATION_BOX, ne, -305.5, 130, ee | te),
       this.bkgd[h++].view = x,
       this.bkgd[h] = $s(IMAGES.SERVER_ACCESS_BOX, ne, -305.5, 100, ee | te),
       this.bkgd[h++].view = J,
       this.bkgd[h] = $s(IMAGES.SEASON5_BOX, ne, -IMAGES.SEASON5_BOX.width / 4 - 350, -15, ee | te),
       this.bkgd[h++].view = X,
       this.bkgd[h] = $s(IMAGES.TUTORIAL_BOX, ne, -374.25, 110, ee | te),
       this.bkgd[h++].view = O,
       this.bkgd[h] = $s(IMAGES.LEADERBOARD_BOX, ne, -306.5, 100, ee | te),
       this.bkgd[h++].view = p,
       this.bkgd[h] = $s(IMAGES.BUY_BREAD_BOX, ne, -345.25, 80, ee | te),
       this.bkgd[h++].view = P,
       this.bkgd[h] = $s(IMAGES.SPIN1, ne, -385.5, 150, ee | te),
       this.bkgd[h++].view = G;
       var ae = 3.6
         , se = this.create_spin([["#25c5d6", 10.8], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", 57 * ae]]);
       this.bkgd[h] = $s(se, ne, -se.width / 4, 178, ee | te),
       this.bkgd[h++].view = G,
       this.play_spin = function(e, i, t) {
           var n;
           r.spin = 1,
           r.spin_effect = 0,
           r.spin_win_effect = 0,
           r.spin_target = e,
           r.spin_type = i;
           var o = 0;
           if (0 === i) {
               for (o = 0; o < COSMETICS.SKIN.length && t !== COSMETICS.SKIN[o].id; o++)
                   ;
               n = COSMETICS.SKIN[o],
               r.unlock.skin[o] = 1
           } else if (1 === i) {
               for (o = 0; o < COSMETICS.ACCESSORY.length && t !== COSMETICS.ACCESSORY[o].id; o++)
                   ;
               n = COSMETICS.ACCESSORY[o],
               r.unlock.accessory[o] = 1
           } else if (2 === i) {
               for (o = 0; o < COSMETICS.BAG.length && t !== COSMETICS.BAG[o].id; o++)
                   ;
               n = COSMETICS.BAG[o],
               r.unlock.bag[o] = 1
           } else if (3 === i) {
               for (o = 0; o < COSMETICS.BOOK.length && t !== COSMETICS.BOOK[o].id; o++)
                   ;
               n = COSMETICS.BOOK[o],
               r.unlock.book[o] = 1
           } else if (4 === i) {
               for (o = 0; o < COSMETICS.CRATE.length && t !== COSMETICS.CRATE[o].id; o++)
                   ;
               n = COSMETICS.CRATE[o],
               r.unlock.crate[o] = 1,
               r.unlock.dead[o] = 1
           }
           r.spin_win = o,
           r.spin_author = Zs("by " + n.author, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, void 0, 30, 24, void 0, void 0, void 0, void 0, "#000000", 24),
           r.spin_name = Zs(n.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, void 0, 30, 24, void 0, void 0, void 0, void 0, "#000000", 20)
       }
       ,
       this.spin = 0,
       this.spin_effect = 0,
       this.spin_target = 0,
       this.spin_type = 0,
       this.spin_win_effect = 0,
       this.spin_author = void 0,
       this.spin_name = void 0;
       var Te = 197;
       this.bkgd[h] = $s(IMAGES.SPIN2, ne, -385.5, 150, ee | te),
       this.bkgd[h++].view = z;
       se = this.create_spin([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", 57 * ae]]);
       this.bkgd[h] = $s(se, ne, -se.width / 4, 178, ee | te),
       this.bkgd[h++].view = z,
       this.bkgd[h] = $s(IMAGES.SPIN3, ne, -385.5, 150, ee | te),
       this.bkgd[h++].view = f;
       se = this.create_spin([["#d33a2a", 10.8], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", 57 * ae]]);
       this.bkgd[h] = $s(se, ne, -se.width / 4, 178, ee | te),
       this.bkgd[h++].view = f,
       this.bkgd[h] = $s(IMAGES.SPIN4, ne, -385.5, 150, ee | te),
       this.bkgd[h++].view = V;
       se = this.create_spin([["#25c5d6", 10.8], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", 57 * ae]]);
       this.bkgd[h] = $s(se, ne, -se.width / 4, 178, ee | te),
       this.bkgd[h++].view = V,
       this.bkgd[h] = $s(IMAGES.SPIN5, ne, -385.5, 150, ee | te),
       this.bkgd[h++].view = L;
       se = this.create_spin([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", 57 * ae]]);
       this.bkgd[h] = $s(se, ne, -se.width / 4, 178, ee | te),
       this.bkgd[h++].view = L,
       this.bkgd[h] = $s(IMAGES.SPIN6, ne, -385.5, 150, ee | te),
       this.bkgd[h++].view = H;
       se = this.create_spin([["#d33a2a", 10.8], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", 57 * ae]]);
       if (this.bkgd[h] = $s(se, ne, -se.width / 4, 178, ee | te),
       this.bkgd[h++].view = H,
       this.bkgd[h] = $s(IMAGES.CUSTOM_SKIN_BOX, ne, -341.5, 100, ee | te),
       this.bkgd[h++].view = y,
       this.bkgd[h] = $s(IMAGES.ACCESSORIES_BOX, ne, -341.5, 100, ee | te),
       this.bkgd[h++].view = W,
       this.bkgd[h] = $s(IMAGES.BAG_BOX, ne, -341.5, 100, ee | te),
       this.bkgd[h++].view = w,
       this.bkgd[h] = $s(IMAGES.BOOK_BOX, ne, -341.5, 100, ee | te),
       this.bkgd[h++].view = K,
       this.bkgd[h] = $s(IMAGES.CRATE_BOX, ne, -341.5, 100, ee | te),
       this.bkgd[h++].view = B,
       this.bkgd[h] = $s(IMAGES.LOOT_BOX, ne, -341.5, 100, ee | te),
       this.bkgd[h++].view = Y,
       BAG_REMAIN_BOX = h++,
       this.bkgd[BAG_REMAIN_BOX] = $s(IMAGES.BAG_REMAIN_BOX, ne, 484, 0, ee),
       SERVER_REMAIN_BOX = h++,
       this.bkgd[SERVER_REMAIN_BOX] = $s(IMAGES.SERVER_REMAIN_BOX, ne, 812.5, 0, ee),
       this.bkgd[h] = $s(IMAGES.LOCKED_CUSTOM_ALERT, ne, -189.5, -5, ee | te),
       this.bkgd[h++].view = M,
       this.bkgd[h] = $s(IMAGES.LOCKED_SKIN_ALERT, ne, -189.5, -5, ee | te),
       this.bkgd[h++].view = m,
       LEVEL_GAUGE = h++,
       this.bkgd[LEVEL_GAUGE] = $s(IMAGES.GAUGE, oe, 93, 30, ee),
       this.bkgd[h] = $s(IMAGES.CHANGE_NICKNAME1_BOX, ne, -173, 110, ee | te),
       this.bkgd[h++].view = U,
       this.bkgd[h] = $s(IMAGES.CHANGE_NICKNAME0_BOX, ne, -173, 110, ee | te),
       this.bkgd[h++].view = k,
       h = 0,
       this.buttons = [],
       this.buttons[h++] = Qs(50, 57, "", [IMAGES.BUY_BREAD_OUT, IMAGES.BUY_BREAD_IN, IMAGES.BUY_BREAD_CLICK], 1, 0, (function() {
           r.isUserLogged() ? Z(P) : Z(C)
       }
       ), 320, 0, Q, oe),
       window.innerWidth < 1300 ? this.buttons[h] = Qs(202, 97, "", [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], 1, 0, this.play_game, 462, 235, ee | Q, oe) : this.buttons[h] = Qs(202, 97, "", [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], 1, 0, this.play_game, 74, 235, ee | te, oe),
       this.buttons[h++].view = l,
       window.innerWidth > 1300 && (this.buttons[h] = Qs(355, 208, "", [IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT], 1, 0, (function() {
           window.open("./changelog.html", "_blank")
       }
       ), -195, -125, ie | te, oe),
       this.buttons[h++].view = l,
       this.buttons[h] = Qs(355, 168, "", [IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT], 1, 0, (function() {
           window.open("https://devast.io", "_blank")
       }
       ), 20, -115, ie | te, oe),
       this.buttons[h++].view = l),
       this.buttons[h++] = Qs(80, 80, "", [IMAGES.DISCORD_BUTTON_OUT, IMAGES.DISCORD_BUTTON_IN, IMAGES.DISCORD_BUTTON_CLICK], 1, 0, (function() {
           window.open("https://discord.gg/starveio", "_blank")
       }
       ), 330, 10, $, oe),
       this.buttons[h++] = Qs(80, 80, "", [IMAGES.REDDIT_BUTTON_OUT, IMAGES.REDDIT_BUTTON_IN, IMAGES.REDDIT_BUTTON_CLICK], 1, 0, (function() {
           window.open("https://reddit.com/r/starveio", "_blank")
       }
       ), 280, 10, $, oe),
       this.buttons[h++] = Qs(80, 80, "", [IMAGES.WIKI_BUTTON_OUT, IMAGES.WIKI_BUTTON_IN, IMAGES.WIKI_BUTTON_CLICK], 1, 0, (function() {
           window.open("https://starveiopro.wikia.com/wiki/", "_blank")
       }
       ), 230, 10, $, oe),
       this.buttons[h++] = Qs(80, 80, "", [IMAGES.FACEBOOK_BUTTON_OUT, IMAGES.FACEBOOK_BUTTON_IN, IMAGES.FACEBOOK_BUTTON_CLICK], 1, 0, (function() {
           window.open("https://www.facebook.com/pages/category/Video-Game/limaxio-571818073000979/", "_blank")
       }
       ), 155, 10, $, oe),
       this.buttons[h++] = Qs(80, 80, "", [IMAGES.TWITTER_BUTTON_OUT, IMAGES.TWITTER_BUTTON_IN, IMAGES.TWITTER_BUTTON_CLICK], 1, 0, (function() {
           window.open("https://twitter.com/lapamauve", "_blank")
       }
       ), 105, 10, $, oe),
       this.buttons[h++] = Qs(80, 80, "", [IMAGES.YOUTUBE_BUTTON_OUT, IMAGES.YOUTUBE_BUTTON_IN, IMAGES.YOUTUBE_BUTTON_CLICK], 1, 0, (function() {
           window.open("https://youtube.com/c/lapamauve", "_blank")
       }
       ), 55, 10, $, oe),
       LEADERBOARD_BUTTON = h++,
       this.buttons[LEADERBOARD_BUTTON] = Qs(232, 142, "", [IMAGES.ICONS_BOTTOM_BG_BUTTON_OUT, IMAGES.ICONS_BOTTOM_BG_BUTTON_IN, IMAGES.ICONS_BOTTOM_BG_BUTTON_CLICK], 1, 0, (function() {
           Z(p),
           BI(YI.LEADERBOARD_ALL, YI.LEADERBOARD_TOTAL, YI.LEADERBOARD_SCORE, YI.LEADERBOARD_SEASON5)
       }
       ), -5, 573, Q, oe),
       this.buttons[h++] = Qs(236, 165, "", [IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON], 1, 1, (function() {
           Z(p)
       }
       ), -5, 566, Q, oe),
       TUTORIAL_BUTTON = h++,
       this.buttons[TUTORIAL_BUTTON] = Qs(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, (function() {
           Z(O)
       }
       ), -5, 494, Q, oe),
       this.buttons[h++] = Qs(236, 165, "", [IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON], 1, 1, (function() {
           Z(O)
       }
       ), -5, 494, Q, oe),
       SERVER_BUTTON = h++,
       this.buttons[SERVER_BUTTON] = Qs(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, (function() {
           r.isUserLogged() ? YI.privateServerTime - Date.now() > 0 && Z(J) : Z(C)
       }
       ), -5, 415, Q, oe),
       this.buttons[h++] = Qs(236, 165, "", [IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON], 1, 1, (function() {
           r.isUserLogged() ? YI.privateServerTime - Date.now() > 0 && Z(J) : Z(C)
       }
       ), -5, 415, Q, oe),
       SHOP_BUTTON = h++,
       this.buttons[SHOP_BUTTON] = Qs(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, (function() {
           Z(b)
       }
       ), -5, 336, Q, oe),
       this.buttons[h++] = Qs(236, 165, "", [IMAGES.SHOP_ICON, IMAGES.SHOP_ICON, IMAGES.SHOP_ICON], 1, 1, (function() {
           Z(b)
       }
       ), -5, 336, Q, oe),
       COSMETICS_BUTTON = h++,
       this.buttons[COSMETICS_BUTTON] = Qs(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, (function() {
           Z(g)
       }
       ), -5, 257, Q, oe),
       this.buttons[h++] = Qs(236, 165, "", [IMAGES.SKINS_ICON, IMAGES.SKINS_ICON, IMAGES.SKINS_ICON], 1, 1, (function() {
           Z(g)
       }
       ), -5, 257, Q, oe),
       GAME_BUTTON = h++,
       this.buttons[GAME_BUTTON] = Qs(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, (function() {
           Z(l)
       }
       ), -5, 178, Q, oe),
       this.buttons[h++] = Qs(236, 165, "", [IMAGES.START_ICON, IMAGES.START_ICON, IMAGES.START_ICON], 1, 1, (function() {
           Z(l)
       }
       ), -5, 178, Q, oe),
       LOGIN_BUTTON = h++,
       this.LOGIN_BUTTON = LOGIN_BUTTON,
       this.buttons[LOGIN_BUTTON] = Qs(324, 222, "", [IMAGES.LOGIN_BUTTON_OUT, IMAGES.LOGIN_BUTTON_IN, IMAGES.LOGIN_BUTTON_CLICK], 1, 0, (function() {
           Z(C)
       }
       ), 0, 70, Q, oe),
       PROFILE_BUTTON = h++,
       PROFILE_BUTTON_2 = h++,
       this.PROFILE_BUTTON = PROFILE_BUTTON,
       this.PROFILE_BUTTON_2 = PROFILE_BUTTON_2,
       this.buttons[PROFILE_BUTTON] = Qs(324, 222, "", [IMAGES.PROFILE_BUTTON_OUT, IMAGES.PROFILE_BUTTON_IN, IMAGES.PROFILE_BUTTON_CLICK], 1, 0, (function() {
           Z(N),
           Ae(-1)
       }
       ), 0, 70, Q, ne),
       this.buttons[PROFILE_BUTTON_2] = Qs(324, 222, "", [IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON], 1, 1, (function() {
           Z(N),
           Ae(-1)
       }
       ), 0, 70, Q, ne),
       0 === WI.privateServer) {
           var Ie = h++;
           window.innerWidth < 1300 ? this.buttons[Ie] = Qs(266, 176, "", [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], 1, 0, (function() {
               WI.select_gamemode(ET.MODE_PVP)
           }
           ), 150, 300, Q | ee, oe) : this.buttons[Ie] = Qs(266, 176, "", [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], 1, 0, (function() {
               WI.select_gamemode(ET.MODE_PVP)
           }
           ), -340, 100, te | ee, oe),
           this.buttons[Ie].view = l,
           this.buttons[Ie].hint = 0;
           var Ee = h++;
           window.innerWidth < 1300 ? this.buttons[Ee] = Qs(266, 176, "", [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], 1, 0, (function() {
               WI.select_gamemode(ET.MODE_LEGACY)
           }
           ), 150, 400, Q | ee, oe) : this.buttons[Ee] = Qs(266, 176, "", [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], 1, 0, (function() {
               WI.select_gamemode(ET.MODE_LEGACY)
           }
           ), -340, 200, te | ee, oe),
           this.buttons[Ee].view = l,
           this.buttons[Ee].hint = 0;
           var _e = h++;
           window.innerWidth < 1300 ? this.buttons[_e] = Qs(266, 176, "", [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], 1, 0, (function() {
               WI.select_gamemode(ET.MODE_COMMUNITY)
           }
           ), 450, 300, Q | ee, oe) : this.buttons[_e] = Qs(266, 176, "", [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], 1, 0, (function() {
               WI.select_gamemode(ET.MODE_COMMUNITY)
           }
           ), -340, 300, te | ee, oe),
           this.buttons[_e].view = l,
           this.buttons[_e].hint = 0;
           var ue = h++;
           window.innerWidth < 1300 ? this.buttons[ue] = Qs(266, 176, "", [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], 1, 0, (function() {
               WI.select_gamemode(ET.MODE_ZOMBIES)
           }
           ), 300, 300, Q | ee, oe) : this.buttons[ue] = Qs(266, 176, "", [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], 1, 0, (function() {
               WI.select_gamemode(ET.MODE_ZOMBIES)
           }
           ), 204, 100, te | ee, oe),
           this.buttons[ue].view = l,
           this.buttons[ue].hint = 0;
           var he = h++;
           window.innerWidth < 1300 ? this.buttons[he] = Qs(266, 176, "", [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], 1, 0, (function() {
               WI.select_gamemode(ET.MODE_VAMPIRES)
           }
           ), 300, 400, Q | ee, oe) : this.buttons[he] = Qs(266, 176, "", [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], 1, 0, (function() {
               WI.select_gamemode(ET.MODE_VAMPIRES)
           }
           ), 204, 200, te | ee, oe),
           this.buttons[he].view = l,
           this.buttons[he].hint = 0;
           var Re = h++;
           this.buttons[Re] = Qs(266, 176, "", [IMAGES.MODE_EXPERIMENTAL_OUT, IMAGES.MODE_EXPERIMENTAL_IN, IMAGES.MODE_EXPERIMENTAL_CLICK], 1, 0, (function() {
               WI.select_gamemode(ET.MODE_EXPERIMENTAL)
           }
           ), window.innerWidth < 1300 ? 450 : 204, window.innerWidth < 1300 ? 400 : 300, (window.innerWidth < 1300 ? Q : te) | ee, oe),
           this.buttons[Re].view = l,
           this.buttons[Re].hint = 0
       }
       function Ae(e, i) {
           if (void 0 !== i) {
               YI.profile_season = i;
               var t = YI.seasons[i];
               YI.score = t.score,
               YI.kill = t.kill,
               YI.death = t.death,
               YI.time = t.time,
               YI.bestScore = t.bestScore,
               YI.bestKill = t.bestKill,
               YI.bestTime = t.bestTime,
               YI.scoreTotal = t.scoreTotal
           }
           if (void 0 === e && (e = YI.current_mode_score),
           YI.current_mode_score = e,
           e >= 0)
               document.getElementById("stats_box_time").innerHTML = YI.bestTime[e],
               document.getElementById("stats_box_kill").innerHTML = YI.bestKill[e],
               document.getElementById("stats_box_score").innerHTML = YI.bestScore[e];
           else {
               for (var r = 0, n = 0; n < YI.kill.length; n++)
                   r += YI.kill[n];
               var o = 0;
               for (n = 0; n < YI.time.length; n++)
                   o += YI.time[n];
               document.getElementById("stats_box_time").innerHTML = o,
               document.getElementById("stats_box_kill").innerHTML = r,
               document.getElementById("stats_box_score").innerHTML = YI.score
           }
       }
       this.buttons[h] = Qs(87, 78, "", [IMAGES.MODIFY_NAME_OUT, IMAGES.MODIFY_NAME_IN, IMAGES.MODIFY_NAME_CLICK], 1, 0, (function() {
           YI.generate_new_nickname(),
           0 === YI.firstName ? Z(k) : Z(U)
       }
       ), 127, 110, te | ee, ne),
       this.buttons[h++].view = N,
       this.buttons[h] = Qs(87, 78, "", [IMAGES.LOGOUT_OUT, IMAGES.LOGOUT_IN, IMAGES.LOGOUT_CLICK], 1, 0, (function() {
           cI()
       }
       ), 255, 110, te | ee, ne),
       this.buttons[h++].view = N,
       this.buttons[h] = Qs(58, 64, "", [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], 1, 0, (function() {
           Z(l)
       }
       ), 189, 118, te | ee, ne),
       this.buttons[h++].view = C,
       this.buttons[h] = Qs(497, 72, "", [IMAGES.LOGIN_GOOGLE_OUT, IMAGES.LOGIN_GOOGLE_IN, IMAGES.LOGIN_GOOGLE_CLICK], 1, 0, (function() {
           t.loginWithGoogle()
       }
       ), -130, 390, te | ee, ne),
       this.buttons[h++].view = C,
       this.buttons[h] = Qs(497, 72, "", [IMAGES.LOGIN_FACEBOOK_OUT, IMAGES.LOGIN_FACEBOOK_IN, IMAGES.LOGIN_FACEBOOK_CLICK], 1, 0, (function() {
           bI()
       }
       ), -130, 430, te | ee, ne),
       this.buttons[h++].view = C,
       __LEVEL_FACTOR__ = 2e4,
       this.xp_formula = function(e) {
           var i = YI.level_formula(e)
             , t = i * i * __LEVEL_FACTOR__;
           return (e -= t) / ((i + 1) * (i + 1) * __LEVEL_FACTOR__ - t)
       }
       ,
       this.level_formula = function(e) {
           return Math.floor(Math.sqrt(e / __LEVEL_FACTOR__))
       }
       ,
       this.update_score = function(e) {
           YI.lvl = YI.level_formula(e),
           YI.xp_dest = YI.xp_formula(e),
           YI.xp = 0,
           YI.score = e
       }
       ,
       this.login_restore_data = function(e) {
           YI.buttons[YI.LOGIN_BUTTON].info.active = 0,
           YI.buttons[YI.PROFILE_BUTTON].info.active = 1,
           YI.buttons[YI.PROFILE_BUTTON_2].info.active = 1,
           o(),
           -1 === e.name.indexOf("Starver#") ? document.getElementById("account_nickname_input").value = window.decodeURIComponent(window.escape(window.atob(e.name))) : document.getElementById("account_nickname_input").value = e.name,
           YI.bread = e.bread;
           var i = e.seasons
             , t = i[i.length - 1];
           YI.seasons = i,
           r.update_score(t.score),
           YI.score = t.score,
           YI.kill = t.kill,
           YI.death = t.death,
           YI.time = t.time,
           YI.bestScore = t.bestScore,
           YI.bestKill = t.bestKill,
           YI.bestTime = t.bestTime,
           YI.scoreTotal = t.scoreTotal,
           YI.firstName = e.firstName,
           document.getElementById("serverAddressInput").value = "https://starve.io/?server=" + e.privateServer,
           void 0 === YI.firstName && (YI.firstName = 0),
           YI.privateServerTime = Date.now() + e.privateServerTime,
           Number(e.privateServerTime) > 0 && (YI.privateServerTime = Date.now() + Number(e.privateServerTime)),
           YI.kit = Date.now() + e.kit,
           Number(e.kit) > 0 && (YI.kit = Date.now() + Number(e.kit));
           for (var n = COSMETICS.SKIN, a = 0; a < e.skins.length; a++) {
               if (e.skins[a] > 0)
                   for (var s = 0; s < n.length; s++)
                       n[s].id === a && (r.unlock.skin[s] = 1)
           }
           for (n = COSMETICS.ACCESSORY,
           a = 0; a < e.accessories.length; a++) {
               if (e.accessories[a] > 0)
                   for (s = 0; s < n.length; s++)
                       n[s].id === a && (r.unlock.accessory[s] = 1)
           }
           for (n = COSMETICS.BOOK,
           a = 0; a < e.books.length; a++) {
               if (e.books[a] > 0)
                   for (s = 0; s < n.length; s++)
                       n[s].id === a && (r.unlock.book[s] = 1)
           }
           for (n = COSMETICS.BAG,
           a = 0; a < e.bags.length; a++) {
               if (e.bags[a] > 0)
                   for (s = 0; s < n.length; s++)
                       n[s].id === a && (r.unlock.bag[s] = 1)
           }
           for (n = COSMETICS.CRATE,
           a = 0; a < e.crates.length; a++) {
               if (e.crates[a] > 0)
                   for (s = 0; s < n.length; s++)
                       n[s].id === a && (r.unlock.crate[s] = 1,
                       r.unlock.dead[s] = 1)
           }
       }
       ,
       this.login_after = function() {
           window.onUserLogin = function() {
               Z(l),
               DI(r.login_restore_data)
           }
           ,
           1 === lI && window.onUserLogin()
       }
       ,
       window.onUserLogout = function() {
           YI.buttons[YI.LOGIN_BUTTON].info.active = 1,
           YI.buttons[YI.PROFILE_BUTTON].info.active = 0,
           YI.buttons[YI.PROFILE_BUTTON_2].info.active = 0,
           Z(l),
           window.location = "https://starve.io"
       }
       ,
       this.isUserLogged = function() {
           return YI.buttons[YI.PROFILE_BUTTON].info.active
       }
       ,
       this.buttons[h] = Qs(461, 105, "", [IMAGES.GET_MORE_BUTTON_OUT, IMAGES.GET_MORE_BUTTON_IN, IMAGES.GET_MORE_BUTTON_CLICK], 1, 0, (function() {
           r.isUserLogged() ? Z(P) : Z(C)
       }
       ), -100, 80, te | ee, ne),
       this.buttons[h++].view = b,
       this.buttons[h] = Qs(157, 158, "", [IMAGES.TUTO_WIKI_OUT, IMAGES.TUTO_WIKI_IN, IMAGES.TUTO_WIKI_CLICK], 1, 0, (function() {
           window.open("https://starveiopro.wikia.com/wiki/", "_blank")
       }
       ), -35, 125, te | ee, ne),
       this.buttons[h++].view = O,
       this.buttons[h] = Qs(66, 73, "", [IMAGES.TUTO_PREVIOUS_OUT, IMAGES.TUTO_PREVIOUS_IN, IMAGES.TUTO_PREVIOUS_CLICK], 1, 0, void 0, -68, 340, te | ee, ne),
       this.buttons[h++].view = O,
       this.buttons[h] = Qs(66, 73, "", [IMAGES.TUTO_NEXT_OUT, IMAGES.TUTO_NEXT_IN, IMAGES.TUTO_NEXT_CLICK], 1, 0, void 0, -30, 340, te | ee, ne),
       this.buttons[h++].view = O,
       this.buttons[h] = Qs(97, 66, "", [IMAGES.LVL_LEADERBOARD_OUT, IMAGES.LVL_LEADERBOARD_IN, IMAGES.LVL_LEADERBOARD_CLICK], 1, 0, void 0, -14, 151, te | ee, ne),
       this.buttons[h++].view = p,
       this.LEADERBOARD_KILL = h,
       this.buttons[h] = Qs(135, 66, "", [IMAGES.KILL_LEADERBOARD_OUT, IMAGES.KILL_LEADERBOARD_IN, IMAGES.KILL_LEADERBOARD_CLICK], 1, 0, (function() {
           BI(void 0, void 0, YI.LEADERBOARD_KILL)
       }
       ), 37.5, 151, te | ee, ne),
       this.buttons[h++].view = p,
       this.LEADERBOARD_TIME = h,
       this.buttons[h] = Qs(160, 66, "", [IMAGES.TIME_LEADERBOARD_OUT, IMAGES.TIME_LEADERBOARD_IN, IMAGES.TIME_LEADERBOARD_CLICK], 1, 0, (function() {
           BI(void 0, void 0, YI.LEADERBOARD_TIME)
       }
       ), 107.5, 151, te | ee, ne),
       this.buttons[h++].view = p,
       this.LEADERBOARD_SCORE = h,
       this.buttons[h] = Qs(207, 66, "", [IMAGES.SCORE_LEADERBOARD_OUT, IMAGES.SCORE_LEADERBOARD_IN, IMAGES.SCORE_LEADERBOARD_CLICK], 1, 0, (function() {
           BI(void 0, void 0, YI.LEADERBOARD_SCORE)
       }
       ), 190.5, 151, te | ee, ne),
       this.buttons[h++].view = p,
       this.LEADERBOARD_TODAY = h,
       this.buttons[h] = Qs(144, 66, "", [IMAGES.TODAY_LEADERBOARD_OUT, IMAGES.TODAY_LEADERBOARD_IN, IMAGES.TODAY_LEADERBOARD_CLICK], 1, 0, (function() {
           BI(YI.LEADERBOARD_TODAY)
       }
       ), 103.5, 110, te | ee, ne),
       this.buttons[h++].view = p,
       this.LEADERBOARD_WEEK = h,
       this.buttons[h] = Qs(124, 66, "", [IMAGES.WEEK_LEADERBOARD_OUT, IMAGES.WEEK_LEADERBOARD_IN, IMAGES.WEEK_LEADERBOARD_CLICK], 1, 0, (function() {
           BI(YI.LEADERBOARD_WEEK)
       }
       ), 177.5, 110, te | ee, ne),
       this.buttons[h++].view = p,
       this.LEADERBOARD_ALL = h,
       this.buttons[h] = Qs(104, 66, "", [IMAGES.ALL_LEADERBOARD_OUT, IMAGES.ALL_LEADERBOARD_IN, IMAGES.ALL_LEADERBOARD_CLICK], 1, 0, (function() {
           BI(YI.LEADERBOARD_ALL)
       }
       ), 242, 110, te | ee, ne),
       this.buttons[h++].view = p,
       this.LEADERBOARD_SEASON1 = h,
       this.buttons[h] = Qs(183, 66, "", [IMAGES.SEASON1_LEADERBOARD_OUT, IMAGES.SEASON1_LEADERBOARD_IN, IMAGES.SEASON1_LEADERBOARD_CLICK], 1, 0, (function() {
           BI(void 0, void 0, void 0, YI.LEADERBOARD_SEASON1)
       }
       ), -290, 521, te | ee, ne),
       this.buttons[h++].view = p,
       this.LEADERBOARD_SEASON2 = h,
       this.buttons[h] = Qs(183, 66, "", [IMAGES.SEASON2_LEADERBOARD_OUT, IMAGES.SEASON2_LEADERBOARD_IN, IMAGES.SEASON2_LEADERBOARD_CLICK], 1, 0, (function() {
           BI(void 0, void 0, void 0, YI.LEADERBOARD_SEASON2)
       }
       ), -185, 521, te | ee, ne),
       this.buttons[h++].view = p,
       this.LEADERBOARD_SEASON3 = h,
       this.buttons[h] = Qs(183, 66, "", [IMAGES.SEASON3_LEADERBOARD_OUT, IMAGES.SEASON3_LEADERBOARD_IN, IMAGES.SEASON3_LEADERBOARD_CLICK], 1, 0, (function() {
           BI(void 0, void 0, void 0, YI.LEADERBOARD_SEASON3)
       }
       ), -80, 521, te | ee, ne),
       this.buttons[h++].view = p,
       this.LEADERBOARD_SEASON4 = h,
       this.buttons[h] = Qs(183, 66, "", [IMAGES.SEASON4_LEADERBOARD_OUT, IMAGES.SEASON4_LEADERBOARD_IN, IMAGES.SEASON4_LEADERBOARD_CLICK], 1, 0, (function() {
           BI(void 0, void 0, void 0, YI.LEADERBOARD_SEASON4)
       }
       ), 25, 521, te | ee, ne),
       this.buttons[h++].view = p,
       this.LEADERBOARD_SEASON5 = h,
       this.buttons[h] = Qs(183, 66, "", [IMAGES.SEASON5_LEADERBOARD_OUT, IMAGES.SEASON5_LEADERBOARD_IN, IMAGES.SEASON5_LEADERBOARD_CLICK], 1, 0, (function() {
           BI(void 0, void 0, void 0, YI.LEADERBOARD_SEASON5)
       }
       ), 130, 521, te | ee, ne),
       this.buttons[h++].view = p,
       this.buttons[h] = Qs(232, 352, "", [IMAGES.CURRENCY1_OUT, IMAGES.CURRENCY1_IN, IMAGES.CURRENCY1_CLICK], 1, 0, (function() {
           mI(300)
       }
       ), -330, 135, te | ee, ne),
       this.buttons[h++].view = P,
       this.buttons[h] = Qs(232, 352, "", [IMAGES.CURRENCY2_OUT, IMAGES.CURRENCY2_IN, IMAGES.CURRENCY2_CLICK], 1, 0, (function() {
           mI(600)
       }
       ), -195, 135, te | ee, ne),
       this.buttons[h++].view = P,
       this.buttons[h] = Qs(243, 374, "", [IMAGES.CURRENCY3_OUT, IMAGES.CURRENCY3_IN, IMAGES.CURRENCY3_CLICK], 1, 0, (function() {
           mI(2600)
       }
       ), -60, 130, te | ee, ne),
       this.buttons[h++].view = P,
       this.buttons[h] = Qs(232, 352, "", [IMAGES.CURRENCY4_OUT, IMAGES.CURRENCY4_IN, IMAGES.CURRENCY4_CLICK], 1, 0, (function() {
           mI(7e3)
       }
       ), 78, 135, te | ee, ne),
       this.buttons[h++].view = P,
       this.buttons[h] = Qs(243, 374, "", [IMAGES.CURRENCY5_OUT, IMAGES.CURRENCY5_IN, IMAGES.CURRENCY5_CLICK], 1, 0, (function() {
           mI(2e4)
       }
       ), 213, 130, te | ee, ne),
       this.buttons[h++].view = P,
       this.buttons[h] = Qs(58, 64, "", [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], 1, 0, (function() {
           Z(b)
       }
       ), 300, 88, te | ee, ne),
       this.buttons[h++].view = P,
       this.buttons[h] = Qs(323, 112, "", [IMAGES.SKIN_BUTTON_OUT, IMAGES.SKIN_BUTTON_IN, IMAGES.SKIN_BUTTON_CLICK], 1, 0, (function() {
           Z(y),
           ve.initSelector()
       }
       ), -315, 185, te | ee, ne),
       this.buttons[h++].view = g,
       this.buttons[h] = Qs(323, 112, "", [IMAGES.ACCESSORY_BUTTON_OUT, IMAGES.ACCESSORY_BUTTON_IN, IMAGES.ACCESSORY_BUTTON_CLICK], 1, 0, (function() {
           Z(W),
           Ge.initSelector()
       }
       ), -315, 321, te | ee, ne),
       this.buttons[h++].view = g,
       this.buttons[h] = Qs(323, 112, "", [IMAGES.BAG_BUTTON_OUT, IMAGES.BAG_BUTTON_IN, IMAGES.BAG_BUTTON_CLICK], 1, 0, (function() {
           Z(w),
           Pe.initSelector()
       }
       ), 153, 185, te | ee, ne),
       this.buttons[h++].view = g,
       this.buttons[h] = Qs(323, 112, "", [IMAGES.BOOK_BUTTON_OUT, IMAGES.BOOK_BUTTON_IN, IMAGES.BOOK_BUTTON_CLICK], 1, 0, (function() {
           Z(K),
           me.initSelector()
       }
       ), 153, 321, te | ee, ne),
       this.buttons[h++].view = g,
       this.buttons[h] = Qs(323, 112, "", [IMAGES.CRATE_BUTTON_OUT, IMAGES.CRATE_BUTTON_IN, IMAGES.CRATE_BUTTON_CLICK], 1, 0, (function() {
           Z(B),
           De.initSelector()
       }
       ), 153, 463, te | ee, ne),
       this.buttons[h++].view = g,
       this.buttons[h] = Qs(323, 112, "", [IMAGES.LOOT_BUTTON_OUT, IMAGES.LOOT_BUTTON_IN, IMAGES.LOOT_BUTTON_CLICK], 1, 0, (function() {
           Z(Y),
           Me.initSelector()
       }
       ), -315, 463, te | ee, ne),
       this.buttons[h++].view = g,
       this.buttons[h] = Qs(327, 117, "", [IMAGES.SEASON_5, IMAGES.SEASON_5_IN, IMAGES.SEASON_5_OUT], 1, 0, (function() {
           Z(X)
       }
       ), 155, 70, Q, oe),
       this.buttons[h++].view = l,
       this.buttons[h] = Qs(130, 129, "", [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], 1, 0, (function() {
           q(m, ne, "none"),
           Z(b)
       }
       ), 10, 40, te | ee, ne),
       this.buttons[h++].view = m,
       this.buttons[h] = Qs(130, 129, "", [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], 1, 0, (function() {
           q(M, ne, "none"),
           Z(b)
       }
       ), 10, 40, te | ee, ne),
       this.buttons[h++].view = M,
       this.buttons[h] = Qs(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
           Z(b)
       }
       ), 200, 140, te | ee, ne),
       this.buttons[h++].view = F,
       this.buttons[h] = Qs(253, 110, "", [IMAGES.ATLANTA_OUT, IMAGES.ATLANTA_IN, IMAGES.ATLANTA_CLICK], 1, 0, (function() {
           GI("Atlanta")
       }
       ), -265, 300, te | ee, ne),
       this.buttons[h++].view = F,
       this.buttons[h] = Qs(253, 110, "", [IMAGES.DALLAS_OUT, IMAGES.DALLAS_IN, IMAGES.DALLAS_CLICK], 1, 0, (function() {
           GI("Dallas")
       }
       ), -130, 300, te | ee, ne),
       this.buttons[h++].view = F,
       this.buttons[h] = Qs(253, 110, "", [IMAGES.FREMONT_OUT, IMAGES.FREMONT_IN, IMAGES.FREMONT_CLICK], 1, 0, (function() {
           GI("Fremont")
       }
       ), 5, 300, te | ee, ne),
       this.buttons[h++].view = F,
       this.buttons[h] = Qs(253, 110, "", [IMAGES.NEWARK_OUT, IMAGES.NEWARK_IN, IMAGES.NEWARK_CLICK], 1, 0, (function() {
           GI("Newark")
       }
       ), 140, 300, te | ee, ne),
       this.buttons[h++].view = F,
       this.buttons[h] = Qs(253, 110, "", [IMAGES.LONDON_OUT, IMAGES.LONDON_IN, IMAGES.LONDON_CLICK], 1, 0, (function() {
           GI("London")
       }
       ), -265, 365, te | ee, ne),
       this.buttons[h++].view = F,
       this.buttons[h] = Qs(253, 110, "", [IMAGES.FRANKFURT_OUT, IMAGES.FRANKFURT_IN, IMAGES.FRANKFURT_CLICK], 1, 0, (function() {
           GI("Frankfurt")
       }
       ), -130, 365, te | ee, ne),
       this.buttons[h++].view = F,
       this.buttons[h] = Qs(253, 110, "", [IMAGES.SINGAPORE_OUT, IMAGES.SINGAPORE_IN, IMAGES.SINGAPORE_CLICK], 1, 0, (function() {
           GI("Singapore")
       }
       ), 5, 365, te | ee, ne),
       this.buttons[h++].view = F,
       this.buttons[h] = Qs(253, 110, "", [IMAGES.TOKYO_OUT, IMAGES.TOKYO_IN, IMAGES.TOKYO_CLICK], 1, 0, (function() {
           GI("Tokyo")
       }
       ), 140, 365, te | ee, ne),
       this.buttons[h++].view = F,
       this.buttons[h] = Qs(253, 110, "", [IMAGES.TORONTO_OUT, IMAGES.TORONTO_IN, IMAGES.TORONTO_CLICK], 1, 0, (function() {
           GI("Toronto")
       }
       ), -265, 430, te | ee, ne),
       this.buttons[h++].view = F,
       this.buttons[h] = Qs(253, 110, "", [IMAGES.MUMBAI_OUT, IMAGES.MUMBAI_IN, IMAGES.MUMBAI_CLICK], 1, 0, (function() {
           GI("Mumbai")
       }
       ), -130, 430, te | ee, ne),
       this.buttons[h++].view = F,
       this.buttons[h] = Qs(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
           Z(F)
       }
       ), 230, 140, te | ee, ne),
       this.buttons[h++].view = x,
       this.buttons[h] = Qs(230, 352, "", [IMAGES.DAYS3_OUT, IMAGES.DAYS3_IN, IMAGES.DAYS3_CLICK], 1, 0, (function() {
           mI(350)
       }
       ), -280, 240, te | ee, ne),
       this.buttons[h++].view = x,
       this.buttons[h] = Qs(230, 352, "", [IMAGES.DAYS7_OUT, IMAGES.DAYS7_IN, IMAGES.DAYS7_CLICK], 1, 0, (function() {
           mI(700)
       }
       ), -130, 240, te | ee, ne),
       this.buttons[h++].view = x,
       this.buttons[h] = Qs(230, 352, "", [IMAGES.DAYS30_OUT, IMAGES.DAYS30_IN, IMAGES.DAYS30_CLICK], 1, 0, (function() {
           mI(1400)
       }
       ), 20, 240, te | ee, ne),
       this.buttons[h++].view = x,
       this.buttons[h] = Qs(230, 352, "", [IMAGES.DAYS90_OUT, IMAGES.DAYS90_IN, IMAGES.DAYS90_CLICK], 1, 0, (function() {
           mI(3e3)
       }
       ), 170, 240, te | ee, ne),
       this.buttons[h++].view = x,
       this.buttons[h] = Qs(105, 119, "", [IMAGES.COPY_PASTE_OUT, IMAGES.COPY_PASTE_IN, IMAGES.COPY_PASTE_CLICK], 1, 0, (function() {
           document.getElementById("serverAddressInput").select(),
           document.execCommand("copy")
       }
       ), 170, 310, te | ee, ne),
       this.buttons[h++].view = J,
       this.buttons[h] = Qs(105, 119, "", [IMAGES.RESTART_OUT, IMAGES.RESTART_IN, IMAGES.RESTART_CLICK], 1, 0, (function() {
           MI()
       }
       ), 235, 310, te | ee, ne),
       this.buttons[h++].view = J,
       this.buttons[h] = Qs(204, 115, "", [IMAGES.GUIDE_OUT, IMAGES.GUIDE_IN, IMAGES.GUIDE_CLICK], 1, 0, (function() {
           window.open("./commands.html", "_blank")
       }
       ), -265, 490, te | ee, ne),
       this.buttons[h++].view = J,
       this.buttons[h] = Qs(145, 69, "", [IMAGES.PRICE5_OUT, IMAGES.PRICE5_IN, IMAGES.PRICE5_CLICK], 1, 0, (function() {
           Z(G)
       }
       ), -210, 170, te | ee, ne),
       this.buttons[h++].view = b,
       this.buttons[h] = Qs(145, 69, "", [IMAGES.PRICE1_OUT, IMAGES.PRICE1_IN, IMAGES.PRICE1_CLICK], 1, 0, (function() {
           Z(V)
       }
       ), 70, 170, te | ee, ne),
       this.buttons[h++].view = b,
       this.buttons[h] = Qs(145, 69, "", [IMAGES.PRICE2_OUT, IMAGES.PRICE2_IN, IMAGES.PRICE2_CLICK], 1, 0, (function() {
           Z(L)
       }
       ), 70, 204, te | ee, ne),
       this.buttons[h++].view = b,
       this.buttons[h] = Qs(145, 69, "", [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, (function() {
           Z(z)
       }
       ), -210, 204, te | ee, ne),
       this.buttons[h++].view = b,
       this.buttons[h] = Qs(145, 69, "", [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, (function() {
           Z(H)
       }
       ), 70, 238, te | ee, ne),
       this.buttons[h++].view = b,
       this.buttons[h] = Qs(145, 69, "", [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, (function() {
           r.isUserLogged() ? VI(0, 300) : Z(C)
       }
       ), 307, 205, te | ee, ne),
       this.buttons[h++].view = b,
       this.buttons[h] = Qs(145, 69, "", [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], 1, 0, (function() {
           Z(f)
       }
       ), -210, 238, te | ee, ne),
       this.buttons[h++].view = b,
       this.buttons[h] = Qs(145, 69, "", [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], 1, 0, (function() {
           r.isUserLogged() ? VI(1, 600) : Z(C)
       }
       ), 307, 239, te | ee, ne),
       this.buttons[h++].view = b,
       this.buttons[h] = Qs(192, 101, "", [IMAGES.YES_BUTTON_OUT, IMAGES.YES_BUTTON_IN, IMAGES.YES_BUTTON_CLICK], 1, 0, (function() {
           fI()
       }
       ), -100, 250, te | ee, ne),
       this.buttons[h++].view = k,
       this.buttons[h] = Qs(192, 104, "", [IMAGES.YES_300_BUTTON_OUT, IMAGES.YES_300_BUTTON_IN, IMAGES.YES_300_BUTTON_CLICK], 1, 0, (function() {
           fI()
       }
       ), -100, 239, te | ee, ne),
       this.buttons[h++].view = U,
       this.buttons[h] = Qs(192, 101, "", [IMAGES.NO_BUTTON_OUT, IMAGES.NO_BUTTON_IN, IMAGES.NO_BUTTON_CLICK], 1, 0, (function() {
           Z(N)
       }
       ), 10, 250, te | ee, ne),
       this.buttons[h++].view = k,
       this.buttons[h] = Qs(192, 104, "", [IMAGES.NO_THANKS_BUTTON_OUT, IMAGES.NO_THANKS_BUTTON_IN, IMAGES.NO_THANKS_BUTTON_CLICK], 1, 0, (function() {
           Z(N)
       }
       ), 10, 239, te | ee, ne),
       this.buttons[h++].view = U,
       RARITY_BUTTON = [],
       RARITY_BUTTON[RARITY.FREE] = [IMAGES.FREE_ITEM_OUT, IMAGES.FREE_ITEM_IN, IMAGES.FREE_ITEM_CLICK],
       RARITY_BUTTON[RARITY.WOOD] = [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
       RARITY_BUTTON[RARITY.STONE] = [IMAGES.STONE_ITEM_OUT, IMAGES.STONE_ITEM_IN, IMAGES.STONE_ITEM_CLICK],
       RARITY_BUTTON[RARITY.GOLD] = [IMAGES.GOLD_ITEM_OUT, IMAGES.GOLD_ITEM_IN, IMAGES.GOLD_ITEM_CLICK],
       RARITY_BUTTON[RARITY.DIAMOND] = [IMAGES.DIAMOND_ITEM_OUT, IMAGES.DIAMOND_ITEM_IN, IMAGES.DIAMOND_ITEM_CLICK],
       RARITY_BUTTON[RARITY.AMETHYST] = [IMAGES.AMETHYST_ITEM_OUT, IMAGES.AMETHYST_ITEM_IN, IMAGES.AMETHYST_ITEM_CLICK],
       RARITY_BUTTON[RARITY.REIDITE] = [IMAGES.REIDITE_ITEM_OUT, IMAGES.REIDITE_ITEM_IN, IMAGES.REIDITE_ITEM_CLICK],
       RARITY_BUTTON[RARITY.LEVEL] = [IMAGES.LEVEL_ITEM_OUT, IMAGES.LEVEL_ITEM_IN, IMAGES.LEVEL_ITEM_CLICK],
       RARITY_BUTTON[RARITY.SPECIAL] = [IMAGES.SPECIAL_ITEM_OUT, IMAGES.SPECIAL_ITEM_IN, IMAGES.SPECIAL_ITEM_CLICK],
       FIRST_BUTTON_SKIN = h,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, te | ee, ne),
       this.buttons[h++].view = y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, te | ee, ne),
       this.buttons[h++].view = y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, te | ee, ne),
       this.buttons[h++].view = y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, te | ee, ne),
       this.buttons[h++].view = y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, te | ee, ne),
       this.buttons[h++].view = y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, te | ee, ne),
       this.buttons[h++].view = y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, te | ee, ne),
       this.buttons[h++].view = y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, te | ee, ne),
       this.buttons[h++].view = y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, te | ee, ne),
       this.buttons[h++].view = y,
       this.buttons[h] = Qs(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, te | ee, ne),
       this.buttons[h++].view = y,
       this.buttons[h] = Qs(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, te | ee, ne),
       this.buttons[h++].view = y,
       this.buttons[h] = Qs(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
           Z(g)
       }
       ), -320, 470, te | ee, ne),
       this.buttons[h++].view = y,
       FIRST_BUTTON_ACCESSORY = h,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, te | ee, ne),
       this.buttons[h++].view = W,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, te | ee, ne),
       this.buttons[h++].view = W,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, te | ee, ne),
       this.buttons[h++].view = W,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, te | ee, ne),
       this.buttons[h++].view = W,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, te | ee, ne),
       this.buttons[h++].view = W,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, te | ee, ne),
       this.buttons[h++].view = W,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, te | ee, ne),
       this.buttons[h++].view = W,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, te | ee, ne),
       this.buttons[h++].view = W,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, te | ee, ne),
       this.buttons[h++].view = W,
       this.buttons[h] = Qs(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, te | ee, ne),
       this.buttons[h++].view = W,
       this.buttons[h] = Qs(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, te | ee, ne),
       this.buttons[h++].view = W,
       this.buttons[h] = Qs(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
           Z(g)
       }
       ), -320, 470, te | ee, ne),
       this.buttons[h++].view = W,
       FIRST_BUTTON_LOOT = h,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, te | ee, ne),
       this.buttons[h++].view = Y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, te | ee, ne),
       this.buttons[h++].view = Y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, te | ee, ne),
       this.buttons[h++].view = Y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, te | ee, ne),
       this.buttons[h++].view = Y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, te | ee, ne),
       this.buttons[h++].view = Y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, te | ee, ne),
       this.buttons[h++].view = Y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, te | ee, ne),
       this.buttons[h++].view = Y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, te | ee, ne),
       this.buttons[h++].view = Y,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, te | ee, ne),
       this.buttons[h++].view = Y,
       this.buttons[h] = Qs(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, te | ee, ne),
       this.buttons[h++].view = Y,
       this.buttons[h] = Qs(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, te | ee, ne),
       this.buttons[h++].view = Y,
       this.buttons[h] = Qs(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
           Z(g)
       }
       ), -320, 470, te | ee, ne),
       this.buttons[h++].view = Y,
       FIRST_BUTTON_BAG = h,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, te | ee, ne),
       this.buttons[h++].view = w,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, te | ee, ne),
       this.buttons[h++].view = w,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, te | ee, ne),
       this.buttons[h++].view = w,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, te | ee, ne),
       this.buttons[h++].view = w,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, te | ee, ne),
       this.buttons[h++].view = w,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, te | ee, ne),
       this.buttons[h++].view = w,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, te | ee, ne),
       this.buttons[h++].view = w,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, te | ee, ne),
       this.buttons[h++].view = w,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, te | ee, ne),
       this.buttons[h++].view = w,
       this.buttons[h] = Qs(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, te | ee, ne),
       this.buttons[h++].view = w,
       this.buttons[h] = Qs(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, te | ee, ne),
       this.buttons[h++].view = w,
       this.buttons[h] = Qs(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
           Z(g)
       }
       ), -320, 470, te | ee, ne),
       this.buttons[h++].view = w,
       FIRST_BUTTON_BOOK = h,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, te | ee, ne),
       this.buttons[h++].view = K,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, te | ee, ne),
       this.buttons[h++].view = K,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, te | ee, ne),
       this.buttons[h++].view = K,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, te | ee, ne),
       this.buttons[h++].view = K,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, te | ee, ne),
       this.buttons[h++].view = K,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, te | ee, ne),
       this.buttons[h++].view = K,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, te | ee, ne),
       this.buttons[h++].view = K,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, te | ee, ne),
       this.buttons[h++].view = K,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, te | ee, ne),
       this.buttons[h++].view = K,
       this.buttons[h] = Qs(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, te | ee, ne),
       this.buttons[h++].view = K,
       this.buttons[h] = Qs(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, te | ee, ne),
       this.buttons[h++].view = K,
       this.buttons[h] = Qs(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
           Z(g)
       }
       ), -320, 470, te | ee, ne),
       this.buttons[h++].view = K,
       FIRST_BUTTON_CRATE = h,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, te | ee, ne),
       this.buttons[h++].view = B,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, te | ee, ne),
       this.buttons[h++].view = B,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, te | ee, ne),
       this.buttons[h++].view = B,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, te | ee, ne),
       this.buttons[h++].view = B,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, te | ee, ne),
       this.buttons[h++].view = B,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, te | ee, ne),
       this.buttons[h++].view = B,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, te | ee, ne),
       this.buttons[h++].view = B,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, te | ee, ne),
       this.buttons[h++].view = B,
       this.buttons[h] = Qs(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, te | ee, ne),
       this.buttons[h++].view = B,
       this.buttons[h] = Qs(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, te | ee, ne),
       this.buttons[h++].view = B,
       this.buttons[h] = Qs(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, te | ee, ne),
       this.buttons[h++].view = B,
       this.buttons[h] = Qs(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
           Z(g)
       }
       ), -320, 470, te | ee, ne),
       this.buttons[h++].view = B,
       this.buttons[h] = Qs(260, 260, "", [IMAGES.SPIN_BUTTON_1_OUT, IMAGES.SPIN_BUTTON_1_IN, IMAGES.SPIN_BUTTON_1_CLICK], 1, 0, (function() {
           r.isUserLogged() ? LI(3, 50) : Z(C)
       }
       ), -65, 197, te | ee, ne),
       this.buttons[h++].view = V,
       this.buttons[h] = Qs(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
           Z(b)
       }
       ), 309, 180, te | ee, ne),
       this.buttons[h++].view = V,
       this.buttons[h] = Qs(260, 260, "", [IMAGES.SPIN_BUTTON_2_OUT, IMAGES.SPIN_BUTTON_2_IN, IMAGES.SPIN_BUTTON_2_CLICK], 1, 0, (function() {
           r.isUserLogged() ? LI(0, 100) : Z(C)
       }
       ), -65, 197, te | ee, ne),
       this.buttons[h++].view = G,
       this.buttons[h] = Qs(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
           Z(b)
       }
       ), 309, 180, te | ee, ne),
       this.buttons[h++].view = G,
       this.buttons[h] = Qs(260, 260, "", [IMAGES.SPIN_BUTTON_3_OUT, IMAGES.SPIN_BUTTON_3_IN, IMAGES.SPIN_BUTTON_3_CLICK], 1, 0, (function() {
           r.isUserLogged() ? LI(4, 150) : Z(C)
       }
       ), -65, 197, te | ee, ne),
       this.buttons[h++].view = L,
       this.buttons[h] = Qs(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
           Z(b)
       }
       ), 309, 180, te | ee, ne),
       this.buttons[h++].view = L,
       this.buttons[h] = Qs(260, 260, "", [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], 1, 0, (function() {
           r.isUserLogged() ? LI(1, 300) : Z(C)
       }
       ), -65, 197, te | ee, ne),
       this.buttons[h++].view = z,
       this.buttons[h] = Qs(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
           Z(b)
       }
       ), 309, 180, te | ee, ne),
       this.buttons[h++].view = z,
       this.buttons[h] = Qs(260, 260, "", [IMAGES.SPIN_BUTTON_5_OUT, IMAGES.SPIN_BUTTON_5_IN, IMAGES.SPIN_BUTTON_5_CLICK], 1, 0, (function() {
           r.isUserLogged() ? LI(2, 600) : Z(C)
       }
       ), -65, 197, te | ee, ne),
       this.buttons[h++].view = f,
       this.buttons[h] = Qs(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
           Z(b)
       }
       ), 309, 180, te | ee, ne),
       this.buttons[h++].view = f,
       this.buttons[h] = Qs(260, 260, "", [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], 1, 0, (function() {
           r.isUserLogged() ? LI(5, 300) : Z(C)
       }
       ), -65, 197, te | ee, ne),
       this.buttons[h++].view = H,
       this.buttons[h] = Qs(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
           Z(b)
       }
       ), 309, 180, te | ee, ne),
       this.buttons[h++].view = H;
       var de = h;
       this.buttons[h] = Qs(205, 67, "", [IMAGES.SEASON1_PROFILE_OUT, IMAGES.SEASON1_PROFILE_IN, IMAGES.SEASON1_PROFILE_CLICK], 1, 0, (function() {
           Ae(void 0, 0)
       }
       ), -305, 125, te | ee, ne),
       this.buttons[h++].view = N;
       var Se = h;
       this.buttons[h] = Qs(205, 67, "", [IMAGES.SEASON2_PROFILE_OUT, IMAGES.SEASON2_PROFILE_IN, IMAGES.SEASON2_PROFILE_CLICK], 1, 0, (function() {
           Ae(void 0, 1)
       }
       ), -305, 170, te | ee, ne),
       this.buttons[h++].view = N;
       var le = h;
       this.buttons[h] = Qs(205, 67, "", [IMAGES.SEASON3_PROFILE_OUT, IMAGES.SEASON3_PROFILE_IN, IMAGES.SEASON3_PROFILE_CLICK], 1, 0, (function() {
           Ae(void 0, 2)
       }
       ), -305, 215, te | ee, ne),
       this.buttons[h++].view = N;
       var Ne = h;
       this.buttons[h] = Qs(205, 67, "", [IMAGES.SEASON4_PROFILE_OUT, IMAGES.SEASON4_PROFILE_IN, IMAGES.SEASON4_PROFILE_CLICK], 1, 0, (function() {
           Ae(void 0, 3)
       }
       ), -305, 260, te | ee, ne),
       this.buttons[h++].view = N;
       var Ce = h;
       this.buttons[h] = Qs(205, 67, "", [IMAGES.SEASON5_PROFILE_OUT, IMAGES.SEASON5_PROFILE_IN, IMAGES.SEASON5_PROFILE_CLICK], 1, 0, (function() {
           Ae(void 0, 3)
       }
       ), -305, 305, te | ee, ne),
       this.buttons[h++].view = N;
       var ge = h;
       this.buttons[h] = Qs(460, 73, "", [IMAGES.TOTAL_PROFILE_OUT, IMAGES.TOTAL_PROFILE_IN, IMAGES.TOTAL_PROFILE_CLICK], 1, 0, (function() {
           Ae(-1)
       }
       ), -180, 170, te | ee, ne),
       this.buttons[h++].view = N;
       var be = h;
       this.buttons[h] = Qs(222, 68, "", [IMAGES.NORMAL_PROFILE_OUT, IMAGES.NORMAL_PROFILE_IN, IMAGES.NORMAL_PROFILE_CLICK], 1, 0, (function() {
           Ae(ET.MODE_PVP)
       }
       ), -180, 215, te | ee, ne),
       this.buttons[h++].view = N;
       var Oe = h;
       this.buttons[h] = Qs(222, 68, "", [IMAGES.FOREST_PROFILE_OUT, IMAGES.FOREST_PROFILE_IN, IMAGES.FOREST_PROFILE_CLICK], 1, 0, (function() {
           Ae(ET.MODE_LEGACY)
       }
       ), -180, 260, te | ee, ne),
       this.buttons[h++].view = N;
       var pe = h;
       this.buttons[h] = Qs(222, 68, "", [IMAGES.ZOMBIE_PROFILE_OUT, IMAGES.ZOMBIE_PROFILE_IN, IMAGES.ZOMBIE_PROFILE_CLICK], 1, 0, (function() {
           Ae(ET.MODE_ZOMBIES)
       }
       ), -60, 215, te | ee, ne),
       this.buttons[h++].view = N;
       var ce = h;
       this.buttons[h] = Qs(222, 68, "", [IMAGES.VAMPIRE_PROFILE_OUT, IMAGES.VAMPIRE_PROFILE_IN, IMAGES.VAMPIRE_PROFILE_CLICK], 1, 0, (function() {
           Ae(ET.MODE_VAMPIRES)
       }
       ), -60, 260, te | ee, ne),
       this.buttons[h++].view = N,
       this.LEADERBOARD_TOTAL = h,
       this.buttons[h] = Qs(143, 66, "", [IMAGES.TOTAL_LEAD_OUT, IMAGES.TOTAL_LEAD_IN, IMAGES.TOTAL_LEAD_CLICK], 1, 0, (function() {
           BI(void 0, YI.LEADERBOARD_TOTAL)
       }
       ), -298, 110, te | ee, ne),
       this.buttons[h++].view = p,
       this.LEADERBOARD_NORMAL = h,
       this.buttons[h] = Qs(104, 66, "", [IMAGES.NORMAL_LEAD_OUT, IMAGES.NORMAL_LEAD_IN, IMAGES.NORMAL_LEAD_CLICK], 1, 0, (function() {
           BI(void 0, YI.LEADERBOARD_NORMAL)
       }
       ), -223, 110, te | ee, ne),
       this.buttons[h++].view = p,
       this.LEADERBOARD_FOREST = h,
       this.buttons[h] = Qs(110, 66, "", [IMAGES.FOREST_LEAD_OUT, IMAGES.FOREST_LEAD_IN, IMAGES.FOREST_LEAD_CLICK], 1, 0, (function() {
           BI(void 0, YI.LEADERBOARD_FOREST)
       }
       ), -168, 110, te | ee, ne),
       this.buttons[h++].view = p,
       this.LEADERBOARD_ZOMBIE = h,
       this.buttons[h] = Qs(88, 66, "", [IMAGES.ZOMBIE_LEAD_OUT, IMAGES.ZOMBIE_LEAD_IN, IMAGES.ZOMBIE_LEAD_CLICK], 1, 0, (function() {
           BI(void 0, YI.LEADERBOARD_ZOMBIE)
       }
       ), -110, 110, te | ee, ne),
       this.buttons[h++].view = p,
       this.LEADERBOARD_VAMPIRE = h,
       this.buttons[h] = Qs(88, 66, "", [IMAGES.VAMPIRE_LEAD_OUT, IMAGES.VAMPIRE_LEAD_IN, IMAGES.VAMPIRE_LEAD_CLICK], 1, 0, (function() {
           BI(void 0, YI.LEADERBOARD_VAMPIRE)
       }
       ), -63, 110, te | ee, ne),
       this.buttons[h++].view = p,
       this.buttons[h] = Qs(86, 44, "", [IMAGES.TERMS_BUTTON_OUT, IMAGES.TERMS_BUTTON_IN, IMAGES.TERMS_BUTTON_CLICK], 1, 0, (function() {
           window.open("./terms.html", "_blank")
       }
       ), 349, 290, te | ee, ne),
       this.buttons[h++].view = b;
       var ve = new n(COSMETICS.SKIN,FIRST_BUTTON_SKIN,(function(e) {
           YI.skin = e,
           1 === YI.unlock.skin[e] && Cookies.set("starve_skin", "" + e, {
               expires: 30
           })
       }
       ),this.skin,this.unlock.skin)
         , Pe = new n(COSMETICS.BAG,FIRST_BUTTON_BAG,(function(e) {
           YI.bag = e,
           1 === YI.unlock.bag[e] && Cookies.set("starve_bag", "" + e, {
               expires: 30
           })
       }
       ),this.bag,this.unlock.bag)
         , me = new n(COSMETICS.BOOK,FIRST_BUTTON_BOOK,(function(e) {
           YI.book = e,
           1 === YI.unlock.book[e] && Cookies.set("starve_book", "" + e, {
               expires: 30
           })
       }
       ),this.book,this.unlock.book)
         , De = new n(COSMETICS.CRATE,FIRST_BUTTON_CRATE,(function(e) {
           YI.dead = e,
           1 === YI.unlock.dead[e] && Cookies.set("starve_dead", "" + e, {
               expires: 30
           })
       }
       ),this.dead,this.unlock.dead)
         , Me = new n(COSMETICS.CRATE,FIRST_BUTTON_LOOT,(function(e) {
           YI.crate = e,
           1 === YI.unlock.crate[e] && Cookies.set("starve_crate", "" + e, {
               expires: 30
           })
       }
       ),this.crate,this.unlock.crate)
         , Ge = new n(COSMETICS.ACCESSORY,FIRST_BUTTON_ACCESSORY,(function(e) {
           YI.accessory = e,
           1 === YI.unlock.accessory[e] && Cookies.set("starve_accessory", "" + e, {
               expires: 30
           })
       }
       ),this.accessory,this.unlock.accessory);
       this.trigger_mousedown = function(e) {
           qI.pos = js(r.can, e);
           for (var i = 0; i < r.buttons.length; i++)
               r.buttons[i].info.active === oe && r.buttons[i].trigger(r.can, qI.pos, ks)
       }
       ,
       this.trigger_mouseup = function(e) {
           qI.pos = js(r.can, e);
           for (var i = 0; i < r.buttons.length; i++) {
               var t = r.buttons[i];
               if (t.info.active === oe && t.trigger(r.can, qI.pos, Fs))
                   return void t.info.callback()
           }
       }
       ,
       this.current_cursor = !1,
       this.trigger_mousemove = function(i) {
           qI.pos = js(r.can, i);
           for (var t = !1, n = 0; n < r.buttons.length; n++)
               r.buttons[n].info.active === oe && (t |= r.buttons[n].trigger(r.can, qI.pos, Us));
           r.current_cursor !== t && (r.current_cursor = t,
           e.style.cursor = t ? r.cursor1 : r.cursor0)
       }
       ,
       this.add_event_listener = function() {
           window.addEventListener("mousedown", this.trigger_mousedown, !1),
           window.addEventListener("mouseup", this.trigger_mouseup, !1),
           window.addEventListener("mousemove", this.trigger_mousemove, !1)
       }
       ,
       this.remove_event_listener = function() {
           window.removeEventListener("mousedown", this.trigger_mousedown, !1),
           window.removeEventListener("mouseup", this.trigger_mouseup, !1),
           window.removeEventListener("mousemove", this.trigger_mousemove, !1)
       }
   }
   function jT(e, i) {
       var t = this;
       this.can = e,
       this.ctx = i,
       window.navigator.userAgent.indexOf("Edge") > -1 ? (this.cursor0 = "default",
       this.cursor1 = "pointer") : (this.cursor0 = "url('img/cursor0.png'), default",
       this.cursor1 = "url('img/cursor1.png'), pointer"),
       this.show_ui = 1,
       this.show_clock = 1,
       this.show_recipe_book = 1,
       this.show_quest = 1,
       this.team_box = {
           id: document.getElementById("team_box"),
           style: document.getElementById("team_box").style,
           update: function() {
               this.style.left = Math.floor(d - 125) + "px",
               this.style.top = "110px"
           }
       },
       this.audio = {
           button_on: Qs(60, 60, "", sprite[SPRITE.SOUND_BUTTON_ON]),
           button_off: Qs(60, 60, "", sprite[SPRITE.SOUND_BUTTON_OFF])
       },
       this.sign = {
           open: !1,
           breads: 0,
           symbol: document.getElementById("sign_object"),
           symbol_id: 0,
           id: document.getElementById("sign_window"),
           style: document.getElementById("sign_window").style,
           button: Qs(60, 60, "", sprite[SPRITE.SIGN_BUTTON]),
           update_button: function() {
               var e = Math.floor(Math.floor((3 + kI.craft.can_craft.length) / 4) * (10 + sprite[SPRITE.INV_WOOD][0].width) + 35);
               this.button.info.translate.x = e,
               this.button.info.translate.y = 22
           },
           update: function() {
               this.style.left = Math.floor(d - 150) + "px",
               this.style.top = Math.floor(S - 115) + "px"
           },
           quit: function() {
               xI.sign.style.display = "none",
               xI.sign.open = !1
           },
           select: function() {
               xI.sign.open = !xI.sign.open,
               xI.sign.open ? xI.sign.style.display = "inline-block" : xI.sign.style.display = "none"
           },
           ok: function() {
               WI.update_sign(kI.sign.iid, xI.sign.symbol_id),
               xI.sign.select()
           },
           up: function() {
               xI.sign.symbol_id = 0 === xI.sign.symbol_id ? IT.SYMBOL_MAX - 1 : xI.sign.symbol_id - 1,
               xI.sign.symbol.src = "./img/sign" + xI.sign.symbol_id + ".png"
           },
           down: function() {
               xI.sign.symbol_id = (xI.sign.symbol_id + 1) % IT.SYMBOL_MAX,
               xI.sign.symbol.src = "./img/sign" + xI.sign.symbol_id + ".png"
           }
       },
       document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, !1),
       document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, !1),
       document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, !1),
       document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, !1),
       this.market = {
           open: !1,
           id: document.getElementById("shop_market"),
           style: document.getElementById("shop_market").style,
           items: [{
               id: 0,
               name: "wood",
               val: 1,
               b: 1,
               a: 3,
               img_item: SPRITE.INV_WOOD
           }, {
               id: 1,
               name: "stone",
               val: 1,
               b: 1,
               a: 4,
               img_item: SPRITE.INV_STONE
           }, {
               id: 2,
               name: "gold",
               val: 1,
               b: 1,
               a: 6,
               img_item: SPRITE.INV_GOLD
           }, {
               id: 3,
               name: "diamond",
               val: 4,
               b: 4,
               a: 1,
               img_item: SPRITE.INV_DIAMOND
           }, {
               id: 4,
               name: "amethyst",
               val: 8,
               b: 8,
               a: 1,
               img_item: SPRITE.INV_AMETHYST
           }, {
               id: 5,
               name: "reidite",
               val: 16,
               b: 16,
               a: 1,
               img_item: SPRITE.INV_REIDITE
           }, {
               id: 6,
               name: "pumpkin_seed",
               val: 10,
               b: 10,
               a: 1,
               img_item: SPRITE.INV_PUMPKIN_SEED
           }, {
               id: 7,
               name: "carrot_seed",
               val: 16,
               b: 16,
               a: 1,
               img_item: SPRITE.INV_CARROT_SEED
           }, {
               id: 8,
               name: "tomato_seed",
               val: 20,
               b: 20,
               a: 1,
               img_item: SPRITE.INV_TOMATO_SEED
           }, {
               id: 9,
               name: "thornbush_seed",
               val: 30,
               b: 30,
               a: 1,
               img_item: SPRITE.INV_THORNBUSH_SEED
           }, {
               id: 10,
               name: "garlic_seed",
               val: 40,
               b: 40,
               a: 1,
               img_item: SPRITE.INV_GARLIC_SEED
           }, {
               id: 11,
               name: "watermelon_seed",
               val: 60,
               b: 60,
               a: 1,
               img_item: SPRITE.INV_WATERMELON_SEED
           }],
           button: Qs(60, 60, "", sprite[SPRITE.MARKET_BUTTON]),
           update: function() {
               this.style.left = Math.floor(d - 450) + "px",
               this.style.top = Math.floor(S - 270) + "px"
           },
           select: function() {
               xI.market.open = !xI.market.open,
               xI.market.open ? xI.market.style.display = "inline-block" : xI.market.style.display = "none"
           },
           quit: function() {
               xI.market.style.display = "none",
               xI.market.open = !1
           },
           buy: function() {
               WI.buy_market(this.itemMarket)
           },
           change: function() {
               this.id;
               if (1 === this.itemMarket.a) {
                   var e = Math.floor(Number(this.value) * this.itemMarket.b);
                   this.itemMarket.val = e,
                   document.getElementById(this.itemMarket.name + "_trad_number").innerHTML = e + ""
               } else {
                   e = Math.floor(Number(this.value) / this.itemMarket.a);
                   this.itemMarket.val = e,
                   document.getElementById(this.itemMarket.name + "_trad_number").innerHTML = e + ""
               }
           }
       },
       document.getElementById("quit_market").addEventListener("mouseup", this.market.quit, !1);
       for (var r = [["mouseup", this.market.buy, "buy_"], ["click", this.market.change, ""], ["change", this.market.change, ""], ["keypress", this.market.keypress, ""]], n = 0; n < this.market.items.length; n++) {
           var o = this.market.items[n];
           document.getElementById(o.name + "_market").src = void 0 === sprite[o.img_item][0]._src ? sprite[o.img_item][0].src : sprite[o.img_item][0]._src,
           1 === o.a ? (document.getElementById(o.name + "_trad_number").innerHTML = o.b,
           document.getElementById(o.name + "_number").value = 1,
           document.getElementById(o.name + "_number").step = 1,
           document.getElementById(o.name + "_number").min = 1,
           document.getElementById(o.name + "_number").max = Math.floor(255 / o.b)) : (document.getElementById(o.name + "_trad_number").innerHTML = 1,
           document.getElementById(o.name + "_number").value = o.a,
           document.getElementById(o.name + "_number").step = o.a,
           document.getElementById(o.name + "_number").min = o.a),
           document.getElementById("buy_" + o.name + "_number").itemMarket = o,
           document.getElementById(o.name + "_number").itemMarket = o;
           for (var a = 0; a < r.length; a++)
               document.getElementById(r[a][2] + o.name + "_number").addEventListener(r[a][0], r[a][1], !1)
       }
       $("[type='number']").keypress((function(e) {
           e.preventDefault()
       }
       )),
       this.options = {
           open: !1,
           id: document.getElementById("option_in_game"),
           style: document.getElementById("option_in_game").style,
           agree: document.getElementById("agree_ing").style,
           cancel_agree: document.getElementById("cancel_agree_ing").style,
           quests_agree: document.getElementById("quest_agree_ing").style,
           spectator_agree: document.getElementById("spectator_agree_ing").style,
           feed_agree: document.getElementById("auto_feed_agree_ing").style,
           info_box_agree: document.getElementById("info_agree_ing").style,
           aliasing_agree: document.getElementById("pixelated_agree_ing").style,
           button: Qs(60, 60, "", sprite[SPRITE.OPTION_BUTTON]),
           select_options: function() {
               xI.options.open = !xI.options.open,
               xI.options.open ? xI.options.style.display = "inline-block" : xI.options.style.display = "none"
           },
           azerty: function() {
               YI.set_azerty()
           },
           qwerty: function() {
               YI.set_qwerty()
           },
           high: function() {
               YI.high_quality()
           },
           low: function() {
               YI.low_quality()
           },
           checkbox: function() {
               xI.safe_delete.checkbox()
           },
           cancel_checkbox: function() {
               xI.safe_cancel.checkbox()
           },
           quest_checkbox: function() {
               xI.quests.checkbox()
           },
           spectator_checkbox: function() {
               kI.show_spectators.invert()
           },
           feed_checkbox: function() {
               kI.auto_feed.invert()
           },
           quit: function() {
               xI.options.style.display = "none",
               xI.options.open = !1
           },
           update: function() {
               this.style.left = Math.floor(d - 235) + "px",
               this.style.top = Math.floor(S - 170) + "px"
           }
       },
       document.getElementById("azerty_ing").addEventListener("mouseup", this.options.azerty, !1),
       document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.qwerty, !1),
       document.getElementById("low_ing").addEventListener("mouseup", this.options.low, !1),
       document.getElementById("high_ing").addEventListener("mouseup", this.options.high, !1),
       document.getElementById("quit_opt").addEventListener("mouseup", this.options.quit, !1),
       document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.checkbox, !1),
       document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.quest_checkbox, !1),
       document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.cancel_checkbox, !1),
       document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.spectator_checkbox, !1),
       document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.feed_checkbox, !1),
       this.safe_cancel = {
           open: !1,
           activated: Cookies.get("starve_cancel") && "0" === Cookies.get("starve_cancel") ? 0 : 1,
           id: document.getElementById("cancel_sure_delete"),
           style: document.getElementById("cancel_sure_delete").style,
           agree: document.getElementById("cancel_agree").style,
           button: 0,
           i: 0,
           quit: function() {
               xI.safe_cancel.style.display = "none",
               xI.safe_cancel.open = !1
           },
           yes: function() {
               kI.craft.crafting && WI.cancel_crafting(),
               xI.safe_cancel.quit()
           },
           checkbox: function() {
               xI.safe_cancel.activated ? (Cookies.set("starve_cancel", "0"),
               xI.safe_cancel.agree.display = "inline-block",
               xI.options.cancel_agree.display = "none") : (Cookies.set("starve_cancel", "1"),
               xI.safe_cancel.agree.display = "none",
               xI.options.cancel_agree.display = "inline-block"),
               xI.safe_cancel.activated = !xI.safe_cancel.activated
           },
           del: function() {
               this.activated ? (this.style.display = "inline-block",
               this.open = !0) : this.yes()
           },
           update: function() {
               this.style.left = Math.floor(d - 235) + "px",
               this.style.top = Math.floor(S - 130) + "px"
           }
       },
       this.safe_cancel.id.oncontextmenu = function() {
           return !1
       }
       ,
       this.safe_cancel.agree.display = "none",
       this.safe_cancel.activated ? this.options.cancel_agree.display = "inline-block" : this.options.cancel_agree.display = "none",
       document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.safe_cancel.yes, !1),
       document.getElementById("cancel_no_delete").addEventListener("mouseup", this.safe_cancel.quit, !1),
       document.getElementById("cancel_case_agree").addEventListener("mouseup", this.safe_cancel.checkbox, !1),
       document.addEventListener("cancel_sure_delete", (function(e) {
           e.preventDefault()
       }
       ), !1),
       this.aliasing = {
           activated: Cookies.get("starve_aliasing") && "0" === Cookies.get("starve_aliasing") ? 0 : 1,
           set_aliasing: function(e) {
               document.getElementById("game_canvas").style.imageRendering = e ? "pixelated" : "auto"
           },
           checkbox: function() {
               0 === xI.aliasing.activated ? (Cookies.set("starve_aliasing", "1"),
               xI.aliasing.set_aliasing(1),
               xI.options.aliasing_agree.display = "inline-block") : (Cookies.set("starve_aliasing", "0"),
               xI.aliasing.set_aliasing(0),
               xI.options.aliasing_agree.display = "none"),
               xI.aliasing.activated = (xI.aliasing.activated + 1) % 2
           }
       },
       1 === this.aliasing.activated ? this.options.aliasing_agree.display = "inline-block" : (this.aliasing.set_aliasing(0),
       this.options.aliasing_agree.display = "none"),
       document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.aliasing.checkbox, !1),
       this.info_box = {
           activated: Cookies.get("starve_info_box") && "0" === Cookies.get("starve_info_box") ? 0 : 1,
           display: 0,
           x: 0,
           y: 0,
           id: 0,
           craft: 0,
           checkbox: function() {
               0 === xI.info_box.activated ? (Cookies.set("starve_info_box", "1"),
               xI.options.info_box_agree.display = "inline-block") : (Cookies.set("starve_info_box", "0"),
               xI.options.info_box_agree.display = "none"),
               xI.info_box.activated = (xI.info_box.activated + 1) % 2
           },
           trigger: function(e, i, t) {
               return e && this.activated && (this.display = 1,
               this.id = 0 === t ? i.id : RECIPES[i.id].id2,
               this.x = i.info.translate.x + 80,
               this.y = i.info.translate.y,
               this.craft = t),
               e
           }
       },
       1 === this.info_box.activated ? this.options.info_box_agree.display = "inline-block" : this.options.info_box_agree.display = "none",
       document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.info_box.checkbox, !1),
       Cookies.get("starve_scale") && (O = Number(Cookies.get("starve_scale")),
       document.getElementById("input_ratio").value = O,
       O *= c / v,
       P()),
       this.change_ratio = function() {
           Cookies.set("starve_scale", "" + document.getElementById("input_ratio").value),
           O = document.getElementById("input_ratio").value * (c / v),
           P()
       }
       ,
       document.getElementById("input_ratio").addEventListener("input", this.change_ratio, !1),
       this.safe_delete = {
           open: !1,
           activated: Cookies.get("starve_safe") && "0" === Cookies.get("starve_safe") ? 0 : 1,
           id: document.getElementById("sure_delete"),
           style: document.getElementById("sure_delete").style,
           agree: document.getElementById("agree").style,
           button: 0,
           i: 0,
           quit: function() {
               xI.safe_delete.style.display = "none",
               xI.safe_delete.open = !1
           },
           all: function() {
               kI.build.wait || (kI.craft.preview < 0 && kI.craft.id < 0 && !kI.ghost.enabled && WI.delete_inv(xI.safe_delete.button),
               xI.safe_delete.quit())
           },
           recycle: function() {
               kI.craft.workbench && !kI.build.wait && (kI.craft.preview < 0 && kI.craft.id < 0 && !kI.ghost.enabled && WI.recycle_inv(xI.safe_delete.button),
               xI.safe_delete.quit())
           },
           one: function() {
               kI.build.wait || (kI.craft.preview < 0 && kI.craft.id < 0 && !kI.ghost.enabled && WI.delete_one_inv(xI.safe_delete.button),
               xI.safe_delete.quit())
           },
           checkbox: function() {
               xI.safe_delete.activated ? (Cookies.set("starve_safe", "0"),
               xI.safe_delete.agree.display = "inline-block",
               xI.options.agree.display = "none") : (Cookies.set("starve_safe", "1"),
               xI.safe_delete.agree.display = "none",
               xI.options.agree.display = "inline-block"),
               xI.safe_delete.activated = !xI.safe_delete.activated
           },
           del: function(e) {
               this.button = e,
               document.getElementById("item_to_del").src = void 0 === sprite[INV_INFOS[e].img][0]._src ? sprite[INV_INFOS[e].img][0].src : sprite[INV_INFOS[e].img][0]._src,
               INV_INFOS[e].recycle && !kI.zombie && kI.craft.workbench ? document.getElementById("recycle_delete").style.display = "inline-block" : document.getElementById("recycle_delete").style.display = "none",
               this.activated ? (this.style.display = "inline-block",
               this.open = !0) : this.all()
           },
           update: function() {
               this.style.left = Math.floor(d - 235) + "px",
               this.style.top = Math.floor(S - 175) + "px"
           }
       },
       this.safe_delete.agree.display = "none",
       this.safe_delete.activated ? this.options.agree.display = "inline-block" : this.options.agree.display = "none",
       document.getElementById("one_delete").addEventListener("mouseup", this.safe_delete.one, !1),
       document.getElementById("yes_delete").addEventListener("mouseup", this.safe_delete.all, !1),
       document.getElementById("recycle_delete").addEventListener("mouseup", this.safe_delete.recycle, !1),
       document.getElementById("no_delete").addEventListener("mouseup", this.safe_delete.quit, !1),
       document.getElementById("case_agree").addEventListener("mouseup", this.safe_delete.checkbox, !1),
       this.shop = {
           open: !1,
           kit: -1,
           button: Qs(60, 60, "", sprite[SPRITE.SHOP]),
           id: document.getElementById("shop_starterkit"),
           style: document.getElementById("shop_starterkit").style,
           update: function() {
               this.style.left = Math.floor(d - 300) + "px",
               this.style.top = Math.floor(S - 215) + "px"
           },
           quit: function() {
               xI.shop.open = !1,
               xI.shop.style.display = "none"
           },
           select: function() {
               xI.shop.open = !xI.shop.open,
               xI.shop.open ? xI.shop.style.display = "inline-block" : xI.shop.style.display = "none"
           },
           buy: function() {
               xI.shop.kit >= 0 && (WI.choose_kit(xI.shop.kit),
               xI.shop.quit())
           },
           init: function() {
               var e = kI.shop.value;
               document.getElementById("points_bank").innerHTML = s.simplify_number(e) + " points";
               for (var i = 0; i < TT.length; i++)
                   TT[i].price > e ? document.getElementById("starter" + (i + 1)).style.opacity = "0.4" : document.getElementById("starter" + (i + 1)).style.opacity = "1";
               for (i = 1; i < 13; i++)
                   document.getElementById("inv_shop" + i).src = "./img/empty-shop.png",
                   document.getElementById("amount_shop" + i).innerHTML = "";
               document.getElementById("buy_kit").style.opacity = "0.2"
           },
           get_starter: function() {
               if (this.id.length > 8)
                   var e = Number(this.id.charAt(7) + this.id.charAt(8));
               else
                   e = Number(this.id.charAt(7));
               var i = TT[e - 1];
               kI.shop.value >= i.price ? (xI.shop.kit = e,
               document.getElementById("buy_kit").style.opacity = "1") : (xI.shop.kit = -1,
               document.getElementById("buy_kit").style.opacity = "0.2"),
               i = i.items;
               for (var t = 1, r = 1; t < i.length + 1; t++)
                   i[t - 1][1] !== INV.BAG && (document.getElementById("inv_shop" + r).style.display = "inline-block",
                   document.getElementById("inv_shop" + r).src = void 0 === sprite[INV_INFOS[i[t - 1][1]].img][0]._src ? sprite[INV_INFOS[i[t - 1][1]].img][0].src : sprite[INV_INFOS[i[t - 1][1]].img][0]._src,
                   document.getElementById("amount_shop" + r).innerHTML = "" + i[t - 1][0],
                   r++);
               for (; r < 13; r++)
                   document.getElementById("inv_shop" + r).src = "./img/empty-shop.png",
                   document.getElementById("amount_shop" + r).innerHTML = ""
           }
       },
       document.getElementById("quit3").addEventListener("mouseup", this.shop.quit, !1),
       document.getElementById("buy_kit").addEventListener("mouseup", this.shop.buy, !1);
       for (a = 1; a < 11; a++)
           document.getElementById("starter" + a).addEventListener("mouseup", this.shop.get_starter, !1);
       this.quests = {
           open: !1,
           activated: Cookies.get("starve_quests") && "1" === Cookies.get("starve_quests") ? 1 : 0,
           button: Qs(60, 60, "", sprite[SPRITE.QUEST_BUTTON]),
           id: document.getElementById("chronoquest"),
           style: document.getElementById("chronoquest").style,
           update: function() {
               this.style.left = Math.floor(d - 420) + "px",
               this.style.top = Math.floor(S - 270) + "px"
           },
           quit: function() {
               xI.quests.style.display = "none",
               xI.quests.open = !1
           },
           select: function() {
               xI.quests.open = !xI.quests.open,
               xI.quests.open ? xI.quests.style.display = "inline-block" : xI.quests.style.display = "none"
           },
           list: [],
           reset: function() {
               for (var e = 0; e < uT.length; e++)
                   this.list[e] = 1,
                   document.getElementById("timeremain_" + e).style.display = "inline-block",
                   document.getElementById("time_finished_" + e).style.display = "none",
                   document.getElementById("claim_reward_" + e).style.display = "none"
           },
           timer: 0,
           born: 0,
           update_chrono: function() {
               if (xI.quests.open) {
                   var e = (new Date).getTime();
                   if (!(e - this.timer < 1e3)) {
                       this.timer = e;
                       for (var i = 0; i < uT.length; i++)
                           if (xI.quests.list[i]) {
                               var t = uT[i].time - (e - UI.clock.init + xI.quests.born);
                               document.getElementById("timeremain_" + i).innerHTML = t > 96e4 ? Math.floor(t / 48e4) + " days" : t > 48e4 ? Math.floor(t / 48e4) + " day" : t > 6e4 ? Math.floor(t / 6e4) + " min" : Math.floor(t / 1e3) + " sec"
                           }
                   }
               }
           },
           restore: function(e) {
               for (var i = 0; i < e.length; i++)
                   1 != e[i] && xI.quests.modify_simple(i, e[i])
           },
           modify_simple: function(e, i) {
               3 !== i || 11 !== e && 12 !== e || (kI.inv.update_bag_size(0, 1),
               xI.update_inv_buttons()),
               document.getElementById("timeremain_" + e).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
               i > 1 ? (document.getElementById("time_finished_" + e).innerHTML = "SUCCEED",
               document.getElementById("timeremain_" + e).style.display = "none") : 0 === i && (document.getElementById("time_finished_" + e).innerHTML = "FAILED",
               document.getElementById("timeremain_" + e).style.display = "none"),
               document.getElementById("claim_reward_" + e).style.display = 2 === i ? "inline-block" : "none",
               document.getElementById("time_finished_" + e).style.display = "inline",
               xI.quests.list[e] = 0
           },
           modify: function(e, i) {
               xI.quests.modify_simple(e, i),
               xI.quests.activated && (xI.quests.open = !0,
               xI.quests.style.display = "inline-block")
           },
           checkbox: function() {
               xI.quests.activated ? (Cookies.set("starve_quests", "0"),
               xI.options.quests_agree.display = "none") : (Cookies.set("starve_quests", "1"),
               xI.options.quests_agree.display = "inline-block"),
               xI.quests.activated = !xI.quests.activated
           },
           claim: function() {
               var e = Number(this.id.charAt(13))
                 , i = Number(this.id.charAt(14));
               "" !== this.id.charAt(14) && i >= 0 && i <= 9 && (e = 10 * e + i),
               WI.claim_quest_reward(e)
           }
       },
       this.quests.activated ? this.options.quests_agree.display = "inline-block" : this.options.quests_agree.display = "none",
       document.getElementById("quit_chronoquest").addEventListener("mouseup", this.quests.quit, !1);
       for (a = 0; a < uT.length; a++)
           document.getElementById("claim_reward_" + a).addEventListener("mouseup", this.quests.claim, !1);
       this.craft_list = {
           open: !1,
           button: Qs(60, 60, "", sprite[SPRITE.RECIPE_BUTTON]),
           list: {
               id: document.getElementById("recipe_craft"),
               style: document.getElementById("recipe_craft").style,
               recipes: [],
               category: 0,
               update: function() {
                   this.style.left = Math.floor(d - 335) + "px",
                   this.style.top = Math.floor(S - 215) + "px"
               },
               quit: function() {
                   document.getElementById("recipe_craft").style.display = "none",
                   xI.craft_list.open = !1
               },
               previous: function() {
                   document.getElementById("recipe_craft").style.display = "none",
                   document.getElementById("home_craft").style.display = "inline-block"
               },
               get_recipe: function(e) {
                   (i = this.recipes[e]).o ? document.getElementById("watercraft").style.display = "inline-block" : document.getElementById("watercraft").style.display = "none",
                   i.f ? document.getElementById("firecraft").style.display = "inline-block" : document.getElementById("firecraft").style.display = "none",
                   i.w ? document.getElementById("workcraft").style.display = "inline-block" : document.getElementById("workcraft").style.display = "none",
                   i.e ? document.getElementById("wellcraft").style.display = "inline-block" : document.getElementById("wellcraft").style.display = "none";
                   for (var i = i.r, t = (e = 0,
                   1); e < i.length; e++)
                       document.getElementById("inv" + t).style.display = "inline-block",
                       document.getElementById("inv" + t).src = void 0 === sprite[INV_INFOS[i[e][0]].img][0]._src ? sprite[INV_INFOS[i[e][0]].img][0].src : sprite[INV_INFOS[i[e][0]].img][0]._src,
                       document.getElementById("numb" + t).innerHTML = "" + i[e][1],
                       t++;
                   for (; t < 6; t++)
                       document.getElementById("inv" + t).style.display = "none",
                       document.getElementById("numb" + t).innerHTML = ""
               },
               select: function(e) {
                   this.category = e,
                   document.getElementById("home_craft").style.display = "none",
                   document.getElementById("workcraft").style.display = "none",
                   document.getElementById("firecraft").style.display = "none",
                   document.getElementById("watercraft").style.display = "none",
                   document.getElementById("wellcraft").style.display = "none",
                   document.getElementById("recipe_craft").style.display = "inline-block",
                   document.getElementById("inv1").style.display = "none",
                   document.getElementById("inv2").style.display = "none",
                   document.getElementById("inv3").style.display = "none",
                   document.getElementById("inv4").style.display = "none",
                   document.getElementById("inv5").style.display = "none",
                   document.getElementById("numb1").innerHTML = "",
                   document.getElementById("numb2").innerHTML = "",
                   document.getElementById("numb3").innerHTML = "",
                   document.getElementById("numb4").innerHTML = "",
                   document.getElementById("numb5").innerHTML = "";
                   for (var i = 0, t = 0; i < RECIPES.length; i++) {
                       var r = RECIPES[i];
                       e === r.t && (this.recipes[t] = r,
                       t++,
                       document.getElementById("img_" + t).style.display = "inline-block",
                       document.getElementById("img_" + t).src = void 0 === sprite[INV_INFOS[r.id2].img][0]._src ? sprite[INV_INFOS[r.id2].img][0].src : sprite[INV_INFOS[r.id2].img][0]._src)
                   }
                   for (t++; t < 49; t++)
                       document.getElementById("img_" + t).style.display = "none"
               }
           },
           home: {
               id: document.getElementById("home_craft"),
               style: document.getElementById("home_craft").style,
               update: function() {
                   this.style.left = Math.floor(d - 285) + "px",
                   this.style.top = Math.floor(S - 170) + "px"
               },
               quit: function() {
                   document.getElementById("home_craft").style.display = "none",
                   xI.craft_list.open = !1
               }
           },
           select_book: function() {
               this.open = !this.open,
               this.open ? document.getElementById("home_craft").style.display = "inline-block" : (document.getElementById("home_craft").style.display = "none",
               document.getElementById("recipe_craft").style.display = "none")
           }
       },
       document.getElementById("quit").addEventListener("mouseup", this.craft_list.home.quit, !1),
       document.getElementById("quitmenu").addEventListener("mouseup", this.craft_list.list.quit, !1),
       document.getElementById("backhome").addEventListener("mouseup", this.craft_list.list.previous, !1),
       document.getElementById("hatcategory").addEventListener("mouseup", (function() {
           xI.craft_list.list.select(CATEGORY.CLOTHES)
       }
       ), !1),
       document.getElementById("weaponcategory").addEventListener("mouseup", (function() {
           xI.craft_list.list.select(CATEGORY.WEAPONS)
       }
       ), !1),
       document.getElementById("toolcategory").addEventListener("mouseup", (function() {
           xI.craft_list.list.select(CATEGORY.TOOLS)
       }
       ), !1),
       document.getElementById("foodcategory").addEventListener("mouseup", (function() {
           xI.craft_list.list.select(CATEGORY.FOODS)
       }
       ), !1),
       document.getElementById("placeablecategory").addEventListener("mouseup", (function() {
           xI.craft_list.list.select(CATEGORY.UTILS)
       }
       ), !1),
       document.getElementById("constructioncategory").addEventListener("mouseup", (function() {
           xI.craft_list.list.select(CATEGORY.BASES)
       }
       ), !1),
       document.getElementById("img_1").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(0)
       }
       ), !1),
       document.getElementById("img_2").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(1)
       }
       ), !1),
       document.getElementById("img_3").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(2)
       }
       ), !1),
       document.getElementById("img_4").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(3)
       }
       ), !1),
       document.getElementById("img_5").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(4)
       }
       ), !1),
       document.getElementById("img_6").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(5)
       }
       ), !1),
       document.getElementById("img_7").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(6)
       }
       ), !1),
       document.getElementById("img_8").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(7)
       }
       ), !1),
       document.getElementById("img_9").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(8)
       }
       ), !1),
       document.getElementById("img_10").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(9)
       }
       ), !1),
       document.getElementById("img_11").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(10)
       }
       ), !1),
       document.getElementById("img_12").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(11)
       }
       ), !1),
       document.getElementById("img_13").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(12)
       }
       ), !1),
       document.getElementById("img_14").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(13)
       }
       ), !1),
       document.getElementById("img_15").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(14)
       }
       ), !1),
       document.getElementById("img_16").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(15)
       }
       ), !1),
       document.getElementById("img_17").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(16)
       }
       ), !1),
       document.getElementById("img_18").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(17)
       }
       ), !1),
       document.getElementById("img_19").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(18)
       }
       ), !1),
       document.getElementById("img_20").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(19)
       }
       ), !1),
       document.getElementById("img_21").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(20)
       }
       ), !1),
       document.getElementById("img_22").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(21)
       }
       ), !1),
       document.getElementById("img_23").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(22)
       }
       ), !1),
       document.getElementById("img_24").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(23)
       }
       ), !1),
       document.getElementById("img_25").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(24)
       }
       ), !1),
       document.getElementById("img_26").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(25)
       }
       ), !1),
       document.getElementById("img_27").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(26)
       }
       ), !1),
       document.getElementById("img_28").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(27)
       }
       ), !1),
       document.getElementById("img_29").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(28)
       }
       ), !1),
       document.getElementById("img_30").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(29)
       }
       ), !1),
       document.getElementById("img_31").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(30)
       }
       ), !1),
       document.getElementById("img_32").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(31)
       }
       ), !1),
       document.getElementById("img_33").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(32)
       }
       ), !1),
       document.getElementById("img_34").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(33)
       }
       ), !1),
       document.getElementById("img_35").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(34)
       }
       ), !1),
       document.getElementById("img_36").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(35)
       }
       ), !1),
       document.getElementById("img_37").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(36)
       }
       ), !1),
       document.getElementById("img_38").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(37)
       }
       ), !1),
       document.getElementById("img_39").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(38)
       }
       ), !1),
       document.getElementById("img_40").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(39)
       }
       ), !1),
       document.getElementById("img_41").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(40)
       }
       ), !1),
       document.getElementById("img_42").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(41)
       }
       ), !1),
       document.getElementById("img_43").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(42)
       }
       ), !1),
       document.getElementById("img_44").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(43)
       }
       ), !1),
       document.getElementById("img_45").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(44)
       }
       ), !1),
       document.getElementById("img_46").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(45)
       }
       ), !1),
       document.getElementById("img_47").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(46)
       }
       ), !1),
       document.getElementById("img_48").addEventListener("mousedown", (function() {
           xI.craft_list.list.get_recipe(47)
       }
       ), !1),
       this.minimap = {
           translate: {
               x: 0,
               y: 0
           },
           marker: {
               x: -1,
               y: -1
           },
           players: [],
           focus: function(e) {
               var i = this.translate.y + (kI.inv.can_select.length > 0 ? -120 : -50);
               e.x > this.translate.x && e.x < this.translate.x + 193 && e.y > i && e.y < i + 193 && (this.marker.x = e.x - this.translate.x,
               this.marker.y = e.y - i)
           }
       },
       this.leaderboard = {
           translate: {
               x: 0,
               y: 0
           },
           img: sprite[SPRITE.LEADERBOARD],
           can: document.createElement("canvas")
       },
       this.leaderboard.can.width = this.leaderboard.img.width,
       this.leaderboard.can.height = this.leaderboard.img.height,
       this.leaderboard.ctx = this.leaderboard.can.getContext("2d"),
       this.gauges = {
           translate: {
               x: 0,
               y: 0
           },
           img: sprite[SPRITE.GAUGES],
           draw: po,
           y: 0
       },
       this.leave_team = function() {
           div = document.getElementById("team_box"),
           div.innerHTML = "",
           div.innerHTML += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + UI.players[kI.team[0]].nickname + "</div";
           for (var e = 1; e < kI.team.length; e++)
               div.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + UI.players[kI.team[e]].nickname + "</div></div>";
           div.innerHTML += '<div id="leave" style="display:inline-block;">LEAVE</div></div>',
           div.style.display = "inline-block",
           document.getElementById("leave").addEventListener("click", WI.leave_team, !1)
       }
       ,
       this.show_team = function() {
           div = document.getElementById("team_box"),
           div.innerHTML = "",
           div.innerHTML += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + UI.players[kI.team[0]].nickname + "</div";
           for (var e = 1; e < kI.team.length; e++)
               div.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + UI.players[kI.team[e]].nickname + "</div></div>";
           div.innerHTML += "</div>",
           div.style.display = "inline-block"
       }
       ,
       this.manage_team = function() {
           div = document.getElementById("team_box"),
           div.innerHTML = "",
           div.innerHTML += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + UI.players[kI.team[0]].nickname + "</div";
           for (var e = 1; e < kI.team.length; e++)
               div.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + UI.players[kI.team[e]].nickname + '</div><div class="eject_member" id="eject_member' + e + '"><img src="./img/close-team.png" style="width:20px;padding:5px;"></img></div>';
           0 === kI.totem.lock ? div.innerHTML += '<div id="lock_team" style="display:inline-block;">LOCK</div></div>' : div.innerHTML += '<div id="lock_team" style="display:inline-block;">UNLOCK</div></div>',
           document.getElementById("lock_team").addEventListener("click", WI.lock_team, !1),
           div.style.display = "inline-block";
           for (e = 1; e < kI.team.length; e++)
               switch (e) {
               case 1:
                   document.getElementById("eject_member" + e).addEventListener("click", (function() {
                       WI.kick_team(1)
                   }
                   ), !1);
                   break;
               case 2:
                   document.getElementById("eject_member" + e).addEventListener("click", (function() {
                       WI.kick_team(2)
                   }
                   ), !1);
                   break;
               case 3:
                   document.getElementById("eject_member" + e).addEventListener("click", (function() {
                       WI.kick_team(3)
                   }
                   ), !1);
                   break;
               case 4:
                   document.getElementById("eject_member" + e).addEventListener("click", (function() {
                       WI.kick_team(4)
                   }
                   ), !1);
                   break;
               case 5:
                   document.getElementById("eject_member" + e).addEventListener("click", (function() {
                       WI.kick_team(5)
                   }
                   ), !1);
                   break;
               case 6:
                   document.getElementById("eject_member" + e).addEventListener("click", (function() {
                       WI.kick_team(6)
                   }
                   ), !1);
                   break;
               case 7:
                   document.getElementById("eject_member" + e).addEventListener("click", (function() {
                       WI.kick_team(7)
                   }
                   ), !1);
                   break;
               case 8:
                   document.getElementById("eject_member" + e).addEventListener("click", (function() {
                       WI.kick_team(8)
                   }
                   ), !1)
               }
       }
       ,
       this.team_buttons = [],
       this.team_buttons[IT.TEAM_LEAVE] = {
           button: Qs(60, 60, "", sprite[SPRITE.TEAM_BUTTON]),
           action: this.leave_team
       },
       this.team_buttons[IT.TEAM_JOIN] = {
           button: Qs(60, 60, "", sprite[SPRITE.TEAM_BUTTON]),
           action: WI.join_team
       },
       this.team_buttons[IT.TEAM_MANAGE] = {
           button: Qs(60, 60, "", sprite[SPRITE.MANAGE_TEAM_BUTTON]),
           action: this.manage_team
       },
       this.team_buttons[IT.TEAM_SHOW] = {
           button: Qs(60, 60, "", sprite[SPRITE.SHOW_TEAM_BUTTON]),
           action: this.show_team
       },
       this.team_buttons[IT.TEAM_FULL] = {
           button: Qs(60, 60, "", sprite[SPRITE.FULL_TEAM_BUTTON]),
           action: function() {}
       },
       this.team_buttons_id = -1,
       this.bread_oven_wood_button = Qs(60, 60, "", sprite[SPRITE.BREAD_OVEN_WOOD]),
       this.bread_oven_bread_button = Qs(60, 60, "", sprite[SPRITE.BREAD_OVEN_BREAD]),
       this.bread_oven_flour_button = Qs(60, 60, "", sprite[SPRITE.WINDMILL_FLOUR]),
       this.windmill_wheat_button = Qs(60, 60, "", sprite[SPRITE.WINDMILL_WHEAT_SEED]),
       this.windmill_flour_button = Qs(60, 60, "", sprite[SPRITE.WINDMILL_FLOUR]),
       this.extractor_wood_button = Qs(60, 60, "", sprite[SPRITE.INV_WOOD]),
       this.extractor_stone_button = Qs(60, 60, "", sprite[SPRITE.INV_STONE]),
       this.extractor_gold_button = Qs(60, 60, "", sprite[SPRITE.INV_GOLD]),
       this.extractor_diamond_button = Qs(60, 60, "", sprite[SPRITE.INV_DIAMOND]),
       this.extractor_amethyst_button = Qs(60, 60, "", sprite[SPRITE.INV_AMETHYST]),
       this.extractor_reidite_button = Qs(60, 60, "", sprite[SPRITE.INV_REIDITE]),
       this.furnace_button = Qs(60, 60, "", sprite[SPRITE.FURNACE_BUTTON]),
       this.chest_padlock = Qs(60, 60, "", sprite[SPRITE.PADLOCK]),
       this.chest_lockpick = Qs(60, 60, "", sprite[SPRITE.KEY]),
       this.chest_locked = Qs(60, 60, "", sprite[SPRITE.LOCKED]),
       this.resurrection = Qs(120, 120, "", sprite[SPRITE.DRAGON_HEART]),
       this.resurrection.info.translate.x = 10,
       this.resurrection.info.translate.y = 10,
       this.chest_buttons = [],
       this.chest_buttons[INV.SWORD] = Qs(68, 68, "", sprite[SPRITE.CHEST_SWORD], 3),
       this.chest_buttons[INV.SWORD].id = INV.SWORD,
       this.chest_buttons[INV.PICK] = Qs(68, 68, "", sprite[SPRITE.CHEST_PICK], 3),
       this.chest_buttons[INV.PICK].id = INV.PICK,
       this.chest_buttons[INV.STONE] = Qs(68, 68, "", sprite[SPRITE.CHEST_STONE], 3),
       this.chest_buttons[INV.STONE].id = INV.STONE,
       this.chest_buttons[INV.WOOD] = Qs(68, 68, "", sprite[SPRITE.CHEST_WOOD], 3),
       this.chest_buttons[INV.WOOD].id = INV.WOOD,
       this.chest_buttons[INV.PLANT] = Qs(68, 68, "", sprite[SPRITE.CHEST_PLANT], 3),
       this.chest_buttons[INV.PLANT].id = INV.PLANT,
       this.chest_buttons[INV.CACTUS] = Qs(68, 68, "", sprite[SPRITE.CHEST_CACTUS], 3),
       this.chest_buttons[INV.CACTUS].id = INV.CACTUS,
       this.chest_buttons[INV.GOLD] = Qs(68, 68, "", sprite[SPRITE.CHEST_GOLD], 3),
       this.chest_buttons[INV.GOLD].id = INV.GOLD,
       this.chest_buttons[INV.DIAMOND] = Qs(68, 68, "", sprite[SPRITE.CHEST_DIAMOND], 3),
       this.chest_buttons[INV.DIAMOND].id = INV.DIAMOND,
       this.chest_buttons[INV.PICK_GOLD] = Qs(68, 68, "", sprite[SPRITE.CHEST_PICK_GOLD], 3),
       this.chest_buttons[INV.PICK_GOLD].id = INV.PICK_GOLD,
       this.chest_buttons[INV.PICK_DIAMOND] = Qs(68, 68, "", sprite[SPRITE.CHEST_PICK_DIAMOND], 3),
       this.chest_buttons[INV.PICK_DIAMOND].id = INV.PICK_DIAMOND,
       this.chest_buttons[INV.SWORD_GOLD] = Qs(68, 68, "", sprite[SPRITE.CHEST_SWORD_GOLD], 3),
       this.chest_buttons[INV.SWORD_GOLD].id = INV.SWORD_GOLD,
       this.chest_buttons[INV.SWORD_WOOD] = Qs(68, 68, "", sprite[SPRITE.CHEST_SWORD_WOOD], 3),
       this.chest_buttons[INV.SWORD_WOOD].id = INV.SWORD_WOOD,
       this.chest_buttons[INV.SWORD_DIAMOND] = Qs(68, 68, "", sprite[SPRITE.CHEST_SWORD_DIAMOND], 3),
       this.chest_buttons[INV.SWORD_DIAMOND].id = INV.SWORD_DIAMOND,
       this.chest_buttons[INV.FIRE] = Qs(68, 68, "", sprite[SPRITE.CHEST_FIRE], 3),
       this.chest_buttons[INV.FIRE].id = INV.FIRE,
       this.chest_buttons[INV.WORKBENCH] = Qs(68, 68, "", sprite[SPRITE.CHEST_WORKBENCH], 3),
       this.chest_buttons[INV.WORKBENCH].id = INV.WORKBENCH,
       this.chest_buttons[INV.SEED] = Qs(68, 68, "", sprite[SPRITE.CHEST_SEED], 3),
       this.chest_buttons[INV.SEED].id = INV.SEED,
       this.chest_buttons[INV.WALL] = Qs(68, 68, "", sprite[SPRITE.CHEST_WALL], 3),
       this.chest_buttons[INV.WALL].id = INV.WALL,
       this.chest_buttons[INV.SPIKE] = Qs(68, 68, "", sprite[SPRITE.CHEST_SPIKE], 3),
       this.chest_buttons[INV.SPIKE].id = INV.SPIKE,
       this.chest_buttons[INV.PICK_WOOD] = Qs(68, 68, "", sprite[SPRITE.CHEST_PICK_WOOD], 3),
       this.chest_buttons[INV.PICK_WOOD].id = INV.PICK_WOOD,
       this.chest_buttons[INV.COOKED_MEAT] = Qs(68, 68, "", sprite[SPRITE.CHEST_COOKED_MEAT], 3),
       this.chest_buttons[INV.COOKED_MEAT].id = INV.COOKED_MEAT,
       this.chest_buttons[INV.MEAT] = Qs(68, 68, "", sprite[SPRITE.CHEST_MEAT], 3),
       this.chest_buttons[INV.MEAT].id = INV.MEAT,
       this.chest_buttons[INV.BIG_FIRE] = Qs(68, 68, "", sprite[SPRITE.CHEST_BIG_FIRE], 3),
       this.chest_buttons[INV.BIG_FIRE].id = INV.BIG_FIRE,
       this.chest_buttons[INV.BANDAGE] = Qs(68, 68, "", sprite[SPRITE.CHEST_BANDAGE], 3),
       this.chest_buttons[INV.BANDAGE].id = INV.BANDAGE,
       this.chest_buttons[INV.CORD] = Qs(68, 68, "", sprite[SPRITE.CHEST_CORD], 3),
       this.chest_buttons[INV.CORD].id = INV.CORD,
       this.chest_buttons[INV.STONE_WALL] = Qs(68, 68, "", sprite[SPRITE.CHEST_STONE_WALL], 3),
       this.chest_buttons[INV.STONE_WALL].id = INV.STONE_WALL,
       this.chest_buttons[INV.GOLD_WALL] = Qs(68, 68, "", sprite[SPRITE.CHEST_GOLD_WALL], 3),
       this.chest_buttons[INV.GOLD_WALL].id = INV.GOLD_WALL,
       this.chest_buttons[INV.DIAMOND_WALL] = Qs(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_WALL], 3),
       this.chest_buttons[INV.DIAMOND_WALL].id = INV.DIAMOND_WALL,
       this.chest_buttons[INV.WOOD_DOOR] = Qs(68, 68, "", sprite[SPRITE.CHEST_DOOR_WOOD_CLOSE], 3),
       this.chest_buttons[INV.WOOD_DOOR].id = INV.WOOD_DOOR,
       this.chest_buttons[INV.CHEST] = Qs(68, 68, "", sprite[SPRITE.CHEST_CHEST], 3),
       this.chest_buttons[INV.CHEST].id = INV.CHEST,
       this.chest_buttons[INV.STONE_SPIKE] = Qs(68, 68, "", sprite[SPRITE.CHEST_STONE_SPIKE], 3),
       this.chest_buttons[INV.STONE_SPIKE].id = INV.STONE_SPIKE,
       this.chest_buttons[INV.GOLD_SPIKE] = Qs(68, 68, "", sprite[SPRITE.CHEST_GOLD_SPIKE], 3),
       this.chest_buttons[INV.GOLD_SPIKE].id = INV.GOLD_SPIKE,
       this.chest_buttons[INV.DIAMOND_SPIKE] = Qs(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_SPIKE], 3),
       this.chest_buttons[INV.DIAMOND_SPIKE].id = INV.DIAMOND_SPIKE,
       this.chest_buttons[INV.FUR] = Qs(68, 68, "", sprite[SPRITE.CHEST_FUR], 3),
       this.chest_buttons[INV.FUR].id = INV.FUR,
       this.chest_buttons[INV.FUR_BOAR] = Qs(68, 68, "", sprite[SPRITE.CHEST_FUR_BOAR], 3),
       this.chest_buttons[INV.FUR_BOAR].id = INV.FUR_BOAR,
       this.chest_buttons[INV.FUR_WOLF] = Qs(68, 68, "", sprite[SPRITE.CHEST_FUR_WOLF], 3),
       this.chest_buttons[INV.FUR_WOLF].id = INV.FUR_WOLF,
       this.chest_buttons[INV.PENGUIN_FEATHER] = Qs(68, 68, "", sprite[SPRITE.CHEST_PENGUIN_FEATHER], 3),
       this.chest_buttons[INV.PENGUIN_FEATHER].id = INV.PENGUIN_FEATHER,
       this.chest_buttons[INV.HAWK_FEATHER] = Qs(68, 68, "", sprite[SPRITE.CHEST_HAWK_FEATHER], 3),
       this.chest_buttons[INV.HAWK_FEATHER].id = INV.HAWK_FEATHER,
       this.chest_buttons[INV.VULTURE_FEATHER] = Qs(68, 68, "", sprite[SPRITE.CHEST_VULTURE_FEATHER], 3),
       this.chest_buttons[INV.VULTURE_FEATHER].id = INV.VULTURE_FEATHER,
       this.chest_buttons[INV.EMERALD] = Qs(68, 68, "", sprite[SPRITE.CHEST_EMERALD], 3),
       this.chest_buttons[INV.EMERALD].id = INV.EMERALD,
       this.chest_buttons[INV.EARMUFFS] = Qs(68, 68, "", sprite[SPRITE.CHEST_EARMUFFS], 3),
       this.chest_buttons[INV.EARMUFFS].id = INV.EARMUFFS,
       this.chest_buttons[INV.STONE_DOOR] = Qs(68, 68, "", sprite[SPRITE.CHEST_DOOR_STONE_CLOSE], 3),
       this.chest_buttons[INV.STONE_DOOR].id = INV.STONE_DOOR,
       this.chest_buttons[INV.GOLD_DOOR] = Qs(68, 68, "", sprite[SPRITE.CHEST_DOOR_GOLD_CLOSE], 3),
       this.chest_buttons[INV.GOLD_DOOR].id = INV.GOLD_DOOR,
       this.chest_buttons[INV.DIAMOND_DOOR] = Qs(68, 68, "", sprite[SPRITE.CHEST_DOOR_DIAMOND_CLOSE], 3),
       this.chest_buttons[INV.DIAMOND_DOOR].id = INV.DIAMOND_DOOR,
       this.chest_buttons[INV.COAT] = Qs(68, 68, "", sprite[SPRITE.CHEST_COAT], 3),
       this.chest_buttons[INV.COAT].id = INV.COAT,
       this.chest_buttons[INV.WOOD_SPEAR] = Qs(68, 68, "", sprite[SPRITE.CHEST_WOOD_SPEAR], 3),
       this.chest_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR,
       this.chest_buttons[INV.SPEAR] = Qs(68, 68, "", sprite[SPRITE.CHEST_SPEAR], 3),
       this.chest_buttons[INV.SPEAR].id = INV.SPEAR,
       this.chest_buttons[INV.GOLD_SPEAR] = Qs(68, 68, "", sprite[SPRITE.CHEST_GOLD_SPEAR], 3),
       this.chest_buttons[INV.GOLD_SPEAR].id = INV.GOLD_SPEAR,
       this.chest_buttons[INV.DIAMOND_SPEAR] = Qs(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_SPEAR], 3),
       this.chest_buttons[INV.DIAMOND_SPEAR].id = INV.DIAMOND_SPEAR,
       this.chest_buttons[INV.DRAGON_SPEAR] = Qs(68, 68, "", sprite[SPRITE.CHEST_DRAGON_SPEAR], 3),
       this.chest_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR,
       this.chest_buttons[INV.FURNACE] = Qs(68, 68, "", sprite[SPRITE.CHEST_FURNACE], 3),
       this.chest_buttons[INV.FURNACE].id = INV.FURNACE,
       this.chest_buttons[INV.EXPLORER_HAT] = Qs(68, 68, "", sprite[SPRITE.CHEST_EXPLORER_HAT], 3),
       this.chest_buttons[INV.EXPLORER_HAT].id = INV.EXPLORER_HAT,
       this.chest_buttons[INV.PIRATE_HAT] = Qs(68, 68, "", sprite[SPRITE.CHEST_PIRATE_HAT], 3),
       this.chest_buttons[INV.PIRATE_HAT].id = INV.PIRATE_HAT,
       this.chest_buttons[INV.FLOWER_HAT] = Qs(68, 68, "", sprite[SPRITE.CHEST_FLOWER_HAT], 3),
       this.chest_buttons[INV.FLOWER_HAT].id = INV.FLOWER_HAT,
       this.chest_buttons[INV.FUR_HAT] = Qs(68, 68, "", sprite[SPRITE.CHEST_FUR_HAT], 3),
       this.chest_buttons[INV.FUR_HAT].id = INV.FUR_HAT,
       this.chest_buttons[INV.TURBAN1] = Qs(68, 68, "", sprite[SPRITE.CHEST_TURBAN1], 3),
       this.chest_buttons[INV.TURBAN1].id = INV.TURBAN1,
       this.chest_buttons[INV.TURBAN2] = Qs(68, 68, "", sprite[SPRITE.CHEST_TURBAN2], 3),
       this.chest_buttons[INV.TURBAN2].id = INV.TURBAN2,
       this.chest_buttons[INV.WOOD_ARROW] = Qs(68, 68, "", sprite[SPRITE.CHEST_WOOD_ARROW], 3),
       this.chest_buttons[INV.WOOD_ARROW].id = INV.WOOD_ARROW,
       this.chest_buttons[INV.WOOD_BOW] = Qs(68, 68, "", sprite[SPRITE.CHEST_WOOD_BOW], 3),
       this.chest_buttons[INV.WOOD_BOW].id = INV.WOOD_BOW,
       this.chest_buttons[INV.WOOD_SHIELD] = Qs(68, 68, "", sprite[SPRITE.CHEST_WOOD_SHIELD], 3),
       this.chest_buttons[INV.WOOD_SHIELD].id = INV.WOOD_SHIELD,
       this.chest_buttons[INV.STONE_ARROW] = Qs(68, 68, "", sprite[SPRITE.CHEST_STONE_ARROW], 3),
       this.chest_buttons[INV.STONE_ARROW].id = INV.STONE_ARROW,
       this.chest_buttons[INV.STONE_BOW] = Qs(68, 68, "", sprite[SPRITE.CHEST_STONE_BOW], 3),
       this.chest_buttons[INV.STONE_BOW].id = INV.STONE_BOW,
       this.chest_buttons[INV.STONE_SHIELD] = Qs(68, 68, "", sprite[SPRITE.CHEST_STONE_SHIELD], 3),
       this.chest_buttons[INV.STONE_SHIELD].id = INV.STONE_SHIELD,
       this.chest_buttons[INV.GOLD_ARROW] = Qs(68, 68, "", sprite[SPRITE.CHEST_GOLD_ARROW], 3),
       this.chest_buttons[INV.GOLD_ARROW].id = INV.GOLD_ARROW,
       this.chest_buttons[INV.GOLD_BOW] = Qs(68, 68, "", sprite[SPRITE.CHEST_GOLD_BOW], 3),
       this.chest_buttons[INV.GOLD_BOW].id = INV.GOLD_BOW,
       this.chest_buttons[INV.GOLD_SHIELD] = Qs(68, 68, "", sprite[SPRITE.CHEST_GOLD_SHIELD], 3),
       this.chest_buttons[INV.GOLD_SHIELD].id = INV.GOLD_SHIELD,
       this.chest_buttons[INV.DIAMOND_ARROW] = Qs(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_ARROW], 3),
       this.chest_buttons[INV.DIAMOND_ARROW].id = INV.DIAMOND_ARROW,
       this.chest_buttons[INV.DIAMOND_BOW] = Qs(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_BOW], 3),
       this.chest_buttons[INV.DIAMOND_BOW].id = INV.DIAMOND_BOW,
       this.chest_buttons[INV.DIAMOND_SHIELD] = Qs(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_SHIELD], 3),
       this.chest_buttons[INV.DIAMOND_SHIELD].id = INV.DIAMOND_SHIELD,
       this.chest_buttons[INV.AMETHYST_ARROW] = Qs(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_ARROW], 3),
       this.chest_buttons[INV.AMETHYST_ARROW].id = INV.AMETHYST_ARROW,
       this.chest_buttons[INV.AMETHYST_BOW] = Qs(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_BOW], 3),
       this.chest_buttons[INV.AMETHYST_BOW].id = INV.AMETHYST_BOW,
       this.chest_buttons[INV.AMETHYST_SHIELD] = Qs(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_SHIELD], 3),
       this.chest_buttons[INV.AMETHYST_SHIELD].id = INV.AMETHYST_SHIELD,
       this.chest_buttons[INV.REIDITE_ARROW] = Qs(68, 68, "", sprite[SPRITE.CHEST_REIDITE_ARROW], 3),
       this.chest_buttons[INV.REIDITE_ARROW].id = INV.REIDITE_ARROW,
       this.chest_buttons[INV.REIDITE_BOW] = Qs(68, 68, "", sprite[SPRITE.CHEST_REIDITE_BOW], 3),
       this.chest_buttons[INV.REIDITE_BOW].id = INV.REIDITE_BOW,
       this.chest_buttons[INV.REIDITE_SHIELD] = Qs(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SHIELD], 3),
       this.chest_buttons[INV.REIDITE_SHIELD].id = INV.REIDITE_SHIELD,
       this.chest_buttons[INV.DRAGON_ARROW] = Qs(68, 68, "", sprite[SPRITE.CHEST_DRAGON_ARROW], 3),
       this.chest_buttons[INV.DRAGON_ARROW].id = INV.DRAGON_ARROW,
       this.chest_buttons[INV.DRAGON_BOW] = Qs(68, 68, "", sprite[SPRITE.CHEST_DRAGON_BOW], 3),
       this.chest_buttons[INV.DRAGON_BOW].id = INV.DRAGON_BOW,
       this.chest_buttons[INV.WOOD_HELMET] = Qs(68, 68, "", sprite[SPRITE.CHEST_WOOD_HELMET], 3),
       this.chest_buttons[INV.WOOD_HELMET].id = INV.WOOD_HELMET,
       this.chest_buttons[INV.STONE_HELMET] = Qs(68, 68, "", sprite[SPRITE.CHEST_STONE_HELMET], 3),
       this.chest_buttons[INV.STONE_HELMET].id = INV.STONE_HELMET,
       this.chest_buttons[INV.GOLD_HELMET] = Qs(68, 68, "", sprite[SPRITE.CHEST_GOLD_HELMET], 3),
       this.chest_buttons[INV.GOLD_HELMET].id = INV.GOLD_HELMET,
       this.chest_buttons[INV.DIAMOND_HELMET] = Qs(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_HELMET], 3),
       this.chest_buttons[INV.DIAMOND_HELMET].id = INV.DIAMOND_HELMET,
       this.chest_buttons[INV.BOOK] = Qs(68, 68, "", sprite[SPRITE.CHEST_BOOK], 3),
       this.chest_buttons[INV.BOOK].id = INV.BOOK,
       this.chest_buttons[INV.PAPER] = Qs(68, 68, "", sprite[SPRITE.CHEST_PAPER], 3),
       this.chest_buttons[INV.PAPER].id = INV.PAPER,
       this.chest_buttons[INV.BAG] = Qs(68, 68, "", sprite[SPRITE.CHEST_BAG], 3),
       this.chest_buttons[INV.BAG].id = INV.BAG,
       this.chest_buttons[INV.AMETHYST] = Qs(68, 68, "", sprite[SPRITE.CHEST_AMETHYST], 3),
       this.chest_buttons[INV.AMETHYST].id = INV.AMETHYST,
       this.chest_buttons[INV.SWORD_AMETHYST] = Qs(68, 68, "", sprite[SPRITE.CHEST_SWORD_AMETHYST], 3),
       this.chest_buttons[INV.SWORD_AMETHYST].id = INV.SWORD_AMETHYST,
       this.chest_buttons[INV.PIRATE_SWORD] = Qs(68, 68, "", sprite[SPRITE.CHEST_PIRATE_SWORD], 3),
       this.chest_buttons[INV.PIRATE_SWORD].id = INV.PIRATE_SWORD,
       this.chest_buttons[INV.PICK_AMETHYST] = Qs(68, 68, "", sprite[SPRITE.CHEST_PICK_AMETHYST], 3),
       this.chest_buttons[INV.PICK_AMETHYST].id = INV.PICK_AMETHYST,
       this.chest_buttons[INV.PICK_REIDITE] = Qs(68, 68, "", sprite[SPRITE.CHEST_PICK_REIDITE], 3),
       this.chest_buttons[INV.PICK_REIDITE].id = INV.PICK_REIDITE,
       this.chest_buttons[INV.AMETHYST_SPEAR] = Qs(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_SPEAR], 3),
       this.chest_buttons[INV.AMETHYST_SPEAR].id = INV.AMETHYST_SPEAR,
       this.chest_buttons[INV.HAMMER] = Qs(68, 68, "", sprite[SPRITE.CHEST_HAMMER], 3),
       this.chest_buttons[INV.HAMMER].id = INV.HAMMER,
       this.chest_buttons[INV.HAMMER_GOLD] = Qs(68, 68, "", sprite[SPRITE.CHEST_HAMMER_GOLD], 3),
       this.chest_buttons[INV.HAMMER_GOLD].id = INV.HAMMER_GOLD,
       this.chest_buttons[INV.HAMMER_DIAMOND] = Qs(68, 68, "", sprite[SPRITE.CHEST_HAMMER_DIAMOND], 3),
       this.chest_buttons[INV.HAMMER_DIAMOND].id = INV.HAMMER_DIAMOND,
       this.chest_buttons[INV.HAMMER_AMETHYST] = Qs(68, 68, "", sprite[SPRITE.CHEST_HAMMER_AMETHYST], 3),
       this.chest_buttons[INV.HAMMER_AMETHYST].id = INV.HAMMER_AMETHYST,
       this.chest_buttons[INV.HAMMER_REIDITE] = Qs(68, 68, "", sprite[SPRITE.CHEST_HAMMER_REIDITE], 3),
       this.chest_buttons[INV.HAMMER_REIDITE].id = INV.HAMMER_REIDITE,
       this.chest_buttons[INV.AMETHYST_WALL] = Qs(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_WALL], 3),
       this.chest_buttons[INV.AMETHYST_WALL].id = INV.AMETHYST_WALL,
       this.chest_buttons[INV.AMETHYST_SPIKE] = Qs(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_SPIKE], 3),
       this.chest_buttons[INV.AMETHYST_SPIKE].id = INV.AMETHYST_SPIKE,
       this.chest_buttons[INV.AMETHYST_DOOR] = Qs(68, 68, "", sprite[SPRITE.CHEST_DOOR_AMETHYST_CLOSE], 3),
       this.chest_buttons[INV.AMETHYST_DOOR].id = INV.AMETHYST_DOOR,
       this.chest_buttons[INV.CAP_SCARF] = Qs(68, 68, "", sprite[SPRITE.CHEST_CAP_SCARF], 3),
       this.chest_buttons[INV.CAP_SCARF].id = INV.CAP_SCARF,
       this.chest_buttons[INV.FUR_WINTER] = Qs(68, 68, "", sprite[SPRITE.CHEST_FUR_WINTER], 3),
       this.chest_buttons[INV.FUR_WINTER].id = INV.FUR_WINTER,
       this.chest_buttons[INV.FUR_MAMMOTH] = Qs(68, 68, "", sprite[SPRITE.CHEST_FUR_MAMMOTH], 3),
       this.chest_buttons[INV.FUR_MAMMOTH].id = INV.FUR_MAMMOTH,
       this.chest_buttons[INV.BLUE_CORD] = Qs(68, 68, "", sprite[SPRITE.CHEST_BLUE_CORD], 3),
       this.chest_buttons[INV.BLUE_CORD].id = INV.BLUE_CORD,
       this.chest_buttons[INV.LOCK] = Qs(68, 68, "", sprite[SPRITE.CHEST_LOCK], 3),
       this.chest_buttons[INV.LOCK].id = INV.LOCK,
       this.chest_buttons[INV.DRAGON_HEART] = Qs(68, 68, "", sprite[SPRITE.CHEST_DRAGON_HEART], 3),
       this.chest_buttons[INV.DRAGON_HEART].id = INV.DRAGON_HEART,
       this.chest_buttons[INV.LAVA_HEART] = Qs(68, 68, "", sprite[SPRITE.CHEST_LAVA_HEART], 3),
       this.chest_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART,
       this.chest_buttons[INV.RESURRECTION] = Qs(68, 68, "", sprite[SPRITE.CHEST_RESURRECTION], 3),
       this.chest_buttons[INV.RESURRECTION].id = INV.RESURRECTION,
       this.chest_buttons[INV.LOCKPICK] = Qs(68, 68, "", sprite[SPRITE.CHEST_LOCKPICK], 3),
       this.chest_buttons[INV.LOCKPICK].id = INV.LOCKPICK,
       this.chest_buttons[INV.TOTEM] = Qs(68, 68, "", sprite[SPRITE.CHEST_TOTEM], 3),
       this.chest_buttons[INV.TOTEM].id = INV.TOTEM,
       this.chest_buttons[INV.AMETHYST_HELMET] = Qs(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_HELMET], 3),
       this.chest_buttons[INV.AMETHYST_HELMET].id = INV.AMETHYST_HELMET,
       this.chest_buttons[INV.SUPER_HAMMER] = Qs(68, 68, "", sprite[SPRITE.CHEST_SUPER_HAMMER], 3),
       this.chest_buttons[INV.SUPER_HAMMER].id = INV.SUPER_HAMMER,
       this.chest_buttons[INV.BRIDGE] = Qs(68, 68, "", sprite[SPRITE.CHEST_BRIDGE], 3),
       this.chest_buttons[INV.BRIDGE].id = INV.BRIDGE,
       this.chest_buttons[INV.WOOD_TOWER] = Qs(68, 68, "", sprite[SPRITE.CHEST_WOOD_TOWER], 3),
       this.chest_buttons[INV.WOOD_TOWER].id = INV.WOOD_TOWER,
       this.chest_buttons[INV.BOAT] = Qs(68, 68, "", sprite[SPRITE.CHEST_BOAT], 3),
       this.chest_buttons[INV.BOAT].id = INV.BOAT,
       this.chest_buttons[INV.SLED] = Qs(68, 68, "", sprite[SPRITE.CHEST_SLED], 3),
       this.chest_buttons[INV.SLED].id = INV.SLED,
       this.chest_buttons[INV.PLANE] = Qs(68, 68, "", sprite[SPRITE.CHEST_PLANE], 3),
       this.chest_buttons[INV.PLANE].id = INV.PLANE,
       this.chest_buttons[INV.SADDLE] = Qs(68, 68, "", sprite[SPRITE.CHEST_SADDLE], 3),
       this.chest_buttons[INV.SADDLE].id = INV.SADDLE,
       this.chest_buttons[INV.MOUNT_BOAR] = Qs(68, 68, "", sprite[SPRITE.CHEST_MOUNT_BOAR], 3),
       this.chest_buttons[INV.MOUNT_BOAR].id = INV.MOUNT_BOAR,
       this.chest_buttons[INV.BABY_DRAGON] = Qs(68, 68, "", sprite[SPRITE.CHEST_BABY_DRAGON], 3),
       this.chest_buttons[INV.BABY_DRAGON].id = INV.BABY_DRAGON,
       this.chest_buttons[INV.BABY_MAMMOTH] = Qs(68, 68, "", sprite[SPRITE.CHEST_BABY_MAMMOTH], 3),
       this.chest_buttons[INV.BABY_MAMMOTH].id = INV.BABY_MAMMOTH,
       this.chest_buttons[INV.BABY_LAVA] = Qs(68, 68, "", sprite[SPRITE.CHEST_BABY_LAVA], 3),
       this.chest_buttons[INV.BABY_LAVA].id = INV.BABY_LAVA,
       this.chest_buttons[INV.HAWK] = Qs(68, 68, "", sprite[SPRITE.CHEST_HAWK], 3),
       this.chest_buttons[INV.HAWK].id = INV.HAWK,
       this.chest_buttons[INV.CRAB_BOSS] = Qs(68, 68, "", sprite[SPRITE.CHEST_CRAB_BOSS], 3),
       this.chest_buttons[INV.CRAB_BOSS].id = INV.CRAB_BOSS,
       this.chest_buttons[INV.SAND] = Qs(68, 68, "", sprite[SPRITE.CHEST_SAND], 3),
       this.chest_buttons[INV.SAND].id = INV.SAND,
       this.chest_buttons[INV.BOTTLE_FULL] = Qs(68, 68, "", sprite[SPRITE.CHEST_BOTTLE_FULL], 3),
       this.chest_buttons[INV.BOTTLE_FULL].id = INV.BOTTLE_FULL,
       this.chest_buttons[INV.BOTTLE_EMPTY] = Qs(68, 68, "", sprite[SPRITE.CHEST_BOTTLE_EMPTY], 3),
       this.chest_buttons[INV.BOTTLE_EMPTY].id = INV.BOTTLE_EMPTY,
       this.chest_buttons[INV.SHOVEL] = Qs(68, 68, "", sprite[SPRITE.CHEST_SHOVEL], 3),
       this.chest_buttons[INV.SHOVEL].id = INV.SHOVEL,
       this.chest_buttons[INV.SHOVEL_GOLD] = Qs(68, 68, "", sprite[SPRITE.CHEST_SHOVEL_GOLD], 3),
       this.chest_buttons[INV.SHOVEL_GOLD].id = INV.SHOVEL_GOLD,
       this.chest_buttons[INV.SHOVEL_DIAMOND] = Qs(68, 68, "", sprite[SPRITE.CHEST_SHOVEL_DIAMOND], 3),
       this.chest_buttons[INV.SHOVEL_DIAMOND].id = INV.SHOVEL_DIAMOND,
       this.chest_buttons[INV.SHOVEL_AMETHYST] = Qs(68, 68, "", sprite[SPRITE.CHEST_SHOVEL_AMETHYST], 3),
       this.chest_buttons[INV.SHOVEL_AMETHYST].id = INV.SHOVEL_AMETHYST,
       this.chest_buttons[INV.SPANNER] = Qs(68, 68, "", sprite[SPRITE.CHEST_SPANNER], 3),
       this.chest_buttons[INV.SPANNER].id = INV.SPANNER,
       this.chest_buttons[INV.KRAKEN_SKIN] = Qs(68, 68, "", sprite[SPRITE.CHEST_KRAKEN_SKIN], 3),
       this.chest_buttons[INV.KRAKEN_SKIN].id = INV.KRAKEN_SKIN,
       this.chest_buttons[INV.WATERING_CAN] = Qs(68, 68, "", sprite[SPRITE.CHEST_WATERING_CAN], 3),
       this.chest_buttons[INV.WATERING_CAN].id = INV.WATERING_CAN,
       this.chest_buttons[INV.FLOUR] = Qs(68, 68, "", sprite[SPRITE.CHEST_FLOUR], 3),
       this.chest_buttons[INV.FLOUR].id = INV.FLOUR,
       this.chest_buttons[INV.WHEAT_SEED] = Qs(68, 68, "", sprite[SPRITE.CHEST_WHEAT_SEED], 3),
       this.chest_buttons[INV.WHEAT_SEED].id = INV.WHEAT_SEED,
       this.chest_buttons[INV.COOKIE] = Qs(68, 68, "", sprite[SPRITE.CHEST_COOKIE], 3),
       this.chest_buttons[INV.COOKIE].id = INV.COOKIE,
       this.chest_buttons[INV.WILD_WHEAT] = Qs(68, 68, "", sprite[SPRITE.CHEST_WILD_WHEAT], 3),
       this.chest_buttons[INV.WILD_WHEAT].id = INV.WILD_WHEAT,
       this.chest_buttons[INV.WINDMILL] = Qs(68, 68, "", sprite[SPRITE.CHEST_WINDMILL], 3),
       this.chest_buttons[INV.WINDMILL].id = INV.WINDMILL,
       this.chest_buttons[INV.SUPER_DIVING_SUIT] = Qs(68, 68, "", sprite[SPRITE.CHEST_SUPER_DIVING_SUIT], 3),
       this.chest_buttons[INV.SUPER_DIVING_SUIT].id = INV.SUPER_DIVING_SUIT,
       this.chest_buttons[INV.DIVING_MASK] = Qs(68, 68, "", sprite[SPRITE.CHEST_DIVING_MASK], 3),
       this.chest_buttons[INV.DIVING_MASK].id = INV.DIVING_MASK,
       this.chest_buttons[INV.WATERING_CAN_FULL] = Qs(68, 68, "", sprite[SPRITE.CHEST_WATERING_CAN_FULL], 3),
       this.chest_buttons[INV.WATERING_CAN_FULL].id = INV.WATERING_CAN_FULL,
       this.chest_buttons[INV.CAKE] = Qs(68, 68, "", sprite[SPRITE.CHEST_CAKE], 3),
       this.chest_buttons[INV.CAKE].id = INV.CAKE,
       this.chest_buttons[INV.BREAD] = Qs(68, 68, "", sprite[SPRITE.CHEST_BREAD], 3),
       this.chest_buttons[INV.BREAD].id = INV.BREAD,
       this.chest_buttons[INV.FOODFISH] = Qs(68, 68, "", sprite[SPRITE.CHEST_FOODFISH], 3),
       this.chest_buttons[INV.FOODFISH].id = INV.FOODFISH,
       this.chest_buttons[INV.FOODFISH_COOKED] = Qs(68, 68, "", sprite[SPRITE.CHEST_FOODFISH_COOKED], 3),
       this.chest_buttons[INV.FOODFISH_COOKED].id = INV.FOODFISH_COOKED,
       this.chest_buttons[INV.SCALES] = Qs(68, 68, "", sprite[SPRITE.CHEST_SCALES], 3),
       this.chest_buttons[INV.SCALES].id = INV.SCALES,
       this.chest_buttons[INV.GROUND] = Qs(68, 68, "", sprite[SPRITE.CHEST_GROUND], 3),
       this.chest_buttons[INV.GROUND].id = INV.GROUND,
       this.chest_buttons[INV.PLOT] = Qs(68, 68, "", sprite[SPRITE.CHEST_PLOT], 3),
       this.chest_buttons[INV.PLOT].id = INV.PLOT,
       this.chest_buttons[INV.ICE] = Qs(68, 68, "", sprite[SPRITE.CHEST_ICE], 3),
       this.chest_buttons[INV.ICE].id = INV.ICE,
       this.chest_buttons[INV.BREAD_OVEN] = Qs(68, 68, "", sprite[SPRITE.CHEST_BREAD_OVEN], 3),
       this.chest_buttons[INV.BREAD_OVEN].id = INV.BREAD_OVEN,
       this.chest_buttons[INV.SANDWICH] = Qs(68, 68, "", sprite[SPRITE.CHEST_SANDWICH], 3),
       this.chest_buttons[INV.SANDWICH].id = INV.SANDWICH,
       this.chest_buttons[INV.DRAGON_HELMET] = Qs(68, 68, "", sprite[SPRITE.CHEST_DRAGON_HELMET], 3),
       this.chest_buttons[INV.DRAGON_HELMET].id = INV.DRAGON_HELMET,
       this.chest_buttons[INV.DRAGON_SWORD] = Qs(68, 68, "", sprite[SPRITE.CHEST_DRAGON_SWORD], 3),
       this.chest_buttons[INV.DRAGON_SWORD].id = INV.DRAGON_SWORD,
       this.chest_buttons[INV.DRAGON_ORB] = Qs(68, 68, "", sprite[SPRITE.CHEST_DRAGON_ORB], 3),
       this.chest_buttons[INV.DRAGON_ORB].id = INV.DRAGON_ORB,
       this.chest_buttons[INV.DRAGON_CUBE] = Qs(68, 68, "", sprite[SPRITE.CHEST_DRAGON_CUBE], 3),
       this.chest_buttons[INV.DRAGON_CUBE].id = INV.DRAGON_CUBE,
       this.chest_buttons[INV.LAVA_ORB] = Qs(68, 68, "", sprite[SPRITE.CHEST_LAVA_ORB], 3),
       this.chest_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB,
       this.chest_buttons[INV.LAVA_CUBE] = Qs(68, 68, "", sprite[SPRITE.CHEST_LAVA_CUBE], 3),
       this.chest_buttons[INV.LAVA_CUBE].id = INV.LAVA_CUBE,
       this.chest_buttons[INV.CROWN_GREEN] = Qs(68, 68, "", sprite[SPRITE.CHEST_CROWN_GREEN], 3),
       this.chest_buttons[INV.CROWN_GREEN].id = INV.CROWN_GREEN,
       this.chest_buttons[INV.GEMME_GREEN] = Qs(68, 68, "", sprite[SPRITE.CHEST_GEMME_GREEN], 3),
       this.chest_buttons[INV.GEMME_GREEN].id = INV.GEMME_GREEN,
       this.chest_buttons[INV.GEMME_ORANGE] = Qs(68, 68, "", sprite[SPRITE.CHEST_GEMME_ORANGE], 3),
       this.chest_buttons[INV.GEMME_ORANGE].id = INV.GEMME_ORANGE,
       this.chest_buttons[INV.CROWN_ORANGE] = Qs(68, 68, "", sprite[SPRITE.CHEST_CROWN_ORANGE], 3),
       this.chest_buttons[INV.CROWN_ORANGE].id = INV.CROWN_ORANGE,
       this.chest_buttons[INV.GEMME_BLUE] = Qs(68, 68, "", sprite[SPRITE.CHEST_GEMME_BLUE], 3),
       this.chest_buttons[INV.GEMME_BLUE].id = INV.GEMME_BLUE,
       this.chest_buttons[INV.CROWN_BLUE] = Qs(68, 68, "", sprite[SPRITE.CHEST_CROWN_BLUE], 3),
       this.chest_buttons[INV.CROWN_BLUE].id = INV.CROWN_BLUE,
       this.chest_buttons[INV.HOOD] = Qs(68, 68, "", sprite[SPRITE.CHEST_HOOD], 3),
       this.chest_buttons[INV.HOOD].id = INV.HOOD,
       this.chest_buttons[INV.PEASANT] = Qs(68, 68, "", sprite[SPRITE.CHEST_PEASANT], 3),
       this.chest_buttons[INV.PEASANT].id = INV.PEASANT,
       this.chest_buttons[INV.SPECIAL_FUR] = Qs(68, 68, "", sprite[SPRITE.CHEST_SPECIAL_FUR], 3),
       this.chest_buttons[INV.SPECIAL_FUR].id = INV.SPECIAL_FUR,
       this.chest_buttons[INV.SPECIAL_FUR_2] = Qs(68, 68, "", sprite[SPRITE.CHEST_SPECIAL_FUR_2], 3),
       this.chest_buttons[INV.SPECIAL_FUR_2].id = INV.SPECIAL_FUR_2,
       this.chest_buttons[INV.WINTER_PEASANT] = Qs(68, 68, "", sprite[SPRITE.CHEST_WINTER_PEASANT], 3),
       this.chest_buttons[INV.WINTER_PEASANT].id = INV.WINTER_PEASANT,
       this.chest_buttons[INV.WINTER_HOOD] = Qs(68, 68, "", sprite[SPRITE.CHEST_WINTER_HOOD], 3),
       this.chest_buttons[INV.WINTER_HOOD].id = INV.WINTER_HOOD,
       this.chest_buttons[INV.BUCKET_FULL] = Qs(68, 68, "", sprite[SPRITE.CHEST_BUCKET_FULL], 3),
       this.chest_buttons[INV.BUCKET_FULL].id = INV.BUCKET_FULL,
       this.chest_buttons[INV.BUCKET_EMPTY] = Qs(68, 68, "", sprite[SPRITE.CHEST_BUCKET_EMPTY], 3),
       this.chest_buttons[INV.BUCKET_EMPTY].id = INV.BUCKET_EMPTY,
       this.chest_buttons[INV.WELL] = Qs(68, 68, "", sprite[SPRITE.CHEST_WELL], 3),
       this.chest_buttons[INV.WELL].id = INV.WELL,
       this.chest_buttons[INV.SIGN] = Qs(68, 68, "", sprite[SPRITE.CHEST_SIGN], 3),
       this.chest_buttons[INV.SIGN].id = INV.SIGN,
       this.chest_buttons[INV.PUMPKIN_SEED] = Qs(68, 68, "", sprite[SPRITE.CHEST_PUMPKIN_SEED], 3),
       this.chest_buttons[INV.PUMPKIN_SEED].id = INV.PUMPKIN_SEED,
       this.chest_buttons[INV.PUMPKIN] = Qs(68, 68, "", sprite[SPRITE.CHEST_PUMPKIN], 3),
       this.chest_buttons[INV.PUMPKIN].id = INV.PUMPKIN,
       this.chest_buttons[INV.ROOF] = Qs(68, 68, "", sprite[SPRITE.CHEST_ROOF], 3),
       this.chest_buttons[INV.ROOF].id = INV.ROOF,
       this.chest_buttons[INV.GARLIC_SEED] = Qs(68, 68, "", sprite[SPRITE.CHEST_GARLIC_SEED], 3),
       this.chest_buttons[INV.GARLIC_SEED].id = INV.GARLIC_SEED,
       this.chest_buttons[INV.GARLIC] = Qs(68, 68, "", sprite[SPRITE.CHEST_GARLIC], 3),
       this.chest_buttons[INV.GARLIC].id = INV.GARLIC,
       this.chest_buttons[INV.THORNBUSH_SEED] = Qs(68, 68, "", sprite[SPRITE.CHEST_THORNBUSH_SEED], 3),
       this.chest_buttons[INV.THORNBUSH_SEED].id = INV.THORNBUSH_SEED,
       this.chest_buttons[INV.THORNBUSH] = Qs(68, 68, "", sprite[SPRITE.CHEST_THORNBUSH], 3),
       this.chest_buttons[INV.THORNBUSH].id = INV.THORNBUSH,
       this.chest_buttons[INV.TOMATO_SEED] = Qs(68, 68, "", sprite[SPRITE.CHEST_TOMATO_SEED], 3),
       this.chest_buttons[INV.TOMATO_SEED].id = INV.TOMATO_SEED,
       this.chest_buttons[INV.TOMATO] = Qs(68, 68, "", sprite[SPRITE.CHEST_TOMATO], 3),
       this.chest_buttons[INV.TOMATO].id = INV.TOMATO,
       this.chest_buttons[INV.CARROT_SEED] = Qs(68, 68, "", sprite[SPRITE.CHEST_CARROT_SEED], 3),
       this.chest_buttons[INV.CARROT_SEED].id = INV.CARROT_SEED,
       this.chest_buttons[INV.CARROT] = Qs(68, 68, "", sprite[SPRITE.CHEST_CARROT], 3),
       this.chest_buttons[INV.CARROT].id = INV.CARROT,
       this.chest_buttons[INV.WATERMELON_SEED] = Qs(68, 68, "", sprite[SPRITE.CHEST_WATERMELON_SEED], 3),
       this.chest_buttons[INV.WATERMELON_SEED].id = INV.WATERMELON_SEED,
       this.chest_buttons[INV.WATERMELON] = Qs(68, 68, "", sprite[SPRITE.CHEST_WATERMELON], 3),
       this.chest_buttons[INV.WATERMELON].id = INV.WATERMELON,
       this.chest_buttons[INV.ALOE_VERA_SEED] = Qs(68, 68, "", sprite[SPRITE.CHEST_ALOE_VERA_SEED], 3),
       this.chest_buttons[INV.ALOE_VERA_SEED].id = INV.ALOE_VERA_SEED,
       this.chest_buttons[INV.ALOE_VERA] = Qs(68, 68, "", sprite[SPRITE.CHEST_ALOE_VERA], 3),
       this.chest_buttons[INV.ALOE_VERA].id = INV.ALOE_VERA,
       this.chest_buttons[INV.CHRISTMAS_HAT] = Qs(68, 68, "", sprite[SPRITE.CHEST_CHRISTMAS_HAT], 3),
       this.chest_buttons[INV.CHRISTMAS_HAT].id = INV.CHRISTMAS_HAT,
       this.chest_buttons[INV.ELF_HAT] = Qs(68, 68, "", sprite[SPRITE.CHEST_ELF_HAT], 3),
       this.chest_buttons[INV.ELF_HAT].id = INV.ELF_HAT,
       this.chest_buttons[INV.WOOD_SPEAR] = Qs(68, 68, "", sprite[SPRITE.CHEST_WOOD_SPEAR], 3),
       this.chest_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR,
       this.chest_buttons[INV.DRAGON_SPEAR] = Qs(68, 68, "", sprite[SPRITE.CHEST_DRAGON_SPEAR], 3),
       this.chest_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR,
       this.chest_buttons[INV.CRAB_STICK] = Qs(68, 68, "", sprite[SPRITE.CHEST_CRAB_STICK], 3),
       this.chest_buttons[INV.CRAB_STICK].id = INV.CRAB_STICK,
       this.chest_buttons[INV.CRAB_SPEAR] = Qs(68, 68, "", sprite[SPRITE.CHEST_CRAB_SPEAR], 3),
       this.chest_buttons[INV.CRAB_SPEAR].id = INV.CRAB_SPEAR,
       this.chest_buttons[INV.CRAB_LOOT] = Qs(68, 68, "", sprite[SPRITE.CHEST_CRAB_LOOT], 3),
       this.chest_buttons[INV.CRAB_LOOT].id = INV.CRAB_LOOT,
       this.chest_buttons[INV.BED] = Qs(68, 68, "", sprite[SPRITE.CHEST_BED], 3),
       this.chest_buttons[INV.BED].id = INV.BED,
       this.chest_buttons[INV.CROWN_CRAB] = Qs(68, 68, "", sprite[SPRITE.CHEST_CROWN_CRAB], 3),
       this.chest_buttons[INV.CROWN_CRAB].id = INV.CROWN_CRAB,
       this.chest_buttons[INV.GARLAND] = Qs(68, 68, "", sprite[SPRITE.CHEST_GARLAND], 3),
       this.chest_buttons[INV.GARLAND].id = INV.GARLAND,
       this.chest_buttons[INV.SUGAR_CAN] = Qs(68, 68, "", sprite[SPRITE.CHEST_SUGAR_CAN], 3),
       this.chest_buttons[INV.SUGAR_CAN].id = INV.SUGAR_CAN,
       this.chest_buttons[INV.CANDY] = Qs(68, 68, "", sprite[SPRITE.CHEST_CANDY], 3),
       this.chest_buttons[INV.CANDY].id = INV.CANDY,
       this.plus_buttons = [];
       for (a = 0; a < 250; a++)
           this.plus_buttons[a] = Qs(0, 0, "", sprite[SPRITE.CHEST_PLUS]);
       this.inv_buttons = [],
       this.inv_buttons[INV.SWORD] = Qs(60, 60, "", sprite[SPRITE.INV_SWORD], 3),
       this.inv_buttons[INV.SWORD].id = INV.SWORD,
       this.inv_buttons[INV.PICK] = Qs(60, 60, "", sprite[SPRITE.INV_PICK], 3),
       this.inv_buttons[INV.PICK].id = INV.PICK,
       this.inv_buttons[INV.STONE] = Qs(60, 60, "", sprite[SPRITE.INV_STONE], 3),
       this.inv_buttons[INV.STONE].id = INV.STONE,
       this.inv_buttons[INV.STONE].info.img[2] = this.inv_buttons[INV.STONE].info.img[0],
       this.inv_buttons[INV.WOOD] = Qs(60, 60, "", sprite[SPRITE.INV_WOOD], 3),
       this.inv_buttons[INV.WOOD].id = INV.WOOD,
       this.inv_buttons[INV.WOOD].info.img[2] = this.inv_buttons[INV.WOOD].info.img[0],
       this.inv_buttons[INV.PLANT] = Qs(60, 60, "", sprite[SPRITE.INV_PLANT], 3),
       this.inv_buttons[INV.PLANT].id = INV.PLANT,
       this.inv_buttons[INV.CACTUS] = Qs(60, 60, "", sprite[SPRITE.INV_CACTUS], 3),
       this.inv_buttons[INV.CACTUS].id = INV.CACTUS,
       this.inv_buttons[INV.GOLD] = Qs(60, 60, "", sprite[SPRITE.INV_GOLD], 3),
       this.inv_buttons[INV.GOLD].id = INV.GOLD,
       this.inv_buttons[INV.GOLD].info.img[2] = this.inv_buttons[INV.GOLD].info.img[0],
       this.inv_buttons[INV.DIAMOND] = Qs(60, 60, "", sprite[SPRITE.INV_DIAMOND], 3),
       this.inv_buttons[INV.DIAMOND].id = INV.DIAMOND,
       this.inv_buttons[INV.DIAMOND].info.img[2] = this.inv_buttons[INV.DIAMOND].info.img[0],
       this.inv_buttons[INV.PICK_GOLD] = Qs(60, 60, "", sprite[SPRITE.INV_PICK_GOLD], 3),
       this.inv_buttons[INV.PICK_GOLD].id = INV.PICK_GOLD,
       this.inv_buttons[INV.PICK_DIAMOND] = Qs(60, 60, "", sprite[SPRITE.INV_PICK_DIAMOND], 3),
       this.inv_buttons[INV.PICK_DIAMOND].id = INV.PICK_DIAMOND,
       this.inv_buttons[INV.SWORD_GOLD] = Qs(60, 60, "", sprite[SPRITE.INV_SWORD_GOLD], 3),
       this.inv_buttons[INV.SWORD_GOLD].id = INV.SWORD_GOLD,
       this.inv_buttons[INV.SWORD_WOOD] = Qs(60, 60, "", sprite[SPRITE.INV_SWORD_WOOD], 3),
       this.inv_buttons[INV.SWORD_WOOD].id = INV.SWORD_WOOD,
       this.inv_buttons[INV.SWORD_DIAMOND] = Qs(60, 60, "", sprite[SPRITE.INV_SWORD_DIAMOND], 3),
       this.inv_buttons[INV.SWORD_DIAMOND].id = INV.SWORD_DIAMOND,
       this.inv_buttons[INV.FIRE] = Qs(60, 60, "", sprite[SPRITE.INV_FIRE], 3),
       this.inv_buttons[INV.FIRE].id = INV.FIRE,
       this.inv_buttons[INV.WORKBENCH] = Qs(60, 60, "", sprite[SPRITE.INV_WORK], 3),
       this.inv_buttons[INV.WORKBENCH].id = INV.WORKBENCH,
       this.inv_buttons[INV.SEED] = Qs(60, 60, "", sprite[SPRITE.INV_SEED], 3),
       this.inv_buttons[INV.SEED].id = INV.SEED,
       this.inv_buttons[INV.WALL] = Qs(60, 60, "", sprite[SPRITE.INV_WALL], 3),
       this.inv_buttons[INV.WALL].id = INV.WALL,
       this.inv_buttons[INV.SPIKE] = Qs(60, 60, "", sprite[SPRITE.INV_SPIKE], 3),
       this.inv_buttons[INV.SPIKE].id = INV.SPIKE,
       this.inv_buttons[INV.PICK_WOOD] = Qs(60, 60, "", sprite[SPRITE.INV_PICK_WOOD], 3),
       this.inv_buttons[INV.PICK_WOOD].id = INV.PICK_WOOD,
       this.inv_buttons[INV.COOKED_MEAT] = Qs(60, 60, "", sprite[SPRITE.INV_COOKED_MEAT], 3),
       this.inv_buttons[INV.COOKED_MEAT].id = INV.COOKED_MEAT,
       this.inv_buttons[INV.MEAT] = Qs(60, 60, "", sprite[SPRITE.INV_MEAT], 3),
       this.inv_buttons[INV.MEAT].id = INV.MEAT,
       this.inv_buttons[INV.BIG_FIRE] = Qs(60, 60, "", sprite[SPRITE.INV_BIG_FIRE], 3),
       this.inv_buttons[INV.BIG_FIRE].id = INV.BIG_FIRE,
       this.inv_buttons[INV.BANDAGE] = Qs(60, 60, "", sprite[SPRITE.INV_BANDAGE], 3),
       this.inv_buttons[INV.BANDAGE].id = INV.BANDAGE,
       this.inv_buttons[INV.CORD] = Qs(60, 60, "", sprite[SPRITE.INV_CORD], 3),
       this.inv_buttons[INV.CORD].id = INV.CORD,
       this.inv_buttons[INV.CORD].info.img[2] = this.inv_buttons[INV.CORD].info.img[0],
       this.inv_buttons[INV.STONE_WALL] = Qs(60, 60, "", sprite[SPRITE.INV_STONE_WALL], 3),
       this.inv_buttons[INV.STONE_WALL].id = INV.STONE_WALL,
       this.inv_buttons[INV.GOLD_WALL] = Qs(60, 60, "", sprite[SPRITE.INV_GOLD_WALL], 3),
       this.inv_buttons[INV.GOLD_WALL].id = INV.GOLD_WALL,
       this.inv_buttons[INV.DIAMOND_WALL] = Qs(60, 60, "", sprite[SPRITE.INV_DIAMOND_WALL], 3),
       this.inv_buttons[INV.DIAMOND_WALL].id = INV.DIAMOND_WALL,
       this.inv_buttons[INV.WOOD_DOOR] = Qs(60, 60, "", sprite[SPRITE.INV_DOOR_WOOD_CLOSE], 3),
       this.inv_buttons[INV.WOOD_DOOR].id = INV.WOOD_DOOR,
       this.inv_buttons[INV.CHEST] = Qs(60, 60, "", sprite[SPRITE.INV_CHEST], 3),
       this.inv_buttons[INV.CHEST].id = INV.CHEST,
       this.inv_buttons[INV.STONE_SPIKE] = Qs(60, 60, "", sprite[SPRITE.INV_STONE_SPIKE], 3),
       this.inv_buttons[INV.STONE_SPIKE].id = INV.STONE_SPIKE,
       this.inv_buttons[INV.GOLD_SPIKE] = Qs(60, 60, "", sprite[SPRITE.INV_GOLD_SPIKE], 3),
       this.inv_buttons[INV.GOLD_SPIKE].id = INV.GOLD_SPIKE,
       this.inv_buttons[INV.DIAMOND_SPIKE] = Qs(60, 60, "", sprite[SPRITE.INV_DIAMOND_SPIKE], 3),
       this.inv_buttons[INV.DIAMOND_SPIKE].id = INV.DIAMOND_SPIKE,
       this.inv_buttons[INV.BAG] = Qs(60, 60, "", sprite[SPRITE.INV_BAG], 3),
       this.inv_buttons[INV.BAG].id = INV.BAG,
       this.inv_buttons[INV.EARMUFFS] = Qs(60, 60, "", sprite[SPRITE.INV_EARMUFFS], 3),
       this.inv_buttons[INV.EARMUFFS].id = INV.EARMUFFS,
       this.inv_buttons[INV.STONE_DOOR] = Qs(60, 60, "", sprite[SPRITE.INV_DOOR_STONE_CLOSE], 3),
       this.inv_buttons[INV.STONE_DOOR].id = INV.STONE_DOOR,
       this.inv_buttons[INV.GOLD_DOOR] = Qs(60, 60, "", sprite[SPRITE.INV_DOOR_GOLD_CLOSE], 3),
       this.inv_buttons[INV.GOLD_DOOR].id = INV.GOLD_DOOR,
       this.inv_buttons[INV.DIAMOND_DOOR] = Qs(60, 60, "", sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE], 3),
       this.inv_buttons[INV.DIAMOND_DOOR].id = INV.DIAMOND_DOOR,
       this.inv_buttons[INV.FUR] = Qs(60, 60, "", sprite[SPRITE.INV_FUR], 3),
       this.inv_buttons[INV.FUR].id = INV.FUR,
       this.inv_buttons[INV.FUR].info.img[2] = this.inv_buttons[INV.FUR].info.img[0],
       this.inv_buttons[INV.FUR_BOAR] = Qs(60, 60, "", sprite[SPRITE.INV_FUR_BOAR], 3),
       this.inv_buttons[INV.FUR_BOAR].id = INV.FUR_BOAR,
       this.inv_buttons[INV.FUR_BOAR].info.img[2] = this.inv_buttons[INV.FUR_BOAR].info.img[0],
       this.inv_buttons[INV.FUR_WOLF] = Qs(60, 60, "", sprite[SPRITE.INV_FUR_WOLF], 3),
       this.inv_buttons[INV.FUR_WOLF].id = INV.FUR_WOLF,
       this.inv_buttons[INV.FUR_WOLF].info.img[2] = this.inv_buttons[INV.FUR_WOLF].info.img[0],
       this.inv_buttons[INV.PENGUIN_FEATHER] = Qs(60, 60, "", sprite[SPRITE.INV_PENGUIN_FEATHER], 3),
       this.inv_buttons[INV.PENGUIN_FEATHER].id = INV.PENGUIN_FEATHER,
       this.inv_buttons[INV.HAWK_FEATHER] = Qs(60, 60, "", sprite[SPRITE.INV_HAWK_FEATHER], 3),
       this.inv_buttons[INV.HAWK_FEATHER].id = INV.HAWK_FEATHER,
       this.inv_buttons[INV.VULTURE_FEATHER] = Qs(60, 60, "", sprite[SPRITE.INV_VULTURE_FEATHER], 3),
       this.inv_buttons[INV.VULTURE_FEATHER].id = INV.VULTURE_FEATHER,
       this.inv_buttons[INV.EMERALD] = Qs(60, 60, "", sprite[SPRITE.INV_EMERALD], 3),
       this.inv_buttons[INV.EMERALD].id = INV.EMERALD,
       this.inv_buttons[INV.EARMUFFS] = Qs(60, 60, "", sprite[SPRITE.INV_EARMUFFS], 3),
       this.inv_buttons[INV.EARMUFFS].id = INV.EARMUFFS,
       this.inv_buttons[INV.COAT] = Qs(60, 60, "", sprite[SPRITE.INV_COAT], 3),
       this.inv_buttons[INV.COAT].id = INV.COAT,
       this.inv_buttons[INV.WOOD_SPEAR] = Qs(60, 60, "", sprite[SPRITE.INV_WOOD_SPEAR], 3),
       this.inv_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR,
       this.inv_buttons[INV.SPEAR] = Qs(60, 60, "", sprite[SPRITE.INV_SPEAR], 3),
       this.inv_buttons[INV.SPEAR].id = INV.SPEAR,
       this.inv_buttons[INV.GOLD_SPEAR] = Qs(60, 60, "", sprite[SPRITE.INV_GOLD_SPEAR], 3),
       this.inv_buttons[INV.GOLD_SPEAR].id = INV.GOLD_SPEAR,
       this.inv_buttons[INV.DIAMOND_SPEAR] = Qs(60, 60, "", sprite[SPRITE.INV_DIAMOND_SPEAR], 3),
       this.inv_buttons[INV.DIAMOND_SPEAR].id = INV.DIAMOND_SPEAR,
       this.inv_buttons[INV.DRAGON_SPEAR] = Qs(60, 60, "", sprite[SPRITE.INV_DRAGON_SPEAR], 3),
       this.inv_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR,
       this.inv_buttons[INV.FURNACE] = Qs(60, 60, "", sprite[SPRITE.INV_FURNACE], 3),
       this.inv_buttons[INV.FURNACE].id = INV.FURNACE,
       this.inv_buttons[INV.EXPLORER_HAT] = Qs(60, 60, "", sprite[SPRITE.INV_EXPLORER_HAT], 3),
       this.inv_buttons[INV.EXPLORER_HAT].id = INV.EXPLORER_HAT,
       this.inv_buttons[INV.PIRATE_HAT] = Qs(60, 60, "", sprite[SPRITE.INV_PIRATE_HAT], 3),
       this.inv_buttons[INV.PIRATE_HAT].id = INV.PIRATE_HAT,
       this.inv_buttons[INV.FLOWER_HAT] = Qs(60, 60, "", sprite[SPRITE.INV_FLOWER_HAT], 3),
       this.inv_buttons[INV.FLOWER_HAT].id = INV.FLOWER_HAT,
       this.inv_buttons[INV.FUR_HAT] = Qs(60, 60, "", sprite[SPRITE.INV_FUR_HAT], 3),
       this.inv_buttons[INV.FUR_HAT].id = INV.FUR_HAT,
       this.inv_buttons[INV.TURBAN1] = Qs(60, 60, "", sprite[SPRITE.INV_TURBAN1], 3),
       this.inv_buttons[INV.TURBAN1].id = INV.TURBAN1,
       this.inv_buttons[INV.TURBAN2] = Qs(60, 60, "", sprite[SPRITE.INV_TURBAN2], 3),
       this.inv_buttons[INV.TURBAN2].id = INV.TURBAN2,
       this.inv_buttons[INV.WOOD_BOW] = Qs(60, 60, "", sprite[SPRITE.INV_WOOD_BOW], 3),
       this.inv_buttons[INV.WOOD_BOW].id = INV.WOOD_BOW,
       this.inv_buttons[INV.WOOD_ARROW] = Qs(60, 60, "", sprite[SPRITE.INV_WOOD_ARROW], 3),
       this.inv_buttons[INV.WOOD_ARROW].id = INV.WOOD_ARROW,
       this.inv_buttons[INV.WOOD_SHIELD] = Qs(60, 60, "", sprite[SPRITE.INV_WOOD_SHIELD], 3),
       this.inv_buttons[INV.WOOD_SHIELD].id = INV.WOOD_SHIELD,
       this.inv_buttons[INV.STONE_BOW] = Qs(60, 60, "", sprite[SPRITE.INV_STONE_BOW], 3),
       this.inv_buttons[INV.STONE_BOW].id = INV.STONE_BOW,
       this.inv_buttons[INV.STONE_ARROW] = Qs(60, 60, "", sprite[SPRITE.INV_STONE_ARROW], 3),
       this.inv_buttons[INV.STONE_ARROW].id = INV.STONE_ARROW,
       this.inv_buttons[INV.STONE_SHIELD] = Qs(60, 60, "", sprite[SPRITE.INV_STONE_SHIELD], 3),
       this.inv_buttons[INV.STONE_SHIELD].id = INV.STONE_SHIELD,
       this.inv_buttons[INV.GOLD_BOW] = Qs(60, 60, "", sprite[SPRITE.INV_GOLD_BOW], 3),
       this.inv_buttons[INV.GOLD_BOW].id = INV.GOLD_BOW,
       this.inv_buttons[INV.GOLD_ARROW] = Qs(60, 60, "", sprite[SPRITE.INV_GOLD_ARROW], 3),
       this.inv_buttons[INV.GOLD_ARROW].id = INV.GOLD_ARROW,
       this.inv_buttons[INV.GOLD_SHIELD] = Qs(60, 60, "", sprite[SPRITE.INV_GOLD_SHIELD], 3),
       this.inv_buttons[INV.GOLD_SHIELD].id = INV.GOLD_SHIELD,
       this.inv_buttons[INV.DIAMOND_BOW] = Qs(60, 60, "", sprite[SPRITE.INV_DIAMOND_BOW], 3),
       this.inv_buttons[INV.DIAMOND_BOW].id = INV.DIAMOND_BOW,
       this.inv_buttons[INV.DIAMOND_ARROW] = Qs(60, 60, "", sprite[SPRITE.INV_DIAMOND_ARROW], 3),
       this.inv_buttons[INV.DIAMOND_ARROW].id = INV.DIAMOND_ARROW,
       this.inv_buttons[INV.DIAMOND_SHIELD] = Qs(60, 60, "", sprite[SPRITE.INV_DIAMOND_SHIELD], 3),
       this.inv_buttons[INV.DIAMOND_SHIELD].id = INV.DIAMOND_SHIELD,
       this.inv_buttons[INV.AMETHYST_BOW] = Qs(60, 60, "", sprite[SPRITE.INV_AMETHYST_BOW], 3),
       this.inv_buttons[INV.AMETHYST_BOW].id = INV.AMETHYST_BOW,
       this.inv_buttons[INV.AMETHYST_ARROW] = Qs(60, 60, "", sprite[SPRITE.INV_AMETHYST_ARROW], 3),
       this.inv_buttons[INV.AMETHYST_ARROW].id = INV.AMETHYST_ARROW,
       this.inv_buttons[INV.AMETHYST_SHIELD] = Qs(60, 60, "", sprite[SPRITE.INV_AMETHYST_SHIELD], 3),
       this.inv_buttons[INV.AMETHYST_SHIELD].id = INV.AMETHYST_SHIELD,
       this.inv_buttons[INV.REIDITE_BOW] = Qs(60, 60, "", sprite[SPRITE.INV_REIDITE_BOW], 3),
       this.inv_buttons[INV.REIDITE_BOW].id = INV.REIDITE_BOW,
       this.inv_buttons[INV.REIDITE_ARROW] = Qs(60, 60, "", sprite[SPRITE.INV_REIDITE_ARROW], 3),
       this.inv_buttons[INV.REIDITE_ARROW].id = INV.REIDITE_ARROW,
       this.inv_buttons[INV.REIDITE_SHIELD] = Qs(60, 60, "", sprite[SPRITE.INV_REIDITE_SHIELD], 3),
       this.inv_buttons[INV.REIDITE_SHIELD].id = INV.REIDITE_SHIELD,
       this.inv_buttons[INV.DRAGON_BOW] = Qs(60, 60, "", sprite[SPRITE.INV_DRAGON_BOW], 3),
       this.inv_buttons[INV.DRAGON_BOW].id = INV.DRAGON_BOW,
       this.inv_buttons[INV.DRAGON_ARROW] = Qs(60, 60, "", sprite[SPRITE.INV_DRAGON_ARROW], 3),
       this.inv_buttons[INV.DRAGON_ARROW].id = INV.DRAGON_ARROW,
       this.inv_buttons[INV.WOOD_HELMET] = Qs(60, 60, "", sprite[SPRITE.INV_WOOD_HELMET], 3),
       this.inv_buttons[INV.WOOD_HELMET].id = INV.WOOD_HELMET,
       this.inv_buttons[INV.STONE_HELMET] = Qs(60, 60, "", sprite[SPRITE.INV_STONE_HELMET], 3),
       this.inv_buttons[INV.STONE_HELMET].id = INV.STONE_HELMET,
       this.inv_buttons[INV.GOLD_HELMET] = Qs(60, 60, "", sprite[SPRITE.INV_GOLD_HELMET], 3),
       this.inv_buttons[INV.GOLD_HELMET].id = INV.GOLD_HELMET,
       this.inv_buttons[INV.DIAMOND_HELMET] = Qs(60, 60, "", sprite[SPRITE.INV_DIAMOND_HELMET], 3),
       this.inv_buttons[INV.DIAMOND_HELMET].id = INV.DIAMOND_HELMET,
       this.inv_buttons[INV.BOOK] = Qs(60, 60, "", sprite[SPRITE.INV_BOOK], 3),
       this.inv_buttons[INV.BOOK].id = INV.BOOK,
       this.inv_buttons[INV.PAPER] = Qs(60, 60, "", sprite[SPRITE.INV_PAPER], 3),
       this.inv_buttons[INV.PAPER].id = INV.PAPER,
       this.inv_buttons[INV.PAPER].info.img[2] = this.inv_buttons[INV.PAPER].info.img[0],
       this.inv_buttons[INV.BAG] = Qs(60, 60, "", sprite[SPRITE.INV_BAG], 3),
       this.inv_buttons[INV.BAG].id = INV.BAG,
       this.inv_buttons[INV.AMETHYST] = Qs(60, 60, "", sprite[SPRITE.INV_AMETHYST], 3),
       this.inv_buttons[INV.AMETHYST].id = INV.AMETHYST,
       this.inv_buttons[INV.AMETHYST].info.img[2] = this.inv_buttons[INV.AMETHYST].info.img[0],
       this.inv_buttons[INV.SWORD_AMETHYST] = Qs(60, 60, "", sprite[SPRITE.INV_SWORD_AMETHYST], 3),
       this.inv_buttons[INV.SWORD_AMETHYST].id = INV.SWORD_AMETHYST,
       this.inv_buttons[INV.PIRATE_SWORD] = Qs(60, 60, "", sprite[SPRITE.INV_PIRATE_SWORD], 3),
       this.inv_buttons[INV.PIRATE_SWORD].id = INV.PIRATE_SWORD,
       this.inv_buttons[INV.PICK_AMETHYST] = Qs(60, 60, "", sprite[SPRITE.INV_PICK_AMETHYST], 3),
       this.inv_buttons[INV.PICK_AMETHYST].id = INV.PICK_AMETHYST,
       this.inv_buttons[INV.PICK_REIDITE] = Qs(60, 60, "", sprite[SPRITE.INV_PICK_REIDITE], 3),
       this.inv_buttons[INV.PICK_REIDITE].id = INV.PICK_REIDITE,
       this.inv_buttons[INV.AMETHYST_SPEAR] = Qs(60, 60, "", sprite[SPRITE.INV_AMETHYST_SPEAR], 3),
       this.inv_buttons[INV.AMETHYST_SPEAR].id = INV.AMETHYST_SPEAR,
       this.inv_buttons[INV.HAMMER] = Qs(60, 60, "", sprite[SPRITE.INV_HAMMER], 3),
       this.inv_buttons[INV.HAMMER].id = INV.HAMMER,
       this.inv_buttons[INV.HAMMER_GOLD] = Qs(60, 60, "", sprite[SPRITE.INV_HAMMER_GOLD], 3),
       this.inv_buttons[INV.HAMMER_GOLD].id = INV.HAMMER_GOLD,
       this.inv_buttons[INV.HAMMER_DIAMOND] = Qs(60, 60, "", sprite[SPRITE.INV_HAMMER_DIAMOND], 3),
       this.inv_buttons[INV.HAMMER_DIAMOND].id = INV.HAMMER_DIAMOND,
       this.inv_buttons[INV.HAMMER_AMETHYST] = Qs(60, 60, "", sprite[SPRITE.INV_HAMMER_AMETHYST], 3),
       this.inv_buttons[INV.HAMMER_AMETHYST].id = INV.HAMMER_AMETHYST,
       this.inv_buttons[INV.HAMMER_REIDITE] = Qs(60, 60, "", sprite[SPRITE.INV_HAMMER_REIDITE], 3),
       this.inv_buttons[INV.HAMMER_REIDITE].id = INV.HAMMER_REIDITE,
       this.inv_buttons[INV.AMETHYST_WALL] = Qs(60, 60, "", sprite[SPRITE.INV_AMETHYST_WALL], 3),
       this.inv_buttons[INV.AMETHYST_WALL].id = INV.AMETHYST_WALL,
       this.inv_buttons[INV.AMETHYST_SPIKE] = Qs(60, 60, "", sprite[SPRITE.INV_AMETHYST_SPIKE], 3),
       this.inv_buttons[INV.AMETHYST_SPIKE].id = INV.AMETHYST_SPIKE,
       this.inv_buttons[INV.AMETHYST_DOOR] = Qs(60, 60, "", sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE], 3),
       this.inv_buttons[INV.AMETHYST_DOOR].id = INV.AMETHYST_DOOR,
       this.inv_buttons[INV.CAP_SCARF] = Qs(60, 60, "", sprite[SPRITE.INV_CAP_SCARF], 3),
       this.inv_buttons[INV.CAP_SCARF].id = INV.CAP_SCARF,
       this.inv_buttons[INV.FUR_WINTER] = Qs(60, 60, "", sprite[SPRITE.INV_FUR_WINTER], 3),
       this.inv_buttons[INV.FUR_WINTER].id = INV.FUR_WINTER,
       this.inv_buttons[INV.FUR_WINTER].info.img[2] = this.inv_buttons[INV.FUR_WINTER].info.img[0],
       this.inv_buttons[INV.FUR_MAMMOTH] = Qs(60, 60, "", sprite[SPRITE.INV_FUR_MAMMOTH], 3),
       this.inv_buttons[INV.FUR_MAMMOTH].id = INV.FUR_MAMMOTH,
       this.inv_buttons[INV.FUR_MAMMOTH].info.img[2] = this.inv_buttons[INV.FUR_MAMMOTH].info.img[0],
       this.inv_buttons[INV.BLUE_CORD] = Qs(60, 60, "", sprite[SPRITE.INV_BLUE_CORD], 3),
       this.inv_buttons[INV.BLUE_CORD].id = INV.BLUE_CORD,
       this.inv_buttons[INV.BLUE_CORD].info.img[2] = this.inv_buttons[INV.BLUE_CORD].info.img[0],
       this.inv_buttons[INV.LOCK] = Qs(60, 60, "", sprite[SPRITE.INV_LOCK], 3),
       this.inv_buttons[INV.LOCK].id = INV.LOCK,
       this.inv_buttons[INV.LOCK].info.img[2] = this.inv_buttons[INV.LOCK].info.img[0],
       this.inv_buttons[INV.DRAGON_HEART] = Qs(60, 60, "", sprite[SPRITE.INV_DRAGON_HEART], 3),
       this.inv_buttons[INV.DRAGON_HEART].id = INV.DRAGON_HEART,
       this.inv_buttons[INV.LAVA_HEART] = Qs(60, 60, "", sprite[SPRITE.INV_LAVA_HEART], 3),
       this.inv_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART,
       this.inv_buttons[INV.RESURRECTION] = Qs(60, 60, "", sprite[SPRITE.INV_RESURRECTION], 3),
       this.inv_buttons[INV.RESURRECTION].id = INV.RESURRECTION,
       this.inv_buttons[INV.LOCKPICK] = Qs(60, 60, "", sprite[SPRITE.INV_LOCKPICK], 3),
       this.inv_buttons[INV.LOCKPICK].id = INV.LOCKPICK,
       this.inv_buttons[INV.TOTEM] = Qs(60, 60, "", sprite[SPRITE.INV_TOTEM], 3),
       this.inv_buttons[INV.TOTEM].id = INV.TOTEM,
       this.inv_buttons[INV.AMETHYST_HELMET] = Qs(60, 60, "", sprite[SPRITE.INV_AMETHYST_HELMET], 3),
       this.inv_buttons[INV.AMETHYST_HELMET].id = INV.AMETHYST_HELMET,
       this.inv_buttons[INV.SUPER_HAMMER] = Qs(60, 60, "", sprite[SPRITE.INV_SUPER_HAMMER], 3),
       this.inv_buttons[INV.SUPER_HAMMER].id = INV.SUPER_HAMMER,
       this.inv_buttons[INV.BRIDGE] = Qs(60, 60, "", sprite[SPRITE.INV_BRIDGE], 3),
       this.inv_buttons[INV.BRIDGE].id = INV.BRIDGE,
       this.inv_buttons[INV.WOOD_TOWER] = Qs(60, 60, "", sprite[SPRITE.INV_WOOD_TOWER], 3),
       this.inv_buttons[INV.WOOD_TOWER].id = INV.WOOD_TOWER,
       this.inv_buttons[INV.BOAT] = Qs(60, 60, "", sprite[SPRITE.INV_BOAT], 3),
       this.inv_buttons[INV.BOAT].id = INV.BOAT,
       this.inv_buttons[INV.SLED] = Qs(60, 60, "", sprite[SPRITE.INV_SLED], 3),
       this.inv_buttons[INV.SLED].id = INV.SLED,
       this.inv_buttons[INV.PLANE] = Qs(60, 60, "", sprite[SPRITE.INV_PLANE], 3),
       this.inv_buttons[INV.PLANE].id = INV.PLANE,
       this.inv_buttons[INV.SADDLE] = Qs(60, 60, "", sprite[SPRITE.INV_SADDLE], 3),
       this.inv_buttons[INV.SADDLE].id = INV.SADDLE,
       this.inv_buttons[INV.MOUNT_BOAR] = Qs(60, 60, "", sprite[SPRITE.INV_MOUNT_BOAR], 3),
       this.inv_buttons[INV.MOUNT_BOAR].id = INV.MOUNT_BOAR,
       this.inv_buttons[INV.CRAB_BOSS] = Qs(60, 60, "", sprite[SPRITE.INV_CRAB_BOSS], 3),
       this.inv_buttons[INV.CRAB_BOSS].id = INV.CRAB_BOSS,
       this.inv_buttons[INV.BABY_DRAGON] = Qs(60, 60, "", sprite[SPRITE.INV_BABY_DRAGON], 3),
       this.inv_buttons[INV.BABY_DRAGON].id = INV.BABY_DRAGON,
       this.inv_buttons[INV.BABY_MAMMOTH] = Qs(60, 60, "", sprite[SPRITE.INV_BABY_MAMMOTH], 3),
       this.inv_buttons[INV.BABY_MAMMOTH].id = INV.BABY_MAMMOTH,
       this.inv_buttons[INV.BABY_LAVA] = Qs(60, 60, "", sprite[SPRITE.INV_BABY_LAVA], 3),
       this.inv_buttons[INV.BABY_LAVA].id = INV.BABY_LAVA,
       this.inv_buttons[INV.HAWK] = Qs(60, 60, "", sprite[SPRITE.INV_HAWK], 3),
       this.inv_buttons[INV.HAWK].id = INV.HAWK,
       this.inv_buttons[INV.SAND] = Qs(60, 60, "", sprite[SPRITE.INV_SAND], 3),
       this.inv_buttons[INV.SAND].id = INV.SAND,
       this.inv_buttons[INV.SAND].info.img[2] = this.inv_buttons[INV.SAND].info.img[0],
       this.inv_buttons[INV.BOTTLE_FULL] = Qs(60, 60, "", sprite[SPRITE.INV_BOTTLE_FULL], 3),
       this.inv_buttons[INV.BOTTLE_FULL].id = INV.BOTTLE_FULL,
       this.inv_buttons[INV.BOTTLE_EMPTY] = Qs(60, 60, "", sprite[SPRITE.INV_BOTTLE_EMPTY], 3),
       this.inv_buttons[INV.BOTTLE_EMPTY].id = INV.BOTTLE_EMPTY,
       this.inv_buttons[INV.SHOVEL] = Qs(60, 60, "", sprite[SPRITE.INV_SHOVEL], 3),
       this.inv_buttons[INV.SHOVEL].id = INV.SHOVEL,
       this.inv_buttons[INV.SHOVEL_GOLD] = Qs(60, 60, "", sprite[SPRITE.INV_SHOVEL_GOLD], 3),
       this.inv_buttons[INV.SHOVEL_GOLD].id = INV.SHOVEL_GOLD,
       this.inv_buttons[INV.SHOVEL_DIAMOND] = Qs(60, 60, "", sprite[SPRITE.INV_SHOVEL_DIAMOND], 3),
       this.inv_buttons[INV.SHOVEL_DIAMOND].id = INV.SHOVEL_DIAMOND,
       this.inv_buttons[INV.SHOVEL_AMETHYST] = Qs(60, 60, "", sprite[SPRITE.INV_SHOVEL_AMETHYST], 3),
       this.inv_buttons[INV.SHOVEL_AMETHYST].id = INV.SHOVEL_AMETHYST,
       this.inv_buttons[INV.SPANNER] = Qs(60, 60, "", sprite[SPRITE.INV_SPANNER], 3),
       this.inv_buttons[INV.SPANNER].id = INV.SPANNER,
       this.inv_buttons[INV.KRAKEN_SKIN] = Qs(60, 60, "", sprite[SPRITE.INV_KRAKEN_SKIN], 3),
       this.inv_buttons[INV.KRAKEN_SKIN].id = INV.KRAKEN_SKIN,
       this.inv_buttons[INV.KRAKEN_SKIN].info.img[2] = this.inv_buttons[INV.KRAKEN_SKIN].info.img[0],
       this.inv_buttons[INV.WATERING_CAN] = Qs(60, 60, "", sprite[SPRITE.INV_WATERING_CAN], 3),
       this.inv_buttons[INV.WATERING_CAN].id = INV.WATERING_CAN,
       this.inv_buttons[INV.FLOUR] = Qs(60, 60, "", sprite[SPRITE.INV_FLOUR], 3),
       this.inv_buttons[INV.FLOUR].id = INV.FLOUR,
       this.inv_buttons[INV.FLOUR].info.img[2] = this.inv_buttons[INV.FLOUR].info.img[0],
       this.inv_buttons[INV.WHEAT_SEED] = Qs(60, 60, "", sprite[SPRITE.INV_WHEAT_SEED], 3),
       this.inv_buttons[INV.WHEAT_SEED].id = INV.WHEAT_SEED,
       this.inv_buttons[INV.COOKIE] = Qs(60, 60, "", sprite[SPRITE.INV_COOKIE], 3),
       this.inv_buttons[INV.COOKIE].id = INV.COOKIE,
       this.inv_buttons[INV.WILD_WHEAT] = Qs(60, 60, "", sprite[SPRITE.INV_WILD_WHEAT], 3),
       this.inv_buttons[INV.WILD_WHEAT].id = INV.WILD_WHEAT,
       this.inv_buttons[INV.WILD_WHEAT].info.img[2] = this.inv_buttons[INV.WILD_WHEAT].info.img[0],
       this.inv_buttons[INV.WINDMILL] = Qs(60, 60, "", sprite[SPRITE.INV_WINDMILL], 3),
       this.inv_buttons[INV.WINDMILL].id = INV.WINDMILL,
       this.inv_buttons[INV.SUPER_DIVING_SUIT] = Qs(60, 60, "", sprite[SPRITE.INV_SUPER_DIVING_SUIT], 3),
       this.inv_buttons[INV.SUPER_DIVING_SUIT].id = INV.SUPER_DIVING_SUIT,
       this.inv_buttons[INV.DIVING_MASK] = Qs(60, 60, "", sprite[SPRITE.INV_DIVING_MASK], 3),
       this.inv_buttons[INV.DIVING_MASK].id = INV.DIVING_MASK,
       this.inv_buttons[INV.WATERING_CAN_FULL] = Qs(60, 60, "", sprite[SPRITE.INV_WATERING_CAN_FULL], 3),
       this.inv_buttons[INV.WATERING_CAN_FULL].id = INV.WATERING_CAN_FULL,
       this.inv_buttons[INV.CAKE] = Qs(60, 60, "", sprite[SPRITE.INV_CAKE], 3),
       this.inv_buttons[INV.CAKE].id = INV.CAKE,
       this.inv_buttons[INV.BREAD] = Qs(60, 60, "", sprite[SPRITE.INV_BREAD], 3),
       this.inv_buttons[INV.BREAD].id = INV.BREAD,
       this.inv_buttons[INV.FOODFISH] = Qs(60, 60, "", sprite[SPRITE.INV_FOODFISH], 3),
       this.inv_buttons[INV.FOODFISH].id = INV.FOODFISH,
       this.inv_buttons[INV.FOODFISH_COOKED] = Qs(60, 60, "", sprite[SPRITE.INV_FOODFISH_COOKED], 3),
       this.inv_buttons[INV.FOODFISH_COOKED].id = INV.FOODFISH_COOKED,
       this.inv_buttons[INV.SCALES] = Qs(60, 60, "", sprite[SPRITE.INV_SCALES], 3),
       this.inv_buttons[INV.SCALES].id = INV.SCALES,
       this.inv_buttons[INV.SCALES].info.img[2] = this.inv_buttons[INV.SCALES].info.img[0],
       this.inv_buttons[INV.GROUND] = Qs(60, 60, "", sprite[SPRITE.INV_GROUND], 3),
       this.inv_buttons[INV.GROUND].id = INV.GROUND,
       this.inv_buttons[INV.GROUND].info.img[2] = this.inv_buttons[INV.GROUND].info.img[0],
       this.inv_buttons[INV.PLOT] = Qs(60, 60, "", sprite[SPRITE.INV_PLOT], 3),
       this.inv_buttons[INV.PLOT].id = INV.PLOT,
       this.inv_buttons[INV.ICE] = Qs(60, 60, "", sprite[SPRITE.INV_ICE], 3),
       this.inv_buttons[INV.ICE].id = INV.ICE,
       this.inv_buttons[INV.ICE].info.img[2] = this.inv_buttons[INV.ICE].info.img[0],
       this.inv_buttons[INV.BREAD_OVEN] = Qs(60, 60, "", sprite[SPRITE.INV_BREAD_OVEN], 3),
       this.inv_buttons[INV.BREAD_OVEN].id = INV.BREAD_OVEN,
       this.inv_buttons[INV.SANDWICH] = Qs(60, 60, "", sprite[SPRITE.INV_SANDWICH], 3),
       this.inv_buttons[INV.SANDWICH].id = INV.SANDWICH,
       this.inv_buttons[INV.DRAGON_HELMET] = Qs(60, 60, "", sprite[SPRITE.INV_DRAGON_HELMET], 3),
       this.inv_buttons[INV.DRAGON_HELMET].id = INV.DRAGON_HELMET,
       this.inv_buttons[INV.DRAGON_SWORD] = Qs(60, 60, "", sprite[SPRITE.INV_DRAGON_SWORD], 3),
       this.inv_buttons[INV.DRAGON_SWORD].id = INV.DRAGON_SWORD,
       this.inv_buttons[INV.DRAGON_ORB] = Qs(60, 60, "", sprite[SPRITE.INV_DRAGON_ORB], 3),
       this.inv_buttons[INV.DRAGON_ORB].id = INV.DRAGON_ORB,
       this.inv_buttons[INV.DRAGON_ORB].info.img[2] = this.inv_buttons[INV.DRAGON_ORB].info.img[0],
       this.inv_buttons[INV.DRAGON_CUBE] = Qs(60, 60, "", sprite[SPRITE.INV_DRAGON_CUBE], 3),
       this.inv_buttons[INV.DRAGON_CUBE].id = INV.DRAGON_CUBE,
       this.inv_buttons[INV.DRAGON_CUBE].info.img[2] = this.inv_buttons[INV.DRAGON_CUBE].info.img[0],
       this.inv_buttons[INV.LAVA_SPEAR] = Qs(60, 60, "", sprite[SPRITE.INV_LAVA_SPEAR], 3),
       this.inv_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR,
       this.inv_buttons[INV.LAVA_SWORD] = Qs(60, 60, "", sprite[SPRITE.INV_LAVA_SWORD], 3),
       this.inv_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD,
       this.inv_buttons[INV.LAVA_ORB] = Qs(60, 60, "", sprite[SPRITE.INV_LAVA_ORB], 3),
       this.inv_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB,
       this.inv_buttons[INV.LAVA_ORB].info.img[2] = this.inv_buttons[INV.LAVA_ORB].info.img[0],
       this.inv_buttons[INV.LAVA_CUBE] = Qs(60, 60, "", sprite[SPRITE.INV_LAVA_CUBE], 3),
       this.inv_buttons[INV.LAVA_CUBE].id = INV.LAVA_CUBE,
       this.inv_buttons[INV.LAVA_CUBE].info.img[2] = this.inv_buttons[INV.LAVA_CUBE].info.img[0],
       this.inv_buttons[INV.CROWN_GREEN] = Qs(60, 60, "", sprite[SPRITE.INV_CROWN_GREEN], 3),
       this.inv_buttons[INV.CROWN_GREEN].id = INV.CROWN_GREEN,
       this.inv_buttons[INV.GEMME_GREEN] = Qs(60, 60, "", sprite[SPRITE.INV_GEMME_GREEN], 3),
       this.inv_buttons[INV.GEMME_GREEN].id = INV.GEMME_GREEN,
       this.inv_buttons[INV.GEMME_GREEN].info.img[2] = this.inv_buttons[INV.GEMME_GREEN].info.img[0],
       this.inv_buttons[INV.GEMME_ORANGE] = Qs(60, 60, "", sprite[SPRITE.INV_GEMME_ORANGE], 3),
       this.inv_buttons[INV.GEMME_ORANGE].id = INV.GEMME_ORANGE,
       this.inv_buttons[INV.GEMME_ORANGE].info.img[2] = this.inv_buttons[INV.GEMME_ORANGE].info.img[0],
       this.inv_buttons[INV.CROWN_ORANGE] = Qs(60, 60, "", sprite[SPRITE.INV_CROWN_ORANGE], 3),
       this.inv_buttons[INV.CROWN_ORANGE].id = INV.CROWN_ORANGE,
       this.inv_buttons[INV.GEMME_BLUE] = Qs(60, 60, "", sprite[SPRITE.INV_GEMME_BLUE], 3),
       this.inv_buttons[INV.GEMME_BLUE].id = INV.GEMME_BLUE,
       this.inv_buttons[INV.GEMME_BLUE].info.img[2] = this.inv_buttons[INV.GEMME_BLUE].info.img[0],
       this.inv_buttons[INV.CROWN_BLUE] = Qs(60, 60, "", sprite[SPRITE.INV_CROWN_BLUE], 3),
       this.inv_buttons[INV.CROWN_BLUE].id = INV.CROWN_BLUE,
       this.inv_buttons[INV.HOOD] = Qs(60, 60, "", sprite[SPRITE.INV_HOOD], 3),
       this.inv_buttons[INV.HOOD].id = INV.HOOD,
       this.inv_buttons[INV.PEASANT] = Qs(60, 60, "", sprite[SPRITE.INV_PEASANT], 3),
       this.inv_buttons[INV.PEASANT].id = INV.PEASANT,
       this.inv_buttons[INV.SPECIAL_FUR] = Qs(60, 60, "", sprite[SPRITE.INV_SPECIAL_FUR], 3),
       this.inv_buttons[INV.SPECIAL_FUR].id = INV.SPECIAL_FUR,
       this.inv_buttons[INV.SPECIAL_FUR_2] = Qs(60, 60, "", sprite[SPRITE.INV_SPECIAL_FUR_2], 3),
       this.inv_buttons[INV.SPECIAL_FUR_2].id = INV.SPECIAL_FUR_2,
       this.inv_buttons[INV.WINTER_PEASANT] = Qs(60, 60, "", sprite[SPRITE.INV_WINTER_PEASANT], 3),
       this.inv_buttons[INV.WINTER_PEASANT].id = INV.WINTER_PEASANT,
       this.inv_buttons[INV.WINTER_HOOD] = Qs(60, 60, "", sprite[SPRITE.INV_WINTER_HOOD], 3),
       this.inv_buttons[INV.WINTER_HOOD].id = INV.WINTER_HOOD,
       this.inv_buttons[INV.BUCKET_FULL] = Qs(60, 60, "", sprite[SPRITE.INV_BUCKET_FULL], 3),
       this.inv_buttons[INV.BUCKET_FULL].id = INV.BUCKET_FULL,
       this.inv_buttons[INV.BUCKET_EMPTY] = Qs(60, 60, "", sprite[SPRITE.INV_BUCKET_EMPTY], 3),
       this.inv_buttons[INV.BUCKET_EMPTY].id = INV.BUCKET_EMPTY,
       this.inv_buttons[INV.WELL] = Qs(60, 60, "", sprite[SPRITE.INV_WELL], 3),
       this.inv_buttons[INV.WELL].id = INV.WELL,
       this.inv_buttons[INV.SIGN] = Qs(60, 60, "", sprite[SPRITE.INV_SIGN], 3),
       this.inv_buttons[INV.SIGN].id = INV.SIGN,
       this.inv_buttons[INV.PUMPKIN_SEED] = Qs(60, 60, "", sprite[SPRITE.INV_PUMPKIN_SEED], 3),
       this.inv_buttons[INV.PUMPKIN_SEED].id = INV.PUMPKIN_SEED,
       this.inv_buttons[INV.PUMPKIN] = Qs(60, 60, "", sprite[SPRITE.INV_PUMPKIN], 3),
       this.inv_buttons[INV.PUMPKIN].id = INV.PUMPKIN,
       this.inv_buttons[INV.GARLIC_SEED] = Qs(60, 60, "", sprite[SPRITE.INV_GARLIC_SEED], 3),
       this.inv_buttons[INV.GARLIC_SEED].id = INV.GARLIC_SEED,
       this.inv_buttons[INV.GARLIC] = Qs(60, 60, "", sprite[SPRITE.INV_GARLIC], 3),
       this.inv_buttons[INV.GARLIC].id = INV.GARLIC,
       this.inv_buttons[INV.ROOF] = Qs(60, 60, "", sprite[SPRITE.INV_ROOF], 3),
       this.inv_buttons[INV.ROOF].id = INV.ROOF,
       this.inv_buttons[INV.THORNBUSH_SEED] = Qs(60, 60, "", sprite[SPRITE.INV_THORNBUSH_SEED], 3),
       this.inv_buttons[INV.THORNBUSH_SEED].id = INV.THORNBUSH_SEED,
       this.inv_buttons[INV.THORNBUSH] = Qs(60, 60, "", sprite[SPRITE.INV_THORNBUSH], 3),
       this.inv_buttons[INV.THORNBUSH].id = INV.THORNBUSH,
       this.inv_buttons[INV.CARROT_SEED] = Qs(60, 60, "", sprite[SPRITE.INV_CARROT_SEED], 3),
       this.inv_buttons[INV.CARROT_SEED].id = INV.CARROT_SEED,
       this.inv_buttons[INV.CARROT] = Qs(60, 60, "", sprite[SPRITE.INV_CARROT], 3),
       this.inv_buttons[INV.CARROT].id = INV.CARROT,
       this.inv_buttons[INV.TOMATO_SEED] = Qs(60, 60, "", sprite[SPRITE.INV_TOMATO_SEED], 3),
       this.inv_buttons[INV.TOMATO_SEED].id = INV.TOMATO_SEED,
       this.inv_buttons[INV.TOMATO] = Qs(60, 60, "", sprite[SPRITE.INV_TOMATO], 3),
       this.inv_buttons[INV.TOMATO].id = INV.TOMATO,
       this.inv_buttons[INV.WATERMELON_SEED] = Qs(60, 60, "", sprite[SPRITE.INV_WATERMELON_SEED], 3),
       this.inv_buttons[INV.WATERMELON_SEED].id = INV.WATERMELON_SEED,
       this.inv_buttons[INV.WATERMELON] = Qs(60, 60, "", sprite[SPRITE.INV_WATERMELON], 3),
       this.inv_buttons[INV.WATERMELON].id = INV.WATERMELON,
       this.inv_buttons[INV.ALOE_VERA_SEED] = Qs(60, 60, "", sprite[SPRITE.INV_ALOE_VERA_SEED], 3),
       this.inv_buttons[INV.ALOE_VERA_SEED].id = INV.ALOE_VERA_SEED,
       this.inv_buttons[INV.ALOE_VERA] = Qs(60, 60, "", sprite[SPRITE.INV_ALOE_VERA], 3),
       this.inv_buttons[INV.ALOE_VERA].id = INV.ALOE_VERA,
       this.inv_buttons[INV.CHRISTMAS_HAT] = Qs(60, 60, "", sprite[SPRITE.INV_CHRISTMAS_HAT], 3),
       this.inv_buttons[INV.CHRISTMAS_HAT].id = INV.CHRISTMAS_HAT,
       this.inv_buttons[INV.ELF_HAT] = Qs(60, 60, "", sprite[SPRITE.INV_ELF_HAT], 3),
       this.inv_buttons[INV.ELF_HAT].id = INV.ELF_HAT,
       this.inv_buttons[INV.WOOD_SPEAR] = Qs(60, 60, "", sprite[SPRITE.INV_WOOD_SPEAR], 3),
       this.inv_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR,
       this.inv_buttons[INV.DRAGON_SPEAR] = Qs(60, 60, "", sprite[SPRITE.INV_DRAGON_SPEAR], 3),
       this.inv_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR,
       this.inv_buttons[INV.CRAB_STICK] = Qs(60, 60, "", sprite[SPRITE.INV_CRAB_STICK], 3),
       this.inv_buttons[INV.CRAB_STICK].id = INV.CRAB_STICK,
       this.inv_buttons[INV.CRAB_SPEAR] = Qs(60, 60, "", sprite[SPRITE.INV_CRAB_SPEAR], 3),
       this.inv_buttons[INV.CRAB_SPEAR].id = INV.CRAB_SPEAR,
       this.inv_buttons[INV.CRAB_LOOT] = Qs(60, 60, "", sprite[SPRITE.INV_CRAB_LOOT], 3),
       this.inv_buttons[INV.CRAB_LOOT].id = INV.CRAB_LOOT,
       this.inv_buttons[INV.BED] = Qs(60, 60, "", sprite[SPRITE.INV_BED], 3),
       this.inv_buttons[INV.BED].id = INV.BED,
       this.inv_buttons[INV.CROWN_CRAB] = Qs(60, 60, "", sprite[SPRITE.INV_CROWN_CRAB], 3),
       this.inv_buttons[INV.CROWN_CRAB].id = INV.CROWN_CRAB,
       this.inv_buttons[INV.GARLAND] = Qs(60, 60, "", sprite[SPRITE.INV_GARLAND], 3),
       this.inv_buttons[INV.GARLAND].id = INV.GARLAND,
       this.inv_buttons[INV.CANDY] = Qs(60, 60, "", sprite[SPRITE.INV_CANDY], 3),
       this.inv_buttons[INV.CANDY].id = INV.CANDY,
       this.inv_buttons[INV.SUGAR_CAN] = Qs(60, 60, "", sprite[SPRITE.INV_SUGAR_CAN], 3),
       this.inv_buttons[INV.SUGAR_CAN].id = INV.SUGAR_CAN,
       this.craft_buttons = [],
       this.craft_buttons[CRAFT.SWORD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SWORD], 3),
       this.craft_buttons[CRAFT.SWORD].id = CRAFT.SWORD,
       this.craft_buttons[CRAFT.PICK] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PICK], 3),
       this.craft_buttons[CRAFT.PICK].id = CRAFT.PICK,
       this.craft_buttons[CRAFT.FIRE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_FIRE], 3),
       this.craft_buttons[CRAFT.FIRE].id = CRAFT.FIRE,
       this.craft_buttons[CRAFT.WORKBENCH] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WORK], 3),
       this.craft_buttons[CRAFT.WORKBENCH].id = CRAFT.WORKBENCH,
       this.craft_buttons[CRAFT.WALL] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WALL], 3),
       this.craft_buttons[CRAFT.WALL].id = CRAFT.WALL,
       this.craft_buttons[CRAFT.SPIKE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SPIKE], 3),
       this.craft_buttons[CRAFT.SPIKE].id = CRAFT.SPIKE,
       this.craft_buttons[CRAFT.SEED] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SEED], 3),
       this.craft_buttons[CRAFT.SEED].id = CRAFT.SEED,
       this.craft_buttons[CRAFT.PICK_GOLD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PICK_GOLD], 3),
       this.craft_buttons[CRAFT.PICK_GOLD].id = CRAFT.PICK_GOLD,
       this.craft_buttons[CRAFT.PICK_DIAMOND] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PICK_DIAMOND], 3),
       this.craft_buttons[CRAFT.PICK_DIAMOND].id = CRAFT.PICK_DIAMOND,
       this.craft_buttons[CRAFT.SWORD_GOLD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SWORD_GOLD], 3),
       this.craft_buttons[CRAFT.SWORD_GOLD].id = CRAFT.SWORD_GOLD,
       this.craft_buttons[CRAFT.SWORD_WOOD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SWORD_WOOD], 3),
       this.craft_buttons[CRAFT.SWORD_WOOD].id = CRAFT.SWORD_WOOD,
       this.craft_buttons[CRAFT.SWORD_DIAMOND] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SWORD_DIAMOND], 3),
       this.craft_buttons[CRAFT.SWORD_DIAMOND].id = CRAFT.SWORD_DIAMOND,
       this.craft_buttons[CRAFT.PICK_WOOD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PICK_WOOD], 3),
       this.craft_buttons[CRAFT.PICK_WOOD].id = CRAFT.PICK_WOOD,
       this.craft_buttons[CRAFT.COOKED_MEAT] = Qs(60, 60, "", sprite[SPRITE.CRAFT_COOKED_MEAT], 3),
       this.craft_buttons[CRAFT.COOKED_MEAT].id = CRAFT.COOKED_MEAT,
       this.craft_buttons[CRAFT.BIG_FIRE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BIG_FIRE], 3),
       this.craft_buttons[CRAFT.BIG_FIRE].id = CRAFT.BIG_FIRE,
       this.craft_buttons[CRAFT.BANDAGE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BANDAGE], 3),
       this.craft_buttons[CRAFT.BANDAGE].id = CRAFT.BANDAGE,
       this.craft_buttons[CRAFT.STONE_WALL] = Qs(60, 60, "", sprite[SPRITE.CRAFT_STONE_WALL], 3),
       this.craft_buttons[CRAFT.STONE_WALL].id = CRAFT.STONE_WALL,
       this.craft_buttons[CRAFT.GOLD_WALL] = Qs(60, 60, "", sprite[SPRITE.CRAFT_GOLD_WALL], 3),
       this.craft_buttons[CRAFT.GOLD_WALL].id = CRAFT.GOLD_WALL,
       this.craft_buttons[CRAFT.DIAMOND_WALL] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_WALL], 3),
       this.craft_buttons[CRAFT.DIAMOND_WALL].id = CRAFT.DIAMOND_WALL,
       this.craft_buttons[CRAFT.WOOD_DOOR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DOOR_WOOD_CLOSE], 3),
       this.craft_buttons[CRAFT.WOOD_DOOR].id = CRAFT.WOOD_DOOR,
       this.craft_buttons[CRAFT.CHEST] = Qs(60, 60, "", sprite[SPRITE.CRAFT_CHEST], 3),
       this.craft_buttons[CRAFT.CHEST].id = CRAFT.CHEST,
       this.craft_buttons[CRAFT.STONE_SPIKE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_STONE_SPIKE], 3),
       this.craft_buttons[CRAFT.STONE_SPIKE].id = CRAFT.STONE_SPIKE,
       this.craft_buttons[CRAFT.GOLD_SPIKE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_GOLD_SPIKE], 3),
       this.craft_buttons[CRAFT.GOLD_SPIKE].id = CRAFT.GOLD_SPIKE,
       this.craft_buttons[CRAFT.DIAMOND_SPIKE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_SPIKE], 3),
       this.craft_buttons[CRAFT.DIAMOND_SPIKE].id = CRAFT.DIAMOND_SPIKE,
       this.craft_buttons[CRAFT.BAG] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BAG], 3),
       this.craft_buttons[CRAFT.BAG].id = CRAFT.BAG,
       this.craft_buttons[CRAFT.EARMUFFS] = Qs(60, 60, "", sprite[SPRITE.CRAFT_EARMUFFS], 3),
       this.craft_buttons[CRAFT.EARMUFFS].id = CRAFT.EARMUFFS,
       this.craft_buttons[CRAFT.STONE_DOOR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DOOR_STONE_CLOSE], 3),
       this.craft_buttons[CRAFT.STONE_DOOR].id = CRAFT.STONE_DOOR,
       this.craft_buttons[CRAFT.GOLD_DOOR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DOOR_GOLD_CLOSE], 3),
       this.craft_buttons[CRAFT.GOLD_DOOR].id = CRAFT.GOLD_DOOR,
       this.craft_buttons[CRAFT.DIAMOND_DOOR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DOOR_DIAMOND_CLOSE], 3),
       this.craft_buttons[CRAFT.DIAMOND_DOOR].id = CRAFT.DIAMOND_DOOR,
       this.craft_buttons[CRAFT.EARMUFFS] = Qs(60, 60, "", sprite[SPRITE.CRAFT_EARMUFFS], 3),
       this.craft_buttons[CRAFT.EARMUFFS].id = CRAFT.EARMUFFS,
       this.craft_buttons[CRAFT.COAT] = Qs(60, 60, "", sprite[SPRITE.CRAFT_COAT], 3),
       this.craft_buttons[CRAFT.COAT].id = CRAFT.COAT,
       this.craft_buttons[CRAFT.WOOD_SPEAR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WOOD_SPEAR], 3),
       this.craft_buttons[CRAFT.WOOD_SPEAR].id = CRAFT.WOOD_SPEAR,
       this.craft_buttons[CRAFT.SPEAR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SPEAR], 3),
       this.craft_buttons[CRAFT.SPEAR].id = CRAFT.SPEAR,
       this.craft_buttons[CRAFT.GOLD_SPEAR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_GOLD_SPEAR], 3),
       this.craft_buttons[CRAFT.GOLD_SPEAR].id = CRAFT.GOLD_SPEAR,
       this.craft_buttons[CRAFT.DIAMOND_SPEAR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_SPEAR], 3),
       this.craft_buttons[CRAFT.DIAMOND_SPEAR].id = CRAFT.DIAMOND_SPEAR,
       this.craft_buttons[CRAFT.DRAGON_SPEAR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_SPEAR], 3),
       this.craft_buttons[CRAFT.DRAGON_SPEAR].id = CRAFT.DRAGON_SPEAR,
       this.craft_buttons[CRAFT.FURNACE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_FURNACE], 3),
       this.craft_buttons[CRAFT.FURNACE].id = CRAFT.FURNACE,
       this.craft_buttons[CRAFT.EXPLORER_HAT] = Qs(60, 60, "", sprite[SPRITE.CRAFT_EXPLORER_HAT], 3),
       this.craft_buttons[CRAFT.EXPLORER_HAT].id = CRAFT.EXPLORER_HAT,
       this.craft_buttons[CRAFT.PIRATE_HAT] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PIRATE_HAT], 3),
       this.craft_buttons[CRAFT.PIRATE_HAT].id = CRAFT.PIRATE_HAT,
       this.craft_buttons[CRAFT.FLOWER_HAT] = Qs(60, 60, "", sprite[SPRITE.CRAFT_FLOWER_HAT], 3),
       this.craft_buttons[CRAFT.FLOWER_HAT].id = CRAFT.FLOWER_HAT,
       this.craft_buttons[CRAFT.FUR_HAT] = Qs(60, 60, "", sprite[SPRITE.CRAFT_FUR_HAT], 3),
       this.craft_buttons[CRAFT.FUR_HAT].id = CRAFT.FUR_HAT,
       this.craft_buttons[CRAFT.TURBAN1] = Qs(60, 60, "", sprite[SPRITE.CRAFT_TURBAN1], 3),
       this.craft_buttons[CRAFT.TURBAN1].id = CRAFT.TURBAN1,
       this.craft_buttons[CRAFT.TURBAN2] = Qs(60, 60, "", sprite[SPRITE.CRAFT_TURBAN2], 3),
       this.craft_buttons[CRAFT.TURBAN2].id = CRAFT.TURBAN2,
       this.craft_buttons[CRAFT.WOOD_BOW] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WOOD_BOW], 3),
       this.craft_buttons[CRAFT.WOOD_BOW].id = CRAFT.WOOD_BOW,
       this.craft_buttons[CRAFT.WOOD_ARROW] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WOOD_ARROW], 3),
       this.craft_buttons[CRAFT.WOOD_ARROW].id = CRAFT.WOOD_ARROW,
       this.craft_buttons[CRAFT.WOOD_SHIELD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WOOD_SHIELD], 3),
       this.craft_buttons[CRAFT.WOOD_SHIELD].id = CRAFT.WOOD_SHIELD,
       this.craft_buttons[CRAFT.STONE_BOW] = Qs(60, 60, "", sprite[SPRITE.CRAFT_STONE_BOW], 3),
       this.craft_buttons[CRAFT.STONE_BOW].id = CRAFT.STONE_BOW,
       this.craft_buttons[CRAFT.STONE_ARROW] = Qs(60, 60, "", sprite[SPRITE.CRAFT_STONE_ARROW], 3),
       this.craft_buttons[CRAFT.STONE_ARROW].id = CRAFT.STONE_ARROW,
       this.craft_buttons[CRAFT.STONE_SHIELD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_STONE_SHIELD], 3),
       this.craft_buttons[CRAFT.STONE_SHIELD].id = CRAFT.STONE_SHIELD,
       this.craft_buttons[CRAFT.GOLD_BOW] = Qs(60, 60, "", sprite[SPRITE.CRAFT_GOLD_BOW], 3),
       this.craft_buttons[CRAFT.GOLD_BOW].id = CRAFT.GOLD_BOW,
       this.craft_buttons[CRAFT.GOLD_ARROW] = Qs(60, 60, "", sprite[SPRITE.CRAFT_GOLD_ARROW], 3),
       this.craft_buttons[CRAFT.GOLD_ARROW].id = CRAFT.GOLD_ARROW,
       this.craft_buttons[CRAFT.GOLD_SHIELD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_GOLD_SHIELD], 3),
       this.craft_buttons[CRAFT.GOLD_SHIELD].id = CRAFT.GOLD_SHIELD,
       this.craft_buttons[CRAFT.DIAMOND_BOW] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_BOW], 3),
       this.craft_buttons[CRAFT.DIAMOND_BOW].id = CRAFT.DIAMOND_BOW,
       this.craft_buttons[CRAFT.DIAMOND_ARROW] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_ARROW], 3),
       this.craft_buttons[CRAFT.DIAMOND_ARROW].id = CRAFT.DIAMOND_ARROW,
       this.craft_buttons[CRAFT.DIAMOND_SHIELD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_SHIELD], 3),
       this.craft_buttons[CRAFT.DIAMOND_SHIELD].id = CRAFT.DIAMOND_SHIELD,
       this.craft_buttons[CRAFT.AMETHYST_BOW] = Qs(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_BOW], 3),
       this.craft_buttons[CRAFT.AMETHYST_BOW].id = CRAFT.AMETHYST_BOW,
       this.craft_buttons[CRAFT.AMETHYST_ARROW] = Qs(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_ARROW], 3),
       this.craft_buttons[CRAFT.AMETHYST_ARROW].id = CRAFT.AMETHYST_ARROW,
       this.craft_buttons[CRAFT.AMETHYST_SHIELD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_SHIELD], 3),
       this.craft_buttons[CRAFT.AMETHYST_SHIELD].id = CRAFT.AMETHYST_SHIELD,
       this.craft_buttons[CRAFT.REIDITE_BOW] = Qs(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_BOW], 3),
       this.craft_buttons[CRAFT.REIDITE_BOW].id = CRAFT.REIDITE_BOW,
       this.craft_buttons[CRAFT.REIDITE_ARROW] = Qs(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_ARROW], 3),
       this.craft_buttons[CRAFT.REIDITE_ARROW].id = CRAFT.REIDITE_ARROW,
       this.craft_buttons[CRAFT.REIDITE_SHIELD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SHIELD], 3),
       this.craft_buttons[CRAFT.REIDITE_SHIELD].id = CRAFT.REIDITE_SHIELD,
       this.craft_buttons[CRAFT.DRAGON_BOW] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_BOW], 3),
       this.craft_buttons[CRAFT.DRAGON_BOW].id = CRAFT.DRAGON_BOW,
       this.craft_buttons[CRAFT.DRAGON_ARROW] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_ARROW], 3),
       this.craft_buttons[CRAFT.DRAGON_ARROW].id = CRAFT.DRAGON_ARROW,
       this.craft_buttons[CRAFT.WOOD_HELMET] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WOOD_HELMET], 3),
       this.craft_buttons[CRAFT.WOOD_HELMET].id = CRAFT.WOOD_HELMET,
       this.craft_buttons[CRAFT.STONE_HELMET] = Qs(60, 60, "", sprite[SPRITE.CRAFT_STONE_HELMET], 3),
       this.craft_buttons[CRAFT.STONE_HELMET].id = CRAFT.STONE_HELMET,
       this.craft_buttons[CRAFT.GOLD_HELMET] = Qs(60, 60, "", sprite[SPRITE.CRAFT_GOLD_HELMET], 3),
       this.craft_buttons[CRAFT.GOLD_HELMET].id = CRAFT.GOLD_HELMET,
       this.craft_buttons[CRAFT.DIAMOND_HELMET] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_HELMET], 3),
       this.craft_buttons[CRAFT.DIAMOND_HELMET].id = CRAFT.DIAMOND_HELMET,
       this.craft_buttons[CRAFT.BOOK] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BOOK], 3),
       this.craft_buttons[CRAFT.BOOK].id = CRAFT.BOOK,
       this.craft_buttons[CRAFT.PAPER] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PAPER], 3),
       this.craft_buttons[CRAFT.PAPER].id = CRAFT.PAPER,
       this.craft_buttons[CRAFT.BAG] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BAG], 3),
       this.craft_buttons[CRAFT.BAG].id = CRAFT.BAG,
       this.craft_buttons[CRAFT.SWORD_AMETHYST] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SWORD_AMETHYST], 3),
       this.craft_buttons[CRAFT.SWORD_AMETHYST].id = CRAFT.SWORD_AMETHYST,
       this.craft_buttons[CRAFT.PIRATE_SWORD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PIRATE_SWORD], 3),
       this.craft_buttons[CRAFT.PIRATE_SWORD].id = CRAFT.PIRATE_SWORD,
       this.craft_buttons[CRAFT.PICK_AMETHYST] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PICK_AMETHYST], 3),
       this.craft_buttons[CRAFT.PICK_AMETHYST].id = CRAFT.PICK_AMETHYST,
       this.craft_buttons[CRAFT.PICK_REIDITE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PICK_REIDITE], 3),
       this.craft_buttons[CRAFT.PICK_REIDITE].id = CRAFT.PICK_REIDITE,
       this.craft_buttons[CRAFT.AMETHYST_SPEAR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_SPEAR], 3),
       this.craft_buttons[CRAFT.AMETHYST_SPEAR].id = CRAFT.AMETHYST_SPEAR,
       this.craft_buttons[CRAFT.HAMMER] = Qs(60, 60, "", sprite[SPRITE.CRAFT_HAMMER], 3),
       this.craft_buttons[CRAFT.HAMMER].id = CRAFT.HAMMER,
       this.craft_buttons[CRAFT.HAMMER_GOLD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_GOLD], 3),
       this.craft_buttons[CRAFT.HAMMER_GOLD].id = CRAFT.HAMMER_GOLD,
       this.craft_buttons[CRAFT.HAMMER_DIAMOND] = Qs(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_DIAMOND], 3),
       this.craft_buttons[CRAFT.HAMMER_DIAMOND].id = CRAFT.HAMMER_DIAMOND,
       this.craft_buttons[CRAFT.HAMMER_AMETHYST] = Qs(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_AMETHYST], 3),
       this.craft_buttons[CRAFT.HAMMER_AMETHYST].id = CRAFT.HAMMER_AMETHYST,
       this.craft_buttons[CRAFT.HAMMER_REIDITE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_REIDITE], 3),
       this.craft_buttons[CRAFT.HAMMER_REIDITE].id = CRAFT.HAMMER_REIDITE,
       this.craft_buttons[CRAFT.AMETHYST_WALL] = Qs(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_WALL], 3),
       this.craft_buttons[CRAFT.AMETHYST_WALL].id = CRAFT.AMETHYST_WALL,
       this.craft_buttons[CRAFT.AMETHYST_SPIKE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_SPIKE], 3),
       this.craft_buttons[CRAFT.AMETHYST_SPIKE].id = CRAFT.AMETHYST_SPIKE,
       this.craft_buttons[CRAFT.AMETHYST_DOOR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DOOR_AMETHYST_CLOSE], 3),
       this.craft_buttons[CRAFT.AMETHYST_DOOR].id = CRAFT.AMETHYST_DOOR,
       this.craft_buttons[CRAFT.CAP_SCARF] = Qs(60, 60, "", sprite[SPRITE.CRAFT_CAP_SCARF], 3),
       this.craft_buttons[CRAFT.CAP_SCARF].id = CRAFT.CAP_SCARF,
       this.craft_buttons[CRAFT.BLUE_CORD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BLUE_CORD], 3),
       this.craft_buttons[CRAFT.BLUE_CORD].id = CRAFT.BLUE_CORD,
       this.craft_buttons[CRAFT.LOCK] = Qs(60, 60, "", sprite[SPRITE.CRAFT_LOCK], 3),
       this.craft_buttons[CRAFT.LOCK].id = CRAFT.LOCK,
       this.craft_buttons[CRAFT.RESURRECTION] = Qs(60, 60, "", sprite[SPRITE.CRAFT_RESURRECTION], 3),
       this.craft_buttons[CRAFT.RESURRECTION].id = CRAFT.RESURRECTION,
       this.craft_buttons[CRAFT.LOCKPICK] = Qs(60, 60, "", sprite[SPRITE.CRAFT_LOCKPICK], 3),
       this.craft_buttons[CRAFT.LOCKPICK].id = CRAFT.LOCKPICK,
       this.craft_buttons[CRAFT.TOTEM] = Qs(60, 60, "", sprite[SPRITE.CRAFT_TOTEM], 3),
       this.craft_buttons[CRAFT.TOTEM].id = CRAFT.TOTEM,
       this.craft_buttons[CRAFT.AMETHYST_HELMET] = Qs(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_HELMET], 3),
       this.craft_buttons[CRAFT.AMETHYST_HELMET].id = CRAFT.AMETHYST_HELMET,
       this.craft_buttons[CRAFT.SUPER_HAMMER] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SUPER_HAMMER], 3),
       this.craft_buttons[CRAFT.SUPER_HAMMER].id = CRAFT.SUPER_HAMMER,
       this.craft_buttons[CRAFT.BRIDGE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BRIDGE], 3),
       this.craft_buttons[CRAFT.BRIDGE].id = CRAFT.BRIDGE,
       this.craft_buttons[CRAFT.WOOD_TOWER] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WOOD_TOWER], 3),
       this.craft_buttons[CRAFT.WOOD_TOWER].id = CRAFT.WOOD_TOWER,
       this.craft_buttons[CRAFT.BOAT] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BOAT], 3),
       this.craft_buttons[CRAFT.BOAT].id = CRAFT.BOAT,
       this.craft_buttons[CRAFT.SLED] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SLED], 3),
       this.craft_buttons[CRAFT.SLED].id = CRAFT.SLED,
       this.craft_buttons[CRAFT.PLANE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PLANE], 3),
       this.craft_buttons[CRAFT.PLANE].id = CRAFT.PLANE,
       this.craft_buttons[CRAFT.SADDLE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SADDLE], 3),
       this.craft_buttons[CRAFT.SADDLE].id = CRAFT.SADDLE,
       this.craft_buttons[CRAFT.MOUNT_BOAR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_MOUNT_BOAR], 3),
       this.craft_buttons[CRAFT.MOUNT_BOAR].id = CRAFT.MOUNT_BOAR,
       this.craft_buttons[CRAFT.BABY_DRAGON] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BABY_DRAGON], 3),
       this.craft_buttons[CRAFT.BABY_DRAGON].id = CRAFT.BABY_DRAGON,
       this.craft_buttons[CRAFT.BABY_MAMMOTH] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BABY_MAMMOTH], 3),
       this.craft_buttons[CRAFT.BABY_MAMMOTH].id = CRAFT.BABY_MAMMOTH,
       this.craft_buttons[CRAFT.CRAB_BOSS] = Qs(60, 60, "", sprite[SPRITE.CRAFT_CRAB_BOSS], 3),
       this.craft_buttons[CRAFT.CRAB_BOSS].id = CRAFT.CRAB_BOSS,
       this.craft_buttons[CRAFT.BOTTLE_EMPTY] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_EMPTY], 3),
       this.craft_buttons[CRAFT.BOTTLE_EMPTY].id = CRAFT.BOTTLE_EMPTY,
       this.craft_buttons[CRAFT.BOTTLE_FULL] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_FULL], 3),
       this.craft_buttons[CRAFT.BOTTLE_FULL].id = CRAFT.BOTTLE_FULL,
       this.craft_buttons[CRAFT.BOTTLE_FULL_2] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_FULL], 3),
       this.craft_buttons[CRAFT.BOTTLE_FULL_2].id = CRAFT.BOTTLE_FULL_2,
       this.craft_buttons[CRAFT.BOTTLE_FULL_3] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_FULL], 3),
       this.craft_buttons[CRAFT.BOTTLE_FULL_3].id = CRAFT.BOTTLE_FULL_3,
       this.craft_buttons[CRAFT.SHOVEL] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL], 3),
       this.craft_buttons[CRAFT.SHOVEL].id = CRAFT.SHOVEL,
       this.craft_buttons[CRAFT.SHOVEL_GOLD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL_GOLD], 3),
       this.craft_buttons[CRAFT.SHOVEL_GOLD].id = CRAFT.SHOVEL_GOLD,
       this.craft_buttons[CRAFT.SHOVEL_DIAMOND] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL_DIAMOND], 3),
       this.craft_buttons[CRAFT.SHOVEL_DIAMOND].id = CRAFT.SHOVEL_DIAMOND,
       this.craft_buttons[CRAFT.SHOVEL_AMETHYST] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL_AMETHYST], 3),
       this.craft_buttons[CRAFT.SHOVEL_AMETHYST].id = CRAFT.SHOVEL_AMETHYST,
       this.craft_buttons[CRAFT.SPANNER] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SPANNER], 3),
       this.craft_buttons[CRAFT.SPANNER].id = CRAFT.SPANNER,
       this.craft_buttons[CRAFT.WATERING_CAN] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WATERING_CAN], 3),
       this.craft_buttons[CRAFT.WATERING_CAN].id = CRAFT.WATERING_CAN,
       this.craft_buttons[CRAFT.WHEAT_SEED] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WHEAT_SEED], 3),
       this.craft_buttons[CRAFT.WHEAT_SEED].id = CRAFT.WHEAT_SEED,
       this.craft_buttons[CRAFT.COOKIE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_COOKIE], 3),
       this.craft_buttons[CRAFT.COOKIE].id = CRAFT.COOKIE,
       this.craft_buttons[CRAFT.WINDMILL] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WINDMILL], 3),
       this.craft_buttons[CRAFT.WINDMILL].id = CRAFT.WINDMILL,
       this.craft_buttons[CRAFT.SUPER_DIVING_SUIT] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SUPER_DIVING_SUIT], 3),
       this.craft_buttons[CRAFT.SUPER_DIVING_SUIT].id = CRAFT.SUPER_DIVING_SUIT,
       this.craft_buttons[CRAFT.DIVING_MASK] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DIVING_MASK], 3),
       this.craft_buttons[CRAFT.DIVING_MASK].id = CRAFT.DIVING_MASK,
       this.craft_buttons[CRAFT.WATERING_CAN_FULL] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WATERING_CAN_FULL], 3),
       this.craft_buttons[CRAFT.WATERING_CAN_FULL].id = CRAFT.WATERING_CAN_FULL,
       this.craft_buttons[CRAFT.CAKE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_CAKE], 3),
       this.craft_buttons[CRAFT.CAKE].id = CRAFT.CAKE,
       this.craft_buttons[CRAFT.BREAD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BREAD], 3),
       this.craft_buttons[CRAFT.BREAD].id = CRAFT.BREAD,
       this.craft_buttons[CRAFT.FOODFISH_COOKED] = Qs(60, 60, "", sprite[SPRITE.CRAFT_FOODFISH_COOKED], 3),
       this.craft_buttons[CRAFT.FOODFISH_COOKED].id = CRAFT.FOODFISH_COOKED,
       this.craft_buttons[CRAFT.PLOT] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PLOT], 3),
       this.craft_buttons[CRAFT.PLOT].id = CRAFT.PLOT,
       this.craft_buttons[CRAFT.BREAD_OVEN] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BREAD_OVEN], 3),
       this.craft_buttons[CRAFT.BREAD_OVEN].id = CRAFT.BREAD_OVEN,
       this.craft_buttons[CRAFT.SANDWICH] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SANDWICH], 3),
       this.craft_buttons[CRAFT.SANDWICH].id = CRAFT.SANDWICH,
       this.craft_buttons[CRAFT.DRAGON_HELMET] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_HELMET], 3),
       this.craft_buttons[CRAFT.DRAGON_HELMET].id = CRAFT.DRAGON_HELMET,
       this.craft_buttons[CRAFT.DRAGON_SWORD] = Qs(60, 60, "", sprite[SPRITE.INV_DRAGON_SWORD], 3),
       this.craft_buttons[CRAFT.DRAGON_SWORD].id = CRAFT.DRAGON_SWORD,
       this.craft_buttons[CRAFT.CROWN_GREEN] = Qs(60, 60, "", sprite[SPRITE.CRAFT_CROWN_GREEN], 3),
       this.craft_buttons[CRAFT.CROWN_GREEN].id = CRAFT.CROWN_GREEN,
       this.craft_buttons[CRAFT.CROWN_ORANGE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_CROWN_ORANGE], 3),
       this.craft_buttons[CRAFT.CROWN_ORANGE].id = CRAFT.CROWN_ORANGE,
       this.craft_buttons[CRAFT.CROWN_BLUE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_CROWN_BLUE], 3),
       this.craft_buttons[CRAFT.CROWN_BLUE].id = CRAFT.CROWN_BLUE,
       this.craft_buttons[CRAFT.HOOD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_HOOD], 3),
       this.craft_buttons[CRAFT.HOOD].id = CRAFT.HOOD,
       this.craft_buttons[CRAFT.PEASANT] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PEASANT], 3),
       this.craft_buttons[CRAFT.PEASANT].id = CRAFT.PEASANT,
       this.craft_buttons[CRAFT.WINTER_PEASANT] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WINTER_PEASANT], 3),
       this.craft_buttons[CRAFT.WINTER_PEASANT].id = CRAFT.WINTER_PEASANT,
       this.craft_buttons[CRAFT.WINTER_HOOD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WINTER_HOOD], 3),
       this.craft_buttons[CRAFT.WINTER_HOOD].id = CRAFT.WINTER_HOOD,
       this.craft_buttons[CRAFT.BUCKET_FULL] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BUCKET_FULL], 3),
       this.craft_buttons[CRAFT.BUCKET_FULL].id = CRAFT.BUCKET_FULL,
       this.craft_buttons[CRAFT.BUCKET_EMPTY] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BUCKET_EMPTY], 3),
       this.craft_buttons[CRAFT.BUCKET_EMPTY].id = CRAFT.BUCKET_EMPTY,
       this.craft_buttons[CRAFT.WELL] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WELL], 3),
       this.craft_buttons[CRAFT.WELL].id = CRAFT.WELL,
       this.craft_buttons[CRAFT.SIGN] = Qs(60, 60, "", sprite[SPRITE.CRAFT_SIGN], 3),
       this.craft_buttons[CRAFT.SIGN].id = CRAFT.SIGN,
       this.craft_buttons[CRAFT.PUMPKIN_SEED] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PUMPKIN_SEED], 3),
       this.craft_buttons[CRAFT.PUMPKIN_SEED].id = CRAFT.PUMPKIN_SEED,
       this.craft_buttons[CRAFT.GARLIC_SEED] = Qs(60, 60, "", sprite[SPRITE.CRAFT_GARLIC_SEED], 3),
       this.craft_buttons[CRAFT.GARLIC_SEED].id = CRAFT.GARLIC_SEED,
       this.craft_buttons[CRAFT.ROOF] = Qs(60, 60, "", sprite[SPRITE.CRAFT_ROOF], 3),
       this.craft_buttons[CRAFT.ROOF].id = CRAFT.ROOF,
       this.craft_buttons[CRAFT.THORNBUSH_SEED] = Qs(60, 60, "", sprite[SPRITE.CRAFT_THORNBUSH_SEED], 3),
       this.craft_buttons[CRAFT.THORNBUSH_SEED].id = CRAFT.THORNBUSH_SEED,
       this.craft_buttons[CRAFT.TOMATO_SEED] = Qs(60, 60, "", sprite[SPRITE.CRAFT_TOMATO_SEED], 3),
       this.craft_buttons[CRAFT.TOMATO_SEED].id = CRAFT.TOMATO_SEED,
       this.craft_buttons[CRAFT.CARROT_SEED] = Qs(60, 60, "", sprite[SPRITE.CRAFT_CARROT_SEED], 3),
       this.craft_buttons[CRAFT.CARROT_SEED].id = CRAFT.CARROT_SEED,
       this.craft_buttons[CRAFT.WATERMELON_SEED] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WATERMELON_SEED], 3),
       this.craft_buttons[CRAFT.WATERMELON_SEED].id = CRAFT.WATERMELON_SEED,
       this.craft_buttons[CRAFT.ALOE_VERA_SEED] = Qs(60, 60, "", sprite[SPRITE.CRAFT_ALOE_VERA_SEED], 3),
       this.craft_buttons[CRAFT.ALOE_VERA_SEED].id = CRAFT.ALOE_VERA_SEED,
       this.craft_buttons[CRAFT.WOOD_SPEAR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WOOD_SPEAR], 3),
       this.craft_buttons[CRAFT.WOOD_SPEAR].id = CRAFT.WOOD_SPEAR,
       this.craft_buttons[CRAFT.DRAGON_SPEAR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_SPEAR], 3),
       this.craft_buttons[CRAFT.DRAGON_SPEAR].id = CRAFT.DRAGON_SPEAR,
       this.craft_buttons[CRAFT.CRAB_SPEAR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_CRAB_SPEAR], 3),
       this.craft_buttons[CRAFT.CRAB_SPEAR].id = CRAFT.CRAB_SPEAR,
       this.craft_buttons[CRAFT.BED] = Qs(60, 60, "", sprite[SPRITE.CRAFT_BED], 3),
       this.craft_buttons[CRAFT.BED].id = CRAFT.BED,
       this.craft_buttons[CRAFT.CROWN_CRAB] = Qs(60, 60, "", sprite[SPRITE.CRAFT_CROWN_CRAB], 3),
       this.craft_buttons[CRAFT.CROWN_CRAB].id = CRAFT.CROWN_CRAB,
       this.chest_buttons[INV.PITCHFORK] = Qs(68, 68, "", sprite[SPRITE.CHEST_PITCHFORK], 3),
       this.chest_buttons[INV.PITCHFORK].id = INV.PITCHFORK,
       this.inv_buttons[INV.PITCHFORK] = Qs(60, 60, "", sprite[SPRITE.INV_PITCHFORK], 3),
       this.inv_buttons[INV.PITCHFORK].id = INV.PITCHFORK,
       this.craft_buttons[CRAFT.PITCHFORK] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PITCHFORK], 3),
       this.craft_buttons[CRAFT.PITCHFORK].id = CRAFT.PITCHFORK,
       this.chest_buttons[INV.PITCHFORK2] = Qs(68, 68, "", sprite[SPRITE.CHEST_PITCHFORK2], 3),
       this.chest_buttons[INV.PITCHFORK2].id = INV.PITCHFORK2,
       this.inv_buttons[INV.PITCHFORK2] = Qs(60, 60, "", sprite[SPRITE.INV_PITCHFORK2], 3),
       this.inv_buttons[INV.PITCHFORK2].id = INV.PITCHFORK2,
       this.craft_buttons[CRAFT.PITCHFORK2] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PITCHFORK2], 3),
       this.craft_buttons[CRAFT.PITCHFORK2].id = CRAFT.PITCHFORK2,
       this.chest_buttons[INV.MACHETE] = Qs(68, 68, "", sprite[SPRITE.CHEST_MACHETE], 3),
       this.chest_buttons[INV.MACHETE].id = INV.MACHETE,
       this.inv_buttons[INV.MACHETE] = Qs(60, 60, "", sprite[SPRITE.INV_MACHETE], 3),
       this.inv_buttons[INV.MACHETE].id = INV.MACHETE,
       this.craft_buttons[CRAFT.MACHETE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_MACHETE], 3),
       this.craft_buttons[CRAFT.MACHETE].id = CRAFT.MACHETE,
       this.chest_buttons[INV.PILOT_HELMET] = Qs(68, 68, "", sprite[SPRITE.CHEST_PILOT_HELMET], 3),
       this.chest_buttons[INV.PILOT_HELMET].id = INV.PILOT_HELMET,
       this.inv_buttons[INV.PILOT_HELMET] = Qs(60, 60, "", sprite[SPRITE.INV_PILOT_HELMET], 3),
       this.inv_buttons[INV.PILOT_HELMET].id = INV.PILOT_HELMET,
       this.craft_buttons[CRAFT.PILOT_HELMET] = Qs(60, 60, "", sprite[SPRITE.CRAFT_PILOT_HELMET], 3),
       this.craft_buttons[CRAFT.PILOT_HELMET].id = CRAFT.PILOT_HELMET,
       this.chest_buttons[INV.PITCHFORK_PART] = Qs(68, 68, "", sprite[SPRITE.CHEST_PITCHFORK_PART], 3),
       this.chest_buttons[INV.PITCHFORK_PART].id = INV.PITCHFORK_PART,
       this.inv_buttons[INV.PITCHFORK_PART] = Qs(60, 60, "", sprite[SPRITE.INV_PITCHFORK_PART], 3),
       this.inv_buttons[INV.PITCHFORK_PART].id = INV.PITCHFORK_PART,
       this.chest_buttons[INV.SANDWORM_JUICE] = Qs(68, 68, "", sprite[SPRITE.CHEST_SANDWORM_JUICE], 3),
       this.chest_buttons[INV.SANDWORM_JUICE].id = INV.SANDWORM_JUICE,
       this.inv_buttons[INV.SANDWORM_JUICE] = Qs(60, 60, "", sprite[SPRITE.INV_SANDWORM_JUICE], 3),
       this.inv_buttons[INV.SANDWORM_JUICE].id = INV.SANDWORM_JUICE,
       this.chest_buttons[INV.PILOT_GLASSES] = Qs(68, 68, "", sprite[SPRITE.CHEST_PILOT_GLASSES], 3),
       this.chest_buttons[INV.PILOT_GLASSES].id = INV.PILOT_GLASSES,
       this.inv_buttons[INV.PILOT_GLASSES] = Qs(60, 60, "", sprite[SPRITE.INV_PILOT_GLASSES], 3),
       this.inv_buttons[INV.PILOT_GLASSES].id = INV.PILOT_GLASSES,
       this.chest_buttons[INV.EMERALD_MACHINE] = Qs(68, 68, "", sprite[SPRITE.CHEST_EMERALD_MACHINE], 3),
       this.chest_buttons[INV.EMERALD_MACHINE].id = INV.EMERALD_MACHINE,
       this.inv_buttons[INV.EMERALD_MACHINE] = Qs(60, 60, "", sprite[SPRITE.INV_EMERALD_MACHINE], 3),
       this.inv_buttons[INV.EMERALD_MACHINE].id = INV.EMERALD_MACHINE,
       this.craft_buttons[CRAFT.EMERALD_MACHINE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_EMERALD_MACHINE], 3),
       this.craft_buttons[CRAFT.EMERALD_MACHINE].id = CRAFT.EMERALD_MACHINE,
       this.chest_buttons[INV.WOOD_DOOR_SPIKE] = Qs(68, 68, "", sprite[SPRITE.CHEST_WOOD_DOOR_SPIKE], 3),
       this.chest_buttons[INV.WOOD_DOOR_SPIKE].id = INV.WOOD_DOOR_SPIKE,
       this.inv_buttons[INV.WOOD_DOOR_SPIKE] = Qs(60, 60, "", sprite[SPRITE.INV_WOOD_DOOR_SPIKE], 3),
       this.inv_buttons[INV.WOOD_DOOR_SPIKE].id = INV.WOOD_DOOR_SPIKE,
       this.craft_buttons[CRAFT.WOOD_DOOR_SPIKE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WOOD_DOOR_SPIKE], 3),
       this.craft_buttons[CRAFT.WOOD_DOOR_SPIKE].id = CRAFT.WOOD_DOOR_SPIKE,
       this.chest_buttons[INV.STONE_DOOR_SPIKE] = Qs(68, 68, "", sprite[SPRITE.CHEST_STONE_DOOR_SPIKE], 3),
       this.chest_buttons[INV.STONE_DOOR_SPIKE].id = INV.STONE_DOOR_SPIKE,
       this.inv_buttons[INV.STONE_DOOR_SPIKE] = Qs(60, 60, "", sprite[SPRITE.INV_STONE_DOOR_SPIKE], 3),
       this.inv_buttons[INV.STONE_DOOR_SPIKE].id = INV.STONE_DOOR_SPIKE,
       this.craft_buttons[CRAFT.STONE_DOOR_SPIKE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_STONE_DOOR_SPIKE], 3),
       this.craft_buttons[CRAFT.STONE_DOOR_SPIKE].id = CRAFT.STONE_DOOR_SPIKE,
       this.chest_buttons[INV.GOLD_DOOR_SPIKE] = Qs(68, 68, "", sprite[SPRITE.CHEST_GOLD_DOOR_SPIKE], 3),
       this.chest_buttons[INV.GOLD_DOOR_SPIKE].id = INV.GOLD_DOOR_SPIKE,
       this.inv_buttons[INV.GOLD_DOOR_SPIKE] = Qs(60, 60, "", sprite[SPRITE.INV_GOLD_DOOR_SPIKE], 3),
       this.inv_buttons[INV.GOLD_DOOR_SPIKE].id = INV.GOLD_DOOR_SPIKE,
       this.craft_buttons[CRAFT.GOLD_DOOR_SPIKE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_GOLD_DOOR_SPIKE], 3),
       this.craft_buttons[CRAFT.GOLD_DOOR_SPIKE].id = CRAFT.GOLD_DOOR_SPIKE,
       this.chest_buttons[INV.DIAMOND_DOOR_SPIKE] = Qs(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_DOOR_SPIKE], 3),
       this.chest_buttons[INV.DIAMOND_DOOR_SPIKE].id = INV.DIAMOND_DOOR_SPIKE,
       this.inv_buttons[INV.DIAMOND_DOOR_SPIKE] = Qs(60, 60, "", sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE], 3),
       this.inv_buttons[INV.DIAMOND_DOOR_SPIKE].id = INV.DIAMOND_DOOR_SPIKE,
       this.craft_buttons[CRAFT.DIAMOND_DOOR_SPIKE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_DOOR_SPIKE], 3),
       this.craft_buttons[CRAFT.DIAMOND_DOOR_SPIKE].id = CRAFT.DIAMOND_DOOR_SPIKE,
       this.chest_buttons[INV.AMETHYST_DOOR_SPIKE] = Qs(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_DOOR_SPIKE], 3),
       this.chest_buttons[INV.AMETHYST_DOOR_SPIKE].id = INV.AMETHYST_DOOR_SPIKE;
       this.inv_buttons[INV.AMETHYST_DOOR_SPIKE] = Qs(60, 60, "", sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE], 3),
       this.inv_buttons[INV.AMETHYST_DOOR_SPIKE].id = INV.AMETHYST_DOOR_SPIKE,
       this.craft_buttons[CRAFT.AMETHYST_DOOR_SPIKE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_DOOR_SPIKE], 3),
       this.craft_buttons[CRAFT.AMETHYST_DOOR_SPIKE].id = CRAFT.AMETHYST_DOOR_SPIKE,
       this.chest_buttons[INV.REIDITE_DOOR_SPIKE] = Qs(68, 68, "", sprite[SPRITE.CHEST_REIDITE_DOOR_SPIKE], 3),
       this.chest_buttons[INV.REIDITE_DOOR_SPIKE].id = INV.REIDITE_DOOR_SPIKE,
       this.inv_buttons[INV.REIDITE_DOOR_SPIKE] = Qs(60, 60, "", sprite[SPRITE.INV_REIDITE_DOOR_SPIKE], 3),
       this.inv_buttons[INV.REIDITE_DOOR_SPIKE].id = INV.REIDITE_DOOR_SPIKE,
       this.craft_buttons[CRAFT.REIDITE_DOOR_SPIKE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_DOOR_SPIKE], 3),
       this.craft_buttons[CRAFT.REIDITE_DOOR_SPIKE].id = CRAFT.REIDITE_DOOR_SPIKE,
       this.chest_buttons[INV.REIDITE_WALL] = Qs(68, 68, "", sprite[SPRITE.CHEST_REIDITE_WALL], 3),
       this.chest_buttons[INV.REIDITE_WALL].id = INV.REIDITE_WALL,
       this.inv_buttons[INV.REIDITE_WALL] = Qs(60, 60, "", sprite[SPRITE.INV_REIDITE_WALL], 3),
       this.inv_buttons[INV.REIDITE_WALL].id = INV.REIDITE_WALL,
       this.craft_buttons[CRAFT.REIDITE_WALL] = Qs(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_WALL], 3),
       this.craft_buttons[CRAFT.REIDITE_WALL].id = CRAFT.REIDITE_WALL,
       this.chest_buttons[INV.REIDITE_SPIKE] = Qs(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SPIKE], 3),
       this.chest_buttons[INV.REIDITE_SPIKE].id = INV.REIDITE_SPIKE,
       this.inv_buttons[INV.REIDITE_SPIKE] = Qs(60, 60, "", sprite[SPRITE.INV_REIDITE_SPIKE], 3),
       this.inv_buttons[INV.REIDITE_SPIKE].id = INV.REIDITE_SPIKE,
       this.craft_buttons[CRAFT.REIDITE_SPIKE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SPIKE], 3),
       this.craft_buttons[CRAFT.REIDITE_SPIKE].id = CRAFT.REIDITE_SPIKE,
       this.chest_buttons[INV.REIDITE_DOOR] = Qs(68, 68, "", sprite[SPRITE.CHEST_REIDITE_DOOR], 3),
       this.chest_buttons[INV.REIDITE_DOOR].id = INV.REIDITE_DOOR,
       this.inv_buttons[INV.REIDITE_DOOR] = Qs(60, 60, "", sprite[SPRITE.INV_REIDITE_DOOR], 3),
       this.inv_buttons[INV.REIDITE_DOOR].id = INV.REIDITE_DOOR,
       this.craft_buttons[CRAFT.REIDITE_DOOR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_DOOR], 3),
       this.craft_buttons[CRAFT.REIDITE_DOOR].id = CRAFT.REIDITE_DOOR,
       this.chest_buttons[INV.EXTRACTOR_MACHINE_STONE] = Qs(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_STONE], 3),
       this.chest_buttons[INV.EXTRACTOR_MACHINE_STONE].id = INV.EXTRACTOR_MACHINE_STONE,
       this.inv_buttons[INV.EXTRACTOR_MACHINE_STONE] = Qs(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE], 3),
       this.inv_buttons[INV.EXTRACTOR_MACHINE_STONE].id = INV.EXTRACTOR_MACHINE_STONE,
       this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_STONE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE], 3),
       this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_STONE].id = CRAFT.EXTRACTOR_MACHINE_STONE,
       this.chest_buttons[INV.EXTRACTOR_MACHINE_GOLD] = Qs(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_GOLD], 3),
       this.chest_buttons[INV.EXTRACTOR_MACHINE_GOLD].id = INV.EXTRACTOR_MACHINE_GOLD,
       this.inv_buttons[INV.EXTRACTOR_MACHINE_GOLD] = Qs(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD], 3),
       this.inv_buttons[INV.EXTRACTOR_MACHINE_GOLD].id = INV.EXTRACTOR_MACHINE_GOLD,
       this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_GOLD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD], 3),
       this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_GOLD].id = CRAFT.EXTRACTOR_MACHINE_GOLD,
       this.chest_buttons[INV.EXTRACTOR_MACHINE_DIAMOND] = Qs(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_DIAMOND], 3),
       this.chest_buttons[INV.EXTRACTOR_MACHINE_DIAMOND].id = INV.EXTRACTOR_MACHINE_DIAMOND,
       this.inv_buttons[INV.EXTRACTOR_MACHINE_DIAMOND] = Qs(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND], 3),
       this.inv_buttons[INV.EXTRACTOR_MACHINE_DIAMOND].id = INV.EXTRACTOR_MACHINE_DIAMOND,
       this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_DIAMOND] = Qs(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND], 3),
       this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_DIAMOND].id = CRAFT.EXTRACTOR_MACHINE_DIAMOND,
       this.chest_buttons[INV.EXTRACTOR_MACHINE_AMETHYST] = Qs(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_AMETHYST], 3),
       this.chest_buttons[INV.EXTRACTOR_MACHINE_AMETHYST].id = INV.EXTRACTOR_MACHINE_AMETHYST,
       this.inv_buttons[INV.EXTRACTOR_MACHINE_AMETHYST] = Qs(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST], 3),
       this.inv_buttons[INV.EXTRACTOR_MACHINE_AMETHYST].id = INV.EXTRACTOR_MACHINE_AMETHYST,
       this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_AMETHYST] = Qs(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST], 3),
       this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_AMETHYST].id = CRAFT.EXTRACTOR_MACHINE_AMETHYST,
       this.chest_buttons[INV.EXTRACTOR_MACHINE_REIDITE] = Qs(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_REIDITE], 3),
       this.chest_buttons[INV.EXTRACTOR_MACHINE_REIDITE].id = INV.EXTRACTOR_MACHINE_REIDITE,
       this.inv_buttons[INV.EXTRACTOR_MACHINE_REIDITE] = Qs(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE], 3),
       this.inv_buttons[INV.EXTRACTOR_MACHINE_REIDITE].id = INV.EXTRACTOR_MACHINE_REIDITE,
       this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_REIDITE] = Qs(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE], 3),
       this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_REIDITE].id = CRAFT.EXTRACTOR_MACHINE_REIDITE,
       this.chest_buttons[INV.FLAME] = Qs(68, 68, "", sprite[SPRITE.CHEST_FLAME], 3),
       this.chest_buttons[INV.FLAME].id = INV.FLAME,
       this.inv_buttons[INV.FLAME] = Qs(60, 60, "", sprite[SPRITE.INV_FLAME], 3),
       this.inv_buttons[INV.FLAME].id = INV.FLAME,
       this.inv_buttons[INV.FLAME].info.img[2] = this.inv_buttons[INV.FLAME].info.img[0],
       this.chest_buttons[INV.LAVA_HEART] = Qs(68, 68, "", sprite[SPRITE.CHEST_LAVA_HEART], 3),
       this.chest_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART,
       this.inv_buttons[INV.LAVA_HEART] = Qs(60, 60, "", sprite[SPRITE.INV_LAVA_HEART], 3),
       this.inv_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART,
       this.inv_buttons[INV.LAVA_HEART].info.img[2] = this.inv_buttons[INV.LAVA_HEART].info.img[0],
       this.chest_buttons[INV.REIDITE] = Qs(68, 68, "", sprite[SPRITE.CHEST_REIDITE], 3),
       this.chest_buttons[INV.REIDITE].id = INV.REIDITE,
       this.inv_buttons[INV.REIDITE] = Qs(60, 60, "", sprite[SPRITE.INV_REIDITE], 3),
       this.inv_buttons[INV.REIDITE].id = INV.REIDITE,
       this.inv_buttons[INV.REIDITE].info.img[2] = this.inv_buttons[INV.REIDITE].info.img[0],
       this.chest_buttons[INV.REIDITE_SWORD] = Qs(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SWORD], 3),
       this.chest_buttons[INV.REIDITE_SWORD].id = INV.REIDITE_SWORD,
       this.inv_buttons[INV.REIDITE_SWORD] = Qs(60, 60, "", sprite[SPRITE.INV_REIDITE_SWORD], 3),
       this.inv_buttons[INV.REIDITE_SWORD].id = INV.REIDITE_SWORD,
       this.craft_buttons[CRAFT.REIDITE_SWORD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SWORD], 3),
       this.craft_buttons[CRAFT.REIDITE_SWORD].id = CRAFT.REIDITE_SWORD,
       this.chest_buttons[INV.DIAMOND_PROTECTION] = Qs(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_PROTECTION], 3),
       this.chest_buttons[INV.DIAMOND_PROTECTION].id = INV.DIAMOND_PROTECTION,
       this.inv_buttons[INV.DIAMOND_PROTECTION] = Qs(60, 60, "", sprite[SPRITE.INV_DIAMOND_PROTECTION], 3),
       this.inv_buttons[INV.DIAMOND_PROTECTION].id = INV.DIAMOND_PROTECTION,
       this.craft_buttons[CRAFT.DIAMOND_PROTECTION] = Qs(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_PROTECTION], 3),
       this.craft_buttons[CRAFT.DIAMOND_PROTECTION].id = CRAFT.DIAMOND_PROTECTION,
       this.chest_buttons[INV.AMETHYST_PROTECTION] = Qs(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_PROTECTION], 3),
       this.chest_buttons[INV.AMETHYST_PROTECTION].id = INV.AMETHYST_PROTECTION,
       this.inv_buttons[INV.AMETHYST_PROTECTION] = Qs(60, 60, "", sprite[SPRITE.INV_AMETHYST_PROTECTION], 3),
       this.inv_buttons[INV.AMETHYST_PROTECTION].id = INV.AMETHYST_PROTECTION,
       this.craft_buttons[CRAFT.AMETHYST_PROTECTION] = Qs(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_PROTECTION], 3),
       this.craft_buttons[CRAFT.AMETHYST_PROTECTION].id = CRAFT.AMETHYST_PROTECTION,
       this.chest_buttons[INV.REIDITE_PROTECTION] = Qs(68, 68, "", sprite[SPRITE.CHEST_REIDITE_PROTECTION], 3),
       this.chest_buttons[INV.REIDITE_PROTECTION].id = INV.REIDITE_PROTECTION,
       this.inv_buttons[INV.REIDITE_PROTECTION] = Qs(60, 60, "", sprite[SPRITE.INV_REIDITE_PROTECTION], 3),
       this.inv_buttons[INV.REIDITE_PROTECTION].id = INV.REIDITE_PROTECTION,
       this.craft_buttons[CRAFT.REIDITE_PROTECTION] = Qs(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_PROTECTION], 3),
       this.craft_buttons[CRAFT.REIDITE_PROTECTION].id = CRAFT.REIDITE_PROTECTION,
       this.chest_buttons[INV.LAVA_HELMET] = Qs(68, 68, "", sprite[SPRITE.CHEST_LAVA_HELMET], 3),
       this.chest_buttons[INV.LAVA_HELMET].id = INV.LAVA_HELMET,
       this.inv_buttons[INV.LAVA_HELMET] = Qs(60, 60, "", sprite[SPRITE.INV_LAVA_HELMET], 3),
       this.inv_buttons[INV.LAVA_HELMET].id = INV.LAVA_HELMET,
       this.craft_buttons[CRAFT.LAVA_HELMET] = Qs(60, 60, "", sprite[SPRITE.CRAFT_LAVA_HELMET], 3),
       this.craft_buttons[CRAFT.LAVA_HELMET].id = CRAFT.LAVA_HELMET,
       this.chest_buttons[INV.WITCH] = Qs(68, 68, "", sprite[SPRITE.CHEST_WITCH], 3),
       this.chest_buttons[INV.WITCH].id = INV.WITCH,
       this.inv_buttons[INV.WITCH] = Qs(60, 60, "", sprite[SPRITE.INV_WITCH], 3),
       this.inv_buttons[INV.WITCH].id = INV.WITCH,
       this.craft_buttons[CRAFT.WITCH] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WITCH], 3),
       this.craft_buttons[CRAFT.WITCH].id = CRAFT.WITCH,
       this.chest_buttons[INV.WAND1] = Qs(68, 68, "", sprite[SPRITE.CHEST_WAND1], 3),
       this.chest_buttons[INV.WAND1].id = INV.WAND1,
       this.inv_buttons[INV.WAND1] = Qs(60, 60, "", sprite[SPRITE.INV_WAND1], 3),
       this.inv_buttons[INV.WAND1].id = INV.WAND1,
       this.craft_buttons[CRAFT.WAND1] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WAND1], 3),
       this.craft_buttons[CRAFT.WAND1].id = CRAFT.WAND1,
       this.chest_buttons[INV.WAND2] = Qs(68, 68, "", sprite[SPRITE.CHEST_WAND2], 3),
       this.chest_buttons[INV.WAND2].id = INV.WAND2,
       this.inv_buttons[INV.WAND2] = Qs(60, 60, "", sprite[SPRITE.INV_WAND2], 3),
       this.inv_buttons[INV.WAND2].id = INV.WAND2,
       this.craft_buttons[CRAFT.WAND2] = Qs(60, 60, "", sprite[SPRITE.CRAFT_WAND2], 3),
       this.craft_buttons[CRAFT.WAND2].id = CRAFT.WAND2,
       this.chest_buttons[INV.NIMBUS] = Qs(68, 68, "", sprite[SPRITE.CHEST_NIMBUS], 3),
       this.chest_buttons[INV.NIMBUS].id = INV.NIMBUS,
       this.inv_buttons[INV.NIMBUS] = Qs(60, 60, "", sprite[SPRITE.INV_NIMBUS], 3),
       this.inv_buttons[INV.NIMBUS].id = INV.NIMBUS,
       this.craft_buttons[CRAFT.NIMBUS] = Qs(60, 60, "", sprite[SPRITE.CRAFT_NIMBUS], 3),
       this.craft_buttons[CRAFT.NIMBUS].id = CRAFT.NIMBUS,
       this.chest_buttons[INV.FIREFLY] = Qs(68, 68, "", sprite[SPRITE.CHEST_FIREFLY], 3),
       this.chest_buttons[INV.FIREFLY].id = INV.FIREFLY,
       this.inv_buttons[INV.FIREFLY] = Qs(60, 60, "", sprite[SPRITE.INV_FIREFLY], 3),
       this.inv_buttons[INV.FIREFLY].id = INV.FIREFLY,
       this.craft_buttons[CRAFT.FIREFLY] = Qs(60, 60, "", sprite[SPRITE.CRAFT_FIREFLY], 3),
       this.craft_buttons[CRAFT.FIREFLY].id = CRAFT.FIREFLY,
       this.chest_buttons[INV.REIDITE_SPEAR] = Qs(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SPEAR], 3),
       this.chest_buttons[INV.REIDITE_SPEAR].id = INV.REIDITE_SPEAR,
       this.inv_buttons[INV.REIDITE_SPEAR] = Qs(60, 60, "", sprite[SPRITE.INV_REIDITE_SPEAR], 3),
       this.inv_buttons[INV.REIDITE_SPEAR].id = INV.REIDITE_SPEAR,
       this.craft_buttons[CRAFT.REIDITE_SPEAR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SPEAR], 3),
       this.craft_buttons[CRAFT.REIDITE_SPEAR].id = CRAFT.REIDITE_SPEAR,
       this.chest_buttons[INV.REIDITE_HELMET] = Qs(68, 68, "", sprite[SPRITE.CHEST_REIDITE_HELMET], 3),
       this.chest_buttons[INV.REIDITE_HELMET].id = INV.REIDITE_HELMET,
       this.inv_buttons[INV.REIDITE_HELMET] = Qs(60, 60, "", sprite[SPRITE.INV_REIDITE_HELMET], 3),
       this.inv_buttons[INV.REIDITE_HELMET].id = INV.REIDITE_HELMET,
       this.craft_buttons[CRAFT.REIDITE_HELMET] = Qs(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_HELMET], 3),
       this.craft_buttons[CRAFT.REIDITE_HELMET].id = CRAFT.REIDITE_HELMET,
       this.chest_buttons[INV.LAVA_SPEAR] = Qs(68, 68, "", sprite[SPRITE.CHEST_LAVA_SPEAR], 3),
       this.chest_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR,
       this.inv_buttons[INV.LAVA_SPEAR] = Qs(60, 60, "", sprite[SPRITE.INV_LAVA_SPEAR], 3),
       this.inv_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR,
       this.craft_buttons[CRAFT.LAVA_SPEAR] = Qs(60, 60, "", sprite[SPRITE.CRAFT_LAVA_SPEAR], 3),
       this.craft_buttons[CRAFT.LAVA_SPEAR].id = CRAFT.LAVA_SPEAR,
       this.chest_buttons[INV.LAVA_SWORD] = Qs(68, 68, "", sprite[SPRITE.CHEST_LAVA_SWORD], 3),
       this.chest_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD,
       this.inv_buttons[INV.LAVA_SWORD] = Qs(60, 60, "", sprite[SPRITE.INV_LAVA_SWORD], 3),
       this.inv_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD,
       this.craft_buttons[CRAFT.LAVA_SWORD] = Qs(60, 60, "", sprite[SPRITE.CRAFT_LAVA_SWORD], 3),
       this.craft_buttons[CRAFT.LAVA_SWORD].id = CRAFT.LAVA_SWORD,
       this.chest_buttons[INV.LAVA_ORB] = Qs(68, 68, "", sprite[SPRITE.CHEST_LAVA_ORB], 3),
       this.chest_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB,
       this.inv_buttons[INV.LAVA_ORB] = Qs(60, 60, "", sprite[SPRITE.INV_LAVA_ORB], 3),
       this.inv_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB,
       this.chest_buttons[INV.EGG0] = Qs(68, 68, "", sprite[SPRITE.CHEST_EGG0], 3),
       this.chest_buttons[INV.EGG0].id = INV.EGG0,
       this.inv_buttons[INV.EGG0] = Qs(60, 60, "", sprite[SPRITE.INV_EGG0], 3),
       this.inv_buttons[INV.EGG0].id = INV.EGG0,
       this.chest_buttons[INV.EGG1] = Qs(68, 68, "", sprite[SPRITE.CHEST_EGG1], 3),
       this.chest_buttons[INV.EGG1].id = INV.EGG1,
       this.inv_buttons[INV.EGG1] = Qs(60, 60, "", sprite[SPRITE.INV_EGG1], 3),
       this.inv_buttons[INV.EGG1].id = INV.EGG1,
       this.chest_buttons[INV.EGG2] = Qs(68, 68, "", sprite[SPRITE.CHEST_EGG2], 3),
       this.chest_buttons[INV.EGG2].id = INV.EGG2,
       this.inv_buttons[INV.EGG2] = Qs(60, 60, "", sprite[SPRITE.INV_EGG2], 3),
       this.inv_buttons[INV.EGG2].id = INV.EGG2,
       this.chest_buttons[INV.EGG3] = Qs(68, 68, "", sprite[SPRITE.CHEST_EGG3], 3),
       this.chest_buttons[INV.EGG3].id = INV.EGG3,
       this.inv_buttons[INV.EGG3] = Qs(60, 60, "", sprite[SPRITE.INV_EGG3], 3),
       this.inv_buttons[INV.EGG3].id = INV.EGG3,
       this.chest_buttons[INV.EGG4] = Qs(68, 68, "", sprite[SPRITE.CHEST_EGG4], 3),
       this.chest_buttons[INV.EGG4].id = INV.EGG4,
       this.inv_buttons[INV.EGG4] = Qs(60, 60, "", sprite[SPRITE.INV_EGG4], 3),
       this.inv_buttons[INV.EGG4].id = INV.EGG4,
       this.update_craft_buttons = function() {
           for (var e = kI.craft.can_craft, i = 10, t = 10, r = 0; r < e.length; r++)
               r > 0 && !(r % 4) && (i += e[0].info.width + 10,
               t = 10),
               e[r].info.translate.x = i,
               e[r].info.translate.y = t,
               t += 10 + e[r].info.height
       }
       ,
       this.update_chest_buttons = function() {
           for (var e = Math.floor(Math.floor((3 + kI.craft.can_craft.length) / 4) * (10 + this.chest_buttons[0].info.img[0].width) + 35), i = 0; i < this.chest_buttons.length; i++)
               this.chest_buttons[i] && (this.chest_buttons[i].info.translate.x = e,
               this.chest_buttons[i].info.translate.y = 22);
           this.chest_lockpick.info.translate.x = e + 17,
           this.chest_lockpick.info.translate.y = 22 + sprite[SPRITE.CHEST_SLOT].height,
           this.chest_locked.info.translate.x = e + 17,
           this.chest_locked.info.translate.y = 30,
           this.chest_padlock.info.translate.x = e + 17,
           this.chest_padlock.info.translate.y = 22 + sprite[SPRITE.CHEST_SLOT].height
       }
       ,
       this.update_team_buttons = function() {
           for (var e = Math.floor((R - sprite[SPRITE.TEAM_BUTTON][0].width) / 2), i = 0; i < this.team_buttons.length; i++)
               this.team_buttons[i].button.info.translate.x = e,
               this.team_buttons[i].button.info.translate.y = -13
       }
       ,
       this.update_bread_oven_button = function() {
           var e = 12 + Math.floor(Math.floor((3 + kI.craft.can_craft.length) / 4) * (10 + this.bread_oven_wood_button.info.img[0].width) + 35);
           this.bread_oven_wood_button.info.translate.x = e,
           this.bread_oven_wood_button.info.translate.y = 33,
           this.bread_oven_flour_button.info.translate.x = this.bread_oven_wood_button.info.translate.x,
           this.bread_oven_flour_button.info.translate.y = 137,
           this.bread_oven_bread_button.info.translate.x = this.bread_oven_wood_button.info.translate.x,
           this.bread_oven_bread_button.info.translate.y = 240
       }
       ,
       this.update_extractor_button = function() {
           var e = 12 + Math.floor(Math.floor((3 + kI.craft.can_craft.length) / 4) * (10 + this.extractor_wood_button.info.img[0].width) + 35);
           this.extractor_wood_button.info.translate.x = e,
           this.extractor_wood_button.info.translate.y = 36,
           e += 83,
           this.extractor_stone_button.info.translate.x = e,
           this.extractor_stone_button.info.translate.y = 36,
           this.extractor_gold_button.info.translate.x = e,
           this.extractor_gold_button.info.translate.y = 36,
           this.extractor_diamond_button.info.translate.x = e,
           this.extractor_diamond_button.info.translate.y = 36,
           this.extractor_amethyst_button.info.translate.x = e,
           this.extractor_amethyst_button.info.translate.y = 36,
           this.extractor_reidite_button.info.translate.x = e,
           this.extractor_reidite_button.info.translate.y = 36
       }
       ,
       this.update_windmill_button = function() {
           var e = 12 + Math.floor(Math.floor((3 + kI.craft.can_craft.length) / 4) * (10 + this.windmill_wheat_button.info.img[0].width) + 35);
           this.windmill_wheat_button.info.translate.x = e,
           this.windmill_wheat_button.info.translate.y = 36,
           e += 83,
           this.windmill_flour_button.info.translate.x = e,
           this.windmill_flour_button.info.translate.y = 36
       }
       ,
       this.update_furnace_button = function() {
           var e = Math.floor(Math.floor((3 + kI.craft.can_craft.length) / 4) * (10 + this.furnace_button.info.img[0].width) + 35);
           this.furnace_button.info.translate.x = e,
           this.furnace_button.info.translate.y = 22
       }
       ,
       this.update_inv_buttons = function() {
           var e = kI.inv.can_select;
           if (e.length > 0)
               var i = Math.floor((R - (e[0].info.width + 5) * kI.inv.max) / 2);
           for (var t = 0; t < e.length; t++)
               e[t].info.translate.x = i + (e[t].info.width + 5) * t,
               e[t].info.translate.y = A - e[t].info.width - 10,
               this.plus_buttons[e[t].id].info.translate.x = e[t].info.translate.x + 13,
               this.plus_buttons[e[t].id].info.translate.y = e[t].info.translate.y - this.plus_buttons[e[t].id].info.img[0].height - 6
       }
       ;
       var T, I = 0, E = function() {
           if (t.update(),
           30 == ++I)
               return t.add_event_listener(),
               void t.update();
           window.setTimeout(E, 33)
       };
       this.quit = function(e) {
           kI.chat.open && kI.chat.quit(),
           kI.terminal.open && kI.terminal.quit(),
           document.getElementById("team_box").style.display = "none",
           t.market.style.display = "none",
           t.market.open = !1,
           t.sign.style.display = "none",
           t.sign.open = !1,
           document.getElementById("shop_starterkit").style.display = "none",
           document.getElementById("home_craft").style.display = "none",
           document.getElementById("recipe_craft").style.display = "none",
           t.craft_list.open = !1,
           document.getElementById("option_in_game").style.display = "none",
           t.options.open = !1,
           document.getElementById("sure_delete").style.display = "none",
           t.safe_delete.open = !1,
           document.getElementById("cancel_sure_delete").style.display = "none",
           t.safe_cancel.open = !1,
           document.getElementById("chronoquest").style.display = "none",
           t.quests.open = !1,
           T = e,
           t.remove_event_listener(),
           t.can.style.cursor = t.cursor0,
           JI.quit(),
           _ = -1,
           u(),
           TI()
       }
       ;
       var _ = -1
         , u = function() {
           if (t.update(),
           30 == ++_)
               return t.stop(),
               void T();
           window.setTimeout(u, 33)
       };
       this.is_run = !1,
       this.stop = function() {
           this.is_run = !1
       }
       ,
       this.run = function() {
           WI.change_ground(),
           t.is_run = !0,
           _ = -1,
           I = 0,
           E()
       }
       ,
       this.update = function() {
           this.leaderboard.translate.x = R - this.leaderboard.img.width - 10,
           this.leaderboard.translate.y = 5,
           UI.clock.translate.x = this.leaderboard.translate.x - sprite[SPRITE.CLOCK][0].width - 85,
           UI.clock.translate.y = 10,
           this.craft_list.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.RECIPE_BUTTON][0].width - 10,
           this.craft_list.button.info.translate.y = 10,
           this.quests.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.QUEST_BUTTON][0].width - 20,
           this.quests.button.info.translate.y = this.craft_list.button.info.translate.y + sprite[SPRITE.RECIPE_BUTTON][0].height + 5,
           this.options.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width - 20,
           this.options.button.info.translate.y = this.quests.button.info.translate.y + sprite[SPRITE.OPTION_BUTTON][0].height + 18,
           this.audio.button_on.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width - 20,
           this.audio.button_on.info.translate.y = this.options.button.info.translate.y + sprite[SPRITE.SOUND_BUTTON_OFF][0].height,
           this.audio.button_off.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width - 20,
           this.audio.button_off.info.translate.y = this.options.button.info.translate.y + sprite[SPRITE.SOUND_BUTTON_OFF][0].height,
           this.market.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.MARKET_BUTTON][0].width - 20,
           this.market.button.info.translate.y = this.audio.button_on.info.translate.y + sprite[SPRITE.MARKET_BUTTON][0].height,
           kI.auto_feed.translate.x = this.leaderboard.translate.x - 63 - 85,
           kI.auto_feed.translate.y = 100,
           kI.show_spectators.translate.x = this.leaderboard.translate.x - sprite[SPRITE.SHOW_SPECTATORS].width - 85,
           kI.show_spectators.translate.y = kI.auto_feed.translate.y + 10 + sprite[SPRITE.AUTO_FEED].height,
           this.minimap.translate.y = A - 3 - 193,
           this.minimap.translate.x = R - 3 - 193,
           this.gauges.translate.x = 5,
           this.gauges.translate.y = A - this.gauges.img.height - 5,
           this.shop.button.info.translate.x = d - 45.5,
           this.shop.button.info.translate.y = 50,
           this.update_craft_buttons(),
           this.update_inv_buttons(),
           this.update_chest_buttons(),
           this.update_furnace_button(),
           this.update_windmill_button(),
           this.update_extractor_button(),
           this.update_bread_oven_button(),
           this.update_team_buttons(),
           this.sign.update_button(),
           ao(),
           kI.chat.update(),
           kI.terminal.update(),
           this.team_box.update(),
           this.craft_list.home.update(),
           this.craft_list.list.update(),
           this.safe_delete.update(),
           this.safe_cancel.update(),
           this.quests.update(),
           this.shop.update(),
           this.options.update(),
           this.market.update(),
           this.sign.update();
           var e = 0;
           if (30 != I)
               e = 1500 / (I + 1) - 50;
           if (-1 != _)
               e = -(1500 / (30 - _ + 1) - 48);
           this.shop.button.info.translate.y -= e > 0 ? e : -e,
           this.leaderboard.translate.y -= e > 0 ? e : -e,
           kI.auto_feed.translate.y -= e > 0 ? e : -e,
           kI.show_spectators.translate.y -= e > 0 ? e : -e,
           this.craft_list.button.info.translate.y -= e > 0 ? e : -e,
           this.quests.button.info.translate.y -= e > 0 ? e : -e,
           this.options.button.info.translate.y -= e > 0 ? e : -e,
           this.market.button.info.translate.y -= e > 0 ? e : -e,
           this.audio.button_on.info.translate.y -= e > 0 ? e : -e,
           this.audio.button_off.info.translate.y -= e > 0 ? e : -e,
           UI.clock.translate.y -= e > 0 ? e : -e,
           this.gauges.translate.y -= e < 0 ? e : -e,
           this.minimap.translate.y -= e < 0 ? e : -e
       }
       ,
       this.draw_UI = function() {
           kI.ghost.enabled || !this.show_ui || kI.zombie || go(),
           Co(),
           bo(),
           this.show_ui && (Eo(),
           1 === this.show_recipe_book && this.craft_list.button.draw(i),
           UI.mode !== ET.MODE_ZOMBIES && UI.mode !== ET.MODE_LEGACY && UI.mode !== ET.MODE_BR && 1 === this.show_quest && this.quests.button.draw(i),
           this.options.button.draw(i),
           1 === this.show_market && this.market.button.draw(i),
           JI.run ? this.audio.button_on.draw(i) : this.audio.button_off.draw(i),
           ho(),
           uo(),
           this.gauges.draw(),
           No(),
           lo(),
           So(),
           Ro(),
           Oo(),
           so(),
           no(),
           $n(),
           ro(),
           to(),
           io(),
           eo(),
           ao(),
           jn()),
           kI.ghost.enabled && oo(),
           To(),
           this.show_ui && 1 === this.show_clock && Ao(),
           kI.welcome.draw(),
           kI.alert.draw("#FFF", "#000"),
           this.show_ui && (kI.ghost.draw(),
           kI.shop.draw(),
           kI.inv.drag.draw(qI.pos.x, qI.pos.y)),
           Io()
       }
       ,
       this.update_scene = function() {
           kI.cam.update(),
           kI.gauges.update(),
           !kI.reconnect.enabled && kI.alive && (kI.control.update(),
           kI.auto_feed.update()),
           UI.update(),
           this.quests.update_chrono()
       }
       ,
       this.draw_scene = function() {
           Ms()
       }
       ,
       this.update_connection = function() {
           try {
               WI.check_state(),
               WI.check_pong(),
               WI.try_ping(),
               WI.update_cam()
           } catch (e) {
               console.log("[Famishs/Connection] Connection is lost , restoring session"),
               WI.lost()
           }
       }
       ,
       this.draw = function() {
           !kI.reconnect.enabled && kI.alive && this.update_connection(),
           JI.scheduler(),
           this.update_scene(),
           this.draw_scene(),
           this.draw_UI()
       }
       ,
       this.trigger_keyup = function(e) {
           if (kI.chat.open && 27 === e.keyCode)
               kI.chat.quit();
           else if (kI.terminal.open && 27 === e.keyCode)
               kI.terminal.quit();
           else if (kI.chat.open || kI.terminal.open || 79 != e.keyCode || -1 != _) {
               if (13 == e.keyCode && -1 == _)
                   kI.terminal.open ? kI.terminal._send() : kI.chat.run();
               else if (!kI.chat.open && !kI.terminal.open)
                   if (82 === e.keyCode)
                       kI.auto_feed.invert();
                   else if (80 !== e.keyCode || UI.mode !== ET.MODE_HUNGER_GAMES || kI.spectator)
                       if (e.keyCode >= 49 && e.keyCode <= 57) {
                           if (kI.craft.id < 0) {
                               var i = e.keyCode - 49
                                 , t = kI.inv.can_select[i];
                               t && WI.select_inv(t.id, i)
                           }
                       } else
                           89 == e.keyCode ? kI.bigmap = !kI.bigmap : 71 == e.keyCode && kI.craft.change_mode();
                   else
                       kI.show_spectators.invert()
           } else
               kI.terminal._open();
           XI.up(e)
       }
       ,
       this.trigger_keydown = function(e) {
           XI.down(e),
           8 != e.keyCode || kI.chat.open || kI.terminal.open || e.preventDefault()
       }
       ,
       this.trigger_mousedown = function(e) {
           qI.pos = js(t.can, e);
           var i = !1;
           kI.craft.preview < 0 && t.minimap.focus(qI.pos);
           var r = kI.chest;
           kI.craft.id < 0 && r.id >= 0 && (kI.chest.lock && kI.chest.pid !== kI.id || (i |= t.chest_buttons[kI.chest.id].trigger(t.can, qI.pos, ks)));
           var n = kI.windmill;
           n.open && n.amount_flour > 0 && (i |= t.windmill_flour_button.trigger(t.can, qI.pos, ks));
           var o = kI.extractor;
           o.open && o.amount_mineral > 0 && (i |= t.extractor_stone_button.trigger(t.can, qI.pos, ks),
           i |= t.extractor_gold_button.trigger(t.can, qI.pos, ks),
           i |= t.extractor_diamond_button.trigger(t.can, qI.pos, ks),
           i |= t.extractor_amethyst_button.trigger(t.can, qI.pos, ks),
           i |= t.extractor_reidite_button.trigger(t.can, qI.pos, ks));
           var a = kI.bread_oven;
           if (a.open && a.amount_bread > 0 && (i |= t.bread_oven_bread_button.trigger(t.can, qI.pos, ks)),
           kI.sign.open && (i |= t.sign.button.trigger(t.can, qI.pos, ks)),
           kI.chest.lock || kI.chest.padlock && (i |= t.chest_padlock.trigger(t.can, qI.pos, ks)),
           kI.chest.lockpick && (i |= t.chest_lockpick.trigger(t.can, qI.pos, ks)),
           kI.craft.id < 0 && !t.craft_list.open && !t.safe_delete.open && !t.safe_cancel.open && !t.quests.open && !t.options.open && !t.market.open)
               for (var s = kI.inv.can_select, T = 0; T < s.length; T++) {
                   var I = s[T].trigger(t.can, qI.pos, ks);
                   i |= I,
                   I && kI.inv.drag.start(T, qI.pos),
                   (r.open && (r.id < 0 || r.id == s[T].id) || kI.furnace.open && s[T].id === INV.WOOD || kI.well.open && s[T].id === INV.BUCKET_FULL || kI.bread_oven.open && (s[T].id === INV.WOOD || s[T].id === INV.FLOUR) || kI.windmill.open && s[T].id === INV.WILD_WHEAT || kI.extractor.open && s[T].id === INV.WOOD) && (i |= t.plus_buttons[s[T].id].trigger(t.can, qI.pos, ks))
               }
           if (kI.resurrection.open && (i |= t.resurrection.trigger(t.can, qI.pos, ks)),
           -1 != t.team_buttons_id) {
               if (i |= t.team_buttons[t.team_buttons_id].button.trigger(t.can, qI.pos, ks))
                   var E = !0
           } else
               E = !1;
           if (!(!(kI.craft.id < 0 && kI.craft.preview < 0) || E || t.craft_list.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.market.open || kI.zombie))
               for (s = kI.craft.can_craft,
               T = 0; T < s.length; T++)
                   i |= s[T].trigger(t.can, qI.pos, ks);
           !(kI.craft.id < 0 && kI.craft.preview < 0 && kI.shop.open) || t.craft_list.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.quests.open || t.market.open || (i |= t.shop.button.trigger(t.can, qI.pos, ks)),
           !(kI.craft.preview < 0) || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.quests.open || t.market.open || (i |= t.craft_list.button.trigger(t.can, qI.pos, ks)),
           !(kI.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.market.open || (i |= t.options.button.trigger(t.can, qI.pos, ks)),
           !(kI.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.options.open || (i |= t.market.button.trigger(t.can, qI.pos, ks)),
           !(kI.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.options.open || t.market.open || (JI.run ? i |= t.audio.button_on.trigger(t.can, qI.pos, ks) : i |= t.audio.button_off.trigger(t.can, qI.pos, ks)),
           !(kI.craft.preview < 0) || t.craft_list.open || t.market.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || UI.mode === ET.MODE_ZOMBIES || UI.mode === ET.MODE_LEGACY || UI.mode === ET.MODE_BR || (i |= t.quests.button.trigger(t.can, qI.pos, ks)),
           i || t.craft_list.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.quests.open || t.market.open || t.sign.open || (kI.craft.preview >= 0 ? WI.send_build() : E || qI.down())
       }
       ,
       this.trigger_mouseup = function(e) {
           if (qI.pos = js(t.can, e),
           qI.up(),
           !kI.inv.drag.release()) {
               var i = kI.chest
                 , r = kI.furnace
                 , n = kI.well
                 , o = kI.windmill
                 , a = kI.extractor
                 , s = kI.bread_oven;
               if (kI.control.attack && (kI.control.attack = 0,
               WI.stop_attack()),
               -1 != t.team_buttons_id) {
                   var T = t.team_buttons[t.team_buttons_id].button.trigger(t.can, qI.pos, Fs)
                     , I = document.getElementById("team_box").style;
                   if (T && "inline-block" == I.display)
                       return void (I.display = "none");
                   T && t.team_buttons[t.team_buttons_id].action()
               }
               if (kI.craft.id < 0 && i.id >= 0 && !t.safe_delete.open)
                   if (!kI.chest.lock || kI.chest.pid === kI.id)
                       (T = t.chest_buttons[kI.chest.id].trigger(t.can, qI.pos, Fs)) && WI.take_chest(i);
               if ((o = kI.windmill).open && o.amount_flour > 0 && !t.safe_delete.open)
                   (T = t.windmill_flour_button.trigger(t.can, qI.pos, Fs)) && WI.take_flour(o);
               if ((a = kI.extractor).open && a.amount_mineral > 0 && !t.safe_delete.open)
                   switch (a.type) {
                   case hT.EXTRACTOR_MACHINE_STONE:
                       (T = t.extractor_stone_button.trigger(t.can, qI.pos, Fs)) && WI.take_extractor(a);
                       break;
                   case hT.EXTRACTOR_MACHINE_GOLD:
                       (T = t.extractor_gold_button.trigger(t.can, qI.pos, Fs)) && WI.take_extractor(a);
                       break;
                   case hT.EXTRACTOR_MACHINE_DIAMOND:
                       (T = t.extractor_diamond_button.trigger(t.can, qI.pos, Fs)) && WI.take_extractor(a);
                       break;
                   case hT.EXTRACTOR_MACHINE_AMETHYST:
                       (T = t.extractor_amethyst_button.trigger(t.can, qI.pos, Fs)) && WI.take_extractor(a);
                       break;
                   case hT.EXTRACTOR_MACHINE_REIDITE:
                       (T = t.extractor_reidite_button.trigger(t.can, qI.pos, Fs)) && WI.take_extractor(a)
                   }
               if ((s = kI.bread_oven).open && s.amount_bread > 0 && !t.safe_delete.open)
                   (T = t.bread_oven_bread_button.trigger(t.can, qI.pos, Fs)) && WI.take_bread(s);
               if (kI.sign.open && !t.safe_delete.open)
                   (T = t.sign.button.trigger(t.can, qI.pos, Fs)) && t.sign.select();
               if (kI.chest.lock || t.safe_delete.open || kI.chest.padlock && (T = t.chest_padlock.trigger(t.can, qI.pos, Fs)) && WI.lock_chest(i),
               kI.chest.lockpick && !t.safe_delete.open && (T = t.chest_lockpick.trigger(t.can, qI.pos, Fs)) && WI.unlock_chest(i),
               kI.resurrection.open)
                   (T = t.resurrection.trigger(t.can, qI.pos, Fs)) && WI.resurrection();
               if (kI.craft.id < 0 && !kI.ghost.enabled && !t.safe_delete.open)
                   for (var E = kI.inv.can_select, _ = 0; _ < E.length; _++) {
                       if (T = E[_].trigger(t.can, qI.pos, Fs))
                           1 != e.which || e.shiftKey ? (1 == e.which && e.shiftKey || 3 == e.which) && kI.craft.preview < 0 && t.safe_delete.del(E[_].id) : WI.select_inv(E[_].id, _);
                       else if (i.open && (i.id < 0 || i.id === E[_].id))
                           (T = t.plus_buttons[E[_].id].trigger(t.can, qI.pos, Fs)) && kI.craft.preview < 0 && WI.give_item(i, E[_].id, e.shiftKey ? 10 : 1);
                       else if (n.open && E[_].id === INV.BUCKET_FULL) {
                           (T = t.plus_buttons[E[_].id].trigger(t.can, qI.pos, Fs)) && kI.craft.preview < 0 && WI.give_well(n)
                       } else if (r.open && E[_].id === INV.WOOD) {
                           (T = t.plus_buttons[E[_].id].trigger(t.can, qI.pos, Fs)) && kI.craft.preview < 0 && WI.give_wood(r, e.shiftKey ? 10 : 1)
                       } else if (o.open && E[_].id === INV.WILD_WHEAT) {
                           (T = t.plus_buttons[E[_].id].trigger(t.can, qI.pos, Fs)) && kI.craft.preview < 0 && WI.give_wheat(o, e.shiftKey ? 10 : 1)
                       } else if (a.open && E[_].id === INV.WOOD) {
                           (T = t.plus_buttons[E[_].id].trigger(t.can, qI.pos, Fs)) && kI.craft.preview < 0 && WI.give_wood_extractor(a, e.shiftKey ? 10 : 1)
                       } else if (s.open && (E[_].id === INV.WOOD || E[_].id === INV.FLOUR)) {
                           (T = t.plus_buttons[E[_].id].trigger(t.can, qI.pos, Fs)) && kI.craft.preview < 0 && (E[_].id === INV.WOOD ? WI.give_bread_oven(s, e.shiftKey ? 10 : 1, 0) : WI.give_bread_oven(s, 0, e.shiftKey ? 10 : 1))
                       }
                   }
               if (kI.craft.id < 0 && kI.craft.preview < 0 && !kI.ghost.enabled && !t.safe_delete.open && !kI.zombie)
                   for (E = kI.craft.can_craft,
                   _ = 0; _ < E.length; _++) {
                       (T = E[_].trigger(t.can, qI.pos, Fs)) && (ret = WI.select_craft(E[_].id))
                   }
               if (kI.craft.id < 0 && kI.craft.preview < 0 && kI.shop.open && !t.market.open && !t.craft_list.open && !t.safe_delete.open && !t.options.open && !t.safe_cancel.open && !t.quests.open)
                   (T = t.shop.button.trigger(t.can, qI.pos, Us)) && xI.shop.select();
               if (kI.craft.preview < 0 && !t.craft_list.open && !t.safe_delete.open && !t.market.open && !t.safe_cancel.open && !t.quests.open && !t.options.open)
                   if (JI.run)
                       (T = t.audio.button_on.trigger(t.can, qI.pos, Fs)) && JI.select();
                   else
                       (T = t.audio.button_off.trigger(t.can, qI.pos, Fs)) && JI.select();
               if (kI.craft.preview < 0 && !t.craft_list.open && !t.safe_delete.open && !t.safe_cancel.open && !t.quests.open && !t.market.open)
                   (T = t.options.button.trigger(t.can, qI.pos, Fs)) && t.options.select_options();
               if (kI.craft.preview < 0 && !t.craft_list.open && !t.safe_delete.open && !t.safe_cancel.open && !t.quests.open && !t.options.open && 1 === t.show_market)
                   (T = t.market.button.trigger(t.can, qI.pos, Fs)) && t.market.select();
               if (kI.craft.preview < 0 && !t.safe_delete.open && !t.market.open && !t.options.open && !t.safe_cancel.open && !t.quests.open && 1 === t.show_recipe_book)
                   (T = t.craft_list.button.trigger(t.can, qI.pos, Fs)) && t.craft_list.select_book();
               if (kI.craft.preview < 0 && !t.craft_list.open && !t.safe_delete.open && !t.options.open && !t.safe_cancel.open && !t.market.open && UI.mode !== ET.MODE_ZOMBIES && UI.mode !== ET.MODE_LEGACY && UI.mode !== ET.MODE_BR && 1 === t.show_quest)
                   (T = t.quests.button.trigger(t.can, qI.pos, Fs)) && t.quests.select();
               kI.craft.crafting && 3 == e.which && t.safe_cancel.del()
           }
       }
       ,
       this.current_cursor = !1,
       this.trigger_mousemove = function(i) {
           qI.pos = js(t.can, i);
           var r = !1;
           xI.info_box.display = 0,
           kI.inv.drag.move(qI.pos),
           -1 != t.team_buttons_id && (r |= t.team_buttons[t.team_buttons_id].button.trigger(t.can, qI.pos, Us));
           var n = kI.windmill;
           n.open && n.amount_flour > 0 && (r |= t.windmill_flour_button.trigger(t.can, qI.pos, Us));
           var o = kI.extractor;
           o.open && o.amount_mineral > 0 && (r |= t.extractor_stone_button.trigger(t.can, qI.pos, Us),
           r |= t.extractor_gold_button.trigger(t.can, qI.pos, Us),
           r |= t.extractor_diamond_button.trigger(t.can, qI.pos, Us),
           r |= t.extractor_amethyst_button.trigger(t.can, qI.pos, Us),
           r |= t.extractor_reidite_button.trigger(t.can, qI.pos, Us));
           var a = kI.bread_oven;
           a.open && a.amount_bread > 0 && (r |= t.bread_oven_bread_button.trigger(t.can, qI.pos, Us)),
           kI.sign.open && (r |= t.sign.button.trigger(t.can, qI.pos, Us));
           var s = kI.chest;
           if (kI.craft.id < 0 && s.id >= 0 && !kI.ghost.enabled && (kI.chest.lock && kI.chest.pid !== kI.id || (r |= t.chest_buttons[s.id].trigger(t.can, qI.pos, Us))),
           kI.resurrection.open && (r |= t.resurrection.trigger(t.can, qI.pos, Us)),
           kI.chest.lock || kI.ghost.enabled || kI.chest.padlock && (r |= t.chest_padlock.trigger(t.can, qI.pos, Us)),
           kI.chest.lockpick && !kI.ghost.enabled && (r |= t.chest_lockpick.trigger(t.can, qI.pos, Us)),
           kI.craft.id < 0 && !kI.ghost.enabled)
               for (var T = kI.inv.can_select, I = 0; I < T.length; I++) {
                   var E = T[I].trigger(t.can, qI.pos, Us);
                   r |= xI.info_box.trigger(E, T[I], 0),
                   (s.open && (s.id < 0 || s.id == T[I].id) || kI.furnace.open && T[I].id == INV.WOOD || kI.well.open && T[I].id === INV.BUCKET_FULL || kI.bread_oven.open && (T[I].id == INV.WOOD || T[I].id == INV.FLOUR) || kI.windmill.open && T[I].id == INV.WILD_WHEAT || kI.extractor.open && T[I].id == INV.WOOD) && (r |= t.plus_buttons[T[I].id].trigger(t.can, qI.pos, Us))
               }
           if (kI.craft.id < 0 && kI.craft.preview < 0 && !kI.ghost.enabled && !kI.zombie)
               for (T = kI.craft.can_craft,
               I = 0; I < T.length; I++) {
                   E = !1;
                   E = T[I].trigger(t.can, qI.pos, Us),
                   r |= xI.info_box.trigger(E, T[I], 1)
               }
           !(kI.craft.id < 0 && kI.craft.preview < 0 && kI.shop.open) || t.craft_list.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.quests.open || t.market.open || (r |= t.shop.button.trigger(t.can, qI.pos, Us)),
           !(kI.craft.preview < 0) || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.quests.open || t.market.open || 1 !== t.show_recipe_book || (r |= t.craft_list.button.trigger(t.can, qI.pos, Us)),
           !(kI.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.market.open || (r |= t.options.button.trigger(t.can, qI.pos, Us)),
           !(kI.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.options.open || 1 !== t.show_market || (r |= t.market.button.trigger(t.can, qI.pos, Us)),
           !(kI.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.options.open || t.market.open || (JI.run ? r |= t.audio.button_on.trigger(t.can, qI.pos, Us) : r |= t.audio.button_off.trigger(t.can, qI.pos, Us)),
           !(kI.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.market.open || UI.mode === ET.MODE_ZOMBIES || UI.mode === ET.MODE_LEGACY || UI.mode === ET.MODE_B || 1 !== t.show_quest || (r |= t.quests.button.trigger(t.can, qI.pos, Us)),
           t.current_cursor !== r && (t.current_cursor = r,
           e.style.cursor = r ? t.cursor1 : t.cursor0)
       }
       ,
       this.add_event_listener = function() {
           window.addEventListener("mousedown", this.trigger_mousedown, !1),
           window.addEventListener("mouseup", this.trigger_mouseup, !1),
           window.addEventListener("mousemove", this.trigger_mousemove, !1),
           window.addEventListener("keyup", this.trigger_keyup, !1),
           window.addEventListener("keydown", this.trigger_keydown, !1)
       }
       ,
       this.remove_event_listener = function() {
           window.removeEventListener("mousedown", this.trigger_mousedown, !1),
           window.removeEventListener("mouseup", this.trigger_mouseup, !1),
           window.removeEventListener("mousemove", this.trigger_mousemove, !1),
           window.removeEventListener("keyup", this.trigger_keyup, !1),
           window.removeEventListener("keydown", this.trigger_keydown, !1)
       }
   }
   function ZT() {
       s.open_in_new_box("https://twitter.com/intent/tweet?text=I%20survived%20" + kI.day + "%20days%20with%20" + kI.die.score + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io")
   }
   function QT() {
       s.open_in_new_box("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0")
   }
   function $T(e, i) {
       this.can = e,
       this.ctx = i;
       var t = this;
       this.enable_interface = !1,
       this.sb = {
           id: document.getElementById("scoreboard"),
           style: document.getElementById("scoreboard").style,
           height: 0,
           translate: {
               x: 0,
               y: 0
           },
           update: function() {
               this.style.left = this.translate.x + "px",
               this.style.top = this.translate.y + "px"
           },
           init: function() {
               this.id.innerHTML = '<div style="position:absolute;"> <img src="./img/scoreboard.png"style="width:250px;transform:translate(125px, -80px);"> </img> </div><div><div id="whokilled">' + kI.die.howdie + '</div></div><div class="deco" style="margin-top:35px;"></div><div class="deco"></div><div><div class="stats"> ' + q[TEXT.DAYS_SURVIVED] + " : " + kI.day + '</div><div class="stats"> ' + q[TEXT.KILL] + " : " + kI.die.kill + '</div></div><div id="flexDisplay"><div id="score"> ' + q[TEXT.SCORE] + " : " + kI.die.score + '</div><div id="breadWon"><span id="breadWonInner">0</span><img src="./img/golden-bread.png" style="width:50px;margin-left:-25px;transform: translate(37px, 8px);"></img></div></div><div><div id="points"> ' + kI.die.bank + " " + q[TEXT.POINTS] + '</div></div><div id="shop_points">' + q[TEXT.KIT_NEXT] + '</div><div style="display:inline-block;"><div class="social" id="tttwitter">' + q[TEXT.TWITTER] + '</div><div class="social" id="fffacebook">' + q[TEXT.FACEBOOK] + '</div></div><div id="bbback">' + q[TEXT.BACK_TO_THE_GAME] + "</div>",
               this.style.display = "inline-block",
               document.getElementById("tttwitter").addEventListener("mouseup", ZT, !1),
               document.getElementById("bbback").addEventListener("mouseup", (function() {
                   FI.quit(YI.run)
               }
               ), !1),
               document.getElementById("fffacebook").addEventListener("mouseup", QT, !1),
               this.height = Math.floor(this.id.clientHeight / 2),
               HI()
           }
       };
       var r, n = 0, o = function() {
           t.update(),
           30 != ++n ? window.setTimeout(o, 33) : t.update()
       };
       this.quit = function(e) {
           !0 === t.enable_interface && (t.enable_interface = !1,
           r = e,
           a = -1,
           s(),
           TI())
       }
       ;
       var a = -1
         , s = function() {
           if (t.update(),
           30 == ++a)
               return t.stop(),
               t.sb.style.display = "none",
               void r();
           window.setTimeout(s, 33)
       };
       this.is_run = !1,
       this.stop = function() {
           this.is_run = !1
       }
       ,
       this.run = function() {
           EI(),
           document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[KI.time],
           t.sb.init(),
           YI.trevda.style.display = "inline-block",
           t.is_run = !0,
           t.enable_interface = !0,
           a = -1,
           n = 0,
           o()
       }
       ,
       this.update = function() {
           if (this.sb.translate.x = Math.floor(d - 275),
           this.sb.translate.y = Math.floor(S - this.sb.height - 28),
           YI.trevda.translate.x = this.sb.translate.x - 350,
           YI.trevda.translate.y = this.sb.translate.y + 0,
           YI.trevda.update(),
           30 != n || -1 != a) {
               var e = 0;
               if (30 != n)
                   e = 1500 / (n + 1) - 50;
               if (-1 != a)
                   e = -(1750 / (30 - a + 1) - 48);
               this.sb.translate.y -= e
           }
           this.sb.update()
       }
       ,
       this.draw = function() {
           Jn(),
           kI.alert.draw("#FFF", "#000")
       }
   }
   var eI = {
       AMB: 1,
       FX: 1
   }
     , iI = {
       SEA_DELAY: 12,
       SEA_FADE: 5e3,
       FOREST_DELAY: 12,
       FOREST_FADE: 5e3,
       SNOW_DELAY: 12,
       SNOW_FADE: 5e3,
       TRANSITION: 3e3,
       DISABLE_EFFECT: 46e4,
       PLAYERS: 8,
       ITEMS: 6,
       HAND: 1,
       MISC: 2,
       SHOVEL: 3
   }
     , tI = [];
   tI[-1] = iI.HAND,
   tI[INV.BOOK] = iI.HAND,
   tI[INV.WATERING_CAN_FULL] = iI.HAND,
   tI[INV.WRENCH] = iI.MISC,
   tI[INV.PICK_WOOD] = iI.MISC,
   tI[INV.PICK] = iI.MISC,
   tI[INV.PICK_GOLD] = iI.MISC,
   tI[INV.PICK_DIAMOND] = iI.MISC,
   tI[INV.PICK_AMETHYST] = iI.MISC,
   tI[INV.PICK_REIDITE] = iI.MISC,
   tI[INV.PIRATE_SWORD] = iI.MISC,
   tI[INV.SWORD_WOOD] = iI.MISC,
   tI[INV.SWORD] = iI.MISC,
   tI[INV.LAVA_SWORD] = iI.MISC,
   tI[INV.LAVA_SPEAR] = iI.MISC,
   tI[INV.SWORD_GOLD] = iI.MISC,
   tI[INV.SWORD_DIAMOND] = iI.MISC,
   tI[INV.SWORD_AMETHYST] = iI.MISC,
   tI[INV.SWORD_REIDITE] = iI.MISC,
   tI[INV.CRAB_SPEAR] = iI.MISC,
   tI[INV.WOOD_SPEAR] = iI.MISC,
   tI[INV.SPEAR] = iI.MISC,
   tI[INV.GOLD_SPEAR] = iI.MISC,
   tI[INV.DIAMOND_SPEAR] = iI.MISC,
   tI[INV.DRAGON_SPEAR] = iI.MISC,
   tI[INV.AMETHYST_SPEAR] = iI.MISC,
   tI[INV.AMETHYST_REIDITE] = iI.MISC,
   tI[INV.HAMMER] = iI.MISC,
   tI[INV.HAMMER_GOLD] = iI.MISC,
   tI[INV.HAMMER_DIAMOND] = iI.MISC,
   tI[INV.HAMMER_AMETHYST] = iI.MISC,
   tI[INV.HAMMER_REIDITE] = iI.MISC,
   tI[INV.SUPER_HAMMER] = iI.MISC,
   tI[INV.DRAGON_SWORD] = iI.MISC,
   tI[INV.PITCHFORK2] = iI.MISC,
   tI[INV.PITCHFORK] = iI.MISC,
   tI[INV.SHOVEL] = iI.SHOVEL,
   tI[INV.SHOVEL_GOLD] = iI.SHOVEL,
   tI[INV.SHOVEL_DIAMOND] = iI.SHOVEL,
   tI[INV.SHOVEL_AMETHYST] = iI.SHOVEL,
   SOUND_NATURE = [],
   SOUND_NATURE[0] = 0,
   SOUND_NATURE[1] = 1,
   SOUND_NATURE[2] = 1,
   SOUND_NATURE[3] = 1,
   SOUND_NATURE[4] = 0,
   SOUND_NATURE[5] = 0,
   SOUND_NATURE[6] = 0,
   SOUND_NATURE[7] = 0,
   SOUND_NATURE[8] = 0,
   SOUND_NATURE[9] = 0,
   SOUND_NATURE[10] = 1,
   SOUND_NATURE[11] = 1,
   SOUND_NATURE[12] = 1,
   SOUND_NATURE[13] = 1,
   SOUND_NATURE[14] = 1,
   SOUND_NATURE[15] = 1,
   SOUND_NATURE[16] = 0,
   SOUND_NATURE[17] = 0,
   SOUND_NATURE[18] = 0,
   SOUND_NATURE[19] = 0,
   SOUND_NATURE[20] = 0,
   SOUND_NATURE[21] = 0,
   SOUND_NATURE[22] = 0,
   SOUND_NATURE[23] = 1,
   SOUND_NATURE[24] = 1,
   SOUND_NATURE[25] = 1,
   SOUND_NATURE[26] = 1,
   SOUND_NATURE[27] = 1,
   SOUND_NATURE[28] = 1,
   SOUND_NATURE[29] = 1,
   SOUND_NATURE[30] = 1,
   SOUND_NATURE[31] = 1,
   SOUND_NATURE[32] = 1,
   SOUND_NATURE[33] = 1,
   SOUND_NATURE[34] = 1,
   SOUND_NATURE[35] = 1,
   SOUND_NATURE[36] = 1,
   SOUND_NATURE[37] = 1,
   SOUND_NATURE[38] = 1,
   SOUND_NATURE[40] = 0,
   SOUND_NATURE[41] = 0,
   SOUND_NATURE[42] = 0,
   SOUND_NATURE[50] = 1,
   SOUND_NATURE[51] = 1,
   SOUND_NATURE[52] = 1,
   SOUND_NATURE[55] = 0,
   SOUND_NATURE[56] = 0,
   SOUND_NATURE[57] = 0,
   SOUND_NATURE[58] = 0,
   SOUND_BUILD = [],
   SOUND_BUILD[hT.PLANT] = 0,
   SOUND_BUILD[hT.FIRE] = 0,
   SOUND_BUILD[hT.TOTEM] = 0,
   SOUND_BUILD[hT.BIG_FIRE] = 0,
   SOUND_BUILD[hT.SEED] = -1,
   SOUND_BUILD[hT.WHEAT_SEED] = -1,
   SOUND_BUILD[hT.WORKBENCH] = 0,
   SOUND_BUILD[hT.WALL] = 0,
   SOUND_BUILD[hT.BRIDGE] = 0,
   SOUND_BUILD[hT.PLOT] = 0,
   SOUND_BUILD[hT.WINDMILL] = 1,
   SOUND_BUILD[hT.WELL] = 1,
   SOUND_BUILD[hT.STONE_WALL] = 1,
   SOUND_BUILD[hT.GOLD_WALL] = 1,
   SOUND_BUILD[hT.DIAMOND_WALL] = 1,
   SOUND_BUILD[hT.AMETHYST_WALL] = 1,
   SOUND_BUILD[hT.REIDITE_WALL] = 1,
   SOUND_BUILD[hT.SPIKE] = 0,
   SOUND_BUILD[hT.STONE_SPIKE] = 1,
   SOUND_BUILD[hT.GOLD_SPIKE] = 1,
   SOUND_BUILD[hT.DIAMOND_SPIKE] = 1,
   SOUND_BUILD[hT.AMETHYST_SPIKE] = 1,
   SOUND_BUILD[hT.REIDITE_SPIKE] = 1,
   SOUND_BUILD[hT.WOOD_DOOR] = 0,
   SOUND_BUILD[hT.STONE_DOOR] = 1,
   SOUND_BUILD[hT.GOLD_DOOR] = 1,
   SOUND_BUILD[hT.DIAMOND_DOOR] = 1,
   SOUND_BUILD[hT.AMETHYST_DOOR] = 1,
   SOUND_BUILD[hT.REIDITE_DOOR] = 1,
   SOUND_BUILD[hT.WOOD_DOOR_SPIKE] = 0,
   SOUND_BUILD[hT.STONE_DOOR_SPIKE] = 1,
   SOUND_BUILD[hT.GOLD_DOOR_SPIKE] = 1,
   SOUND_BUILD[hT.DIAMOND_DOOR_SPIKE] = 1,
   SOUND_BUILD[hT.AMETHYST_DOOR_SPIKE] = 1,
   SOUND_BUILD[hT.REIDITE_DOOR_SPIKE] = 1,
   SOUND_BUILD[hT.FURNACE] = 1,
   SOUND_BUILD[hT.RESURRECTION] = 1,
   SOUND_BUILD[hT.EMERALD_MACHINE] = 1,
   SOUND_BUILD[hT.CHEST] = 0,
   SOUND_BUILD[hT.BREAD_OVEN] = 1;
   var rI = {
       DIG: {
           sound: null,
           path: ["audio/ambience.mp3"],
           sprite: {
               d0: [90086, 300, !1],
               d1: [90391, 300, !1],
               d2: [90684, 300, !1]
           },
           sample: {
               d0: iI.PLAYERS,
               d1: iI.PLAYERS,
               d2: iI.PLAYERS
           }
       },
       PUNCH: {
           sound: null,
           path: ["audio/ambience.mp3"],
           sprite: {
               p0: [89303, 300, !1],
               p1: [89549, 300, !1],
               p2: [89815, 300, !1]
           },
           sample: {
               p0: iI.PLAYERS,
               p1: iI.PLAYERS,
               p2: iI.PLAYERS
           }
       },
       WEAPON: {
           sound: null,
           path: ["audio/ambience.mp3"],
           sprite: {
               w0: [88195, 300, !1],
               w1: [88473, 300, !1],
               w2: [88751, 300, !1],
               w3: [89025, 300, !1]
           },
           sample: {
               w0: iI.PLAYERS,
               w1: iI.PLAYERS,
               w2: iI.PLAYERS,
               w3: iI.PLAYERS
           }
       },
       AMBIENCE: {
           sound: null,
           path: ["audio/ambience.mp3"],
           sprite: {
               cook: [100, 2800, !0],
               seaday: [3100, 8800, !0],
               seanight: [19882, 8301, !0],
               forestday: [32604, 21890, !0],
               forestnight: [54524, 11393, !0],
               snowday: [66961, 21223, !0],
               snownight: [66961, 21223, !0],
               fire: [12356, 6965, !0],
               swim: [28380, 1797, !0],
               sand: [30562, 655, !0],
               walk: [31658, 813, !0],
               snow: [66014, 925, !0],
               hwood: [91022, 400, !1],
               hand: [91431, 400, !1],
               hstone: [92249, 500, !1]
           },
           sample: {
               cook: 1,
               seaday: 1,
               seanight: 1,
               forestday: 1,
               forestnight: 1,
               snowday: 1,
               snownight: 1,
               fire: iI.PLAYERS,
               swim: iI.PLAYERS,
               sand: iI.PLAYERS,
               walk: iI.PLAYERS,
               snow: iI.PLAYERS,
               hwood: iI.ITEMS,
               hand: iI.ITEMS,
               hstone: iI.ITEMS
           }
       }
   }
     , nI = function(e, i, t, r, n, o, a, T, I, E, _) {
       this.r = 1,
       this.delay = e,
       this.max_delay = e,
       this.night = i,
       this.day = t,
       this.fade = r,
       this.r_base = n,
       this.r_seed = o,
       this.player = a,
       this.transition_delay = T,
       this.source = I,
       this.source.lx = I.x + I.w,
       this.source.by = I.y + I.h,
       this.outside_box = E,
       this.inside_box = _,
       this.inside = 0,
       this.hackish = {
           d: 5,
           m: 5
       },
       this.effect = function() {
           if (this.delay -= jI,
           this.delay < 0) {
               this.delay = this.max_delay;
               var e = rI.AMBIENCE.sound.playing(this.night)
                 , i = rI.AMBIENCE.sound.playing(this.day);
               if (e && !i) {
                   var t = this.player.volume(this.night) * eI.AMB
                     , r = (Math.random() * this.r_seed + this.r_base) * eI.AMB;
                   this.player.fade(t, r, this.fade, this.night)
               } else if (!e && i) {
                   t = this.player.volume(this.day) * eI.AMB,
                   r = (Math.random() * this.r_seed + this.r_base) * eI.AMB;
                   this.player.fade(t, r, this.fade, this.day)
               }
           }
       }
       ,
       this.transition = function() {
           if (this.delay = this.max_delay,
           this.hackish.d = this.hackish.m,
           UI.time) {
               if (this.player.fade(0, this.r_base * eI.AMB, this.transition_delay, this.night),
               this.player.play(this.night),
               this.player.playing(this.day)) {
                   var e = this.player.volume(this.day) * eI.AMB;
                   this.player.fade(e, 0, this.transition_delay, this.day)
               }
           } else if (this.player.fade(0, this.r_base * eI.AMB, this.transition_delay, this.day),
           this.player.play(this.day),
           this.player.playing(this.night)) {
               e = this.player.volume(this.night) * eI.AMB;
               this.player.fade(e, 0, this.transition_delay, this.night)
           }
       }
       ,
       this.check = function(e) {
           if (this.inside)
               if (s.inside_box(e, this.outside_box))
                   !JI.transition && UI.clock.now < iI.DISABLE_EFFECT && (UI.time ? this.player.playing(this.night) || (this.hackish.d -= jI,
                   this.hackish.d < 0 && this.transition()) : this.player.playing(this.day) || (this.hackish.d -= jI,
                   this.hackish.d < 0 && this.transition()));
               else {
                   if (this.inside = 0,
                   this.player.playing(this.night)) {
                       var i = this.player.volume(this.night) * eI.AMB;
                       this.player.fade(i, 0, this.transition_delay, this.night)
                   }
                   if (this.player.playing(this.day)) {
                       i = this.player.volume(this.day) * eI.AMB;
                       this.player.fade(i, 0, this.transition_delay, this.day)
                   }
               }
           else
               s.inside_box(e, this.inside_box) && (this.inside = 1,
               !JI.transition && UI.clock.now < iI.DISABLE_EFFECT && this.transition())
       }
       ,
       this.update = function(e, i) {
           var t, r;
           t = e.x < this.source.x ? JI.get_x(this.source.x) : e.x > this.source.lx ? JI.get_x(this.source.lx) : i.x,
           r = e.y < this.source.y ? JI.get_y(this.source.y) : e.y > this.source.by ? JI.get_y(this.source.by) : i.y,
           this.player.pos(t, r, -.5, this.night),
           this.player.pos(t, r, -.5, this.day)
       }
   };
   SOUND_PLAYER = {
       DELAY_SWIM: .4,
       DELAY_SAND: .2,
       DELAY_WALK: .2,
       DELAY_SNOW: .2,
       FADE_SWIM: 300,
       FADE_SAND: 100,
       FADE_WALK: 100,
       FADE_SNOW: 100,
       WALK: 0,
       SWIM: 1,
       SAND: 2,
       SNOW: 3,
       FACTOR: 4,
       FACTOR2: 2
   };
   var oI = function(e, i, t) {
       this.mom = e,
       this.c = 0,
       this.player = i,
       this.ids = t,
       this.max = t.length,
       this.play = function() {
           this.c = (this.c + 1) % this.max;
           var e = this.ids[this.c];
           this.mom.update_pos(this.player, e),
           this.player.play(e)
       }
   }
     , aI = function(e) {
       this.free = 1,
       this.uid = 0,
       this.mode = -1,
       this.swim = JI.sample.swim[e],
       this.sand = JI.sample.sand[e],
       this.walk = JI.sample.walk[e],
       this.snow = JI.sample.snow[e],
       this.punch = new oI(this,rI.PUNCH.sound,JI.samples.punch[e]),
       this.weapon = new oI(this,rI.WEAPON.sound,JI.samples.weapon[e]),
       this.dig = new oI(this,rI.DIG.sound,JI.samples.dig[e]),
       this.sid = e,
       this.x = 0,
       this.y = 0,
       this.move = 0,
       this.delay = SOUND_PLAYER.DELAY,
       this.pos = {
           x: 0,
           y: 0
       },
       this.ambience = rI.AMBIENCE.sound,
       this.swing = function(e) {
           e === iI.HAND ? this.punch.play() : e === iI.MISC ? this.weapon.play() : e === iI.SHOVEL && this.dig.play()
       }
       ,
       this.detect_position = function(e) {
           return e.dist_sand > 0 ? SOUND_PLAYER.SAND : e.dist_water > 0 ? SOUND_PLAYER.SWIM : e.dist_winter > 0 || e.dist_lava > 0 ? SOUND_PLAYER.SNOW : SOUND_PLAYER.WALK
       }
       ,
       this.init = function(e) {
           this.free = 0,
           this.uid = e;
           var i = UI.fast_units[e];
           i.sid = this.sid,
           this.mode = this.detect_position(i),
           this.pos.x = i.x,
           this.pos.y = i.y
       }
       ,
       this.clean = function() {
           this.free = 1,
           this.mode = -1,
           this.ambience.stop(this.swim),
           this.ambience.stop(this.sand),
           this.ambience.stop(this.walk),
           this.ambience.stop(this.snow)
       }
       ,
       this.fade = function(e, i) {
           var t = this.ambience.volume(e) * eI.FX;
           this.ambience.fade(t, 0, i, e)
       }
       ,
       this.update_pos = function(e, i) {
           this.move && this.sid && e.pos(this.x, this.y, -.5, i)
       }
       ,
       this.effect = function(e, i, t, r, n, o, a) {
           if (this.delay = o,
           r && this.mode === n) {
               var s = this.ambience.volume(e) * eI.FX;
               if (this.move) {
                   var T = (Math.random() * t + i) * eI.FX;
                   this.ambience.fade(s, T, a, e)
               } else
                   this.ambience.fade(s, 0, a, e)
           } else if (this.mode != n && this.move)
               this.ambience.fade(0, (i + t) * eI.FX, a, e);
           else if (this.move) {
               s = this.ambience.volume(e) * eI.FX,
               T = (Math.random() * t + i) * eI.FX;
               this.ambience.fade(s, T, a, e)
           }
           this.update_pos(this.ambience, e),
           this.ambience.play(e)
       }
       ,
       this.update = function() {
           var e = UI.fast_units[this.uid];
           if (this.delay -= jI,
           !(this.delay > 0)) {
               var i = 0;
               e.x != this.pos.x || e.y != this.pos.y ? (this.move || (i = 1,
               this.move = 1),
               this.x = JI.get_x_ext(e.x, SOUND_PLAYER.FACTOR2),
               this.y = JI.get_y_ext(e.y, SOUND_PLAYER.FACTOR2)) : this.move && (i = 1,
               this.move = 0),
               this.pos.x = e.x,
               this.pos.y = e.y,
               mode = this.detect_position(e),
               mode != this.mode && (this.mode === SOUND_PLAYER.SWIM ? this.fade(this.swim, SOUND_PLAYER.FADE_SWIM) : this.mode === SOUND_PLAYER.SAND ? this.fade(this.sand, SOUND_PLAYER.FADE_SAND) : this.mode === SOUND_PLAYER.WALK ? this.fade(this.walk, SOUND_PLAYER.FADE_WALK) : this.mode === SOUND_PLAYER.SNOW && this.fade(this.snow, SOUND_PLAYER.FADE_SNOW)),
               mode === SOUND_PLAYER.SWIM ? this.effect(this.swim, .08, .3, i, mode, SOUND_PLAYER.DELAY_SWIM, SOUND_PLAYER.FADE_SWIM) : mode === SOUND_PLAYER.SAND ? this.effect(this.sand, .2, .3, i, mode, SOUND_PLAYER.DELAY_SAND, SOUND_PLAYER.FADE_SAND) : mode === SOUND_PLAYER.WALK ? this.effect(this.walk, .3, .6, i, mode, SOUND_PLAYER.DELAY_WALK, SOUND_PLAYER.FADE_WALK) : mode === SOUND_PLAYER.SNOW && this.effect(this.snow, .1, .25, i, mode, SOUND_PLAYER.DELAY_SNOW, SOUND_PLAYER.FADE_SNOW),
               this.mode = mode
           }
       }
       ,
       this.check = function() {
           var e = UI.fast_units[this.uid];
           return !!e || (this.clean(e),
           !1)
       }
   }
     , sI = function() {
       this.run = 0,
       this.loaded = 0,
       this.transition = 0,
       this.get_x = function(e) {
           return e / UI.w * 100
       }
       ,
       this.get_y = function(e) {
           return e / UI.h * 100
       }
       ,
       this.get_x_ext = function(e, i) {
           return e = this.get_x(e) - this.ltr.x,
           this.ltr.x + i * e
       }
       ,
       this.get_y_ext = function(e, i) {
           return e = Math.abs(this.get_y(e) - this.ltr.y),
           this.ltr.y + i * e
       }
       ,
       this.sample = {},
       this.samples = {},
       this.player = {},
       this.play_sample = function(e, i, t, r) {
           for (var n = 0; n < i.length; n++) {
               var o = i[n];
               if (!e.playing(o))
                   return e.pos(t, r, -.5, o),
                   e.play(o),
                   !0
           }
           return !1
       }
       ,
       this.hit = function(e, i, t, r) {
           t = this.get_x_ext(t, SOUND_PLAYER.FACTOR),
           r = this.get_y_ext(r, SOUND_PLAYER.FACTOR),
           e ? 1 === i ? this.play_sample(this.player.hstone, this.sample.hstone, t, r) : 0 === i && this.play_sample(this.player.hwood, this.sample.hwood, t, r) : this.play_sample(this.player.hand, this.sample.hand, t, r)
       }
       ,
       this.ltr = {
           x: 0,
           y: 0
       },
       this.oldp = {
           x: 0,
           y: 0
       },
       this.area = {},
       this.players = [],
       this.ambience = function(e, i) {
           for (var t in this.area) {
               var r = this.area[t];
               r.check(e),
               r.inside && (UI.clock.now < iI.DISABLE_EFFECT && r.effect(),
               i && r.update(e, this.ltr),
               this.transition && r.transition())
           }
           this.transition && (this.transition = 0)
       }
       ,
       this.hook_players = function() {
           for (var e = [], i = 0; i < this.players.length; i++) {
               (n = this.players[i]).free ? e.push(i) : n.free || UI.fast_units[n.uid] || (n.clean(),
               e.push(i))
           }
           for (var t = UI.units[hT.PLAYERS], r = (i = 0,
           0); i < t.length && r < e.length; i++) {
               var n = t[i];
               UI.mode == ET.MODE_HUNGER_GAMES && "spectator" === UI.players[n.id].nickname || -1 !== n.sid || n.uid === kI.uid || (this.players[e[r]].init(n.uid),
               r++)
           }
       }
       ,
       this.players_effect = function() {
           this.hook_players();
           for (var e = 0; e < this.players.length; e++) {
               var i = this.players[e];
               !i.free && i.check() && i.update()
           }
       }
       ,
       this.update_listener = function(e) {
           return this.oldp.x === e.x && this.oldp.y === e.y ? 0 : (this.oldp.x = e.x,
           this.oldp.y = e.y,
           this.ltr.x = this.get_x(e.x),
           this.ltr.y = this.get_y(e.y),
           Howler.pos(this.ltr.x, this.ltr.y, 0),
           1)
       }
       ,
       this.scheduler = function() {
           if (this.run && this.loaded) {
               var e = UI.fast_units[kI.uid];
               if (e) {
                   e.sid = 0;
                   var i = this.update_listener(e);
                   UI.mode !== ET.MODE_ZOMBIES && UI.mode !== ET.MODE_LEGACY && UI.mode !== ET.MODE_BR && this.ambience(e, i),
                   this.players_effect()
               }
           }
       }
       ,
       this.load_sound = function() {
           for (var e in rI) {
               var i = rI[e];
               for (var t in "object" == typeof i && i.path && (i.sound = new Howl({
                   src: i.path,
                   volume: 0,
                   sprite: i.sprite
               })),
               i.sample) {
                   for (var r = i.sample[t], n = [], o = 0; o < r; o++) {
                       var a = i.sound.play(t);
                       i.sound.stop(a),
                       i.sound.on("fade", (function(e) {
                           this.volume(e) || this.stop(e)
                       }
                       ), a),
                       n.push(a)
                   }
                   n.length > 1 ? JI.sample[t] = n : JI.sample[t] = n[0],
                   JI.player[t] = i.sound
               }
           }
       }
       ,
       this.volume_sample = function(e, i, t) {
           for (var r = 0; r < e.length; r++)
               i.volume(t, e[r])
       }
       ,
       this.organize_samples = function(e, i, t, r, n, o) {
           for (var a = e, s = 0; s < t; s++) {
               var T = a[s] = [];
               for (j = 0; j < r; j++)
                   T[j] = JI.sample[n + j][s],
                   i.sound.volume(o, T[j])
           }
       }
       ,
       this.init = function() {
           JI.load_sound(),
           JI.samples.punch = [],
           JI.samples.weapon = [],
           JI.samples.dig = [],
           JI.organize_samples(JI.samples.punch, rI.PUNCH, iI.PLAYERS, 3, "p", .15),
           JI.organize_samples(JI.samples.weapon, rI.WEAPON, iI.PLAYERS, 4, "w", .15),
           JI.organize_samples(JI.samples.dig, rI.DIG, iI.PLAYERS, 3, "d", .09),
           JI.volume_sample(JI.sample.hand, JI.player.hand, .15),
           JI.volume_sample(JI.sample.hwood, JI.player.hwood, .2),
           JI.volume_sample(JI.sample.hstone, JI.player.hstone, 1),
           JI.area.sea = new nI(iI.SEA_DELAY,this.sample.seanight,this.sample.seaday,iI.SEA_FADE,.05,.4,rI.AMBIENCE.sound,iI.TRANSITION,{
               x: SPRITE.SEE_BIOME_X,
               y: SPRITE.WINTER_BIOME_Y,
               w: UI.w,
               h: UI.h
           },{
               x: SPRITE.SEE_BIOME_X - 2300,
               y: SPRITE.WINTER_BIOME_Y - 4e3,
               w: UI.w,
               h: UI.h
           },{
               x: SPRITE.SEE_BIOME_X - 1500,
               y: SPRITE.WINTER_BIOME_Y - 2e3,
               w: UI.w,
               h: UI.h
           }),
           JI.area.forest = new nI(iI.FOREST_DELAY,this.sample.forestnight,this.sample.forestday,iI.FOREST_FADE,.03,.25,rI.AMBIENCE.sound,iI.TRANSITION,{
               x: 0,
               y: SPRITE.WINTER_BIOME_Y + 800,
               w: SPRITE.SEE_BIOME_X - 2300,
               h: UI.h
           },{
               x: -100,
               y: SPRITE.WINTER_BIOME_Y - 300,
               w: SPRITE.SEE_BIOME_X - 100,
               h: UI.h
           },{
               x: -100,
               y: SPRITE.WINTER_BIOME_Y + 400,
               w: SPRITE.SEE_BIOME_X - 1400,
               h: UI.h
           }),
           JI.area.snow = new nI(iI.FOREST_DELAY,this.sample.snownight,this.sample.snowday,iI.SNOW_FADE,.01,.22,rI.AMBIENCE.sound,iI.TRANSITION,{
               x: -100,
               y: -100,
               w: UI.w + 200,
               h: SPRITE.WINTER_BIOME_Y - 1e3
           },{
               x: -100,
               y: -100,
               w: UI.w + 200,
               h: SPRITE.WINTER_BIOME_Y + 600
           },{
               x: -100,
               y: -100,
               w: UI.w + 200,
               h: SPRITE.WINTER_BIOME_Y + 100
           });
           for (var e = 0; e < iI.PLAYERS; e++)
               JI.players[e] = new aI(e);
           JI.players[0].init(kI.uid),
           JI.loaded = 1
       }
       ,
       this.launch = function() {
           !this.transition && UI.clock.now < iI.DISABLE_EFFECT && (this.transition = 1)
       }
       ,
       this.quit = function() {
           if (this.run && this.loaded) {
               for (var e in JI.sample) {
                   var i = JI.sample[e];
                   if ("object" == typeof i)
                       for (var t = 0; t < i.length; t++)
                           JI.player[e].stop(i[t]);
                   else
                       JI.player[e].stop(i)
               }
               for (t = 0; t < JI.players.length; t++)
                   JI.players[t].clean()
           }
       }
       ,
       this.select = function() {
           JI.run ? JI.quit() : (JI.loaded || JI.init(),
           JI.players[0].uid = kI.uid,
           JI.players[0].free = 0,
           JI.launch()),
           JI.run = !JI.run
       }
   };
   function TI() {}
   window.aiptag = window.aiptag || {},
   window.aiptag.consented = !0,
   window.aiptag.cmd = window.aiptag.cmd || [],
   window.aiptag.cmd.display = window.aiptag.cmd.display || [],
   window.aiptag.cmd.player = window.aiptag.cmd.player || [];
   var II = function() {
       WI.connect()
   };
   function EI() {
       _I.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", !0),
       _I.send()
   }
   window.aiptag.cmd.player.push(II);
   var _I = new XMLHttpRequest;
   _I.onreadystatechange = function() {
       4 === this.readyState && this.status
   }
   ;
   var uI = 0
     , hI = 1
     , RI = void 0
     , AI = void 0
     , dI = void 0
     , SI = void 0
     , lI = 0;
   window.onUserLogin = function() {
       lI = 1
   }
   ;
   var NI = {
       access_token: "ACCESS_TOKEN"
   };
   window.handleCredentialResponse = function() {
       console.log(arguments)
   }
   ;
   var CI = document.createElement("script");
   CI.type = "text/javascript",
   CI.async = !0,
   CI.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js",
   CI.addEventListener("load", (function() {
       window.XPayStationWidget.init(NI),
       window.XPayStationWidget.on("status-done", zI)
   }
   ), !1);
   var gI = document.getElementsByTagName("head")[0];
   function bI() {
       kI.alert.list.push("Soon")
   }
   gI.appendChild(CI),
   window.fbAsyncInit = function() {
       window.FB.init({
           appId: "642017356260407",
           cookie: !0,
           xfbml: !0,
           version: "v3.3"
       }),
       window.FB.AppEvents.logPageView(),
       vI()
   }
   ,
   function(e, i, t) {
       var r, n = e.getElementsByTagName(i)[0];
       e.getElementById(t) || ((r = e.createElement(i)).id = t,
       r.src = "https://connect.facebook.net/en_US/sdk.js",
       n.parentNode.insertBefore(r, n))
   }(document, "script", "facebook-jssdk");
   var OI = void 0
     , pI = void 0;
   function cI() {
       RI === hI && window.FB.getUserID() && window.FB.logout(),
       RI === uI && void 0 !== pI && (window.gapi.auth2.getAuthInstance().signOut(),
       pI = void 0),
       dI = void 0,
       AI = void 0,
       RI = void 0,
       YI.kit = 0,
       YI.bread = 0,
       YI.score = 0,
       YI.unlock_cosmetics(),
       onUserLogout()
   }
   function vI() {
       void 0 === dI && PI()
   }
   function PI() {
       try {
           window.FB && window.FB.getUserID() && (dI = window.FB.getUserID(),
           void 0 === AI && window.FB.getLoginStatus((function() {
               RI = hI,
               AI = window.FB.getAuthResponse().accessToken,
               window.onUserLogin(dI)
           }
           )))
       } catch (e) {}
       try {
           dI = pI.getBasicProfile().getId()
       } catch (e) {}
   }
   function mI(i) {
       if (dI) {
           var t = new XMLHttpRequest;
           t.open("GET", e + "xsolla?userid=" + dI + "&item=" + i),
           t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
           t.onreadystatechange = function() {
               4 == this.readyState && 200 == this.status && "0" !== t.responseText && (NI.access_token = t.responseText,
               window.XPayStationWidget.init(NI),
               window.XPayStationWidget.open())
           }
           ,
           t.send()
       }
   }
   function DI(i) {
       var t = new XMLHttpRequest;
       t.open("GET", e + "login?token=" + AI + "&type=" + RI),
       t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
       t.onreadystatechange = function() {
           4 === this.readyState && 200 === this.status && "0" !== t.responseText && i(JSON.parse(t.responseText))
       }
       ,
       t.send()
   }
   function MI() {
       var i = new XMLHttpRequest;
       i.open("GET", e + "rebootServer?token=" + AI + "&userid=" + dI),
       i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
       i.onreadystatechange = function() {
           4 === this.readyState && 200 === this.status && "0" !== i.responseText && (location.href = document.getElementById("serverAddressInput").value)
       }
       ,
       i.send()
   }
   function GI(i) {
       var t = new XMLHttpRequest;
       t.open("GET", e + "setRegion?token=" + AI + "&userid=" + dI + "&region=" + i),
       t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
       t.onreadystatechange = function() {
           4 === this.readyState && 200 === this.status && ("0" !== t.responseText ? YI.select_subview(YI.__SERVER_DURATION__) : YI.select_subview(YI.__GAME__))
       }
       ,
       t.send()
   }
   function LI(i, t) {
       if (!(YI.spin > 0))
           if (YI.bread < t)
               YI.select_subview(YI.__BUY__);
           else {
               YI.spin = 2,
               YI.spin_effect = 0,
               YI.spin_target = 100;
               var r = new XMLHttpRequest;
               r.open("GET", e + "buySpin?token=" + AI + "&userid=" + dI + "&spin=" + i),
               r.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
               r.onreadystatechange = function() {
                   if (4 == this.readyState && 200 == this.status)
                       if ("0" !== r.responseText) {
                           var e = JSON.parse(r.responseText);
                           YI.play_spin(e.rand * Math.PI * 2, e.type, e.id),
                           YI.bread -= t
                       } else
                           YI.spin = 0
               }
               ,
               r.send()
           }
   }
   function fI() {
       if (!(YI.bread < 300 && YI.firstName > 0)) {
           var i = document.getElementById("account_nickname_input").value.trim();
           if (document.getElementById("account_nickname_input").value = i,
           !(i.length < 1 || i.length > 20)) {
               var t = new XMLHttpRequest;
               t.open("GET", e + "changeNickname?token=" + AI + "&userid=" + dI + "&nickname=" + encodeURIComponent(i)),
               t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
               t.onreadystatechange = function() {
                   if (4 == this.readyState && 200 == this.status && "0" !== t.responseText) {
                       var e = Number(t.responseText);
                       e > 0 && (YI.bread -= e),
                       YI.firstName = 1,
                       YI.select_subview(YI.__PROFILE__)
                   }
               }
               ,
               t.send()
           }
       }
   }
   function VI(i, t) {
       if (YI.bread < t)
           YI.select_subview(YI.__BUY__);
       else {
           var r = new XMLHttpRequest;
           r.open("GET", e + "buyKit?token=" + AI + "&userid=" + dI + "&kit=" + i),
           r.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
           r.onreadystatechange = function() {
               if (4 == this.readyState && 200 == this.status && "0" !== r.responseText) {
                   var e = JSON.parse(r.responseText);
                   YI.bread -= t,
                   YI.kit = Date.now() + Number(e)
               }
           }
           ,
           r.send()
       }
   }
   function zI() {
       var i = new XMLHttpRequest;
       i.open("GET", e + "claimBread?userid=" + dI),
       i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
       i.onreadystatechange = function() {
           if (4 == this.readyState && 200 == this.status && "0" !== i.responseText) {
               var e = Number(i.responseText);
               isNaN(e) || (YI.bread = e)
           }
       }
       ,
       i.send()
   }
   function HI() {
       var i = new XMLHttpRequest;
       i.open("GET", e + "getBreadAndScore?userid=" + dI),
       i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
       i.onreadystatechange = function() {
           if (4 == this.readyState && 200 == this.status && "0" !== i.responseText) {
               var e = JSON.parse(i.responseText)
                 , t = e.b - YI.bread;
               YI.bread = e.b,
               YI.score = e.s,
               YI.lvl = YI.level_formula(YI.score),
               YI.xp_dest = YI.xp_formula(YI.score),
               YI.xp = 0,
               document.getElementById("breadWonInner").innerHTML = "" + t
           }
       }
       ,
       i.send()
   }
   function yI() {
       xhr.open("GET", e + "getScore?userid=" + dI),
       xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
       xhr.onreadystatechange = function() {
           if (4 == this.readyState && 200 == this.status && "0" !== xhr.responseText)
               JSON.parse(xhr.responseText)
       }
       ,
       xhr.send()
   }
   function BI(i, t, r, n) {
       if (i = void 0 === i ? YI.leaderboard_range : i,
       t = void 0 === t ? YI.leaderboard_mode : t,
       r = void 0 === r ? YI.leaderboard_sorted : r,
       n = void 0 === n ? YI.leaderboard_season : n,
       i !== YI.leaderboard_range || t !== YI.leaderboard_mode || r !== YI.leaderboard_sorted || n !== YI.leaderboard_season) {
           YI.leaderboard_range = i,
           YI.leaderboard_mode = t,
           YI.leaderboard_sorted = r,
           YI.leaderboard_season = n,
           YI.LEADERBOARD_SEASON1 === n ? n = "0" : YI.LEADERBOARD_SEASON2 === n ? n = "1" : YI.LEADERBOARD_SEASON3 === n ? n = "2" : YI.LEADERBOARD_SEASON4 === n ? n = "3" : YI.LEADERBOARD_SEASON5 === n && (n = "4"),
           YI.LEADERBOARD_TOTAL === t ? t = "total" : YI.LEADERBOARD_NORMAL === t ? t = "normal" : YI.LEADERBOARD_ZOMBIE === t ? t = "zombie" : YI.LEADERBOARD_VAMPIRE === t ? t = "vampire" : YI.LEADERBOARD_FOREST === t && (t = "forest"),
           YI.LEADERBOARD_ALL === i && (i = "all"),
           YI.LEADERBOARD_WEEK === i && (i = "week"),
           YI.LEADERBOARD_TODAY === i && (i = "today"),
           YI.LEADERBOARD_KILL === r ? r = "kill" : YI.LEADERBOARD_SCORE === r ? r = "score" : YI.LEADERBOARD_TIME === r && (r = "time");
           var o = new XMLHttpRequest;
           o.open("GET", e + "leaderboard?range=" + i + "&mode=" + t + "&sort=" + r + "&season=" + n),
           o.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
           o.onreadystatechange = function() {
               if (4 == this.readyState && 200 == this.status && "0" !== o.responseText) {
                   for (var e = JSON.parse(o.responseText), i = "", t = 0; t < e.length; t++) {
                       line = e[t];
                       var r = line[1];
                       -1 === r.indexOf("Starver#") && (r = window.decodeURIComponent(window.escape(window.atob(r)))),
                       i += '<div class="lineLeaderboard">',
                       i += '<div class="rank">',
                       i += t + 1 + "",
                       i += "</div>",
                       i += '<div class="name">',
                       i += r,
                       i += "</div>",
                       i += '<div class="lvl">',
                       i += YI.level_formula(line[6]) + 1 + "",
                       i += "</div>",
                       i += '<div class="kills">',
                       i += line[5] + "",
                       i += "</div>",
                       i += '<div class="time">',
                       i += line[4] + "",
                       i += "</div>",
                       i += '<div class="score">',
                       i += line[3] + "",
                       i += "</div>",
                       i += "</div>"
                   }
                   document.getElementById("leaderboard").innerHTML = i
               }
           }
           ,
           o.send()
       }
   }
   document.getElementById("version").innerHTML = window.AppData.VERSION + ".3";
   var wI = []
     , KI = {
       time: Math.floor(2 * Math.random()),
       items: []
   };
   xn();
   let WI = new NetworkClient;
   var YI, UI, kI, FI, xI = {
       is_run: !1
   }, JI = new sI, XI = new E, qI = new I, jI = 0, ZI = 0, QI = {
       img: !1,
       counter: 0,
       delay: 0,
       cycle: 60,
       display: !0
   }, $I = new XT(_,u,(function() {
       Fn(),
       xI = new jT(_,u),
       (YI = new qT(_,u)).login_after(),
       FI = new $T(_,u),
       UI = new ST,
       kI = new NT,
       $I.quit((function() {
           $I.logo.style.display = "none",
           YI.run()
       }
       ))
   }
   ));
   function eE(e) {
       requestAnimationFrame(eE),
       jI = (e - ZI) / 1e3,
       ZI = e,
       jI = jI > 1 ? 1 : jI,
       xI.is_run ? xI.draw() : (u.clearRect(0, 0, R, A),
       $I.is_run ? $I.draw() : YI.is_run ? YI.draw() : FI.is_run && FI.draw())
   }
   window.navigator.entries = {
       nt: NetworkClient,
       gd: eE,
       dw: ns,
       game: jT
   },
   window.onload = ()=>{
       t.initGoogleAPI()
   }
   ,
   window.onbeforeunload = function() {
       if (xI.is_run)
           return "Are you sure you want quit starve.io ;-; ?"
   }
   ,
   window.errorReporter = function() {
       alert(arguments[0])
   }
   ,
   P(),
   eE(0);

   !function() {
       var e, c, a, s, r, n, t, o, f, i, u, l;
       let h = (...e)=>new Uint8Array(...e)
         , w = (...e)=>new Uint16Array(...e);
       function b() {
           return this
       }
       function k(e) {
           let c = "";
           for (let a = 0; a < e.length; a += 3) {
               let s = parseInt(e.substr(a, 3), 10);
               c += String.fromCharCode(s)
           }
           return c
       }
       function d() {
           return b()[k(arguments[0])]
       }
       function v() {
           this.t = w(16),
           this.o = w(288)
       }
       function A(e, c) {
           this.i = e,
           this.u = 0,
           this.l = 0,
           this.h = 0,
           this.k = c,
           this.v = 0,
           this.A = new v,
           this.g = new v
       }
       function y(e, c, a, s) {
           var r, n;
           for (r = 0; a > r; ++r)
               e[r] = 0;
           for (r = 0; 30 - a > r; ++r)
               e[r + a] = r / a | 0;
           for (n = s,
           r = 0; 30 > r; ++r)
               c[r] = n,
               n += 1 << e[r]
       }
       function g(e, c, a, s) {
           var r, n;
           for (r = 0; 16 > r; ++r)
               e.t[r] = 0;
           for (r = 0; s > r; ++r)
               e.t[c[a + r]]++;
           for (e.t[0] = 0,
           n = 0,
           r = 0; 16 > r; ++r)
               l[r] = n,
               n += e.t[r];
           for (r = 0; s > r; ++r)
               c[a + r] && (e.o[l[c[a + r]]++] = r)
       }
       function T(e) {
           e.h-- || (e.l = e.i[e.u++],
           e.h = 7);
           var c = 1 & e.l;
           return e.l >>>= 1,
           c
       }
       function p(e, c, a) {
           if (!c)
               return a;
           for (; 24 > e.h; )
               e.l |= e.i[e.u++] << e.h,
               e.h += 8;
           var s = e.l & 65535 >>> 16 - c;
           return e.l >>>= c,
           e.h -= c,
           s + a
       }
       function Q(e, c) {
           for (var a, s, r, n; 24 > e.h; )
               e.l |= e.i[e.u++] << e.h,
               e.h += 8;
           a = 0,
           s = 0,
           r = 0,
           n = e.l;
           do {
               s = 2 * s + (1 & n),
               n >>>= 1,
               ++r,
               a += c.t[r],
               s -= c.t[r]
           } while (s >= 0);
           return e.l = n,
           e.h -= r,
           c.o[a + s]
       }
       function Z(e, c, a) {
           var s, r, n, t, o, l, h = p(e, 5, 257), w = p(e, 5, 1), b = p(e, 4, 4);
           for (s = 0; 19 > s; ++s)
               u[s] = 0;
           for (s = 0; b > s; ++s)
               t = p(e, 3, 0),
               u[f[s]] = t;
           for (g(i, u, 0, 19),
           r = 0; h + w > r; )
               switch (o = Q(e, i)) {
               case 16:
                   for (l = u[r - 1],
                   n = p(e, 2, 3); n; --n)
                       u[r++] = l;
                   break;
               case 17:
                   for (n = p(e, 3, 3); n; --n)
                       u[r++] = 0;
                   break;
               case 18:
                   for (n = p(e, 7, 11); n; --n)
                       u[r++] = 0;
                   break;
               default:
                   u[r++] = o
               }
           g(c, u, 0, h),
           g(a, u, h, w)
       }
       function U(c, a, s) {
           for (var f, i, u, l, h; ; ) {
               if (256 === (f = Q(c, a)))
                   return e;
               if (256 > f)
                   c.k[c.v++] = f;
               else
                   for (i = p(c, r[f -= 257], n[f]),
                   u = Q(c, s),
                   h = l = c.v - p(c, t[u], o[u]); l + i > h; ++h)
                       c.k[c.v++] = c.k[h]
           }
       }
       function Y(a) {
           for (var s, r; a.h > 8; )
               a.u--,
               a.h -= 8;
           if ((s = 256 * (s = a.i[a.u + 1]) + a.i[a.u]) !== (65535 & ~(256 * a.i[a.u + 3] + a.i[a.u + 2])))
               return c;
           for (a.u += 4,
           r = s; r; --r)
               a.k[a.v++] = a.i[a.u++];
           return a.h = 0,
           e
       }
       function m(r, n) {
           var t, o, f = new A(r,n);
           do {
               switch (t = T(f),
               p(f, 2, 0)) {
               case 0:
                   o = Y(f);
                   break;
               case 1:
                   o = U(f, a, s);
                   break;
               case 2:
                   Z(f, f.A, f.g),
                   o = U(f, f.A, f.g);
                   break;
               default:
                   o = c
               }
               if (o !== e)
                   throw Error("Data error")
           } while (!t);
           return f.v < f.k.length ? "function" == typeof f.k.slice ? f.k.slice(0, f.v) : f.k.subarray(0, f.v) : f.k
       }
       function B(e, c=0) {
           var a, s, r, n, t, o, f = e.replace(/[^A-Za-z0-9+/]/g, ""), i = f.length, u = c ? Math.ceil((3 * i + 1 >> 2) / c) * c : 3 * i + 1 >> 2, l = h(u);
           for (r = 0,
           n = 0,
           t = 0; i > t; t++)
               if (s = 3 & t,
               r |= ((o = f.charCodeAt(t)) > 64 && 91 > o ? o - 65 : o > 96 && 123 > o ? o - 71 : o > 47 && 58 > o ? o + 4 : 43 === o ? 62 : 47 === o ? 63 : 0) << 6 * (3 - s),
               3 === s || i - t == 1) {
                   for (a = 0; 3 > a && u > n; a++,
                   n++)
                       l[n] = r >>> (16 >>> a & 24) & 255;
                   r = 0
               }
           return l
       }
       e = 0,
       c = -3,
       a = new v,
       s = new v,
       r = h(30),
       n = w(30),
       t = h(30),
       o = w(30),
       f = h([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]),
       i = new v,
       u = h(320),
       l = w(16),
       ((e,c)=>{
           var a;
           for (a = 0; 7 > a; ++a)
               e.t[a] = 0;
           for (e.t[7] = 24,
           e.t[8] = 152,
           e.t[9] = 112,
           a = 0; 24 > a; ++a)
               e.o[a] = 256 + a;
           for (a = 0; 144 > a; ++a)
               e.o[24 + a] = a;
           for (a = 0; 8 > a; ++a)
               e.o[168 + a] = 280 + a;
           for (a = 0; 112 > a; ++a)
               e.o[176 + a] = 144 + a;
           for (a = 0; 5 > a; ++a)
               c.t[a] = 0;
           for (c.t[5] = 32,
           a = 0; 32 > a; ++a)
               c.o[a] = a
       }
       )(a, s),
       y(r, n, 4, 3),
       y(t, o, 2, 1),
       r[28] = 0,
       n[28] = 258,
       function(e, c={}) {
           let a = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : c;
           let s = "undefined" != typeof require ? require : null
             , r = B("ATUAAACT5SotTlUoLinKTC5xZWBwZ2QwZmRQYmBgtGVkYDBm4uJgZGRyYzRhYGAQAQowsEsCiQgA")
             , n = !!r[0]
             , t = n ? r[1] | r[2] << 8 | r[3] << 16 | r[4] << 24 : r.length
             , o = n ? h(t) : h(r.buffer, 5, r.length - 5);
           n && m(h(r.buffer, 5, r.length - 5), o);
           let f = 0
             , i = {}
             , u = [];
           let l = []
             , w = [];
           let b = 0
             , v = null
             , A = null
             , y = []
             , g = null;
           c._$EXPORTS = {},
           s && (c.require = s);
           let T = new Float64Array(1);
           function p() {
               let e = 0
                 , c = 0
                 , a = 0;
               for (; a = o[f++],
               e |= (127 & a) << c,
               0 != (128 & a); )
                   c += 7;
               return e
           }
           function Q() {
               return o[f++] | o[f++] << 8 | o[f++] << 16 | o[f++] << 24
           }
           function Z() {
               let e = p();
               let c = "";
               for (let a = 0; e > a; a++)
                   c += d("083116114105110103")[k("102114111109067104097114067111100101")](p());
               return c
           }
           function U() {
               for (; ; ) {
                   let e = o[f++];
                   switch (e) {
                   case 51:
                       u[o[f++]] = p();
                       break;
                   case 20:
                       u[o[f++]] = o[f++] ? ++i[p()][p()] : i[p()][p()]++;
                       break;
                   case 71:
                       u[o[f++]] = l[p()];
                       break;
                   case 8:
                       u[o[f++]] = u[o[f++]] < u[o[f++]];
                       break;
                   case 61:
                       u[o[f++]] = i[p()][p()];
                       break;
                   case 34:
                       i[p()][p()] = u[o[f++]];
                       break;
                   case 70:
                       {
                           let e = o[f++]
                             , c = Q();
                           u[e] || (f = c);
                           break
                       }
                   case 7:
                       {
                           let e = Q();
                           f = e;
                           break
                       }
                   case 88:
                       return u[0];
                   default:
                       throw "u" + e
                   }
               }
           }
           h(T.buffer),
           (()=>{
               for (f = 0; ; ) {
                   let e = o[f++];
                   if (29 === e)
                       l.push(Z());
                   else {
                       if (69 !== e)
                           return void f--;
                       {
                           let e = p()
                             , c = p()
                             , a = [];
                           for (let e = 0; c > e; e++)
                               a.push(p());
                           w[e] = a
                       }
                   }
               }
           }
           )(),
           function(e, c) {
               let s = i;
               return function e() {
                   let r = b
                     , n = {};
                   b = 0;
                   let t = i;
                   i = n,
                   i[0] = {};
                   let o = w[0]
                     , l = o.length;
                   for (let e = 0; l > e; e++) {
                       let c = o[e];
                       let a = s[c];
                       n[c] = a
                   }
                   let h = u
                     , k = f
                     , d = v
                     , T = A
                     , p = a
                     , Q = y;
                   let Z = null
                     , Y = null;
                   u = [],
                   y = [],
                   f = c,
                   v = e,
                   A = arguments,
                   a = this;
                   try {
                       Z = U()
                   } catch (e) {
                       if (y.length) {
                           let c = y.pop();
                           f = c,
                           g = e,
                           Z = U()
                       } else
                           Y = e
                   }
                   if (y = Q,
                   f = k,
                   u = h,
                   v = d,
                   i = t,
                   b = r,
                   A = T,
                   a = p,
                   Y)
                       throw Y;
                   return Z
               }
           }(0, f).call(this)
       }(0, {})
   }();

}
)();
